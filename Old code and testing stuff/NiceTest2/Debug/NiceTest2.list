
NiceTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b0  080056b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b8  080056b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e8  20000074  08005734  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000115c  08005734  0002115c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d5d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003278  00000000  00000000  00037e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a29  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b33  00000000  00000000  00067051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd40b  00000000  00000000  0007bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178f8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005760  00000000  00000000  00178fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800558c 	.word	0x0800558c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800558c 	.word	0x0800558c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	200000e4 	.word	0x200000e4

080004fc <_write>:
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
	return len;
}*/

int _write(int file, char *data, int len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d00a      	beq.n	8000524 <_write+0x28>
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d007      	beq.n	8000524 <_write+0x28>
	{
		errno = EBADF;
 8000514:	f004 fb42 	bl	8004b9c <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	2209      	movs	r2, #9
 800051c:	601a      	str	r2, [r3, #0]
		return -1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	e00f      	b.n	8000544 <_write+0x48>
	}

	// arbitrary timeout 1000
	HAL_StatusTypeDef status =
			HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	b29a      	uxth	r2, r3
 8000528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	4807      	ldr	r0, [pc, #28]	; (800054c <_write+0x50>)
 8000530:	f002 fc78 	bl	8002e24 <HAL_UART_Transmit>
 8000534:	4603      	mov	r3, r0
 8000536:	75fb      	strb	r3, [r7, #23]

	// return # of bytes written - as best we can tell
	return (status == HAL_OK ? len: 0);
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <_write+0x46>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	e000      	b.n	8000544 <_write+0x48>
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000ffc 	.word	0x20000ffc

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b08e      	sub	sp, #56	; 0x38
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fb42 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f837 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f8fd 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000562:	f000 f8cb 	bl	80006fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000566:	f000 f899 	bl	800069c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <main+0x68>)
 800056c:	f107 041c 	add.w	r4, r7, #28
 8000570:	461d      	mov	r5, r3
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f003 f8ec 	bl	8003762 <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <main+0x6c>)
 800058e:	6013      	str	r3, [r2, #0]

  /* definition and creation of printHello */
  osThreadDef(printHello, StartPrintHello, osPriorityLow, 0, 128);
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <main+0x70>)
 8000592:	463c      	mov	r4, r7
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printHelloHandle = osThreadCreate(osThread(printHello), (void*) "printHello");
 80005a2:	463b      	mov	r3, r7
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <main+0x74>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 f8db 	bl	8003762 <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <main+0x78>)
 80005b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b2:	f003 f8cf 	bl	8003754 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x66>
 80005b8:	080055bc 	.word	0x080055bc
 80005bc:	20000ff4 	.word	0x20000ff4
 80005c0:	080055d8 	.word	0x080055d8
 80005c4:	080055b0 	.word	0x080055b0
 80005c8:	20000ff8 	.word	0x20000ff8

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0b8      	sub	sp, #224	; 0xe0
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fb08 	bl	8004bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2288      	movs	r2, #136	; 0x88
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fafa 	bl	8004bf0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fc:	2310      	movs	r3, #16
 80005fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060e:	2360      	movs	r3, #96	; 0x60
 8000610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fe06 	bl	8001230 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800062a:	f000 f8d9 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f9d2 	bl	80019fc <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065e:	f000 f8bf 	bl	80007e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000662:	2303      	movs	r3, #3
 8000664:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000666:	2300      	movs	r3, #0
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800066a:	2300      	movs	r3, #0
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fbfb 	bl	8001e6c <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 f8b0 	bl	80007e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000680:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000684:	f000 fd7e 	bl	8001184 <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068e:	f000 f8a7 	bl	80007e0 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	37e0      	adds	r7, #224	; 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART1_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART1_UART_Init+0x58>)
 80006e0:	f002 fb52 	bl	8002d88 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f879 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000ffc 	.word	0x20000ffc
 80006f8:	40013800 	.word	0x40013800

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f002 fb22 	bl	8002d88 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f849 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000107c 	.word	0x2000107c
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_GPIO_Init+0x2c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000798:	f003 f82f 	bl	80037fa <osDelay>
 800079c:	e7fa      	b.n	8000794 <StartDefaultTask+0x8>
	...

080007a0 <StartPrintHello>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintHello */
void StartPrintHello(void const * argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintHello */
  /* Infinite loop */
  for(;;)
  {
	  printf("Hello\r\n");
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <StartPrintHello+0x18>)
 80007aa:	f004 fa97 	bl	8004cdc <puts>
	  osDelay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f003 f822 	bl	80037fa <osDelay>
	  printf("Hello\r\n");
 80007b6:	e7f7      	b.n	80007a8 <StartPrintHello+0x8>
 80007b8:	080055f4 	.word	0x080055f4

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ce:	f000 fa1f 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40001000 	.word	0x40001000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_MspInit+0x4c>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_MspInit+0x4c>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x4c>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 fac9 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <HAL_UART_MspInit+0xdc>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12a      	bne.n	80008b4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <HAL_UART_MspInit+0xe0>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <HAL_UART_MspInit+0xe0>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6613      	str	r3, [r2, #96]	; 0x60
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <HAL_UART_MspInit+0xe0>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <HAL_UART_MspInit+0xe0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a28      	ldr	r2, [pc, #160]	; (800091c <HAL_UART_MspInit+0xe0>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <HAL_UART_MspInit+0xe0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800088e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008a0:	2307      	movs	r3, #7
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 fab1 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b2:	e02d      	b.n	8000910 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d128      	bne.n	8000910 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ee:	230c      	movs	r3, #12
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fe:	2307      	movs	r3, #7
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f000 fa82 	bl	8000e14 <HAL_GPIO_Init>
}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013800 	.word	0x40013800
 800091c:	40021000 	.word	0x40021000
 8000920:	40004400 	.word	0x40004400

08000924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 fa41 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800093e:	2036      	movs	r0, #54	; 0x36
 8000940:	f000 fa5a 	bl	8000df8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_InitTick+0x9c>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_InitTick+0x9c>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6593      	str	r3, [r2, #88]	; 0x58
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_InitTick+0x9c>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095c:	f107 0210 	add.w	r2, r7, #16
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f9ee 	bl	8001d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800096c:	f001 f9c0 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8000970:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <HAL_InitTick+0xa0>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	3b01      	subs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_InitTick+0xa4>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <HAL_InitTick+0xa8>)
 8000984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_InitTick+0xa4>)
 8000988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_InitTick+0xa4>)
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_InitTick+0xa4>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_InitTick+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <HAL_InitTick+0xa4>)
 80009a2:	f001 ff1f 	bl	80027e4 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d104      	bne.n	80009b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <HAL_InitTick+0xa4>)
 80009ae:	f001 ff7b 	bl	80028a8 <HAL_TIM_Base_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	431bde83 	.word	0x431bde83
 80009c8:	200010fc 	.word	0x200010fc
 80009cc:	40001000 	.word	0x40001000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM6_DAC_IRQHandler+0x10>)
 8000a02:	f001 ffc1 	bl	8002988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200010fc 	.word	0x200010fc

08000a10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
	}

return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f004 f85a 	bl	8004b9c <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20018000 	.word	0x20018000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200002e4 	.word	0x200002e4
 8000b1c:	20001160 	.word	0x20001160

08000b20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <SystemInit+0x64>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <SystemInit+0x64>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <SystemInit+0x68>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <SystemInit+0x68>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <SystemInit+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <SystemInit+0x68>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <SystemInit+0x68>)
 8000b4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <SystemInit+0x68>)
 8000b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <SystemInit+0x68>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <SystemInit+0x68>)
 8000b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <SystemInit+0x68>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <SystemInit+0x64>)
 8000b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b76:	609a      	str	r2, [r3, #8]
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	40021000 	.word	0x40021000

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffc6 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b96:	e003      	b.n	8000ba0 <LoopCopyDataInit>

08000b98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b9e:	3104      	adds	r1, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ba4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ba6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ba8:	d3f6      	bcc.n	8000b98 <CopyDataInit>
	ldr	r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bac:	e002      	b.n	8000bb4 <LoopFillZerobss>

08000bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bb0:	f842 3b04 	str.w	r3, [r2], #4

08000bb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LoopForever+0x16>)
	cmp	r2, r3
 8000bb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bb8:	d3f9      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f003 fff5 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fcc7 	bl	8000550 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bc8:	080056c0 	.word	0x080056c0
	ldr	r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bd0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000bd4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000bd8:	2000115c 	.word	0x2000115c

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f8de 	bl	8000daa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fe98 	bl	8000924 <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c00:	f7ff fdf4 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20001148 	.word	0x20001148

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20001148 	.word	0x20001148

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4c 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd2:	f7ff ff61 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6978      	ldr	r0, [r7, #20]
 8000dde:	f7ff ffb1 	bl	8000d44 <NVIC_EncodePriority>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff80 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff54 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	e17f      	b.n	8001124 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8171 	beq.w	800111e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d00b      	beq.n	8000e5c <HAL_GPIO_Init+0x48>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e50:	2b11      	cmp	r3, #17
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d118      	bne.n	8000efc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x128>
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b12      	cmp	r3, #18
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	6939      	ldr	r1, [r7, #16]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80ac 	beq.w	800111e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <HAL_GPIO_Init+0x330>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	4a5e      	ldr	r2, [pc, #376]	; (8001144 <HAL_GPIO_Init+0x330>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_GPIO_Init+0x330>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fde:	4a5a      	ldr	r2, [pc, #360]	; (8001148 <HAL_GPIO_Init+0x334>)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001008:	d025      	beq.n	8001056 <HAL_GPIO_Init+0x242>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x338>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01f      	beq.n	8001052 <HAL_GPIO_Init+0x23e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	; (8001150 <HAL_GPIO_Init+0x33c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x23a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_GPIO_Init+0x340>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x236>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <HAL_GPIO_Init+0x344>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x232>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_GPIO_Init+0x348>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x22e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x34c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x22a>
 800103a:	2306      	movs	r3, #6
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x244>
 800103e:	2307      	movs	r3, #7
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x244>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x244>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x244>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x244>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x244>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x244>
 8001056:	2300      	movs	r3, #0
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001068:	4937      	ldr	r1, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x334>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <HAL_GPIO_Init+0x350>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800109a:	4a32      	ldr	r2, [pc, #200]	; (8001164 <HAL_GPIO_Init+0x350>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_GPIO_Init+0x350>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_GPIO_Init+0x350>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x350>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x350>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x350>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_GPIO_Init+0x350>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	f47f ae78 	bne.w	8000e24 <HAL_GPIO_Init+0x10>
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	48001000 	.word	0x48001000
 800115c:	48001400 	.word	0x48001400
 8001160:	48001800 	.word	0x48001800
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_PWREx_GetVoltageRange+0x18>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001192:	d130      	bne.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a0:	d038      	beq.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2232      	movs	r2, #50	; 0x32
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	e002      	b.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	d102      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f2      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f0:	d110      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e00f      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d007      	beq.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83

08001230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e3d4      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001242:	4ba1      	ldr	r3, [pc, #644]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124c:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e4 	beq.w	800142c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_RCC_OscConfig+0x4a>
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	f040 808b 	bne.w	8001388 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b01      	cmp	r3, #1
 8001276:	f040 8087 	bne.w	8001388 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127a:	4b93      	ldr	r3, [pc, #588]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x62>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e3ac      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_OscConfig+0x7c>
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012aa:	e005      	b.n	80012b8 <HAL_RCC_OscConfig+0x88>
 80012ac:	4b86      	ldr	r3, [pc, #536]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d223      	bcs.n	8001304 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fd73 	bl	8001dac <RCC_SetFlashLatencyFromMSIRange>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e38d      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d0:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4977      	ldr	r1, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4972      	ldr	r1, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
 8001302:	e025      	b.n	8001350 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001304:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	496a      	ldr	r1, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4965      	ldr	r1, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd33 	bl	8001dac <RCC_SetFlashLatencyFromMSIRange>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e34d      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001350:	f000 fc36 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b5c      	ldr	r3, [pc, #368]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	495a      	ldr	r1, [pc, #360]	; (80014cc <HAL_RCC_OscConfig+0x29c>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_RCC_OscConfig+0x2a0>)
 800136e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001370:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_RCC_OscConfig+0x2a4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fad5 	bl	8000924 <HAL_InitTick>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d052      	beq.n	800142a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	e331      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d032      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001390:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc4c 	bl	8000c38 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc48 	bl	8000c38 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e31a      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	493b      	ldr	r1, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e01a      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001402:	f7ff fc19 	bl	8000c38 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140a:	f7ff fc15 	bl	8000c38 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e2e7      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x1da>
 8001428:	e000      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d074      	beq.n	8001522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b08      	cmp	r3, #8
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x21a>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d10e      	bne.n	8001462 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d064      	beq.n	8001520 <HAL_RCC_OscConfig+0x2f0>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d160      	bne.n	8001520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e2c4      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x24a>
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e01d      	b.n	80014b6 <HAL_RCC_OscConfig+0x286>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x26e>
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800148a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x286>
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fbbb 	bl	8000c38 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c4:	e011      	b.n	80014ea <HAL_RCC_OscConfig+0x2ba>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08005604 	.word	0x08005604
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fbae 	bl	8000c38 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e280      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	4baf      	ldr	r3, [pc, #700]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2a8>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb9e 	bl	8000c38 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fb9a 	bl	8000c38 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e26c      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4ba5      	ldr	r3, [pc, #660]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d0>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d060      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x310>
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d119      	bne.n	800156e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d116      	bne.n	800156e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	4b99      	ldr	r3, [pc, #612]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x328>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e249      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b93      	ldr	r3, [pc, #588]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	4990      	ldr	r1, [pc, #576]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156c:	e040      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001576:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8b      	ldr	r2, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fb59 	bl	8000c38 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fb55 	bl	8000c38 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e227      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	497c      	ldr	r1, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb35 	bl	8000c38 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb31 	bl	8000c38 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e203      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d03c      	beq.n	8001676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01c      	beq.n	800163e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160a:	4a67      	ldr	r2, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fb10 	bl	8000c38 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fb0c 	bl	8000c38 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1de      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162e:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ef      	beq.n	800161c <HAL_RCC_OscConfig+0x3ec>
 800163c:	e01b      	b.n	8001676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7ff faf3 	bl	8000c38 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff faef 	bl	8000c38 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1c1      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ef      	bne.n	8001656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a6 	beq.w	80017d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001688:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a43      	ldr	r2, [pc, #268]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d118      	bne.n	80016ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fab6 	bl	8000c38 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff fab2 	bl	8000c38 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e184      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_RCC_OscConfig+0x4d8>
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001706:	e024      	b.n	8001752 <HAL_RCC_OscConfig+0x522>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d110      	bne.n	8001732 <HAL_RCC_OscConfig+0x502>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001730:	e00f      	b.n	8001752 <HAL_RCC_OscConfig+0x522>
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fa6d 	bl	8000c38 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fa69 	bl	8000c38 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e139      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ed      	beq.n	8001762 <HAL_RCC_OscConfig+0x532>
 8001786:	e01a      	b.n	80017be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fa56 	bl	8000c38 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa52 	bl	8000c38 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d906      	bls.n	80017b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e122      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	4b90      	ldr	r3, [pc, #576]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1e8      	bne.n	8001790 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a8a      	ldr	r2, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8108 	beq.w	80019ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 80d0 	bne.w	8001984 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017e4:	4b83      	ldr	r3, [pc, #524]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d130      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	3b01      	subs	r3, #1
 8001804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d127      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11f      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001824:	2a07      	cmp	r2, #7
 8001826:	bf14      	ite	ne
 8001828:	2201      	movne	r2, #1
 800182a:	2200      	moveq	r2, #0
 800182c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d109      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d06e      	beq.n	8001938 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d069      	beq.n	8001934 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b7      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800187c:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001888:	f7ff f9d6 	bl	8000c38 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f9d2 	bl	8000c38 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0a4      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_RCC_OscConfig+0x7c8>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018be:	3a01      	subs	r2, #1
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c8:	0212      	lsls	r2, r2, #8
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	3a01      	subs	r2, #1
 80018d4:	0552      	lsls	r2, r2, #21
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018dc:	0852      	lsrs	r2, r2, #1
 80018de:	3a01      	subs	r2, #1
 80018e0:	0652      	lsls	r2, r2, #25
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e8:	0912      	lsrs	r2, r2, #4
 80018ea:	0452      	lsls	r2, r2, #17
 80018ec:	430a      	orrs	r2, r1
 80018ee:	4941      	ldr	r1, [pc, #260]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a3b      	ldr	r2, [pc, #236]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190c:	f7ff f994 	bl	8000c38 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f990 	bl	8000c38 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e062      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	e05a      	b.n	80019ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e059      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d152      	bne.n	80019ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800195c:	f7ff f96c 	bl	8000c38 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f968 	bl	8000c38 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e03a      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x734>
 8001982:	e032      	b.n	80019ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d02d      	beq.n	80019e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019a8:	f023 0303 	bic.w	r3, r3, #3
 80019ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f93b 	bl	8000c38 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f937 	bl	8000c38 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e009      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x796>
 80019e4:	e001      	b.n	80019ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	f99d808c 	.word	0xf99d808c

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0c8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4961      	ldr	r1, [pc, #388]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b0      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d04c      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e09e      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e092      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e086      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e07e      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 0203 	bic.w	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	493f      	ldr	r1, [pc, #252]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab6:	f7ff f8bf 	bl	8000c38 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f8bb 	bl	8000c38 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e066      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 020c 	and.w	r2, r3, #12
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d1eb      	bne.n	8001abe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	492c      	ldr	r1, [pc, #176]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d210      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0207 	bic.w	r2, r3, #7
 8001b1a:	4924      	ldr	r1, [pc, #144]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e036      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b72:	f000 f825 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fec4 	bl	8000924 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	08005604 	.word	0x08005604
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d134      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0xac>
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fb02 f203 	mul.w	r2, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	0800561c 	.word	0x0800561c
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4904      	ldr	r1, [pc, #16]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08005614 	.word	0x08005614

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d20:	f7ff ffda 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4904      	ldr	r1, [pc, #16]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08005614 	.word	0x08005614

08001d48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	220f      	movs	r2, #15
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_RCC_GetClockConfig+0x60>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0207 	and.w	r2, r3, #7
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40022000 	.word	0x40022000

08001dac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc4:	f7ff f9d0 	bl	8001168 <HAL_PWREx_GetVoltageRange>
 8001dc8:	6178      	str	r0, [r7, #20]
 8001dca:	e014      	b.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de4:	f7ff f9c0 	bl	8001168 <HAL_PWREx_GetVoltageRange>
 8001de8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfc:	d10b      	bne.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d919      	bls.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2ba0      	cmp	r3, #160	; 0xa0
 8001e08:	d902      	bls.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e013      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e10:	2301      	movs	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	e010      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b80      	cmp	r3, #128	; 0x80
 8001e1a:	d902      	bls.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e00a      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d102      	bne.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e28:	2302      	movs	r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	e004      	b.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b70      	cmp	r3, #112	; 0x70
 8001e32:	d101      	bne.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e34:	2301      	movs	r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 0207 	bic.w	r2, r3, #7
 8001e40:	4909      	ldr	r1, [pc, #36]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e74:	2300      	movs	r3, #0
 8001e76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d041      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e90:	d02a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e96:	d824      	bhi.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e9c:	d008      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ea2:	d81e      	bhi.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00a      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eae:	e018      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb0:	4b86      	ldr	r3, [pc, #536]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a85      	ldr	r2, [pc, #532]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ebc:	e015      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fabb 	bl	8002440 <RCCEx_PLLSAI1_Config>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ece:	e00c      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3320      	adds	r3, #32
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fba6 	bl	8002628 <RCCEx_PLLSAI2_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee0:	e003      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ee6:	e000      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eea:	7cfb      	ldrb	r3, [r7, #19]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ef0:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001efe:	4973      	ldr	r1, [pc, #460]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f06:	e001      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d041      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f20:	d02a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f26:	d824      	bhi.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f2c:	d008      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f32:	d81e      	bhi.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f40:	4b62      	ldr	r3, [pc, #392]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a61      	ldr	r2, [pc, #388]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f4c:	e015      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fa73 	bl	8002440 <RCCEx_PLLSAI1_Config>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5e:	e00c      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3320      	adds	r3, #32
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fb5e 	bl	8002628 <RCCEx_PLLSAI2_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f70:	e003      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	74fb      	strb	r3, [r7, #19]
      break;
 8001f76:	e000      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f80:	4b52      	ldr	r3, [pc, #328]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f8e:	494f      	ldr	r1, [pc, #316]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f96:	e001      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a0 	beq.w	80020ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	4a40      	ldr	r2, [pc, #256]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd0:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fe24 	bl	8000c38 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ff2:	e009      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7fe fe20 	bl	8000c38 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d902      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	74fb      	strb	r3, [r7, #19]
        break;
 8002006:	e005      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d15c      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800201a:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002024:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01f      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	d019      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002042:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7fe fddf 	bl	8000c38 <HAL_GetTick>
 800207a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207c:	e00b      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe fddb 	bl	8000c38 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d902      	bls.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	74fb      	strb	r3, [r7, #19]
            break;
 8002094:	e006      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ec      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ba:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020c2:	e009      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
 80020c8:	e006      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d8:	7c7b      	ldrb	r3, [r7, #17]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b9e      	ldr	r3, [pc, #632]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	4a9d      	ldr	r2, [pc, #628]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f6:	4b98      	ldr	r3, [pc, #608]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	4994      	ldr	r1, [pc, #592]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f023 020c 	bic.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	498c      	ldr	r1, [pc, #560]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800213a:	4b87      	ldr	r3, [pc, #540]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4983      	ldr	r1, [pc, #524]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800215c:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	497b      	ldr	r1, [pc, #492]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	4972      	ldr	r1, [pc, #456]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a0:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	496a      	ldr	r1, [pc, #424]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	4961      	ldr	r1, [pc, #388]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021e4:	4b5c      	ldr	r3, [pc, #368]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4959      	ldr	r1, [pc, #356]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002214:	4950      	ldr	r1, [pc, #320]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	4948      	ldr	r1, [pc, #288]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	493f      	ldr	r1, [pc, #252]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d028      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800227a:	4937      	ldr	r1, [pc, #220]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800228a:	d106      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a31      	ldr	r2, [pc, #196]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002296:	60d3      	str	r3, [r2, #12]
 8002298:	e011      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a2:	d10c      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3304      	adds	r3, #4
 80022a8:	2101      	movs	r1, #1
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f8c8 	bl	8002440 <RCCEx_PLLSAI1_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	491f      	ldr	r1, [pc, #124]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e8:	d106      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f4:	60d3      	str	r3, [r2, #12]
 80022f6:	e011      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002300:	d10c      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f899 	bl	8002440 <RCCEx_PLLSAI1_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02b      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002346:	d109      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a02      	ldr	r2, [pc, #8]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
 8002354:	e014      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f867 	bl	8002440 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02f      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800239a:	4928      	ldr	r1, [pc, #160]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023aa:	d10d      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	2102      	movs	r1, #2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f844 	bl	8002440 <RCCEx_PLLSAI1_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d014      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	74bb      	strb	r3, [r7, #18]
 80023c6:	e011      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3320      	adds	r3, #32
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f925 	bl	8002628 <RCCEx_PLLSAI2_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002406:	490d      	ldr	r1, [pc, #52]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800242a:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002432:	7cbb      	ldrb	r3, [r7, #18]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d018      	beq.n	800248c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0203 	and.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d10d      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
       ||
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002472:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
       ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d047      	beq.n	8002516 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e044      	b.n	8002516 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d018      	beq.n	80024c6 <RCCEx_PLLSAI1_Config+0x86>
 8002494:	2b03      	cmp	r3, #3
 8002496:	d825      	bhi.n	80024e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0x62>
 800249c:	2b02      	cmp	r3, #2
 800249e:	d009      	beq.n	80024b4 <RCCEx_PLLSAI1_Config+0x74>
 80024a0:	e020      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024a2:	4b60      	ldr	r3, [pc, #384]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11d      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b2:	e01a      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b4:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d116      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e013      	b.n	80024ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024d2:	4b54      	ldr	r3, [pc, #336]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024e2:	e006      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e004      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e002      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	430b      	orrs	r3, r1
 8002510:	4944      	ldr	r1, [pc, #272]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d17d      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a40      	ldr	r2, [pc, #256]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002528:	f7fe fb86 	bl	8000c38 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252e:	e009      	b.n	8002544 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002530:	f7fe fb82 	bl	8000c38 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d902      	bls.n	8002544 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	73fb      	strb	r3, [r7, #15]
        break;
 8002542:	e005      	b.n	8002550 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002544:	4b37      	ldr	r3, [pc, #220]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ef      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d160      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d111      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	0211      	lsls	r1, r2, #8
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	0912      	lsrs	r2, r2, #4
 8002574:	0452      	lsls	r2, r2, #17
 8002576:	430a      	orrs	r2, r1
 8002578:	492a      	ldr	r1, [pc, #168]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	610b      	str	r3, [r1, #16]
 800257e:	e027      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d112      	bne.n	80025ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800258e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6892      	ldr	r2, [r2, #8]
 8002596:	0211      	lsls	r1, r2, #8
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6912      	ldr	r2, [r2, #16]
 800259c:	0852      	lsrs	r2, r2, #1
 800259e:	3a01      	subs	r2, #1
 80025a0:	0552      	lsls	r2, r2, #21
 80025a2:	430a      	orrs	r2, r1
 80025a4:	491f      	ldr	r1, [pc, #124]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	610b      	str	r3, [r1, #16]
 80025aa:	e011      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6892      	ldr	r2, [r2, #8]
 80025bc:	0211      	lsls	r1, r2, #8
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6952      	ldr	r2, [r2, #20]
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	3a01      	subs	r2, #1
 80025c6:	0652      	lsls	r2, r2, #25
 80025c8:	430a      	orrs	r2, r1
 80025ca:	4916      	ldr	r1, [pc, #88]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fb2c 	bl	8000c38 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e2:	e009      	b.n	80025f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e4:	f7fe fb28 	bl	8000c38 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	73fb      	strb	r3, [r7, #15]
          break;
 80025f6:	e005      	b.n	8002604 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4904      	ldr	r1, [pc, #16]	; (8002624 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000

08002628 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002636:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d018      	beq.n	8002674 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0203 	and.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d10d      	bne.n	800266e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
       ||
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800265a:	4b61      	ldr	r3, [pc, #388]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
       ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d047      	beq.n	80026fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	e044      	b.n	80026fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d018      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x86>
 800267c:	2b03      	cmp	r3, #3
 800267e:	d825      	bhi.n	80026cc <RCCEx_PLLSAI2_Config+0xa4>
 8002680:	2b01      	cmp	r3, #1
 8002682:	d002      	beq.n	800268a <RCCEx_PLLSAI2_Config+0x62>
 8002684:	2b02      	cmp	r3, #2
 8002686:	d009      	beq.n	800269c <RCCEx_PLLSAI2_Config+0x74>
 8002688:	e020      	b.n	80026cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800268a:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11d      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269a:	e01a      	b.n	80026d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d116      	bne.n	80026d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ac:	e013      	b.n	80026d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ae:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ba:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026ca:	e006      	b.n	80026da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      break;
 80026d0:	e004      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026d2:	bf00      	nop
 80026d4:	e002      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026da:	bf00      	nop
    }

    if(status == HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026e2:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	430b      	orrs	r3, r1
 80026f8:	4939      	ldr	r1, [pc, #228]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d167      	bne.n	80027d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002704:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fa92 	bl	8000c38 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002716:	e009      	b.n	800272c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002718:	f7fe fa8e 	bl	8000c38 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d902      	bls.n	800272c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	73fb      	strb	r3, [r7, #15]
        break;
 800272a:	e005      	b.n	8002738 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800272c:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ef      	bne.n	8002718 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14a      	bne.n	80027d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800274c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6892      	ldr	r2, [r2, #8]
 8002754:	0211      	lsls	r1, r2, #8
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	0912      	lsrs	r2, r2, #4
 800275c:	0452      	lsls	r2, r2, #17
 800275e:	430a      	orrs	r2, r1
 8002760:	491f      	ldr	r1, [pc, #124]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	614b      	str	r3, [r1, #20]
 8002766:	e011      	b.n	800278c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6912      	ldr	r2, [r2, #16]
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0652      	lsls	r2, r2, #25
 8002784:	430a      	orrs	r2, r1
 8002786:	4916      	ldr	r1, [pc, #88]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	4313      	orrs	r3, r2
 800278a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe fa4e 	bl	8000c38 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800279e:	e009      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027a0:	f7fe fa4a 	bl	8000c38 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	73fb      	strb	r3, [r7, #15]
          break;
 80027b2:	e005      	b.n	80027c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e049      	b.n	800288a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f841 	bl	8002892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 f9f8 	bl	8002c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e04f      	b.n	8002960 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_TIM_Base_Start_IT+0xc4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01d      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x76>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ea:	d018      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x76>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_TIM_Base_Start_IT+0xc8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x76>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_TIM_Base_Start_IT+0xcc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00e      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x76>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_TIM_Base_Start_IT+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d009      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x76>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_TIM_Base_Start_IT+0xd4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d004      	beq.n	800291e <HAL_TIM_Base_Start_IT+0x76>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_TIM_Base_Start_IT+0xd8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d115      	bne.n	800294a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_TIM_Base_Start_IT+0xdc>)
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d015      	beq.n	800295c <HAL_TIM_Base_Start_IT+0xb4>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002936:	d011      	beq.n	800295c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002948:	e008      	b.n	800295c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e000      	b.n	800295e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800
 8002978:	40000c00 	.word	0x40000c00
 800297c:	40013400 	.word	0x40013400
 8002980:	40014000 	.word	0x40014000
 8002984:	00010007 	.word	0x00010007

08002988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0202 	mvn.w	r2, #2
 80029b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f905 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8f7 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f908 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0204 	mvn.w	r2, #4
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8db 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8cd 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f8de 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0208 	mvn.w	r2, #8
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8b1 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f8a3 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f8b4 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0210 	mvn.w	r2, #16
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f887 	bl	8002bda <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f879 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f88a 	bl	8002bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0201 	mvn.w	r2, #1
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fd fe58 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f914 	bl	8002d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b46:	d10e      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b80      	cmp	r3, #128	; 0x80
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f907 	bl	8002d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d10e      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f838 	bl	8002c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d10e      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d107      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0220 	mvn.w	r2, #32
 8002bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f8c7 	bl	8002d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <TIM_Base_SetConfig+0x114>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d013      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d00f      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3d      	ldr	r2, [pc, #244]	; (8002d30 <TIM_Base_SetConfig+0x118>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <TIM_Base_SetConfig+0x11c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d007      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <TIM_Base_SetConfig+0x120>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3a      	ldr	r2, [pc, #232]	; (8002d3c <TIM_Base_SetConfig+0x124>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d108      	bne.n	8002c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <TIM_Base_SetConfig+0x114>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d01b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <TIM_Base_SetConfig+0x118>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d017      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2b      	ldr	r2, [pc, #172]	; (8002d34 <TIM_Base_SetConfig+0x11c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <TIM_Base_SetConfig+0x120>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00f      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <TIM_Base_SetConfig+0x124>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <TIM_Base_SetConfig+0x128>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <TIM_Base_SetConfig+0x12c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x9a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <TIM_Base_SetConfig+0x130>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <TIM_Base_SetConfig+0x114>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00f      	beq.n	8002d10 <TIM_Base_SetConfig+0xf8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <TIM_Base_SetConfig+0x124>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0xf8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <TIM_Base_SetConfig+0x128>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0xf8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <TIM_Base_SetConfig+0x12c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0xf8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <TIM_Base_SetConfig+0x130>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	615a      	str	r2, [r3, #20]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40000c00 	.word	0x40000c00
 8002d3c:	40013400 	.word	0x40013400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e040      	b.n	8002e1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd fd46 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8c0 	bl	8002f4c <UART_SetConfig>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e022      	b.n	8002e1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fb3e 	bl	8003460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fbc5 	bl	80035a4 <UART_CheckIdleState>
 8002e1a:	4603      	mov	r3, r0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	; 0x28
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	f040 8081 	bne.w	8002f40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_UART_Transmit+0x26>
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e079      	b.n	8002f42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_UART_Transmit+0x38>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e072      	b.n	8002f42 <HAL_UART_Transmit+0x11e>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2221      	movs	r2, #33	; 0x21
 8002e6e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e70:	f7fd fee2 	bl	8000c38 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8e:	d108      	bne.n	8002ea2 <HAL_UART_Transmit+0x7e>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e003      	b.n	8002eaa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002eb2:	e02d      	b.n	8002f10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fbb5 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e039      	b.n	8002f42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	881a      	ldrh	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e008      	b.n	8002efe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1cb      	bne.n	8002eb4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2140      	movs	r1, #64	; 0x40
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fb81 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e005      	b.n	8002f42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4bad      	ldr	r3, [pc, #692]	; (800322c <UART_SetConfig+0x2e0>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	69f9      	ldr	r1, [r7, #28]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4aa2      	ldr	r2, [pc, #648]	; (8003230 <UART_SetConfig+0x2e4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a99      	ldr	r2, [pc, #612]	; (8003234 <UART_SetConfig+0x2e8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d121      	bne.n	8003016 <UART_SetConfig+0xca>
 8002fd2:	4b99      	ldr	r3, [pc, #612]	; (8003238 <UART_SetConfig+0x2ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d817      	bhi.n	8003010 <UART_SetConfig+0xc4>
 8002fe0:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <UART_SetConfig+0x9c>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003005 	.word	0x08003005
 8002ff0:	08002fff 	.word	0x08002fff
 8002ff4:	0800300b 	.word	0x0800300b
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	76fb      	strb	r3, [r7, #27]
 8002ffc:	e0e7      	b.n	80031ce <UART_SetConfig+0x282>
 8002ffe:	2302      	movs	r3, #2
 8003000:	76fb      	strb	r3, [r7, #27]
 8003002:	e0e4      	b.n	80031ce <UART_SetConfig+0x282>
 8003004:	2304      	movs	r3, #4
 8003006:	76fb      	strb	r3, [r7, #27]
 8003008:	e0e1      	b.n	80031ce <UART_SetConfig+0x282>
 800300a:	2308      	movs	r3, #8
 800300c:	76fb      	strb	r3, [r7, #27]
 800300e:	e0de      	b.n	80031ce <UART_SetConfig+0x282>
 8003010:	2310      	movs	r3, #16
 8003012:	76fb      	strb	r3, [r7, #27]
 8003014:	e0db      	b.n	80031ce <UART_SetConfig+0x282>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a88      	ldr	r2, [pc, #544]	; (800323c <UART_SetConfig+0x2f0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d132      	bne.n	8003086 <UART_SetConfig+0x13a>
 8003020:	4b85      	ldr	r3, [pc, #532]	; (8003238 <UART_SetConfig+0x2ec>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d828      	bhi.n	8003080 <UART_SetConfig+0x134>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <UART_SetConfig+0xe8>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003069 	.word	0x08003069
 8003038:	08003081 	.word	0x08003081
 800303c:	08003081 	.word	0x08003081
 8003040:	08003081 	.word	0x08003081
 8003044:	08003075 	.word	0x08003075
 8003048:	08003081 	.word	0x08003081
 800304c:	08003081 	.word	0x08003081
 8003050:	08003081 	.word	0x08003081
 8003054:	0800306f 	.word	0x0800306f
 8003058:	08003081 	.word	0x08003081
 800305c:	08003081 	.word	0x08003081
 8003060:	08003081 	.word	0x08003081
 8003064:	0800307b 	.word	0x0800307b
 8003068:	2300      	movs	r3, #0
 800306a:	76fb      	strb	r3, [r7, #27]
 800306c:	e0af      	b.n	80031ce <UART_SetConfig+0x282>
 800306e:	2302      	movs	r3, #2
 8003070:	76fb      	strb	r3, [r7, #27]
 8003072:	e0ac      	b.n	80031ce <UART_SetConfig+0x282>
 8003074:	2304      	movs	r3, #4
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	e0a9      	b.n	80031ce <UART_SetConfig+0x282>
 800307a:	2308      	movs	r3, #8
 800307c:	76fb      	strb	r3, [r7, #27]
 800307e:	e0a6      	b.n	80031ce <UART_SetConfig+0x282>
 8003080:	2310      	movs	r3, #16
 8003082:	76fb      	strb	r3, [r7, #27]
 8003084:	e0a3      	b.n	80031ce <UART_SetConfig+0x282>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6d      	ldr	r2, [pc, #436]	; (8003240 <UART_SetConfig+0x2f4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d120      	bne.n	80030d2 <UART_SetConfig+0x186>
 8003090:	4b69      	ldr	r3, [pc, #420]	; (8003238 <UART_SetConfig+0x2ec>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800309a:	2b30      	cmp	r3, #48	; 0x30
 800309c:	d013      	beq.n	80030c6 <UART_SetConfig+0x17a>
 800309e:	2b30      	cmp	r3, #48	; 0x30
 80030a0:	d814      	bhi.n	80030cc <UART_SetConfig+0x180>
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d009      	beq.n	80030ba <UART_SetConfig+0x16e>
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d810      	bhi.n	80030cc <UART_SetConfig+0x180>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <UART_SetConfig+0x168>
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d006      	beq.n	80030c0 <UART_SetConfig+0x174>
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x180>
 80030b4:	2300      	movs	r3, #0
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e089      	b.n	80031ce <UART_SetConfig+0x282>
 80030ba:	2302      	movs	r3, #2
 80030bc:	76fb      	strb	r3, [r7, #27]
 80030be:	e086      	b.n	80031ce <UART_SetConfig+0x282>
 80030c0:	2304      	movs	r3, #4
 80030c2:	76fb      	strb	r3, [r7, #27]
 80030c4:	e083      	b.n	80031ce <UART_SetConfig+0x282>
 80030c6:	2308      	movs	r3, #8
 80030c8:	76fb      	strb	r3, [r7, #27]
 80030ca:	e080      	b.n	80031ce <UART_SetConfig+0x282>
 80030cc:	2310      	movs	r3, #16
 80030ce:	76fb      	strb	r3, [r7, #27]
 80030d0:	e07d      	b.n	80031ce <UART_SetConfig+0x282>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5b      	ldr	r2, [pc, #364]	; (8003244 <UART_SetConfig+0x2f8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0x1d2>
 80030dc:	4b56      	ldr	r3, [pc, #344]	; (8003238 <UART_SetConfig+0x2ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030e6:	2bc0      	cmp	r3, #192	; 0xc0
 80030e8:	d013      	beq.n	8003112 <UART_SetConfig+0x1c6>
 80030ea:	2bc0      	cmp	r3, #192	; 0xc0
 80030ec:	d814      	bhi.n	8003118 <UART_SetConfig+0x1cc>
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d009      	beq.n	8003106 <UART_SetConfig+0x1ba>
 80030f2:	2b80      	cmp	r3, #128	; 0x80
 80030f4:	d810      	bhi.n	8003118 <UART_SetConfig+0x1cc>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <UART_SetConfig+0x1b4>
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x1c0>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x1cc>
 8003100:	2300      	movs	r3, #0
 8003102:	76fb      	strb	r3, [r7, #27]
 8003104:	e063      	b.n	80031ce <UART_SetConfig+0x282>
 8003106:	2302      	movs	r3, #2
 8003108:	76fb      	strb	r3, [r7, #27]
 800310a:	e060      	b.n	80031ce <UART_SetConfig+0x282>
 800310c:	2304      	movs	r3, #4
 800310e:	76fb      	strb	r3, [r7, #27]
 8003110:	e05d      	b.n	80031ce <UART_SetConfig+0x282>
 8003112:	2308      	movs	r3, #8
 8003114:	76fb      	strb	r3, [r7, #27]
 8003116:	e05a      	b.n	80031ce <UART_SetConfig+0x282>
 8003118:	2310      	movs	r3, #16
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	e057      	b.n	80031ce <UART_SetConfig+0x282>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a49      	ldr	r2, [pc, #292]	; (8003248 <UART_SetConfig+0x2fc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d125      	bne.n	8003174 <UART_SetConfig+0x228>
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <UART_SetConfig+0x2ec>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003136:	d017      	beq.n	8003168 <UART_SetConfig+0x21c>
 8003138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800313c:	d817      	bhi.n	800316e <UART_SetConfig+0x222>
 800313e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003142:	d00b      	beq.n	800315c <UART_SetConfig+0x210>
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d811      	bhi.n	800316e <UART_SetConfig+0x222>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <UART_SetConfig+0x20a>
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d006      	beq.n	8003162 <UART_SetConfig+0x216>
 8003154:	e00b      	b.n	800316e <UART_SetConfig+0x222>
 8003156:	2300      	movs	r3, #0
 8003158:	76fb      	strb	r3, [r7, #27]
 800315a:	e038      	b.n	80031ce <UART_SetConfig+0x282>
 800315c:	2302      	movs	r3, #2
 800315e:	76fb      	strb	r3, [r7, #27]
 8003160:	e035      	b.n	80031ce <UART_SetConfig+0x282>
 8003162:	2304      	movs	r3, #4
 8003164:	76fb      	strb	r3, [r7, #27]
 8003166:	e032      	b.n	80031ce <UART_SetConfig+0x282>
 8003168:	2308      	movs	r3, #8
 800316a:	76fb      	strb	r3, [r7, #27]
 800316c:	e02f      	b.n	80031ce <UART_SetConfig+0x282>
 800316e:	2310      	movs	r3, #16
 8003170:	76fb      	strb	r3, [r7, #27]
 8003172:	e02c      	b.n	80031ce <UART_SetConfig+0x282>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <UART_SetConfig+0x2e4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d125      	bne.n	80031ca <UART_SetConfig+0x27e>
 800317e:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <UART_SetConfig+0x2ec>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800318c:	d017      	beq.n	80031be <UART_SetConfig+0x272>
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003192:	d817      	bhi.n	80031c4 <UART_SetConfig+0x278>
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003198:	d00b      	beq.n	80031b2 <UART_SetConfig+0x266>
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319e:	d811      	bhi.n	80031c4 <UART_SetConfig+0x278>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <UART_SetConfig+0x260>
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d006      	beq.n	80031b8 <UART_SetConfig+0x26c>
 80031aa:	e00b      	b.n	80031c4 <UART_SetConfig+0x278>
 80031ac:	2300      	movs	r3, #0
 80031ae:	76fb      	strb	r3, [r7, #27]
 80031b0:	e00d      	b.n	80031ce <UART_SetConfig+0x282>
 80031b2:	2302      	movs	r3, #2
 80031b4:	76fb      	strb	r3, [r7, #27]
 80031b6:	e00a      	b.n	80031ce <UART_SetConfig+0x282>
 80031b8:	2304      	movs	r3, #4
 80031ba:	76fb      	strb	r3, [r7, #27]
 80031bc:	e007      	b.n	80031ce <UART_SetConfig+0x282>
 80031be:	2308      	movs	r3, #8
 80031c0:	76fb      	strb	r3, [r7, #27]
 80031c2:	e004      	b.n	80031ce <UART_SetConfig+0x282>
 80031c4:	2310      	movs	r3, #16
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e001      	b.n	80031ce <UART_SetConfig+0x282>
 80031ca:	2310      	movs	r3, #16
 80031cc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <UART_SetConfig+0x2e4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	f040 8087 	bne.w	80032e8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031da:	7efb      	ldrb	r3, [r7, #27]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d837      	bhi.n	8003250 <UART_SetConfig+0x304>
 80031e0:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <UART_SetConfig+0x29c>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003251 	.word	0x08003251
 80031f0:	08003215 	.word	0x08003215
 80031f4:	08003251 	.word	0x08003251
 80031f8:	0800321b 	.word	0x0800321b
 80031fc:	08003251 	.word	0x08003251
 8003200:	08003251 	.word	0x08003251
 8003204:	08003251 	.word	0x08003251
 8003208:	08003223 	.word	0x08003223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800320c:	f7fe fd70 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8003210:	6178      	str	r0, [r7, #20]
        break;
 8003212:	e022      	b.n	800325a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <UART_SetConfig+0x300>)
 8003216:	617b      	str	r3, [r7, #20]
        break;
 8003218:	e01f      	b.n	800325a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321a:	f7fe fcd1 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800321e:	6178      	str	r0, [r7, #20]
        break;
 8003220:	e01b      	b.n	800325a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003226:	617b      	str	r3, [r7, #20]
        break;
 8003228:	e017      	b.n	800325a <UART_SetConfig+0x30e>
 800322a:	bf00      	nop
 800322c:	efff69f3 	.word	0xefff69f3
 8003230:	40008000 	.word	0x40008000
 8003234:	40013800 	.word	0x40013800
 8003238:	40021000 	.word	0x40021000
 800323c:	40004400 	.word	0x40004400
 8003240:	40004800 	.word	0x40004800
 8003244:	40004c00 	.word	0x40004c00
 8003248:	40005000 	.word	0x40005000
 800324c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	76bb      	strb	r3, [r7, #26]
        break;
 8003258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80f1 	beq.w	8003444 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	429a      	cmp	r2, r3
 8003270:	d305      	bcc.n	800327e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	429a      	cmp	r2, r3
 800327c:	d902      	bls.n	8003284 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	76bb      	strb	r3, [r7, #26]
 8003282:	e0df      	b.n	8003444 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4618      	mov	r0, r3
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	020b      	lsls	r3, r1, #8
 8003296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800329a:	0202      	lsls	r2, r0, #8
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6849      	ldr	r1, [r1, #4]
 80032a0:	0849      	lsrs	r1, r1, #1
 80032a2:	4608      	mov	r0, r1
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	1814      	adds	r4, r2, r0
 80032aa:	eb43 0501 	adc.w	r5, r3, r1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc ff88 	bl	80001d0 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4613      	mov	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ce:	d308      	bcc.n	80032e2 <UART_SetConfig+0x396>
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d6:	d204      	bcs.n	80032e2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e0b0      	b.n	8003444 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	76bb      	strb	r3, [r7, #26]
 80032e6:	e0ad      	b.n	8003444 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	d15c      	bne.n	80033ac <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80032f2:	7efb      	ldrb	r3, [r7, #27]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d828      	bhi.n	800334a <UART_SetConfig+0x3fe>
 80032f8:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <UART_SetConfig+0x3b4>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003325 	.word	0x08003325
 8003304:	0800332d 	.word	0x0800332d
 8003308:	08003335 	.word	0x08003335
 800330c:	0800334b 	.word	0x0800334b
 8003310:	0800333b 	.word	0x0800333b
 8003314:	0800334b 	.word	0x0800334b
 8003318:	0800334b 	.word	0x0800334b
 800331c:	0800334b 	.word	0x0800334b
 8003320:	08003343 	.word	0x08003343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fce4 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 8003328:	6178      	str	r0, [r7, #20]
        break;
 800332a:	e013      	b.n	8003354 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800332c:	f7fe fcf6 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 8003330:	6178      	str	r0, [r7, #20]
        break;
 8003332:	e00f      	b.n	8003354 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003334:	4b49      	ldr	r3, [pc, #292]	; (800345c <UART_SetConfig+0x510>)
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e00c      	b.n	8003354 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333a:	f7fe fc41 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800333e:	6178      	str	r0, [r7, #20]
        break;
 8003340:	e008      	b.n	8003354 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003346:	617b      	str	r3, [r7, #20]
        break;
 8003348:	e004      	b.n	8003354 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	76bb      	strb	r3, [r7, #26]
        break;
 8003352:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d074      	beq.n	8003444 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005a      	lsls	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	b29b      	uxth	r3, r3
 8003370:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d916      	bls.n	80033a6 <UART_SetConfig+0x45a>
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d212      	bcs.n	80033a6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f023 030f 	bic.w	r3, r3, #15
 8003388:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	b29a      	uxth	r2, r3
 8003396:	89fb      	ldrh	r3, [r7, #14]
 8003398:	4313      	orrs	r3, r2
 800339a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	89fa      	ldrh	r2, [r7, #14]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e04e      	b.n	8003444 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	76bb      	strb	r3, [r7, #26]
 80033aa:	e04b      	b.n	8003444 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ac:	7efb      	ldrb	r3, [r7, #27]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d827      	bhi.n	8003402 <UART_SetConfig+0x4b6>
 80033b2:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <UART_SetConfig+0x46c>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033dd 	.word	0x080033dd
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	08003403 	.word	0x08003403
 80033c8:	080033f3 	.word	0x080033f3
 80033cc:	08003403 	.word	0x08003403
 80033d0:	08003403 	.word	0x08003403
 80033d4:	08003403 	.word	0x08003403
 80033d8:	080033fb 	.word	0x080033fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe fc88 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 80033e0:	6178      	str	r0, [r7, #20]
        break;
 80033e2:	e013      	b.n	800340c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fc9a 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 80033e8:	6178      	str	r0, [r7, #20]
        break;
 80033ea:	e00f      	b.n	800340c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <UART_SetConfig+0x510>)
 80033ee:	617b      	str	r3, [r7, #20]
        break;
 80033f0:	e00c      	b.n	800340c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033f2:	f7fe fbe5 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80033f6:	6178      	str	r0, [r7, #20]
        break;
 80033f8:	e008      	b.n	800340c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fe:	617b      	str	r3, [r7, #20]
        break;
 8003400:	e004      	b.n	800340c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	76bb      	strb	r3, [r7, #26]
        break;
 800340a:	bf00      	nop
    }

    if (pclk != 0U)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d018      	beq.n	8003444 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	085a      	lsrs	r2, r3, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	441a      	add	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d908      	bls.n	8003440 <UART_SetConfig+0x4f4>
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d204      	bcs.n	8003440 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e001      	b.n	8003444 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003450:	7ebb      	ldrb	r3, [r7, #26]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bdb0      	pop	{r4, r5, r7, pc}
 800345a:	bf00      	nop
 800345c:	00f42400 	.word	0x00f42400

08003460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01a      	beq.n	8003576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355e:	d10a      	bne.n	8003576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035b2:	f7fd fb41 	bl	8000c38 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d10e      	bne.n	80035e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f82a 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e020      	b.n	8003626 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d10e      	bne.n	8003610 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f814 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e00a      	b.n	8003626 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	e05d      	b.n	80036fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d059      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003648:	f7fd faf6 	bl	8000c38 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <UART_WaitOnFlagUntilTimeout+0x30>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11b      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800366c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e042      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02b      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b2:	d123      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e00f      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	d092      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003736:	2b84      	cmp	r3, #132	; 0x84
 8003738:	d005      	beq.n	8003746 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800373a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4413      	add	r3, r2
 8003742:	3303      	adds	r3, #3
 8003744:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003758:	f000 fade 	bl	8003d18 <vTaskStartScheduler>
  
  return osOK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	bd80      	pop	{r7, pc}

08003762 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003764:	b089      	sub	sp, #36	; 0x24
 8003766:	af04      	add	r7, sp, #16
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <osThreadCreate+0x54>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01c      	beq.n	80037b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685c      	ldr	r4, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681d      	ldr	r5, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691e      	ldr	r6, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ffc8 	bl	8003724 <makeFreeRtosPriority>
 8003794:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379e:	9202      	str	r2, [sp, #8]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	9100      	str	r1, [sp, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4632      	mov	r2, r6
 80037a8:	4629      	mov	r1, r5
 80037aa:	4620      	mov	r0, r4
 80037ac:	f000 f8ed 	bl	800398a <xTaskCreateStatic>
 80037b0:	4603      	mov	r3, r0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e01c      	b.n	80037f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685c      	ldr	r4, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c2:	b29e      	uxth	r6, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ffaa 	bl	8003724 <makeFreeRtosPriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9200      	str	r2, [sp, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4632      	mov	r2, r6
 80037de:	4629      	mov	r1, r5
 80037e0:	4620      	mov	r0, r4
 80037e2:	f000 f92f 	bl	8003a44 <xTaskCreate>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d001      	beq.n	80037f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037f0:	68fb      	ldr	r3, [r7, #12]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <osDelay+0x16>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	e000      	b.n	8003812 <osDelay+0x18>
 8003810:	2301      	movs	r3, #1
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fa4c 	bl	8003cb0 <vTaskDelay>
  
  return osOK;
 8003818:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f103 0208 	add.w	r2, r3, #8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f04f 32ff 	mov.w	r2, #4294967295
 800383a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 0208 	add.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f103 0208 	add.w	r2, r3, #8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d103      	bne.n	80038e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e00c      	b.n	80038fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3308      	adds	r3, #8
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e002      	b.n	80038f2 <vListInsert+0x2e>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d2f6      	bcs.n	80038ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6852      	ldr	r2, [r2, #4]
 8003956:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d103      	bne.n	800396a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08e      	sub	sp, #56	; 0x38
 800398e:	af04      	add	r7, sp, #16
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	61fb      	str	r3, [r7, #28]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039d0:	2354      	movs	r3, #84	; 0x54
 80039d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b54      	cmp	r3, #84	; 0x54
 80039d8:	d00a      	beq.n	80039f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	61bb      	str	r3, [r7, #24]
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01e      	beq.n	8003a36 <xTaskCreateStatic+0xac>
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01b      	beq.n	8003a36 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a10:	2300      	movs	r3, #0
 8003a12:	9303      	str	r3, [sp, #12]
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	9302      	str	r3, [sp, #8]
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f850 	bl	8003ace <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a30:	f000 f8d4 	bl	8003bdc <prvAddNewTaskToReadyList>
 8003a34:	e001      	b.n	8003a3a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a3a:	697b      	ldr	r3, [r7, #20]
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af04      	add	r7, sp, #16
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fec5 	bl	80047e8 <pvPortMalloc>
 8003a5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a66:	2054      	movs	r0, #84	; 0x54
 8003a68:	f000 febe 	bl	80047e8 <pvPortMalloc>
 8003a6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7a:	e005      	b.n	8003a88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a7c:	6978      	ldr	r0, [r7, #20]
 8003a7e:	f000 ff77 	bl	8004970 <vPortFree>
 8003a82:	e001      	b.n	8003a88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9303      	str	r3, [sp, #12]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	9302      	str	r3, [sp, #8]
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f80e 	bl	8003ace <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab2:	69f8      	ldr	r0, [r7, #28]
 8003ab4:	f000 f892 	bl	8003bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e002      	b.n	8003ac4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ac4:	69bb      	ldr	r3, [r7, #24]
	}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b088      	sub	sp, #32
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f023 0307 	bic.w	r3, r3, #7
 8003af4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	617b      	str	r3, [r7, #20]
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e012      	b.n	8003b48 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	7819      	ldrb	r1, [r3, #0]
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	3334      	adds	r3, #52	; 0x34
 8003b32:	460a      	mov	r2, r1
 8003b34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3301      	adds	r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	d9e9      	bls.n	8003b22 <prvInitialiseNewTask+0x54>
 8003b4e:	e000      	b.n	8003b52 <prvInitialiseNewTask+0x84>
			{
				break;
 8003b50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b5a:	e003      	b.n	8003b64 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d901      	bls.n	8003b6e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	3304      	adds	r3, #4
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fe6c 	bl	8003862 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	3318      	adds	r3, #24
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe67 	bl	8003862 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	f1c3 0207 	rsb	r2, r3, #7
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	2200      	movs	r2, #0
 8003bae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	69b8      	ldr	r0, [r7, #24]
 8003bbe:	f000 fc05 	bl	80043cc <pxPortInitialiseStack>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f000 fd1e 	bl	8004624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <prvAddNewTaskToReadyList+0xb8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <prvAddNewTaskToReadyList+0xb8>)
 8003bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bfa:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <prvAddNewTaskToReadyList+0xb8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d110      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c08:	f000 fabc 	bl	8004184 <prvInitialiseTaskLists>
 8003c0c:	e00d      	b.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <prvAddNewTaskToReadyList+0xc0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d802      	bhi.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003c32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <prvAddNewTaskToReadyList+0xcc>)
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7ff fe0d 	bl	800387c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c62:	f000 fd0f 	bl	8004684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <prvAddNewTaskToReadyList+0xc0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00e      	beq.n	8003c8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <prvAddNewTaskToReadyList+0xbc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <prvAddNewTaskToReadyList+0xd0>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200003e8 	.word	0x200003e8
 8003c98:	200002e8 	.word	0x200002e8
 8003c9c:	200003f4 	.word	0x200003f4
 8003ca0:	20000404 	.word	0x20000404
 8003ca4:	200003f0 	.word	0x200003f0
 8003ca8:	200002ec 	.word	0x200002ec
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <vTaskDelay+0x60>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <vTaskDelay+0x30>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60bb      	str	r3, [r7, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ce0:	f000 f87a 	bl	8003dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fb0a 	bl	8004300 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cec:	f000 f882 	bl	8003df4 <xTaskResumeAll>
 8003cf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <vTaskDelay+0x64>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000410 	.word	0x20000410
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d26:	463a      	mov	r2, r7
 8003d28:	1d39      	adds	r1, r7, #4
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fbca 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d34:	6839      	ldr	r1, [r7, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	460a      	mov	r2, r1
 8003d46:	491e      	ldr	r1, [pc, #120]	; (8003dc0 <vTaskStartScheduler+0xa8>)
 8003d48:	481e      	ldr	r0, [pc, #120]	; (8003dc4 <vTaskStartScheduler+0xac>)
 8003d4a:	f7ff fe1e 	bl	800398a <xTaskCreateStatic>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <vTaskStartScheduler+0xb0>)
 8003d52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <vTaskStartScheduler+0xb0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e001      	b.n	8003d66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d116      	bne.n	8003d9a <vTaskStartScheduler+0x82>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	613b      	str	r3, [r7, #16]
}
 8003d7e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d80:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <vTaskStartScheduler+0xb4>)
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295
 8003d86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <vTaskStartScheduler+0xb8>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <vTaskStartScheduler+0xbc>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d94:	f000 fba4 	bl	80044e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d98:	e00e      	b.n	8003db8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d10a      	bne.n	8003db8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60fb      	str	r3, [r7, #12]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vTaskStartScheduler+0x9e>
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	080055fc 	.word	0x080055fc
 8003dc4:	08004155 	.word	0x08004155
 8003dc8:	2000040c 	.word	0x2000040c
 8003dcc:	20000408 	.word	0x20000408
 8003dd0:	200003f4 	.word	0x200003f4
 8003dd4:	200003ec 	.word	0x200003ec

08003dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <vTaskSuspendAll+0x18>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a03      	ldr	r2, [pc, #12]	; (8003df0 <vTaskSuspendAll+0x18>)
 8003de4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000410 	.word	0x20000410

08003df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e20:	f000 fc00 	bl	8004624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a37      	ldr	r2, [pc, #220]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d161      	bne.n	8003efa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e36:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <xTaskResumeAll+0x118>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d05d      	beq.n	8003efa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e3e:	e02e      	b.n	8003e9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <xTaskResumeAll+0x11c>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fd72 	bl	8003936 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fd6d 	bl	8003936 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <xTaskResumeAll+0x120>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <xTaskResumeAll+0x120>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <xTaskResumeAll+0x124>)
 8003e7c:	441a      	add	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7ff fcf9 	bl	800387c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <xTaskResumeAll+0x128>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e98:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <xTaskResumeAll+0x11c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cc      	bne.n	8003e40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eac:	f000 fa08 	bl	80042c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <xTaskResumeAll+0x130>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ebc:	f000 f836 	bl	8003f2c <xTaskIncrementTick>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <xTaskResumeAll+0x130>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <xTaskResumeAll+0x134>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003efa:	f000 fbc3 	bl	8004684 <vPortExitCritical>

	return xAlreadyYielded;
 8003efe:	68bb      	ldr	r3, [r7, #8]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000410 	.word	0x20000410
 8003f0c:	200003e8 	.word	0x200003e8
 8003f10:	200003a8 	.word	0x200003a8
 8003f14:	200003f0 	.word	0x200003f0
 8003f18:	200002ec 	.word	0x200002ec
 8003f1c:	200002e8 	.word	0x200002e8
 8003f20:	200003fc 	.word	0x200003fc
 8003f24:	200003f8 	.word	0x200003f8
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f36:	4b4e      	ldr	r3, [pc, #312]	; (8004070 <xTaskIncrementTick+0x144>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 8088 	bne.w	8004050 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <xTaskIncrementTick+0x148>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f48:	4a4a      	ldr	r2, [pc, #296]	; (8004074 <xTaskIncrementTick+0x148>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d120      	bne.n	8003f96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f54:	4b48      	ldr	r3, [pc, #288]	; (8004078 <xTaskIncrementTick+0x14c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	603b      	str	r3, [r7, #0]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <xTaskIncrementTick+0x46>
 8003f74:	4b40      	ldr	r3, [pc, #256]	; (8004078 <xTaskIncrementTick+0x14c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <xTaskIncrementTick+0x150>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3e      	ldr	r2, [pc, #248]	; (8004078 <xTaskIncrementTick+0x14c>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4a3e      	ldr	r2, [pc, #248]	; (800407c <xTaskIncrementTick+0x150>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <xTaskIncrementTick+0x154>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <xTaskIncrementTick+0x154>)
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	f000 f995 	bl	80042c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f96:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d348      	bcc.n	8004032 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa0:	4b35      	ldr	r3, [pc, #212]	; (8004078 <xTaskIncrementTick+0x14c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <xTaskIncrementTick+0x158>)
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	601a      	str	r2, [r3, #0]
					break;
 8003fb2:	e03e      	b.n	8004032 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <xTaskIncrementTick+0x14c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d203      	bcs.n	8003fd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fcc:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <xTaskIncrementTick+0x158>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fd2:	e02e      	b.n	8004032 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fcac 	bl	8003936 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d004      	beq.n	8003ff0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3318      	adds	r3, #24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fca3 	bl	8003936 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	4b23      	ldr	r3, [pc, #140]	; (8004088 <xTaskIncrementTick+0x15c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	4a22      	ldr	r2, [pc, #136]	; (8004088 <xTaskIncrementTick+0x15c>)
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4a1f      	ldr	r2, [pc, #124]	; (800408c <xTaskIncrementTick+0x160>)
 8004010:	441a      	add	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3304      	adds	r3, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7ff fc2f 	bl	800387c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <xTaskIncrementTick+0x164>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d3b9      	bcc.n	8003fa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004030:	e7b6      	b.n	8003fa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <xTaskIncrementTick+0x164>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	4914      	ldr	r1, [pc, #80]	; (800408c <xTaskIncrementTick+0x160>)
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d907      	bls.n	800405a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800404a:	2301      	movs	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e004      	b.n	800405a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <xTaskIncrementTick+0x168>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <xTaskIncrementTick+0x168>)
 8004058:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <xTaskIncrementTick+0x16c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004066:	697b      	ldr	r3, [r7, #20]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000410 	.word	0x20000410
 8004074:	200003ec 	.word	0x200003ec
 8004078:	200003a0 	.word	0x200003a0
 800407c:	200003a4 	.word	0x200003a4
 8004080:	20000400 	.word	0x20000400
 8004084:	20000408 	.word	0x20000408
 8004088:	200003f0 	.word	0x200003f0
 800408c:	200002ec 	.word	0x200002ec
 8004090:	200002e8 	.word	0x200002e8
 8004094:	200003f8 	.word	0x200003f8
 8004098:	200003fc 	.word	0x200003fc

0800409c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040a2:	4b27      	ldr	r3, [pc, #156]	; (8004140 <vTaskSwitchContext+0xa4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <vTaskSwitchContext+0xa8>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040b0:	e03f      	b.n	8004132 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <vTaskSwitchContext+0xa8>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b8:	4b23      	ldr	r3, [pc, #140]	; (8004148 <vTaskSwitchContext+0xac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f1c3 031f 	rsb	r3, r3, #31
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	491f      	ldr	r1, [pc, #124]	; (800414c <vTaskSwitchContext+0xb0>)
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	607b      	str	r3, [r7, #4]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <vTaskSwitchContext+0x5a>
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <vTaskSwitchContext+0xb0>)
 8004104:	4413      	add	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3308      	adds	r3, #8
 800411a:	429a      	cmp	r2, r3
 800411c:	d104      	bne.n	8004128 <vTaskSwitchContext+0x8c>
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <vTaskSwitchContext+0xb4>)
 8004130:	6013      	str	r3, [r2, #0]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20000410 	.word	0x20000410
 8004144:	200003fc 	.word	0x200003fc
 8004148:	200003f0 	.word	0x200003f0
 800414c:	200002ec 	.word	0x200002ec
 8004150:	200002e8 	.word	0x200002e8

08004154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800415c:	f000 f852 	bl	8004204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <prvIdleTask+0x28>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d9f9      	bls.n	800415c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <prvIdleTask+0x2c>)
 800416a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004178:	e7f0      	b.n	800415c <prvIdleTask+0x8>
 800417a:	bf00      	nop
 800417c:	200002ec 	.word	0x200002ec
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	e00c      	b.n	80041aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <prvInitialiseTaskLists+0x60>)
 800419c:	4413      	add	r3, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fb3f 	bl	8003822 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3301      	adds	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b06      	cmp	r3, #6
 80041ae:	d9ef      	bls.n	8004190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <prvInitialiseTaskLists+0x64>)
 80041b2:	f7ff fb36 	bl	8003822 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041b6:	480d      	ldr	r0, [pc, #52]	; (80041ec <prvInitialiseTaskLists+0x68>)
 80041b8:	f7ff fb33 	bl	8003822 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041bc:	480c      	ldr	r0, [pc, #48]	; (80041f0 <prvInitialiseTaskLists+0x6c>)
 80041be:	f7ff fb30 	bl	8003822 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041c2:	480c      	ldr	r0, [pc, #48]	; (80041f4 <prvInitialiseTaskLists+0x70>)
 80041c4:	f7ff fb2d 	bl	8003822 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041c8:	480b      	ldr	r0, [pc, #44]	; (80041f8 <prvInitialiseTaskLists+0x74>)
 80041ca:	f7ff fb2a 	bl	8003822 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <prvInitialiseTaskLists+0x78>)
 80041d0:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <prvInitialiseTaskLists+0x64>)
 80041d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <prvInitialiseTaskLists+0x7c>)
 80041d6:	4a05      	ldr	r2, [pc, #20]	; (80041ec <prvInitialiseTaskLists+0x68>)
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200002ec 	.word	0x200002ec
 80041e8:	20000378 	.word	0x20000378
 80041ec:	2000038c 	.word	0x2000038c
 80041f0:	200003a8 	.word	0x200003a8
 80041f4:	200003bc 	.word	0x200003bc
 80041f8:	200003d4 	.word	0x200003d4
 80041fc:	200003a0 	.word	0x200003a0
 8004200:	200003a4 	.word	0x200003a4

08004204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800420a:	e019      	b.n	8004240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800420c:	f000 fa0a 	bl	8004624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <prvCheckTasksWaitingTermination+0x50>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fb8a 	bl	8003936 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <prvCheckTasksWaitingTermination+0x54>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3b01      	subs	r3, #1
 8004228:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <prvCheckTasksWaitingTermination+0x54>)
 800422a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <prvCheckTasksWaitingTermination+0x58>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <prvCheckTasksWaitingTermination+0x58>)
 8004234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004236:	f000 fa25 	bl	8004684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f810 	bl	8004260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <prvCheckTasksWaitingTermination+0x58>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e1      	bne.n	800420c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200003bc 	.word	0x200003bc
 8004258:	200003e8 	.word	0x200003e8
 800425c:	200003d0 	.word	0x200003d0

08004260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fb7a 	bl	8004970 <vPortFree>
				vPortFree( pxTCB );
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fb77 	bl	8004970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004282:	e018      	b.n	80042b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800428a:	2b01      	cmp	r3, #1
 800428c:	d103      	bne.n	8004296 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fb6e 	bl	8004970 <vPortFree>
	}
 8004294:	e00f      	b.n	80042b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800429c:	2b02      	cmp	r3, #2
 800429e:	d00a      	beq.n	80042b6 <prvDeleteTCB+0x56>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <prvDeleteTCB+0x54>
	}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <prvResetNextTaskUnblockTime+0x38>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <prvResetNextTaskUnblockTime+0x3c>)
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042d8:	e008      	b.n	80042ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <prvResetNextTaskUnblockTime+0x38>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a04      	ldr	r2, [pc, #16]	; (80042fc <prvResetNextTaskUnblockTime+0x3c>)
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	200003a0 	.word	0x200003a0
 80042fc:	20000408 	.word	0x20000408

08004300 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004310:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fb0d 	bl	8003936 <uxListRemove>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	2201      	movs	r2, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4013      	ands	r3, r2
 8004336:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004338:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d10a      	bne.n	8004358 <prvAddCurrentTaskToDelayedList+0x58>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	481a      	ldr	r0, [pc, #104]	; (80043bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004352:	f7ff fa93 	bl	800387c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004356:	e026      	b.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004360:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d209      	bcs.n	8004384 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7ff faa1 	bl	80038c4 <vListInsert>
}
 8004382:	e010      	b.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f7ff fa97 	bl	80038c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	429a      	cmp	r2, r3
 800439e:	d202      	bcs.n	80043a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043a0:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6013      	str	r3, [r2, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	200003ec 	.word	0x200003ec
 80043b4:	200002e8 	.word	0x200002e8
 80043b8:	200003f0 	.word	0x200003f0
 80043bc:	200003d4 	.word	0x200003d4
 80043c0:	200003a4 	.word	0x200003a4
 80043c4:	200003a0 	.word	0x200003a0
 80043c8:	20000408 	.word	0x20000408

080043cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b04      	subs	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b04      	subs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b04      	subs	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043fc:	4a0c      	ldr	r2, [pc, #48]	; (8004430 <pxPortInitialiseStack+0x64>)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3b14      	subs	r3, #20
 8004406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3b04      	subs	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f06f 0202 	mvn.w	r2, #2
 800441a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3b20      	subs	r3, #32
 8004420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004422:	68fb      	ldr	r3, [r7, #12]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	08004435 	.word	0x08004435

08004434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <prvTaskExitError+0x54>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d00a      	beq.n	800445e <prvTaskExitError+0x2a>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <prvTaskExitError+0x28>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60bb      	str	r3, [r7, #8]
}
 8004470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004472:	bf00      	nop
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0fc      	beq.n	8004474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	2000000c 	.word	0x2000000c
 800448c:	00000000 	.word	0x00000000

08004490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <pxCurrentTCBConst2>)
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	6808      	ldr	r0, [r1, #0]
 8004496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	f380 8809 	msr	PSP, r0
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f380 8811 	msr	BASEPRI, r0
 80044aa:	4770      	bx	lr
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst2>:
 80044b0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044b8:	4808      	ldr	r0, [pc, #32]	; (80044dc <prvPortStartFirstTask+0x24>)
 80044ba:	6800      	ldr	r0, [r0, #0]
 80044bc:	6800      	ldr	r0, [r0, #0]
 80044be:	f380 8808 	msr	MSP, r0
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8814 	msr	CONTROL, r0
 80044ca:	b662      	cpsie	i
 80044cc:	b661      	cpsie	f
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	df00      	svc	0
 80044d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044da:	bf00      	nop
 80044dc:	e000ed08 	.word	0xe000ed08

080044e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <xPortStartScheduler+0x120>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a46      	ldr	r2, [pc, #280]	; (8004604 <xPortStartScheduler+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10a      	bne.n	8004506 <xPortStartScheduler+0x26>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	613b      	str	r3, [r7, #16]
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004506:	4b3e      	ldr	r3, [pc, #248]	; (8004600 <xPortStartScheduler+0x120>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <xPortStartScheduler+0x128>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10a      	bne.n	8004526 <xPortStartScheduler+0x46>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <xPortStartScheduler+0x12c>)
 8004528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <xPortStartScheduler+0x130>)
 800454c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <xPortStartScheduler+0x134>)
 8004550:	2207      	movs	r2, #7
 8004552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004554:	e009      	b.n	800456a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004556:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <xPortStartScheduler+0x134>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <xPortStartScheduler+0x134>)
 800455e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d0ef      	beq.n	8004556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <xPortStartScheduler+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	d00a      	beq.n	8004598 <xPortStartScheduler+0xb8>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60bb      	str	r3, [r7, #8]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <xPortStartScheduler+0x134>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <xPortStartScheduler+0x134>)
 80045a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <xPortStartScheduler+0x134>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045aa:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <xPortStartScheduler+0x134>)
 80045ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <xPortStartScheduler+0x138>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <xPortStartScheduler+0x138>)
 80045bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <xPortStartScheduler+0x138>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <xPortStartScheduler+0x138>)
 80045c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045ce:	f000 f8dd 	bl	800478c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <xPortStartScheduler+0x13c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045d8:	f000 f8fc 	bl	80047d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <xPortStartScheduler+0x140>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <xPortStartScheduler+0x140>)
 80045e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045e8:	f7ff ff66 	bl	80044b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045ec:	f7ff fd56 	bl	800409c <vTaskSwitchContext>
	prvTaskExitError();
 80045f0:	f7ff ff20 	bl	8004434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000ed00 	.word	0xe000ed00
 8004604:	410fc271 	.word	0x410fc271
 8004608:	410fc270 	.word	0x410fc270
 800460c:	e000e400 	.word	0xe000e400
 8004610:	20000414 	.word	0x20000414
 8004614:	20000418 	.word	0x20000418
 8004618:	e000ed20 	.word	0xe000ed20
 800461c:	2000000c 	.word	0x2000000c
 8004620:	e000ef34 	.word	0xe000ef34

08004624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	607b      	str	r3, [r7, #4]
}
 800463c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <vPortEnterCritical+0x58>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <vPortEnterCritical+0x58>)
 8004646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <vPortEnterCritical+0x58>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10f      	bne.n	8004670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <vPortEnterCritical+0x5c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <vPortEnterCritical+0x4c>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	603b      	str	r3, [r7, #0]
}
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <vPortEnterCritical+0x4a>
	}
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	2000000c 	.word	0x2000000c
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <vPortExitCritical+0x50>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <vPortExitCritical+0x24>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	607b      	str	r3, [r7, #4]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <vPortExitCritical+0x50>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <vPortExitCritical+0x50>)
 80046b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <vPortExitCritical+0x50>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d105      	bne.n	80046c6 <vPortExitCritical+0x42>
 80046ba:	2300      	movs	r3, #0
 80046bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000000c 	.word	0x2000000c
	...

080046e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046e0:	f3ef 8009 	mrs	r0, PSP
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <pxCurrentTCBConst>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	f01e 0f10 	tst.w	lr, #16
 80046f0:	bf08      	it	eq
 80046f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	6010      	str	r0, [r2, #0]
 80046fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004704:	f380 8811 	msr	BASEPRI, r0
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f7ff fcc4 	bl	800409c <vTaskSwitchContext>
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f380 8811 	msr	BASEPRI, r0
 800471c:	bc09      	pop	{r0, r3}
 800471e:	6819      	ldr	r1, [r3, #0]
 8004720:	6808      	ldr	r0, [r1, #0]
 8004722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004726:	f01e 0f10 	tst.w	lr, #16
 800472a:	bf08      	it	eq
 800472c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004730:	f380 8809 	msr	PSP, r0
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	f3af 8000 	nop.w

08004740 <pxCurrentTCBConst>:
 8004740:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop

08004748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	607b      	str	r3, [r7, #4]
}
 8004760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004762:	f7ff fbe3 	bl	8003f2c <xTaskIncrementTick>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <SysTick_Handler+0x40>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	2300      	movs	r3, #0
 8004776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f383 8811 	msr	BASEPRI, r3
}
 800477e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <vPortSetupTimerInterrupt+0x34>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <vPortSetupTimerInterrupt+0x38>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <vPortSetupTimerInterrupt+0x3c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <vPortSetupTimerInterrupt+0x40>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <vPortSetupTimerInterrupt+0x44>)
 80047aa:	3b01      	subs	r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vPortSetupTimerInterrupt+0x34>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000e010 	.word	0xe000e010
 80047c4:	e000e018 	.word	0xe000e018
 80047c8:	20000000 	.word	0x20000000
 80047cc:	10624dd3 	.word	0x10624dd3
 80047d0:	e000e014 	.word	0xe000e014

080047d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047e4 <vPortEnableVFP+0x10>
 80047d8:	6801      	ldr	r1, [r0, #0]
 80047da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047de:	6001      	str	r1, [r0, #0]
 80047e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047e2:	bf00      	nop
 80047e4:	e000ed88 	.word	0xe000ed88

080047e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80047f4:	f7ff faf0 	bl	8003dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <pvPortMalloc+0x174>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004800:	f000 f910 	bl	8004a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004804:	4b56      	ldr	r3, [pc, #344]	; (8004960 <pvPortMalloc+0x178>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 808e 	bne.w	800492e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01d      	beq.n	8004854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004818:	2208      	movs	r2, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f023 0307 	bic.w	r3, r3, #7
 8004830:	3308      	adds	r3, #8
 8004832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <pvPortMalloc+0x6c>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	617b      	str	r3, [r7, #20]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d069      	beq.n	800492e <pvPortMalloc+0x146>
 800485a:	4b42      	ldr	r3, [pc, #264]	; (8004964 <pvPortMalloc+0x17c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	429a      	cmp	r2, r3
 8004862:	d864      	bhi.n	800492e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004864:	4b40      	ldr	r3, [pc, #256]	; (8004968 <pvPortMalloc+0x180>)
 8004866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <pvPortMalloc+0x180>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800486e:	e004      	b.n	800487a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <pvPortMalloc+0xa4>
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f1      	bne.n	8004870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800488c:	4b33      	ldr	r3, [pc, #204]	; (800495c <pvPortMalloc+0x174>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d04b      	beq.n	800492e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2208      	movs	r2, #8
 800489c:	4413      	add	r3, r2
 800489e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	2308      	movs	r3, #8
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d91f      	bls.n	80048f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <pvPortMalloc+0xf8>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	613b      	str	r3, [r7, #16]
}
 80048dc:	bf00      	nop
 80048de:	e7fe      	b.n	80048de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048f2:	69b8      	ldr	r0, [r7, #24]
 80048f4:	f000 f8f8 	bl	8004ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048f8:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <pvPortMalloc+0x17c>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <pvPortMalloc+0x17c>)
 8004904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <pvPortMalloc+0x17c>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <pvPortMalloc+0x184>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d203      	bcs.n	800491a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <pvPortMalloc+0x17c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a15      	ldr	r2, [pc, #84]	; (800496c <pvPortMalloc+0x184>)
 8004918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <pvPortMalloc+0x178>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	431a      	orrs	r2, r3
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800492e:	f7ff fa61 	bl	8003df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <pvPortMalloc+0x16a>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <pvPortMalloc+0x168>
	return pvReturn;
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3728      	adds	r7, #40	; 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000fdc 	.word	0x20000fdc
 8004960:	20000fe8 	.word	0x20000fe8
 8004964:	20000fe0 	.word	0x20000fe0
 8004968:	20000fd4 	.word	0x20000fd4
 800496c:	20000fe4 	.word	0x20000fe4

08004970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d048      	beq.n	8004a14 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004982:	2308      	movs	r3, #8
 8004984:	425b      	negs	r3, r3
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <vPortFree+0xac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <vPortFree+0x44>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	60fb      	str	r3, [r7, #12]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <vPortFree+0x62>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60bb      	str	r3, [r7, #8]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <vPortFree+0xac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d019      	beq.n	8004a14 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d115      	bne.n	8004a14 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <vPortFree+0xac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80049f8:	f7ff f9ee 	bl	8003dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <vPortFree+0xb0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	4a06      	ldr	r2, [pc, #24]	; (8004a20 <vPortFree+0xb0>)
 8004a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f000 f86c 	bl	8004ae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a10:	f7ff f9f0 	bl	8003df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a14:	bf00      	nop
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000fe8 	.word	0x20000fe8
 8004a20:	20000fe0 	.word	0x20000fe0

08004a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a30:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <prvHeapInit+0xac>)
 8004a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00c      	beq.n	8004a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3307      	adds	r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0307 	bic.w	r3, r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <prvHeapInit+0xac>)
 8004a54:	4413      	add	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <prvHeapInit+0xb0>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <prvHeapInit+0xb0>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a70:	2208      	movs	r2, #8
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <prvHeapInit+0xb4>)
 8004a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <prvHeapInit+0xb4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <prvHeapInit+0xb4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <prvHeapInit+0xb4>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <prvHeapInit+0xb8>)
 8004ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <prvHeapInit+0xbc>)
 8004aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <prvHeapInit+0xc0>)
 8004abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	2000041c 	.word	0x2000041c
 8004ad4:	20000fd4 	.word	0x20000fd4
 8004ad8:	20000fdc 	.word	0x20000fdc
 8004adc:	20000fe4 	.word	0x20000fe4
 8004ae0:	20000fe0 	.word	0x20000fe0
 8004ae4:	20000fe8 	.word	0x20000fe8

08004ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <prvInsertBlockIntoFreeList+0xac>)
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e002      	b.n	8004afc <prvInsertBlockIntoFreeList+0x14>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d8f7      	bhi.n	8004af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d108      	bne.n	8004b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	441a      	add	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d118      	bne.n	8004b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <prvInsertBlockIntoFreeList+0xb0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d00d      	beq.n	8004b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e008      	b.n	8004b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <prvInsertBlockIntoFreeList+0xb0>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	e003      	b.n	8004b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d002      	beq.n	8004b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000fd4 	.word	0x20000fd4
 8004b98:	20000fdc 	.word	0x20000fdc

08004b9c <__errno>:
 8004b9c:	4b01      	ldr	r3, [pc, #4]	; (8004ba4 <__errno+0x8>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000010 	.word	0x20000010

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4d0d      	ldr	r5, [pc, #52]	; (8004be0 <__libc_init_array+0x38>)
 8004bac:	4c0d      	ldr	r4, [pc, #52]	; (8004be4 <__libc_init_array+0x3c>)
 8004bae:	1b64      	subs	r4, r4, r5
 8004bb0:	10a4      	asrs	r4, r4, #2
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	4d0b      	ldr	r5, [pc, #44]	; (8004be8 <__libc_init_array+0x40>)
 8004bba:	4c0c      	ldr	r4, [pc, #48]	; (8004bec <__libc_init_array+0x44>)
 8004bbc:	f000 fce6 	bl	800558c <_init>
 8004bc0:	1b64      	subs	r4, r4, r5
 8004bc2:	10a4      	asrs	r4, r4, #2
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	080056b8 	.word	0x080056b8
 8004be4:	080056b8 	.word	0x080056b8
 8004be8:	080056b8 	.word	0x080056b8
 8004bec:	080056bc 	.word	0x080056bc

08004bf0 <memset>:
 8004bf0:	4402      	add	r2, r0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <memset+0xa>
 8004bf8:	4770      	bx	lr
 8004bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfe:	e7f9      	b.n	8004bf4 <memset+0x4>

08004c00 <_puts_r>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	460e      	mov	r6, r1
 8004c04:	4605      	mov	r5, r0
 8004c06:	b118      	cbz	r0, 8004c10 <_puts_r+0x10>
 8004c08:	6983      	ldr	r3, [r0, #24]
 8004c0a:	b90b      	cbnz	r3, 8004c10 <_puts_r+0x10>
 8004c0c:	f000 fa48 	bl	80050a0 <__sinit>
 8004c10:	69ab      	ldr	r3, [r5, #24]
 8004c12:	68ac      	ldr	r4, [r5, #8]
 8004c14:	b913      	cbnz	r3, 8004c1c <_puts_r+0x1c>
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 fa42 	bl	80050a0 <__sinit>
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <_puts_r+0xd0>)
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d120      	bne.n	8004c64 <_puts_r+0x64>
 8004c22:	686c      	ldr	r4, [r5, #4]
 8004c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c26:	07db      	lsls	r3, r3, #31
 8004c28:	d405      	bmi.n	8004c36 <_puts_r+0x36>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	0598      	lsls	r0, r3, #22
 8004c2e:	d402      	bmi.n	8004c36 <_puts_r+0x36>
 8004c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c32:	f000 fad3 	bl	80051dc <__retarget_lock_acquire_recursive>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	0719      	lsls	r1, r3, #28
 8004c3a:	d51d      	bpl.n	8004c78 <_puts_r+0x78>
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	b1db      	cbz	r3, 8004c78 <_puts_r+0x78>
 8004c40:	3e01      	subs	r6, #1
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	60a3      	str	r3, [r4, #8]
 8004c4c:	bb39      	cbnz	r1, 8004c9e <_puts_r+0x9e>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da38      	bge.n	8004cc4 <_puts_r+0xc4>
 8004c52:	4622      	mov	r2, r4
 8004c54:	210a      	movs	r1, #10
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f848 	bl	8004cec <__swbuf_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d011      	beq.n	8004c84 <_puts_r+0x84>
 8004c60:	250a      	movs	r5, #10
 8004c62:	e011      	b.n	8004c88 <_puts_r+0x88>
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <_puts_r+0xd4>)
 8004c66:	429c      	cmp	r4, r3
 8004c68:	d101      	bne.n	8004c6e <_puts_r+0x6e>
 8004c6a:	68ac      	ldr	r4, [r5, #8]
 8004c6c:	e7da      	b.n	8004c24 <_puts_r+0x24>
 8004c6e:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <_puts_r+0xd8>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	bf08      	it	eq
 8004c74:	68ec      	ldreq	r4, [r5, #12]
 8004c76:	e7d5      	b.n	8004c24 <_puts_r+0x24>
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 f888 	bl	8004d90 <__swsetup_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d0dd      	beq.n	8004c40 <_puts_r+0x40>
 8004c84:	f04f 35ff 	mov.w	r5, #4294967295
 8004c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c8a:	07da      	lsls	r2, r3, #31
 8004c8c:	d405      	bmi.n	8004c9a <_puts_r+0x9a>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	059b      	lsls	r3, r3, #22
 8004c92:	d402      	bmi.n	8004c9a <_puts_r+0x9a>
 8004c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c96:	f000 faa2 	bl	80051de <__retarget_lock_release_recursive>
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da04      	bge.n	8004cac <_puts_r+0xac>
 8004ca2:	69a2      	ldr	r2, [r4, #24]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	dc06      	bgt.n	8004cb6 <_puts_r+0xb6>
 8004ca8:	290a      	cmp	r1, #10
 8004caa:	d004      	beq.n	8004cb6 <_puts_r+0xb6>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	6022      	str	r2, [r4, #0]
 8004cb2:	7019      	strb	r1, [r3, #0]
 8004cb4:	e7c5      	b.n	8004c42 <_puts_r+0x42>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f817 	bl	8004cec <__swbuf_r>
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d1bf      	bne.n	8004c42 <_puts_r+0x42>
 8004cc2:	e7df      	b.n	8004c84 <_puts_r+0x84>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	250a      	movs	r5, #10
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	6022      	str	r2, [r4, #0]
 8004ccc:	701d      	strb	r5, [r3, #0]
 8004cce:	e7db      	b.n	8004c88 <_puts_r+0x88>
 8004cd0:	08005670 	.word	0x08005670
 8004cd4:	08005690 	.word	0x08005690
 8004cd8:	08005650 	.word	0x08005650

08004cdc <puts>:
 8004cdc:	4b02      	ldr	r3, [pc, #8]	; (8004ce8 <puts+0xc>)
 8004cde:	4601      	mov	r1, r0
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	f7ff bf8d 	b.w	8004c00 <_puts_r>
 8004ce6:	bf00      	nop
 8004ce8:	20000010 	.word	0x20000010

08004cec <__swbuf_r>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	460e      	mov	r6, r1
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	b118      	cbz	r0, 8004cfe <__swbuf_r+0x12>
 8004cf6:	6983      	ldr	r3, [r0, #24]
 8004cf8:	b90b      	cbnz	r3, 8004cfe <__swbuf_r+0x12>
 8004cfa:	f000 f9d1 	bl	80050a0 <__sinit>
 8004cfe:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <__swbuf_r+0x98>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d12b      	bne.n	8004d5c <__swbuf_r+0x70>
 8004d04:	686c      	ldr	r4, [r5, #4]
 8004d06:	69a3      	ldr	r3, [r4, #24]
 8004d08:	60a3      	str	r3, [r4, #8]
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	071a      	lsls	r2, r3, #28
 8004d0e:	d52f      	bpl.n	8004d70 <__swbuf_r+0x84>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	b36b      	cbz	r3, 8004d70 <__swbuf_r+0x84>
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	1ac0      	subs	r0, r0, r3
 8004d1a:	6963      	ldr	r3, [r4, #20]
 8004d1c:	b2f6      	uxtb	r6, r6
 8004d1e:	4283      	cmp	r3, r0
 8004d20:	4637      	mov	r7, r6
 8004d22:	dc04      	bgt.n	8004d2e <__swbuf_r+0x42>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 f926 	bl	8004f78 <_fflush_r>
 8004d2c:	bb30      	cbnz	r0, 8004d7c <__swbuf_r+0x90>
 8004d2e:	68a3      	ldr	r3, [r4, #8]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60a3      	str	r3, [r4, #8]
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	701e      	strb	r6, [r3, #0]
 8004d3c:	6963      	ldr	r3, [r4, #20]
 8004d3e:	3001      	adds	r0, #1
 8004d40:	4283      	cmp	r3, r0
 8004d42:	d004      	beq.n	8004d4e <__swbuf_r+0x62>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	07db      	lsls	r3, r3, #31
 8004d48:	d506      	bpl.n	8004d58 <__swbuf_r+0x6c>
 8004d4a:	2e0a      	cmp	r6, #10
 8004d4c:	d104      	bne.n	8004d58 <__swbuf_r+0x6c>
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 f911 	bl	8004f78 <_fflush_r>
 8004d56:	b988      	cbnz	r0, 8004d7c <__swbuf_r+0x90>
 8004d58:	4638      	mov	r0, r7
 8004d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <__swbuf_r+0x9c>)
 8004d5e:	429c      	cmp	r4, r3
 8004d60:	d101      	bne.n	8004d66 <__swbuf_r+0x7a>
 8004d62:	68ac      	ldr	r4, [r5, #8]
 8004d64:	e7cf      	b.n	8004d06 <__swbuf_r+0x1a>
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <__swbuf_r+0xa0>)
 8004d68:	429c      	cmp	r4, r3
 8004d6a:	bf08      	it	eq
 8004d6c:	68ec      	ldreq	r4, [r5, #12]
 8004d6e:	e7ca      	b.n	8004d06 <__swbuf_r+0x1a>
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 f80c 	bl	8004d90 <__swsetup_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0cb      	beq.n	8004d14 <__swbuf_r+0x28>
 8004d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d80:	e7ea      	b.n	8004d58 <__swbuf_r+0x6c>
 8004d82:	bf00      	nop
 8004d84:	08005670 	.word	0x08005670
 8004d88:	08005690 	.word	0x08005690
 8004d8c:	08005650 	.word	0x08005650

08004d90 <__swsetup_r>:
 8004d90:	4b32      	ldr	r3, [pc, #200]	; (8004e5c <__swsetup_r+0xcc>)
 8004d92:	b570      	push	{r4, r5, r6, lr}
 8004d94:	681d      	ldr	r5, [r3, #0]
 8004d96:	4606      	mov	r6, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	b125      	cbz	r5, 8004da6 <__swsetup_r+0x16>
 8004d9c:	69ab      	ldr	r3, [r5, #24]
 8004d9e:	b913      	cbnz	r3, 8004da6 <__swsetup_r+0x16>
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 f97d 	bl	80050a0 <__sinit>
 8004da6:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <__swsetup_r+0xd0>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d10f      	bne.n	8004dcc <__swsetup_r+0x3c>
 8004dac:	686c      	ldr	r4, [r5, #4]
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004db4:	0719      	lsls	r1, r3, #28
 8004db6:	d42c      	bmi.n	8004e12 <__swsetup_r+0x82>
 8004db8:	06dd      	lsls	r5, r3, #27
 8004dba:	d411      	bmi.n	8004de0 <__swsetup_r+0x50>
 8004dbc:	2309      	movs	r3, #9
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dc4:	81a3      	strh	r3, [r4, #12]
 8004dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dca:	e03e      	b.n	8004e4a <__swsetup_r+0xba>
 8004dcc:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <__swsetup_r+0xd4>)
 8004dce:	429c      	cmp	r4, r3
 8004dd0:	d101      	bne.n	8004dd6 <__swsetup_r+0x46>
 8004dd2:	68ac      	ldr	r4, [r5, #8]
 8004dd4:	e7eb      	b.n	8004dae <__swsetup_r+0x1e>
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <__swsetup_r+0xd8>)
 8004dd8:	429c      	cmp	r4, r3
 8004dda:	bf08      	it	eq
 8004ddc:	68ec      	ldreq	r4, [r5, #12]
 8004dde:	e7e6      	b.n	8004dae <__swsetup_r+0x1e>
 8004de0:	0758      	lsls	r0, r3, #29
 8004de2:	d512      	bpl.n	8004e0a <__swsetup_r+0x7a>
 8004de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004de6:	b141      	cbz	r1, 8004dfa <__swsetup_r+0x6a>
 8004de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dec:	4299      	cmp	r1, r3
 8004dee:	d002      	beq.n	8004df6 <__swsetup_r+0x66>
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 fa59 	bl	80052a8 <_free_r>
 8004df6:	2300      	movs	r3, #0
 8004df8:	6363      	str	r3, [r4, #52]	; 0x34
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e00:	81a3      	strh	r3, [r4, #12]
 8004e02:	2300      	movs	r3, #0
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	f043 0308 	orr.w	r3, r3, #8
 8004e10:	81a3      	strh	r3, [r4, #12]
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	b94b      	cbnz	r3, 8004e2a <__swsetup_r+0x9a>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e20:	d003      	beq.n	8004e2a <__swsetup_r+0x9a>
 8004e22:	4621      	mov	r1, r4
 8004e24:	4630      	mov	r0, r6
 8004e26:	f000 f9ff 	bl	8005228 <__smakebuf_r>
 8004e2a:	89a0      	ldrh	r0, [r4, #12]
 8004e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e30:	f010 0301 	ands.w	r3, r0, #1
 8004e34:	d00a      	beq.n	8004e4c <__swsetup_r+0xbc>
 8004e36:	2300      	movs	r3, #0
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	6963      	ldr	r3, [r4, #20]
 8004e3c:	425b      	negs	r3, r3
 8004e3e:	61a3      	str	r3, [r4, #24]
 8004e40:	6923      	ldr	r3, [r4, #16]
 8004e42:	b943      	cbnz	r3, 8004e56 <__swsetup_r+0xc6>
 8004e44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e48:	d1ba      	bne.n	8004dc0 <__swsetup_r+0x30>
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	0781      	lsls	r1, r0, #30
 8004e4e:	bf58      	it	pl
 8004e50:	6963      	ldrpl	r3, [r4, #20]
 8004e52:	60a3      	str	r3, [r4, #8]
 8004e54:	e7f4      	b.n	8004e40 <__swsetup_r+0xb0>
 8004e56:	2000      	movs	r0, #0
 8004e58:	e7f7      	b.n	8004e4a <__swsetup_r+0xba>
 8004e5a:	bf00      	nop
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	08005670 	.word	0x08005670
 8004e64:	08005690 	.word	0x08005690
 8004e68:	08005650 	.word	0x08005650

08004e6c <__sflush_r>:
 8004e6c:	898a      	ldrh	r2, [r1, #12]
 8004e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e72:	4605      	mov	r5, r0
 8004e74:	0710      	lsls	r0, r2, #28
 8004e76:	460c      	mov	r4, r1
 8004e78:	d458      	bmi.n	8004f2c <__sflush_r+0xc0>
 8004e7a:	684b      	ldr	r3, [r1, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dc05      	bgt.n	8004e8c <__sflush_r+0x20>
 8004e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	dc02      	bgt.n	8004e8c <__sflush_r+0x20>
 8004e86:	2000      	movs	r0, #0
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	d0f9      	beq.n	8004e86 <__sflush_r+0x1a>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e98:	682f      	ldr	r7, [r5, #0]
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	d032      	beq.n	8004f04 <__sflush_r+0x98>
 8004e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	075a      	lsls	r2, r3, #29
 8004ea4:	d505      	bpl.n	8004eb2 <__sflush_r+0x46>
 8004ea6:	6863      	ldr	r3, [r4, #4]
 8004ea8:	1ac0      	subs	r0, r0, r3
 8004eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eac:	b10b      	cbz	r3, 8004eb2 <__sflush_r+0x46>
 8004eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eb0:	1ac0      	subs	r0, r0, r3
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eb8:	6a21      	ldr	r1, [r4, #32]
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b0      	blx	r6
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	d106      	bne.n	8004ed2 <__sflush_r+0x66>
 8004ec4:	6829      	ldr	r1, [r5, #0]
 8004ec6:	291d      	cmp	r1, #29
 8004ec8:	d82c      	bhi.n	8004f24 <__sflush_r+0xb8>
 8004eca:	4a2a      	ldr	r2, [pc, #168]	; (8004f74 <__sflush_r+0x108>)
 8004ecc:	40ca      	lsrs	r2, r1
 8004ece:	07d6      	lsls	r6, r2, #31
 8004ed0:	d528      	bpl.n	8004f24 <__sflush_r+0xb8>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	6062      	str	r2, [r4, #4]
 8004ed6:	04d9      	lsls	r1, r3, #19
 8004ed8:	6922      	ldr	r2, [r4, #16]
 8004eda:	6022      	str	r2, [r4, #0]
 8004edc:	d504      	bpl.n	8004ee8 <__sflush_r+0x7c>
 8004ede:	1c42      	adds	r2, r0, #1
 8004ee0:	d101      	bne.n	8004ee6 <__sflush_r+0x7a>
 8004ee2:	682b      	ldr	r3, [r5, #0]
 8004ee4:	b903      	cbnz	r3, 8004ee8 <__sflush_r+0x7c>
 8004ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8004ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eea:	602f      	str	r7, [r5, #0]
 8004eec:	2900      	cmp	r1, #0
 8004eee:	d0ca      	beq.n	8004e86 <__sflush_r+0x1a>
 8004ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	d002      	beq.n	8004efe <__sflush_r+0x92>
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 f9d5 	bl	80052a8 <_free_r>
 8004efe:	2000      	movs	r0, #0
 8004f00:	6360      	str	r0, [r4, #52]	; 0x34
 8004f02:	e7c1      	b.n	8004e88 <__sflush_r+0x1c>
 8004f04:	6a21      	ldr	r1, [r4, #32]
 8004f06:	2301      	movs	r3, #1
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b0      	blx	r6
 8004f0c:	1c41      	adds	r1, r0, #1
 8004f0e:	d1c7      	bne.n	8004ea0 <__sflush_r+0x34>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0c4      	beq.n	8004ea0 <__sflush_r+0x34>
 8004f16:	2b1d      	cmp	r3, #29
 8004f18:	d001      	beq.n	8004f1e <__sflush_r+0xb2>
 8004f1a:	2b16      	cmp	r3, #22
 8004f1c:	d101      	bne.n	8004f22 <__sflush_r+0xb6>
 8004f1e:	602f      	str	r7, [r5, #0]
 8004f20:	e7b1      	b.n	8004e86 <__sflush_r+0x1a>
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	e7ad      	b.n	8004e88 <__sflush_r+0x1c>
 8004f2c:	690f      	ldr	r7, [r1, #16]
 8004f2e:	2f00      	cmp	r7, #0
 8004f30:	d0a9      	beq.n	8004e86 <__sflush_r+0x1a>
 8004f32:	0793      	lsls	r3, r2, #30
 8004f34:	680e      	ldr	r6, [r1, #0]
 8004f36:	bf08      	it	eq
 8004f38:	694b      	ldreq	r3, [r1, #20]
 8004f3a:	600f      	str	r7, [r1, #0]
 8004f3c:	bf18      	it	ne
 8004f3e:	2300      	movne	r3, #0
 8004f40:	eba6 0807 	sub.w	r8, r6, r7
 8004f44:	608b      	str	r3, [r1, #8]
 8004f46:	f1b8 0f00 	cmp.w	r8, #0
 8004f4a:	dd9c      	ble.n	8004e86 <__sflush_r+0x1a>
 8004f4c:	6a21      	ldr	r1, [r4, #32]
 8004f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f50:	4643      	mov	r3, r8
 8004f52:	463a      	mov	r2, r7
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b0      	blx	r6
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	dc06      	bgt.n	8004f6a <__sflush_r+0xfe>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f62:	81a3      	strh	r3, [r4, #12]
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	e78e      	b.n	8004e88 <__sflush_r+0x1c>
 8004f6a:	4407      	add	r7, r0
 8004f6c:	eba8 0800 	sub.w	r8, r8, r0
 8004f70:	e7e9      	b.n	8004f46 <__sflush_r+0xda>
 8004f72:	bf00      	nop
 8004f74:	20400001 	.word	0x20400001

08004f78 <_fflush_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	b913      	cbnz	r3, 8004f88 <_fflush_r+0x10>
 8004f82:	2500      	movs	r5, #0
 8004f84:	4628      	mov	r0, r5
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	b118      	cbz	r0, 8004f92 <_fflush_r+0x1a>
 8004f8a:	6983      	ldr	r3, [r0, #24]
 8004f8c:	b90b      	cbnz	r3, 8004f92 <_fflush_r+0x1a>
 8004f8e:	f000 f887 	bl	80050a0 <__sinit>
 8004f92:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <_fflush_r+0x6c>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	d11b      	bne.n	8004fd0 <_fflush_r+0x58>
 8004f98:	686c      	ldr	r4, [r5, #4]
 8004f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ef      	beq.n	8004f82 <_fflush_r+0xa>
 8004fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fa4:	07d0      	lsls	r0, r2, #31
 8004fa6:	d404      	bmi.n	8004fb2 <_fflush_r+0x3a>
 8004fa8:	0599      	lsls	r1, r3, #22
 8004faa:	d402      	bmi.n	8004fb2 <_fflush_r+0x3a>
 8004fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fae:	f000 f915 	bl	80051dc <__retarget_lock_acquire_recursive>
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	f7ff ff59 	bl	8004e6c <__sflush_r>
 8004fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fbc:	07da      	lsls	r2, r3, #31
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	d4e0      	bmi.n	8004f84 <_fflush_r+0xc>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	059b      	lsls	r3, r3, #22
 8004fc6:	d4dd      	bmi.n	8004f84 <_fflush_r+0xc>
 8004fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fca:	f000 f908 	bl	80051de <__retarget_lock_release_recursive>
 8004fce:	e7d9      	b.n	8004f84 <_fflush_r+0xc>
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <_fflush_r+0x70>)
 8004fd2:	429c      	cmp	r4, r3
 8004fd4:	d101      	bne.n	8004fda <_fflush_r+0x62>
 8004fd6:	68ac      	ldr	r4, [r5, #8]
 8004fd8:	e7df      	b.n	8004f9a <_fflush_r+0x22>
 8004fda:	4b04      	ldr	r3, [pc, #16]	; (8004fec <_fflush_r+0x74>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	bf08      	it	eq
 8004fe0:	68ec      	ldreq	r4, [r5, #12]
 8004fe2:	e7da      	b.n	8004f9a <_fflush_r+0x22>
 8004fe4:	08005670 	.word	0x08005670
 8004fe8:	08005690 	.word	0x08005690
 8004fec:	08005650 	.word	0x08005650

08004ff0 <std>:
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8004ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ffe:	6083      	str	r3, [r0, #8]
 8005000:	8181      	strh	r1, [r0, #12]
 8005002:	6643      	str	r3, [r0, #100]	; 0x64
 8005004:	81c2      	strh	r2, [r0, #14]
 8005006:	6183      	str	r3, [r0, #24]
 8005008:	4619      	mov	r1, r3
 800500a:	2208      	movs	r2, #8
 800500c:	305c      	adds	r0, #92	; 0x5c
 800500e:	f7ff fdef 	bl	8004bf0 <memset>
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <std+0x38>)
 8005014:	6263      	str	r3, [r4, #36]	; 0x24
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <std+0x3c>)
 8005018:	62a3      	str	r3, [r4, #40]	; 0x28
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <std+0x40>)
 800501c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800501e:	4b05      	ldr	r3, [pc, #20]	; (8005034 <std+0x44>)
 8005020:	6224      	str	r4, [r4, #32]
 8005022:	6323      	str	r3, [r4, #48]	; 0x30
 8005024:	bd10      	pop	{r4, pc}
 8005026:	bf00      	nop
 8005028:	0800541d 	.word	0x0800541d
 800502c:	0800543f 	.word	0x0800543f
 8005030:	08005477 	.word	0x08005477
 8005034:	0800549b 	.word	0x0800549b

08005038 <_cleanup_r>:
 8005038:	4901      	ldr	r1, [pc, #4]	; (8005040 <_cleanup_r+0x8>)
 800503a:	f000 b8af 	b.w	800519c <_fwalk_reent>
 800503e:	bf00      	nop
 8005040:	08004f79 	.word	0x08004f79

08005044 <__sfmoreglue>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	1e4a      	subs	r2, r1, #1
 8005048:	2568      	movs	r5, #104	; 0x68
 800504a:	4355      	muls	r5, r2
 800504c:	460e      	mov	r6, r1
 800504e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005052:	f000 f979 	bl	8005348 <_malloc_r>
 8005056:	4604      	mov	r4, r0
 8005058:	b140      	cbz	r0, 800506c <__sfmoreglue+0x28>
 800505a:	2100      	movs	r1, #0
 800505c:	e9c0 1600 	strd	r1, r6, [r0]
 8005060:	300c      	adds	r0, #12
 8005062:	60a0      	str	r0, [r4, #8]
 8005064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005068:	f7ff fdc2 	bl	8004bf0 <memset>
 800506c:	4620      	mov	r0, r4
 800506e:	bd70      	pop	{r4, r5, r6, pc}

08005070 <__sfp_lock_acquire>:
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <__sfp_lock_acquire+0x8>)
 8005072:	f000 b8b3 	b.w	80051dc <__retarget_lock_acquire_recursive>
 8005076:	bf00      	nop
 8005078:	20001154 	.word	0x20001154

0800507c <__sfp_lock_release>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sfp_lock_release+0x8>)
 800507e:	f000 b8ae 	b.w	80051de <__retarget_lock_release_recursive>
 8005082:	bf00      	nop
 8005084:	20001154 	.word	0x20001154

08005088 <__sinit_lock_acquire>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__sinit_lock_acquire+0x8>)
 800508a:	f000 b8a7 	b.w	80051dc <__retarget_lock_acquire_recursive>
 800508e:	bf00      	nop
 8005090:	2000114f 	.word	0x2000114f

08005094 <__sinit_lock_release>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__sinit_lock_release+0x8>)
 8005096:	f000 b8a2 	b.w	80051de <__retarget_lock_release_recursive>
 800509a:	bf00      	nop
 800509c:	2000114f 	.word	0x2000114f

080050a0 <__sinit>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	f7ff fff0 	bl	8005088 <__sinit_lock_acquire>
 80050a8:	69a3      	ldr	r3, [r4, #24]
 80050aa:	b11b      	cbz	r3, 80050b4 <__sinit+0x14>
 80050ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b0:	f7ff bff0 	b.w	8005094 <__sinit_lock_release>
 80050b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050b8:	6523      	str	r3, [r4, #80]	; 0x50
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <__sinit+0x68>)
 80050bc:	4a13      	ldr	r2, [pc, #76]	; (800510c <__sinit+0x6c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	bf04      	itt	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	61a3      	streq	r3, [r4, #24]
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 f820 	bl	8005110 <__sfp>
 80050d0:	6060      	str	r0, [r4, #4]
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 f81c 	bl	8005110 <__sfp>
 80050d8:	60a0      	str	r0, [r4, #8]
 80050da:	4620      	mov	r0, r4
 80050dc:	f000 f818 	bl	8005110 <__sfp>
 80050e0:	2200      	movs	r2, #0
 80050e2:	60e0      	str	r0, [r4, #12]
 80050e4:	2104      	movs	r1, #4
 80050e6:	6860      	ldr	r0, [r4, #4]
 80050e8:	f7ff ff82 	bl	8004ff0 <std>
 80050ec:	68a0      	ldr	r0, [r4, #8]
 80050ee:	2201      	movs	r2, #1
 80050f0:	2109      	movs	r1, #9
 80050f2:	f7ff ff7d 	bl	8004ff0 <std>
 80050f6:	68e0      	ldr	r0, [r4, #12]
 80050f8:	2202      	movs	r2, #2
 80050fa:	2112      	movs	r1, #18
 80050fc:	f7ff ff78 	bl	8004ff0 <std>
 8005100:	2301      	movs	r3, #1
 8005102:	61a3      	str	r3, [r4, #24]
 8005104:	e7d2      	b.n	80050ac <__sinit+0xc>
 8005106:	bf00      	nop
 8005108:	0800564c 	.word	0x0800564c
 800510c:	08005039 	.word	0x08005039

08005110 <__sfp>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	4607      	mov	r7, r0
 8005114:	f7ff ffac 	bl	8005070 <__sfp_lock_acquire>
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <__sfp+0x84>)
 800511a:	681e      	ldr	r6, [r3, #0]
 800511c:	69b3      	ldr	r3, [r6, #24]
 800511e:	b913      	cbnz	r3, 8005126 <__sfp+0x16>
 8005120:	4630      	mov	r0, r6
 8005122:	f7ff ffbd 	bl	80050a0 <__sinit>
 8005126:	3648      	adds	r6, #72	; 0x48
 8005128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	d503      	bpl.n	8005138 <__sfp+0x28>
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	b30b      	cbz	r3, 8005178 <__sfp+0x68>
 8005134:	6836      	ldr	r6, [r6, #0]
 8005136:	e7f7      	b.n	8005128 <__sfp+0x18>
 8005138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800513c:	b9d5      	cbnz	r5, 8005174 <__sfp+0x64>
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <__sfp+0x88>)
 8005140:	60e3      	str	r3, [r4, #12]
 8005142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005146:	6665      	str	r5, [r4, #100]	; 0x64
 8005148:	f000 f847 	bl	80051da <__retarget_lock_init_recursive>
 800514c:	f7ff ff96 	bl	800507c <__sfp_lock_release>
 8005150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005158:	6025      	str	r5, [r4, #0]
 800515a:	61a5      	str	r5, [r4, #24]
 800515c:	2208      	movs	r2, #8
 800515e:	4629      	mov	r1, r5
 8005160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005164:	f7ff fd44 	bl	8004bf0 <memset>
 8005168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800516c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005170:	4620      	mov	r0, r4
 8005172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005174:	3468      	adds	r4, #104	; 0x68
 8005176:	e7d9      	b.n	800512c <__sfp+0x1c>
 8005178:	2104      	movs	r1, #4
 800517a:	4638      	mov	r0, r7
 800517c:	f7ff ff62 	bl	8005044 <__sfmoreglue>
 8005180:	4604      	mov	r4, r0
 8005182:	6030      	str	r0, [r6, #0]
 8005184:	2800      	cmp	r0, #0
 8005186:	d1d5      	bne.n	8005134 <__sfp+0x24>
 8005188:	f7ff ff78 	bl	800507c <__sfp_lock_release>
 800518c:	230c      	movs	r3, #12
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	e7ee      	b.n	8005170 <__sfp+0x60>
 8005192:	bf00      	nop
 8005194:	0800564c 	.word	0x0800564c
 8005198:	ffff0001 	.word	0xffff0001

0800519c <_fwalk_reent>:
 800519c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a0:	4606      	mov	r6, r0
 80051a2:	4688      	mov	r8, r1
 80051a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051a8:	2700      	movs	r7, #0
 80051aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051ae:	f1b9 0901 	subs.w	r9, r9, #1
 80051b2:	d505      	bpl.n	80051c0 <_fwalk_reent+0x24>
 80051b4:	6824      	ldr	r4, [r4, #0]
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	d1f7      	bne.n	80051aa <_fwalk_reent+0xe>
 80051ba:	4638      	mov	r0, r7
 80051bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c0:	89ab      	ldrh	r3, [r5, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d907      	bls.n	80051d6 <_fwalk_reent+0x3a>
 80051c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051ca:	3301      	adds	r3, #1
 80051cc:	d003      	beq.n	80051d6 <_fwalk_reent+0x3a>
 80051ce:	4629      	mov	r1, r5
 80051d0:	4630      	mov	r0, r6
 80051d2:	47c0      	blx	r8
 80051d4:	4307      	orrs	r7, r0
 80051d6:	3568      	adds	r5, #104	; 0x68
 80051d8:	e7e9      	b.n	80051ae <_fwalk_reent+0x12>

080051da <__retarget_lock_init_recursive>:
 80051da:	4770      	bx	lr

080051dc <__retarget_lock_acquire_recursive>:
 80051dc:	4770      	bx	lr

080051de <__retarget_lock_release_recursive>:
 80051de:	4770      	bx	lr

080051e0 <__swhatbuf_r>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	460e      	mov	r6, r1
 80051e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e8:	2900      	cmp	r1, #0
 80051ea:	b096      	sub	sp, #88	; 0x58
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	da07      	bge.n	8005202 <__swhatbuf_r+0x22>
 80051f2:	2300      	movs	r3, #0
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	89b3      	ldrh	r3, [r6, #12]
 80051f8:	061a      	lsls	r2, r3, #24
 80051fa:	d410      	bmi.n	800521e <__swhatbuf_r+0x3e>
 80051fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005200:	e00e      	b.n	8005220 <__swhatbuf_r+0x40>
 8005202:	466a      	mov	r2, sp
 8005204:	f000 f970 	bl	80054e8 <_fstat_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	dbf2      	blt.n	80051f2 <__swhatbuf_r+0x12>
 800520c:	9a01      	ldr	r2, [sp, #4]
 800520e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005216:	425a      	negs	r2, r3
 8005218:	415a      	adcs	r2, r3
 800521a:	602a      	str	r2, [r5, #0]
 800521c:	e7ee      	b.n	80051fc <__swhatbuf_r+0x1c>
 800521e:	2340      	movs	r3, #64	; 0x40
 8005220:	2000      	movs	r0, #0
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	b016      	add	sp, #88	; 0x58
 8005226:	bd70      	pop	{r4, r5, r6, pc}

08005228 <__smakebuf_r>:
 8005228:	898b      	ldrh	r3, [r1, #12]
 800522a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800522c:	079d      	lsls	r5, r3, #30
 800522e:	4606      	mov	r6, r0
 8005230:	460c      	mov	r4, r1
 8005232:	d507      	bpl.n	8005244 <__smakebuf_r+0x1c>
 8005234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	6123      	str	r3, [r4, #16]
 800523c:	2301      	movs	r3, #1
 800523e:	6163      	str	r3, [r4, #20]
 8005240:	b002      	add	sp, #8
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	ab01      	add	r3, sp, #4
 8005246:	466a      	mov	r2, sp
 8005248:	f7ff ffca 	bl	80051e0 <__swhatbuf_r>
 800524c:	9900      	ldr	r1, [sp, #0]
 800524e:	4605      	mov	r5, r0
 8005250:	4630      	mov	r0, r6
 8005252:	f000 f879 	bl	8005348 <_malloc_r>
 8005256:	b948      	cbnz	r0, 800526c <__smakebuf_r+0x44>
 8005258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525c:	059a      	lsls	r2, r3, #22
 800525e:	d4ef      	bmi.n	8005240 <__smakebuf_r+0x18>
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	e7e3      	b.n	8005234 <__smakebuf_r+0xc>
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <__smakebuf_r+0x7c>)
 800526e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	6020      	str	r0, [r4, #0]
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	9b00      	ldr	r3, [sp, #0]
 800527c:	6163      	str	r3, [r4, #20]
 800527e:	9b01      	ldr	r3, [sp, #4]
 8005280:	6120      	str	r0, [r4, #16]
 8005282:	b15b      	cbz	r3, 800529c <__smakebuf_r+0x74>
 8005284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f93f 	bl	800550c <_isatty_r>
 800528e:	b128      	cbz	r0, 800529c <__smakebuf_r+0x74>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	81a3      	strh	r3, [r4, #12]
 800529c:	89a0      	ldrh	r0, [r4, #12]
 800529e:	4305      	orrs	r5, r0
 80052a0:	81a5      	strh	r5, [r4, #12]
 80052a2:	e7cd      	b.n	8005240 <__smakebuf_r+0x18>
 80052a4:	08005039 	.word	0x08005039

080052a8 <_free_r>:
 80052a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052aa:	2900      	cmp	r1, #0
 80052ac:	d048      	beq.n	8005340 <_free_r+0x98>
 80052ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b2:	9001      	str	r0, [sp, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f1a1 0404 	sub.w	r4, r1, #4
 80052ba:	bfb8      	it	lt
 80052bc:	18e4      	addlt	r4, r4, r3
 80052be:	f000 f947 	bl	8005550 <__malloc_lock>
 80052c2:	4a20      	ldr	r2, [pc, #128]	; (8005344 <_free_r+0x9c>)
 80052c4:	9801      	ldr	r0, [sp, #4]
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	4615      	mov	r5, r2
 80052ca:	b933      	cbnz	r3, 80052da <_free_r+0x32>
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	6014      	str	r4, [r2, #0]
 80052d0:	b003      	add	sp, #12
 80052d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d6:	f000 b941 	b.w	800555c <__malloc_unlock>
 80052da:	42a3      	cmp	r3, r4
 80052dc:	d90b      	bls.n	80052f6 <_free_r+0x4e>
 80052de:	6821      	ldr	r1, [r4, #0]
 80052e0:	1862      	adds	r2, r4, r1
 80052e2:	4293      	cmp	r3, r2
 80052e4:	bf04      	itt	eq
 80052e6:	681a      	ldreq	r2, [r3, #0]
 80052e8:	685b      	ldreq	r3, [r3, #4]
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	bf04      	itt	eq
 80052ee:	1852      	addeq	r2, r2, r1
 80052f0:	6022      	streq	r2, [r4, #0]
 80052f2:	602c      	str	r4, [r5, #0]
 80052f4:	e7ec      	b.n	80052d0 <_free_r+0x28>
 80052f6:	461a      	mov	r2, r3
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	b10b      	cbz	r3, 8005300 <_free_r+0x58>
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	d9fa      	bls.n	80052f6 <_free_r+0x4e>
 8005300:	6811      	ldr	r1, [r2, #0]
 8005302:	1855      	adds	r5, r2, r1
 8005304:	42a5      	cmp	r5, r4
 8005306:	d10b      	bne.n	8005320 <_free_r+0x78>
 8005308:	6824      	ldr	r4, [r4, #0]
 800530a:	4421      	add	r1, r4
 800530c:	1854      	adds	r4, r2, r1
 800530e:	42a3      	cmp	r3, r4
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	d1dd      	bne.n	80052d0 <_free_r+0x28>
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	6053      	str	r3, [r2, #4]
 800531a:	4421      	add	r1, r4
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	e7d7      	b.n	80052d0 <_free_r+0x28>
 8005320:	d902      	bls.n	8005328 <_free_r+0x80>
 8005322:	230c      	movs	r3, #12
 8005324:	6003      	str	r3, [r0, #0]
 8005326:	e7d3      	b.n	80052d0 <_free_r+0x28>
 8005328:	6825      	ldr	r5, [r4, #0]
 800532a:	1961      	adds	r1, r4, r5
 800532c:	428b      	cmp	r3, r1
 800532e:	bf04      	itt	eq
 8005330:	6819      	ldreq	r1, [r3, #0]
 8005332:	685b      	ldreq	r3, [r3, #4]
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	bf04      	itt	eq
 8005338:	1949      	addeq	r1, r1, r5
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	6054      	str	r4, [r2, #4]
 800533e:	e7c7      	b.n	80052d0 <_free_r+0x28>
 8005340:	b003      	add	sp, #12
 8005342:	bd30      	pop	{r4, r5, pc}
 8005344:	20000fec 	.word	0x20000fec

08005348 <_malloc_r>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	1ccd      	adds	r5, r1, #3
 800534c:	f025 0503 	bic.w	r5, r5, #3
 8005350:	3508      	adds	r5, #8
 8005352:	2d0c      	cmp	r5, #12
 8005354:	bf38      	it	cc
 8005356:	250c      	movcc	r5, #12
 8005358:	2d00      	cmp	r5, #0
 800535a:	4606      	mov	r6, r0
 800535c:	db01      	blt.n	8005362 <_malloc_r+0x1a>
 800535e:	42a9      	cmp	r1, r5
 8005360:	d903      	bls.n	800536a <_malloc_r+0x22>
 8005362:	230c      	movs	r3, #12
 8005364:	6033      	str	r3, [r6, #0]
 8005366:	2000      	movs	r0, #0
 8005368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536a:	f000 f8f1 	bl	8005550 <__malloc_lock>
 800536e:	4921      	ldr	r1, [pc, #132]	; (80053f4 <_malloc_r+0xac>)
 8005370:	680a      	ldr	r2, [r1, #0]
 8005372:	4614      	mov	r4, r2
 8005374:	b99c      	cbnz	r4, 800539e <_malloc_r+0x56>
 8005376:	4f20      	ldr	r7, [pc, #128]	; (80053f8 <_malloc_r+0xb0>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	b923      	cbnz	r3, 8005386 <_malloc_r+0x3e>
 800537c:	4621      	mov	r1, r4
 800537e:	4630      	mov	r0, r6
 8005380:	f000 f83c 	bl	80053fc <_sbrk_r>
 8005384:	6038      	str	r0, [r7, #0]
 8005386:	4629      	mov	r1, r5
 8005388:	4630      	mov	r0, r6
 800538a:	f000 f837 	bl	80053fc <_sbrk_r>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d123      	bne.n	80053da <_malloc_r+0x92>
 8005392:	230c      	movs	r3, #12
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	4630      	mov	r0, r6
 8005398:	f000 f8e0 	bl	800555c <__malloc_unlock>
 800539c:	e7e3      	b.n	8005366 <_malloc_r+0x1e>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	1b5b      	subs	r3, r3, r5
 80053a2:	d417      	bmi.n	80053d4 <_malloc_r+0x8c>
 80053a4:	2b0b      	cmp	r3, #11
 80053a6:	d903      	bls.n	80053b0 <_malloc_r+0x68>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	441c      	add	r4, r3
 80053ac:	6025      	str	r5, [r4, #0]
 80053ae:	e004      	b.n	80053ba <_malloc_r+0x72>
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	42a2      	cmp	r2, r4
 80053b4:	bf0c      	ite	eq
 80053b6:	600b      	streq	r3, [r1, #0]
 80053b8:	6053      	strne	r3, [r2, #4]
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 f8ce 	bl	800555c <__malloc_unlock>
 80053c0:	f104 000b 	add.w	r0, r4, #11
 80053c4:	1d23      	adds	r3, r4, #4
 80053c6:	f020 0007 	bic.w	r0, r0, #7
 80053ca:	1ac2      	subs	r2, r0, r3
 80053cc:	d0cc      	beq.n	8005368 <_malloc_r+0x20>
 80053ce:	1a1b      	subs	r3, r3, r0
 80053d0:	50a3      	str	r3, [r4, r2]
 80053d2:	e7c9      	b.n	8005368 <_malloc_r+0x20>
 80053d4:	4622      	mov	r2, r4
 80053d6:	6864      	ldr	r4, [r4, #4]
 80053d8:	e7cc      	b.n	8005374 <_malloc_r+0x2c>
 80053da:	1cc4      	adds	r4, r0, #3
 80053dc:	f024 0403 	bic.w	r4, r4, #3
 80053e0:	42a0      	cmp	r0, r4
 80053e2:	d0e3      	beq.n	80053ac <_malloc_r+0x64>
 80053e4:	1a21      	subs	r1, r4, r0
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 f808 	bl	80053fc <_sbrk_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1dd      	bne.n	80053ac <_malloc_r+0x64>
 80053f0:	e7cf      	b.n	8005392 <_malloc_r+0x4a>
 80053f2:	bf00      	nop
 80053f4:	20000fec 	.word	0x20000fec
 80053f8:	20000ff0 	.word	0x20000ff0

080053fc <_sbrk_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	; (8005418 <_sbrk_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fb fb54 	bl	8000ab4 <_sbrk>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_sbrk_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_sbrk_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	20001158 	.word	0x20001158

0800541c <__sread>:
 800541c:	b510      	push	{r4, lr}
 800541e:	460c      	mov	r4, r1
 8005420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005424:	f000 f8a0 	bl	8005568 <_read_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	bfab      	itete	ge
 800542c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800542e:	89a3      	ldrhlt	r3, [r4, #12]
 8005430:	181b      	addge	r3, r3, r0
 8005432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005436:	bfac      	ite	ge
 8005438:	6563      	strge	r3, [r4, #84]	; 0x54
 800543a:	81a3      	strhlt	r3, [r4, #12]
 800543c:	bd10      	pop	{r4, pc}

0800543e <__swrite>:
 800543e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005442:	461f      	mov	r7, r3
 8005444:	898b      	ldrh	r3, [r1, #12]
 8005446:	05db      	lsls	r3, r3, #23
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	4616      	mov	r6, r2
 800544e:	d505      	bpl.n	800545c <__swrite+0x1e>
 8005450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005454:	2302      	movs	r3, #2
 8005456:	2200      	movs	r2, #0
 8005458:	f000 f868 	bl	800552c <_lseek_r>
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	4632      	mov	r2, r6
 800546a:	463b      	mov	r3, r7
 800546c:	4628      	mov	r0, r5
 800546e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005472:	f000 b817 	b.w	80054a4 <_write_r>

08005476 <__sseek>:
 8005476:	b510      	push	{r4, lr}
 8005478:	460c      	mov	r4, r1
 800547a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547e:	f000 f855 	bl	800552c <_lseek_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	bf15      	itete	ne
 8005488:	6560      	strne	r0, [r4, #84]	; 0x54
 800548a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800548e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005492:	81a3      	strheq	r3, [r4, #12]
 8005494:	bf18      	it	ne
 8005496:	81a3      	strhne	r3, [r4, #12]
 8005498:	bd10      	pop	{r4, pc}

0800549a <__sclose>:
 800549a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549e:	f000 b813 	b.w	80054c8 <_close_r>
	...

080054a4 <_write_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d07      	ldr	r5, [pc, #28]	; (80054c4 <_write_r+0x20>)
 80054a8:	4604      	mov	r4, r0
 80054aa:	4608      	mov	r0, r1
 80054ac:	4611      	mov	r1, r2
 80054ae:	2200      	movs	r2, #0
 80054b0:	602a      	str	r2, [r5, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f7fb f822 	bl	80004fc <_write>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_write_r+0x1e>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_write_r+0x1e>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	20001158 	.word	0x20001158

080054c8 <_close_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	; (80054e4 <_close_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fb fab9 	bl	8000a4a <_close>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_close_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_close_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20001158 	.word	0x20001158

080054e8 <_fstat_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d07      	ldr	r5, [pc, #28]	; (8005508 <_fstat_r+0x20>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	602b      	str	r3, [r5, #0]
 80054f6:	f7fb fab4 	bl	8000a62 <_fstat>
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	d102      	bne.n	8005504 <_fstat_r+0x1c>
 80054fe:	682b      	ldr	r3, [r5, #0]
 8005500:	b103      	cbz	r3, 8005504 <_fstat_r+0x1c>
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	bd38      	pop	{r3, r4, r5, pc}
 8005506:	bf00      	nop
 8005508:	20001158 	.word	0x20001158

0800550c <_isatty_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d06      	ldr	r5, [pc, #24]	; (8005528 <_isatty_r+0x1c>)
 8005510:	2300      	movs	r3, #0
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	f7fb fab3 	bl	8000a82 <_isatty>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_isatty_r+0x1a>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_isatty_r+0x1a>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	20001158 	.word	0x20001158

0800552c <_lseek_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4d07      	ldr	r5, [pc, #28]	; (800554c <_lseek_r+0x20>)
 8005530:	4604      	mov	r4, r0
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	2200      	movs	r2, #0
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	f7fb faac 	bl	8000a98 <_lseek>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_lseek_r+0x1e>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_lseek_r+0x1e>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20001158 	.word	0x20001158

08005550 <__malloc_lock>:
 8005550:	4801      	ldr	r0, [pc, #4]	; (8005558 <__malloc_lock+0x8>)
 8005552:	f7ff be43 	b.w	80051dc <__retarget_lock_acquire_recursive>
 8005556:	bf00      	nop
 8005558:	20001150 	.word	0x20001150

0800555c <__malloc_unlock>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__malloc_unlock+0x8>)
 800555e:	f7ff be3e 	b.w	80051de <__retarget_lock_release_recursive>
 8005562:	bf00      	nop
 8005564:	20001150 	.word	0x20001150

08005568 <_read_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d07      	ldr	r5, [pc, #28]	; (8005588 <_read_r+0x20>)
 800556c:	4604      	mov	r4, r0
 800556e:	4608      	mov	r0, r1
 8005570:	4611      	mov	r1, r2
 8005572:	2200      	movs	r2, #0
 8005574:	602a      	str	r2, [r5, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f7fb fa4a 	bl	8000a10 <_read>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_read_r+0x1e>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_read_r+0x1e>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20001158 	.word	0x20001158

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
