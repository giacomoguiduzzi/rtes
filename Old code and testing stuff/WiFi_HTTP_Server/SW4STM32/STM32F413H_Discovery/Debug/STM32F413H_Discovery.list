
STM32F413H_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043ac  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008f88  08008f88  00018f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  20000000  08008f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001064  200000f4  0800908c  000200f4  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20001158  0800908c  00021158  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018abc  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000378b  00000000  00000000  00038be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000a787  00000000  00000000  0003c36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ba0  00000000  00000000  00046af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001020  00000000  00000000  00047698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00024ff5  00000000  00000000  000486b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012cd8  00000000  00000000  0006d6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e1e7a  00000000  00000000  00080385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001621ff  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003020  00000000  00000000  00162254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  00165274  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  00165340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000f4 	.word	0x200000f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004bc4 	.word	0x08004bc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f8 	.word	0x200000f8
 800021c:	08004bc4 	.word	0x08004bc4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 80005c8:	b510      	push	{r4, lr}
 80005ca:	b090      	sub	sp, #64	; 0x40
 80005cc:	4604      	mov	r4, r0
 80005ce:	9101      	str	r1, [sp, #4]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;
  
  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 80005d0:	4828      	ldr	r0, [pc, #160]	; (8000674 <SendWebPage+0xac>)
 80005d2:	4929      	ldr	r1, [pc, #164]	; (8000678 <SendWebPage+0xb0>)
 80005d4:	f003 f8a3 	bl	800371e <strcpy>
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 80005d8:	4928      	ldr	r1, [pc, #160]	; (800067c <SendWebPage+0xb4>)
 80005da:	4826      	ldr	r0, [pc, #152]	; (8000674 <SendWebPage+0xac>)
 80005dc:	f003 f890 	bl	8003700 <strcat>
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80005e0:	4927      	ldr	r1, [pc, #156]	; (8000680 <SendWebPage+0xb8>)
 80005e2:	4824      	ldr	r0, [pc, #144]	; (8000674 <SendWebPage+0xac>)
 80005e4:	f003 f88c 	bl	8003700 <strcat>
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 80005e8:	4926      	ldr	r1, [pc, #152]	; (8000684 <SendWebPage+0xbc>)
 80005ea:	4822      	ldr	r0, [pc, #136]	; (8000674 <SendWebPage+0xac>)
 80005ec:	f003 f888 	bl	8003700 <strcat>
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 80005f0:	4925      	ldr	r1, [pc, #148]	; (8000688 <SendWebPage+0xc0>)
 80005f2:	4820      	ldr	r0, [pc, #128]	; (8000674 <SendWebPage+0xac>)
 80005f4:	f003 f884 	bl	8003700 <strcat>
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" size=2 value=\"");
 80005f8:	4924      	ldr	r1, [pc, #144]	; (800068c <SendWebPage+0xc4>)
 80005fa:	481e      	ldr	r0, [pc, #120]	; (8000674 <SendWebPage+0xac>)
 80005fc:	f003 f880 	bl	8003700 <strcat>
  sprintf((char *)temp, "%d", temperature);
 8000600:	9a01      	ldr	r2, [sp, #4]
 8000602:	4923      	ldr	r1, [pc, #140]	; (8000690 <SendWebPage+0xc8>)
 8000604:	a803      	add	r0, sp, #12
 8000606:	f003 f85b 	bl	80036c0 <siprintf>
  strcat((char *)http, (char *)temp);
 800060a:	a903      	add	r1, sp, #12
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <SendWebPage+0xac>)
 800060e:	f003 f877 	bl	8003700 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8000612:	4920      	ldr	r1, [pc, #128]	; (8000694 <SendWebPage+0xcc>)
 8000614:	4817      	ldr	r0, [pc, #92]	; (8000674 <SendWebPage+0xac>)
 8000616:	f003 f873 	bl	8003700 <strcat>
  
  if (ledIsOn) 
 800061a:	b324      	cbz	r4, 8000666 <SendWebPage+0x9e>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 800061c:	491e      	ldr	r1, [pc, #120]	; (8000698 <SendWebPage+0xd0>)
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <SendWebPage+0xac>)
 8000620:	f003 f86e 	bl	8003700 <strcat>
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8000624:	491d      	ldr	r1, [pc, #116]	; (800069c <SendWebPage+0xd4>)
  } 
  else 
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8000626:	4813      	ldr	r0, [pc, #76]	; (8000674 <SendWebPage+0xac>)
 8000628:	f003 f86a 	bl	8003700 <strcat>
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 800062c:	491c      	ldr	r1, [pc, #112]	; (80006a0 <SendWebPage+0xd8>)
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <SendWebPage+0xac>)
 8000630:	f003 f866 	bl	8003700 <strcat>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8000634:	491b      	ldr	r1, [pc, #108]	; (80006a4 <SendWebPage+0xdc>)
 8000636:	480f      	ldr	r0, [pc, #60]	; (8000674 <SendWebPage+0xac>)
 8000638:	f003 f862 	bl	8003700 <strcat>
  
  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength); 
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <SendWebPage+0xac>)
 800063e:	f7ff fdef 	bl	8000220 <strlen>
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <SendWebPage+0xac>)
 8000644:	b282      	uxth	r2, r0
 8000646:	f10d 030a 	add.w	r3, sp, #10
 800064a:	2000      	movs	r0, #0
 800064c:	f001 f822 	bl	8001694 <WIFI_SendData>
  
  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8000650:	b938      	cbnz	r0, 8000662 <SendWebPage+0x9a>
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <SendWebPage+0xac>)
 8000654:	f7ff fde4 	bl	8000220 <strlen>
 8000658:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  {
    ret = WIFI_STATUS_ERROR;
 800065c:	1a18      	subs	r0, r3, r0
 800065e:	bf18      	it	ne
 8000660:	2001      	movne	r0, #1
  }
    
  return ret;
}
 8000662:	b010      	add	sp, #64	; 0x40
 8000664:	bd10      	pop	{r4, pc}
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8000666:	4910      	ldr	r1, [pc, #64]	; (80006a8 <SendWebPage+0xe0>)
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <SendWebPage+0xac>)
 800066a:	f003 f849 	bl	8003700 <strcat>
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 800066e:	490f      	ldr	r1, [pc, #60]	; (80006ac <SendWebPage+0xe4>)
 8000670:	e7d9      	b.n	8000626 <SendWebPage+0x5e>
 8000672:	bf00      	nop
 8000674:	20000110 	.word	0x20000110
 8000678:	080088e4 	.word	0x080088e4
 800067c:	08008923 	.word	0x08008923
 8000680:	08008934 	.word	0x08008934
 8000684:	08008956 	.word	0x08008956
 8000688:	08008993 	.word	0x08008993
 800068c:	080089a0 	.word	0x080089a0
 8000690:	08008bd9 	.word	0x08008bd9
 8000694:	080089e7 	.word	0x080089e7
 8000698:	080089f8 	.word	0x080089f8
 800069c:	08008a2f 	.word	0x08008a2f
 80006a0:	08008ae2 	.word	0x08008ae2
 80006a4:	08008b12 	.word	0x08008b12
 80006a8:	08008a6d 	.word	0x08008a6d
 80006ac:	08008aab 	.word	0x08008aab

080006b0 <TEMP_SENSOR_GetValue>:
/**
  * @brief  Get JunctionTemp level in 12 bits.
  * @retval JunctionTemp level(0..0xFFF) / 0xFFFFFFFF : Error
  */
static uint32_t TEMP_SENSOR_GetValue(void)
{   
 80006b0:	b508      	push	{r3, lr}
 
  if(HAL_ADC_Start(&AdcHandle) == HAL_OK)
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <TEMP_SENSOR_GetValue+0x48>)
 80006b4:	f001 fe8a 	bl	80023cc <HAL_ADC_Start>
 80006b8:	b110      	cbz	r0, 80006c0 <TEMP_SENSOR_GetValue+0x10>
    if(HAL_ADC_PollForConversion(&AdcHandle, 1000)== HAL_OK)
    {
      return ((((HAL_ADC_GetValue(&AdcHandle) * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
    } 
  }
  return  0xFFFFFFFF;
 80006ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006be:	bd08      	pop	{r3, pc}
    if(HAL_ADC_PollForConversion(&AdcHandle, 1000)== HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <TEMP_SENSOR_GetValue+0x48>)
 80006c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c6:	f001 fef1 	bl	80024ac <HAL_ADC_PollForConversion>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d1f5      	bne.n	80006ba <TEMP_SENSOR_GetValue+0xa>
      return ((((HAL_ADC_GetValue(&AdcHandle) * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <TEMP_SENSOR_GetValue+0x48>)
 80006d0:	f001 ff3f 	bl	8002552 <HAL_ADC_GetValue>
 80006d4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80006d8:	4358      	muls	r0, r3
 80006da:	f640 73ff 	movw	r3, #4095	; 0xfff
 80006de:	fbb0 f3f3 	udiv	r3, r0, r3
 80006e2:	200a      	movs	r0, #10
 80006e4:	4358      	muls	r0, r3
 80006e6:	f5a0 50ed 	sub.w	r0, r0, #7584	; 0x1da0
 80006ea:	2319      	movs	r3, #25
 80006ec:	3810      	subs	r0, #16
 80006ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80006f2:	4418      	add	r0, r3
 80006f4:	e7e3      	b.n	80006be <TEMP_SENSOR_GetValue+0xe>
 80006f6:	bf00      	nop
 80006f8:	20000510 	.word	0x20000510

080006fc <main>:
{
 80006fc:	b580      	push	{r7, lr}
  uint8_t modulestr[20] = {0};
 80006fe:	2400      	movs	r4, #0
{
 8000700:	b09e      	sub	sp, #120	; 0x78
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4dbd      	ldr	r5, [pc, #756]	; (80009f8 <main+0x2fc>)
  uint8_t modulestr[20] = {0};
 8000704:	9407      	str	r4, [sp, #28]
 8000706:	2210      	movs	r2, #16
 8000708:	4621      	mov	r1, r4
 800070a:	a808      	add	r0, sp, #32
 800070c:	f002 ffd0 	bl	80036b0 <memset>
  HAL_Init();
 8000710:	f001 fd74 	bl	80021fc <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	9405      	str	r4, [sp, #20]
 8000716:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	642b      	str	r3, [r5, #64]	; 0x40
 800071e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	9305      	str	r3, [sp, #20]
 8000726:	9b05      	ldr	r3, [sp, #20]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	4bb4      	ldr	r3, [pc, #720]	; (80009fc <main+0x300>)
 800072a:	9406      	str	r4, [sp, #24]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073a:	9306      	str	r3, [sp, #24]
 800073c:	9b06      	ldr	r3, [sp, #24]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800073e:	2601      	movs	r6, #1
 8000740:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000744:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000746:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	e9cd 4317 	strd	r4, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000752:	2208      	movs	r2, #8
 8000754:	23c8      	movs	r3, #200	; 0xc8
 8000756:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 2;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800075a:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000762:	941b      	str	r4, [sp, #108]	; 0x6c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000764:	f002 f998 	bl	8002a98 <HAL_RCC_OscConfig>

  if(ret != HAL_OK)
 8000768:	b100      	cbz	r0, 800076c <main+0x70>
  * @retval None
  */
static void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 800076a:	e7fe      	b.n	800076a <main+0x6e>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800076c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	900e      	str	r0, [sp, #56]	; 0x38
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 800077c:	2103      	movs	r1, #3
 800077e:	a80c      	add	r0, sp, #48	; 0x30
 8000780:	f002 f8ee 	bl	8002960 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000784:	4604      	mov	r4, r0
 8000786:	b100      	cbz	r0, 800078a <main+0x8e>
  while(1)
 8000788:	e7fe      	b.n	8000788 <main+0x8c>
  BSP_LED_Init(LED3);
 800078a:	f001 fa01 	bl	8001b90 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800078e:	4630      	mov	r0, r6
 8000790:	f001 f9fe 	bl	8001b90 <BSP_LED_Init>
  __HAL_RCC_ADC1_CLK_ENABLE();
 8000794:	940c      	str	r4, [sp, #48]	; 0x30
 8000796:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  AdcHandle.Instance          = ADC1;
 8000798:	4a99      	ldr	r2, [pc, #612]	; (8000a00 <main+0x304>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 800079a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079e:	646b      	str	r3, [r5, #68]	; 0x44
 80007a0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a6:	930c      	str	r3, [sp, #48]	; 0x30
 80007a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  AdcHandle.Instance          = ADC1;
 80007aa:	4b96      	ldr	r3, [pc, #600]	; (8000a04 <main+0x308>)
  AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 80007ac:	f8c3 4408 	str.w	r4, [r3, #1032]	; 0x408
  AdcHandle.Init.ScanConvMode          = DISABLE;                       /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 80007b0:	f8c3 4410 	str.w	r4, [r3, #1040]	; 0x410
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 80007b4:	f883 4420 	strb.w	r4, [r3, #1056]	; 0x420
  AdcHandle.Init.NbrOfDiscConversion   = 0;
 80007b8:	f8c3 4424 	str.w	r4, [r3, #1060]	; 0x424
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;        /* Conversion start not trigged by an external event */
 80007bc:	f8c3 442c 	str.w	r4, [r3, #1068]	; 0x42c
  AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 80007c0:	f8c3 4428 	str.w	r4, [r3, #1064]	; 0x428
  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80007c4:	f8c3 440c 	str.w	r4, [r3, #1036]	; 0x40c
  AdcHandle.Init.DMAContinuousRequests = DISABLE;
 80007c8:	f883 4430 	strb.w	r4, [r3, #1072]	; 0x430
  AdcHandle.Init.EOCSelection          = DISABLE;
 80007cc:	f8c3 4414 	str.w	r4, [r3, #1044]	; 0x414
  if (HAL_ADC_Init(&AdcHandle)== HAL_OK)
 80007d0:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  AdcHandle.Instance          = ADC1;
 80007d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (HAL_ADC_Init(&AdcHandle)== HAL_OK)
 80007d8:	4620      	mov	r0, r4
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80007da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  AdcHandle.Init.ContinuousConvMode    = ENABLE;                        /* Continuous mode enabled to have continuous conversion */
 80007e2:	f883 6418 	strb.w	r6, [r3, #1048]	; 0x418
  AdcHandle.Init.NbrOfConversion       = 1;
 80007e6:	f8c3 641c 	str.w	r6, [r3, #1052]	; 0x41c
  if (HAL_ADC_Init(&AdcHandle)== HAL_OK)
 80007ea:	f001 fd49 	bl	8002280 <HAL_ADC_Init>
 80007ee:	b948      	cbnz	r0, 8000804 <main+0x108>
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007f0:	4b85      	ldr	r3, [pc, #532]	; (8000a08 <main+0x30c>)
    sConfig.Rank = 1;
 80007f2:	e9cd 3611 	strd	r3, r6, [sp, #68]	; 0x44
    sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007f6:	2303      	movs	r3, #3
    sConfig.Offset = 0;
 80007f8:	e9cd 3013 	strd	r3, r0, [sp, #76]	; 0x4c
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) == HAL_OK)
 80007fc:	a911      	add	r1, sp, #68	; 0x44
 80007fe:	4620      	mov	r0, r4
 8000800:	f001 feaa 	bl	8002558 <HAL_ADC_ConfigChannel>
  BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE_ROT180);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 fc55 	bl	80020b4 <BSP_LCD_InitEx>
  BSP_LCD_DisplayOn();
 800080a:	f001 fc07 	bl	800201c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800080e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000812:	f001 fbb7 	bl	8001f84 <BSP_LCD_Clear>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000816:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800081a:	f001 fbb3 	bl	8001f84 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800081e:	201f      	movs	r0, #31
 8000820:	f001 fac2 	bl	8001da8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8000824:	201f      	movs	r0, #31
 8000826:	f001 fab9 	bl	8001d9c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), (BSP_LCD_GetYSize() -200));
 800082a:	f001 faa7 	bl	8001d7c <BSP_LCD_GetXSize>
 800082e:	4604      	mov	r4, r0
 8000830:	f001 faac 	bl	8001d8c <BSP_LCD_GetYSize>
 8000834:	2100      	movs	r1, #0
 8000836:	38c8      	subs	r0, #200	; 0xc8
 8000838:	b283      	uxth	r3, r0
 800083a:	b2a2      	uxth	r2, r4
 800083c:	4608      	mov	r0, r1
 800083e:	f001 fbb9 	bl	8001fb4 <BSP_LCD_FillRect>
  BSP_LCD_SetFont(&Font16);
 8000842:	4872      	ldr	r0, [pc, #456]	; (8000a0c <main+0x310>)
 8000844:	4c72      	ldr	r4, [pc, #456]	; (8000a10 <main+0x314>)
 8000846:	f001 fab5 	bl	8001db4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800084a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800084e:	f001 faa5 	bl	8001d9c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"WIFI Web", CENTER_MODE );
 8000852:	210a      	movs	r1, #10
 8000854:	4608      	mov	r0, r1
 8000856:	4a6f      	ldr	r2, [pc, #444]	; (8000a14 <main+0x318>)
 8000858:	2301      	movs	r3, #1
 800085a:	f001 fb0f 	bl	8001e7c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(10, 23, (uint8_t *)"Server demonstration", CENTER_MODE );   
 800085e:	4a6e      	ldr	r2, [pc, #440]	; (8000a18 <main+0x31c>)
 8000860:	2301      	movs	r3, #1
 8000862:	2117      	movs	r1, #23
 8000864:	200a      	movs	r0, #10
 8000866:	f001 fb09 	bl	8001e7c <BSP_LCD_DisplayStringAt>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800086a:	f000 fea1 	bl	80015b0 <WIFI_Init>
 800086e:	2800      	cmp	r0, #0
 8000870:	f040 80ba 	bne.w	80009e8 <main+0x2ec>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000878:	f001 fa96 	bl	8001da8 <BSP_LCD_SetBackColor>
      if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800087c:	4d67      	ldr	r5, [pc, #412]	; (8000a1c <main+0x320>)
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800087e:	201f      	movs	r0, #31
 8000880:	f001 fa8c 	bl	8001d9c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"ES-WIFI Initialized.");
 8000884:	2004      	movs	r0, #4
 8000886:	4966      	ldr	r1, [pc, #408]	; (8000a20 <main+0x324>)
 8000888:	f001 fb4a 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
      if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800088c:	4628      	mov	r0, r5
 800088e:	f000 fec7 	bl	8001620 <WIFI_GetMAC_Address>
 8000892:	2800      	cmp	r0, #0
 8000894:	f040 8089 	bne.w	80009aa <main+0x2ae>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8000898:	f001 fa80 	bl	8001d9c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(6, (uint8_t *)"es-wifi MAC Address:");
 800089c:	4961      	ldr	r1, [pc, #388]	; (8000a24 <main+0x328>)
 800089e:	2006      	movs	r0, #6
 80008a0:	f001 fb3e 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
      sprintf((char*)modulestr,"%X:%X:%X:%X:%X:%X.", MAC_Addr[0],
 80008a4:	796b      	ldrb	r3, [r5, #5]
 80008a6:	9303      	str	r3, [sp, #12]
 80008a8:	792b      	ldrb	r3, [r5, #4]
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	78eb      	ldrb	r3, [r5, #3]
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	78ab      	ldrb	r3, [r5, #2]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	495c      	ldr	r1, [pc, #368]	; (8000a28 <main+0x32c>)
 80008b6:	786b      	ldrb	r3, [r5, #1]
 80008b8:	782a      	ldrb	r2, [r5, #0]
 80008ba:	a807      	add	r0, sp, #28
 80008bc:	f002 ff00 	bl	80036c0 <siprintf>
      BSP_LCD_DisplayStringAtLine(7, (uint8_t *) modulestr);
 80008c0:	a907      	add	r1, sp, #28
 80008c2:	2007      	movs	r0, #7
 80008c4:	f001 fb2c 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
   if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80008c8:	4958      	ldr	r1, [pc, #352]	; (8000a2c <main+0x330>)
 80008ca:	4859      	ldr	r0, [pc, #356]	; (8000a30 <main+0x334>)
 80008cc:	2203      	movs	r2, #3
 80008ce:	f000 fe93 	bl	80015f8 <WIFI_Connect>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	f040 8081 	bne.w	80009da <main+0x2de>
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80008d8:	201f      	movs	r0, #31
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80008da:	4d56      	ldr	r5, [pc, #344]	; (8000a34 <main+0x338>)
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80008dc:	f001 fa5e 	bl	8001d9c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(9, (uint8_t *)"es-wifi connected");
 80008e0:	4955      	ldr	r1, [pc, #340]	; (8000a38 <main+0x33c>)
 80008e2:	2009      	movs	r0, #9
 80008e4:	f001 fb1c 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80008e8:	4628      	mov	r0, r5
 80008ea:	f000 fea5 	bl	8001638 <WIFI_GetIP_Address>
 80008ee:	4606      	mov	r6, r0
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d166      	bne.n	80009c2 <main+0x2c6>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);         
 80008f4:	f001 fa52 	bl	8001d9c <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"es-wifi IP Address :");
 80008f8:	4950      	ldr	r1, [pc, #320]	; (8000a3c <main+0x340>)
 80008fa:	200a      	movs	r0, #10
 80008fc:	f001 fb10 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
        sprintf((char*)modulestr,"%d.%d.%d.%d",  IP_Addr[0],
 8000900:	78eb      	ldrb	r3, [r5, #3]
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	78ab      	ldrb	r3, [r5, #2]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	786b      	ldrb	r3, [r5, #1]
 800090a:	782a      	ldrb	r2, [r5, #0]
 800090c:	494c      	ldr	r1, [pc, #304]	; (8000a40 <main+0x344>)
 800090e:	a807      	add	r0, sp, #28
 8000910:	f002 fed6 	bl	80036c0 <siprintf>
        BSP_LCD_DisplayStringAtLine(11, (uint8_t *) modulestr);
 8000914:	a907      	add	r1, sp, #28
 8000916:	200b      	movs	r0, #11
 8000918:	f001 fb02 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
        BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800091c:	201f      	movs	r0, #31
 800091e:	f001 fa3d 	bl	8001d9c <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"Start HTTP Server... ");
 8000922:	4948      	ldr	r1, [pc, #288]	; (8000a44 <main+0x348>)
 8000924:	200d      	movs	r0, #13
 8000926:	f001 fafb 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Wait for connection...  ");
 800092a:	4947      	ldr	r1, [pc, #284]	; (8000a48 <main+0x34c>)
 800092c:	200e      	movs	r0, #14
 800092e:	f001 faf7 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
        State = WS_IDLE;
 8000932:	7026      	strb	r6, [r4, #0]
    WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 8000934:	4f45      	ldr	r7, [pc, #276]	; (8000a4c <main+0x350>)
      BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"ERROR : Connection cannot be established");
 8000936:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8000a70 <main+0x374>
      BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"HTTP Server Started");
 800093a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8000a74 <main+0x378>
  switch(State)
 800093e:	7825      	ldrb	r5, [r4, #0]
 8000940:	2d00      	cmp	r5, #0
 8000942:	f000 8099 	beq.w	8000a78 <main+0x37c>
 8000946:	2d01      	cmp	r5, #1
 8000948:	d1fa      	bne.n	8000940 <main+0x244>
    WIFI_ReceiveData(Socket, resp, 1200, &respLen);
 800094a:	4e41      	ldr	r6, [pc, #260]	; (8000a50 <main+0x354>)
 800094c:	4941      	ldr	r1, [pc, #260]	; (8000a54 <main+0x358>)
 800094e:	7920      	ldrb	r0, [r4, #4]
 8000950:	4633      	mov	r3, r6
 8000952:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000956:	f000 feaf 	bl	80016b8 <WIFI_ReceiveData>
    if( respLen > 0)
 800095a:	8833      	ldrh	r3, [r6, #0]
 800095c:	b1c3      	cbz	r3, 8000990 <main+0x294>
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 800095e:	493e      	ldr	r1, [pc, #248]	; (8000a58 <main+0x35c>)
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <main+0x358>)
 8000962:	f002 fef7 	bl	8003754 <strstr>
 8000966:	4606      	mov	r6, r0
 8000968:	2800      	cmp	r0, #0
 800096a:	f000 80a3 	beq.w	8000ab4 <main+0x3b8>
        temp = TEMP_SENSOR_GetValue();
 800096e:	f7ff fe9f 	bl	80006b0 <TEMP_SENSOR_GetValue>
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000972:	b2c1      	uxtb	r1, r0
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fe27 	bl	80005c8 <SendWebPage>
 800097a:	b148      	cbz	r0, 8000990 <main+0x294>
      BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 800097c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000980:	f001 fa0c 	bl	8001d9c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"ERROR : Cannot send web page");
 8000984:	4935      	ldr	r1, [pc, #212]	; (8000a5c <main+0x360>)
 8000986:	200e      	movs	r0, #14
 8000988:	f001 faca 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
          State = WS_ERROR;
 800098c:	2303      	movs	r3, #3
 800098e:	7023      	strb	r3, [r4, #0]
    if(WIFI_StopServer(Socket) == WIFI_STATUS_OK)
 8000990:	6860      	ldr	r0, [r4, #4]
 8000992:	f000 fe75 	bl	8001680 <WIFI_StopServer>
 8000996:	4601      	mov	r1, r0
 8000998:	2800      	cmp	r0, #0
 800099a:	f040 8089 	bne.w	8000ab0 <main+0x3b4>
      WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 800099e:	6860      	ldr	r0, [r4, #4]
 80009a0:	2350      	movs	r3, #80	; 0x50
 80009a2:	463a      	mov	r2, r7
 80009a4:	f000 fe56 	bl	8001654 <WIFI_StartServer>
 80009a8:	e7c9      	b.n	800093e <main+0x242>
        BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80009aa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009ae:	f001 f9f5 	bl	8001d9c <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(6, (uint8_t *)"CANNOT get MAC address");
 80009b2:	492b      	ldr	r1, [pc, #172]	; (8000a60 <main+0x364>)
 80009b4:	2006      	movs	r0, #6
 80009b6:	f001 fab3 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
        BSP_LED_On(LED4);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f001 f91e 	bl	8001bfc <BSP_LED_On>
 80009c0:	e782      	b.n	80008c8 <main+0x1cc>
        BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80009c2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009c6:	f001 f9e9 	bl	8001d9c <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"es-wifi CANNOT get IP address");
 80009ca:	4926      	ldr	r1, [pc, #152]	; (8000a64 <main+0x368>)
 80009cc:	200c      	movs	r0, #12
      BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"es-wifi NOT connected\n");
 80009ce:	f001 faa7 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
      BSP_LED_On(LED4);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f001 f912 	bl	8001bfc <BSP_LED_On>
 80009d8:	e7ac      	b.n	8000934 <main+0x238>
      BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80009da:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009de:	f001 f9dd 	bl	8001d9c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(11, (uint8_t *)"es-wifi NOT connected\n");
 80009e2:	4921      	ldr	r1, [pc, #132]	; (8000a68 <main+0x36c>)
 80009e4:	200b      	movs	r0, #11
 80009e6:	e7f2      	b.n	80009ce <main+0x2d2>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80009e8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009ec:	f001 f9d6 	bl	8001d9c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(4, (uint8_t *)"WIFI cannot be initialized.\n");
 80009f0:	491e      	ldr	r1, [pc, #120]	; (8000a6c <main+0x370>)
 80009f2:	2004      	movs	r0, #4
 80009f4:	e7eb      	b.n	80009ce <main+0x2d2>
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000
 8000a00:	40012000 	.word	0x40012000
 8000a04:	20000110 	.word	0x20000110
 8000a08:	10000012 	.word	0x10000012
 8000a0c:	20000074 	.word	0x20000074
 8000a10:	20000000 	.word	0x20000000
 8000a14:	08008b25 	.word	0x08008b25
 8000a18:	08008b2e 	.word	0x08008b2e
 8000a1c:	2000096e 	.word	0x2000096e
 8000a20:	08008b43 	.word	0x08008b43
 8000a24:	08008b58 	.word	0x08008b58
 8000a28:	08008b6d 	.word	0x08008b6d
 8000a2c:	08008b97 	.word	0x08008b97
 8000a30:	08008ba2 	.word	0x08008ba2
 8000a34:	20000974 	.word	0x20000974
 8000a38:	08008ba9 	.word	0x08008ba9
 8000a3c:	08008bbb 	.word	0x08008bbb
 8000a40:	08008bd0 	.word	0x08008bd0
 8000a44:	08008bdc 	.word	0x08008bdc
 8000a48:	08008bf2 	.word	0x08008bf2
 8000a4c:	08008922 	.word	0x08008922
 8000a50:	2000096c 	.word	0x2000096c
 8000a54:	20000558 	.word	0x20000558
 8000a58:	08008c9a 	.word	0x08008c9a
 8000a5c:	08008c9e 	.word	0x08008c9e
 8000a60:	08008b80 	.word	0x08008b80
 8000a64:	08008c0b 	.word	0x08008c0b
 8000a68:	08008c29 	.word	0x08008c29
 8000a6c:	08008c40 	.word	0x08008c40
 8000a70:	08008c71 	.word	0x08008c71
 8000a74:	08008c5d 	.word	0x08008c5d
    WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 8000a78:	2350      	movs	r3, #80	; 0x50
 8000a7a:	463a      	mov	r2, r7
 8000a7c:	4629      	mov	r1, r5
 8000a7e:	4628      	mov	r0, r5
    Socket = 0;
 8000a80:	6065      	str	r5, [r4, #4]
    WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 8000a82:	f000 fde7 	bl	8001654 <WIFI_StartServer>
    if(Socket != -1)
 8000a86:	6863      	ldr	r3, [r4, #4]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	d009      	beq.n	8000aa0 <main+0x3a4>
      BSP_LCD_ClearStringLine(14);
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f001 faab 	bl	8001fe8 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"HTTP Server Started");
 8000a92:	4649      	mov	r1, r9
 8000a94:	200d      	movs	r0, #13
 8000a96:	f001 fa43 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
      State = WS_CONNECTED;
 8000a9a:	2301      	movs	r3, #1
      State = WS_ERROR;  
 8000a9c:	7023      	strb	r3, [r4, #0]
 8000a9e:	e74e      	b.n	800093e <main+0x242>
      BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8000aa0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000aa4:	f001 f97a 	bl	8001d9c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(13, (uint8_t *)"ERROR : Connection cannot be established");
 8000aa8:	4641      	mov	r1, r8
 8000aaa:	200d      	movs	r0, #13
 8000aac:	f001 fa38 	bl	8001f20 <BSP_LCD_DisplayStringAtLine>
      State = WS_ERROR;  
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e7f3      	b.n	8000a9c <main+0x3a0>
      else if(strstr((char *)resp, "POST"))/* POST: received info */
 8000ab4:	4913      	ldr	r1, [pc, #76]	; (8000b04 <main+0x408>)
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <main+0x40c>)
 8000ab8:	f002 fe4c 	bl	8003754 <strstr>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	f43f af67 	beq.w	8000990 <main+0x294>
          if(strstr((char *)resp, "radio"))
 8000ac2:	4912      	ldr	r1, [pc, #72]	; (8000b0c <main+0x410>)
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <main+0x40c>)
 8000ac6:	f002 fe45 	bl	8003754 <strstr>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	f43f af60 	beq.w	8000990 <main+0x294>
            if(strstr((char *)resp, "radio=0"))
 8000ad0:	490f      	ldr	r1, [pc, #60]	; (8000b10 <main+0x414>)
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <main+0x40c>)
 8000ad4:	f002 fe3e 	bl	8003754 <strstr>
 8000ad8:	4682      	mov	sl, r0
 8000ada:	b140      	cbz	r0, 8000aee <main+0x3f2>
              BSP_LED_Off(LED3);
 8000adc:	4630      	mov	r0, r6
 8000ade:	f001 f89b 	bl	8001c18 <BSP_LED_Off>
              LedState = 0;
 8000ae2:	4635      	mov	r5, r6
            temp = TEMP_SENSOR_GetValue();
 8000ae4:	f7ff fde4 	bl	80006b0 <TEMP_SENSOR_GetValue>
            if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8000ae8:	b2c1      	uxtb	r1, r0
 8000aea:	4628      	mov	r0, r5
 8000aec:	e743      	b.n	8000976 <main+0x27a>
            else if(strstr((char *)resp, "radio=1"))
 8000aee:	4909      	ldr	r1, [pc, #36]	; (8000b14 <main+0x418>)
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <main+0x40c>)
 8000af2:	f002 fe2f 	bl	8003754 <strstr>
 8000af6:	b118      	cbz	r0, 8000b00 <main+0x404>
              BSP_LED_On(LED3);
 8000af8:	4650      	mov	r0, sl
 8000afa:	f001 f87f 	bl	8001bfc <BSP_LED_On>
 8000afe:	e7f1      	b.n	8000ae4 <main+0x3e8>
  uint8_t LedState = 0, temp;
 8000b00:	4605      	mov	r5, r0
 8000b02:	e7ef      	b.n	8000ae4 <main+0x3e8>
 8000b04:	08008cbb 	.word	0x08008cbb
 8000b08:	20000558 	.word	0x20000558
 8000b0c:	08008cc0 	.word	0x08008cc0
 8000b10:	08008cc6 	.word	0x08008cc6
 8000b14:	08008cce 	.word	0x08008cce

08000b18 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000b18:	4770      	bx	lr

08000b1a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler>

08000b1c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler>

08000b1e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler>

08000b20 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler>

08000b22 <SVC_Handler>:
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{ 
  HAL_IncTick();
 8000b28:	f001 bb82 	b.w	8002230 <HAL_IncTick>

08000b2c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 8000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8000b2e:	7803      	ldrb	r3, [r0, #0]
 8000b30:	2b2d      	cmp	r3, #45	; 0x2d
 8000b32:	d115      	bne.n	8000b60 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8000b34:	3001      	adds	r0, #1
        minus = 1;
 8000b36:	2501      	movs	r5, #1
 8000b38:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8000b3a:	462a      	mov	r2, r5
 8000b3c:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000b3e:	270a      	movs	r7, #10
 8000b40:	e003      	b.n	8000b4a <ParseNumber+0x1e>
        ptr++;
        i++;
 8000b42:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000b44:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8000b48:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000b4a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000b4e:	3c30      	subs	r4, #48	; 0x30
 8000b50:	b2e6      	uxtb	r6, r4
 8000b52:	2e09      	cmp	r6, #9
 8000b54:	d9f5      	bls.n	8000b42 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000b56:	b101      	cbz	r1, 8000b5a <ParseNumber+0x2e>
        *cnt = i;
 8000b58:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000b5a:	b105      	cbz	r5, 8000b5e <ParseNumber+0x32>
        return 0 - sum;
 8000b5c:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8000b60:	2500      	movs	r5, #0
 8000b62:	e7e9      	b.n	8000b38 <ParseNumber+0xc>

08000b64 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr) 
{
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8000b66:	2600      	movs	r6, #0
  
  while(* ptr) { 
 8000b68:	7803      	ldrb	r3, [r0, #0]
 8000b6a:	b903      	cbnz	r3, 8000b6e <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8000b6e:	2b3a      	cmp	r3, #58	; 0x3a
 8000b70:	d128      	bne.n	8000bc4 <ParseMAC+0x60>
    hexcnt = 1;
 8000b72:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8000b76:	4460      	add	r0, ip
 8000b78:	e7f6      	b.n	8000b68 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000b7a:	2a09      	cmp	r2, #9
        sum <<= 4;
 8000b7c:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000b80:	d905      	bls.n	8000b8e <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000b82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000b86:	2a05      	cmp	r2, #5
 8000b88:	d814      	bhi.n	8000bb4 <ParseMAC+0x50>
        return (a - 'a') + 10;
 8000b8a:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8000b8c:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8000b8e:	4414      	add	r4, r2
        i++;
 8000b90:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000b92:	5d43      	ldrb	r3, [r0, r5]
 8000b94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	2a09      	cmp	r2, #9
 8000b9c:	fa5f fc85 	uxtb.w	ip, r5
 8000ba0:	d9eb      	bls.n	8000b7a <ParseMAC+0x16>
 8000ba2:	f023 0720 	bic.w	r7, r3, #32
 8000ba6:	3f41      	subs	r7, #65	; 0x41
 8000ba8:	2f05      	cmp	r7, #5
 8000baa:	d9e6      	bls.n	8000b7a <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000bac:	1c73      	adds	r3, r6, #1
 8000bae:	558c      	strb	r4, [r1, r6]
 8000bb0:	b2de      	uxtb	r6, r3
 8000bb2:	e7e0      	b.n	8000b76 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000bb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000bb8:	2a05      	cmp	r2, #5
 8000bba:	d801      	bhi.n	8000bc0 <ParseMAC+0x5c>
        return (a - 'A') + 10;
 8000bbc:	3b37      	subs	r3, #55	; 0x37
 8000bbe:	e7e5      	b.n	8000b8c <ParseMAC+0x28>
    return 0;
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e7e4      	b.n	8000b8e <ParseMAC+0x2a>
 8000bc4:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8000bc6:	462c      	mov	r4, r5
 8000bc8:	e7e3      	b.n	8000b92 <ParseMAC+0x2e>

08000bca <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 8000bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bcc:	4604      	mov	r4, r0
 8000bce:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8000bd0:	2500      	movs	r5, #0
  
  while(* ptr) { 
    hexcnt = 1;
 8000bd2:	2701      	movs	r7, #1
  while(* ptr) { 
 8000bd4:	7823      	ldrb	r3, [r4, #0]
 8000bd6:	b90b      	cbnz	r3, 8000bdc <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000bd8:	b003      	add	sp, #12
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8000bdc:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8000bde:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8000be2:	d007      	beq.n	8000bf4 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000be4:	f10d 0107 	add.w	r1, sp, #7
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff ff9f 	bl	8000b2c <ParseNumber>
 8000bee:	1c6b      	adds	r3, r5, #1
 8000bf0:	5570      	strb	r0, [r6, r5]
 8000bf2:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8000bf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000bf8:	441c      	add	r4, r3
 8000bfa:	e7eb      	b.n	8000bd4 <ParseIP+0xa>

08000bfc <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000bfc:	b570      	push	{r4, r5, r6, lr}
 8000bfe:	4604      	mov	r4, r0
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000c00:	4608      	mov	r0, r1
{
 8000c02:	460e      	mov	r6, r1
 8000c04:	4615      	mov	r5, r2
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000c06:	f7ff fb0b 	bl	8000220 <strlen>
 8000c0a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8000c0e:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8000c12:	b281      	uxth	r1, r0
 8000c14:	4630      	mov	r0, r6
 8000c16:	4798      	blx	r3
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	dc01      	bgt.n	8000c20 <AT_ExecuteCommand+0x24>
      {
        return ES_WIFI_STATUS_ERROR;
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000c1c:	2004      	movs	r0, #4
}
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000c20:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8000c24:	f8d4 2760 	ldr.w	r2, [r4, #1888]	; 0x760
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	4798      	blx	r3
    if(n > 0)
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	ddf4      	ble.n	8000c1c <AT_ExecuteCommand+0x20>
      *(pdata+n)=0;
 8000c32:	2400      	movs	r4, #0
 8000c34:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000c36:	4907      	ldr	r1, [pc, #28]	; (8000c54 <AT_ExecuteCommand+0x58>)
 8000c38:	4628      	mov	r0, r5
 8000c3a:	f002 fd8b 	bl	8003754 <strstr>
 8000c3e:	b938      	cbnz	r0, 8000c50 <AT_ExecuteCommand+0x54>
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000c40:	4905      	ldr	r1, [pc, #20]	; (8000c58 <AT_ExecuteCommand+0x5c>)
 8000c42:	4628      	mov	r0, r5
 8000c44:	f002 fd86 	bl	8003754 <strstr>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d0e7      	beq.n	8000c1c <AT_ExecuteCommand+0x20>
        return ES_WIFI_STATUS_ERROR;
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	e7e6      	b.n	8000c1e <AT_ExecuteCommand+0x22>
        return ES_WIFI_STATUS_OK;
 8000c50:	4620      	mov	r0, r4
 8000c52:	e7e4      	b.n	8000c1e <AT_ExecuteCommand+0x22>
 8000c54:	08008cd6 	.word	0x08008cd6
 8000c58:	08008cdf 	.word	0x08008cdf

08000c5c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c64:	f8c0 3760 	str.w	r3, [r0, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8000c68:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
{
 8000c6c:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init() == 0)
 8000c6e:	4798      	blx	r3
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d14b      	bne.n	8000d0c <ES_WIFI_Init+0xb0>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000c74:	4926      	ldr	r1, [pc, #152]	; (8000d10 <ES_WIFI_Init+0xb4>)
 8000c76:	f504 7290 	add.w	r2, r4, #288	; 0x120
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f7ff ffbe 	bl	8000bfc <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8000c80:	4605      	mov	r5, r0
 8000c82:	b960      	cbnz	r0, 8000c9e <ES_WIFI_Init+0x42>
  ptr = strtok((char *)pdata + 2, ",");  
 8000c84:	4923      	ldr	r1, [pc, #140]	; (8000d14 <ES_WIFI_Init+0xb8>)
      ptr = strtok(ptr, "\r"); 
 8000c86:	4f24      	ldr	r7, [pc, #144]	; (8000d18 <ES_WIFI_Init+0xbc>)
    ptr = strtok(NULL, ","); 
 8000c88:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000d14 <ES_WIFI_Init+0xb8>
  ptr = strtok((char *)pdata + 2, ",");  
 8000c8c:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8000c90:	f002 fd78 	bl	8003784 <strtok>
  while (ptr != NULL){
 8000c94:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000c96:	f104 0860 	add.w	r8, r4, #96	; 0x60
 8000c9a:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000c9c:	b910      	cbnz	r0, 8000ca4 <ES_WIFI_Init+0x48>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) { 
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	d824      	bhi.n	8000cf2 <ES_WIFI_Init+0x96>
 8000ca8:	e8df f003 	tbb	[pc, r3]
 8000cac:	140f0a04 	.word	0x140f0a04
 8000cb0:	1e19      	.short	0x1e19
 8000cb2:	29          	.byte	0x29
 8000cb3:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000cba:	f002 fd38 	bl	800372e <strncpy>
      break;
 8000cbe:	e018      	b.n	8000cf2 <ES_WIFI_Init+0x96>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	f104 0020 	add.w	r0, r4, #32
 8000cc8:	e7f7      	b.n	8000cba <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 8000cca:	4601      	mov	r1, r0
 8000ccc:	2210      	movs	r2, #16
 8000cce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8000cd2:	e7f2      	b.n	8000cba <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8000cdc:	e7ed      	b.n	8000cba <ES_WIFI_Init+0x5e>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 8000cde:	4601      	mov	r1, r0
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000ce6:	e7e8      	b.n	8000cba <ES_WIFI_Init+0x5e>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f7ff ff1f 	bl	8000b2c <ParseNumber>
 8000cee:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    ptr = strtok(NULL, ","); 
 8000cf2:	4649      	mov	r1, r9
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f002 fd45 	bl	8003784 <strtok>
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7cd      	b.n	8000c9a <ES_WIFI_Init+0x3e>
      ptr = strtok(ptr, "\r"); 
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f002 fd40 	bl	8003784 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000d04:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r"); 
 8000d06:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000d08:	4640      	mov	r0, r8
 8000d0a:	e7d6      	b.n	8000cba <ES_WIFI_Init+0x5e>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000d0c:	2502      	movs	r5, #2
 8000d0e:	e7c6      	b.n	8000c9e <ES_WIFI_Init+0x42>
 8000d10:	08008ce7 	.word	0x08008ce7
 8000d14:	08008cec 	.word	0x08008cec
 8000d18:	08008dcf 	.word	0x08008dcf

08000d1c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000d1c:	b530      	push	{r4, r5, lr}
 8000d1e:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000d22:	b158      	cbz	r0, 8000d3c <ES_WIFI_RegisterBusIO+0x20>
 8000d24:	b151      	cbz	r1, 8000d3c <ES_WIFI_RegisterBusIO+0x20>
 8000d26:	b14a      	cbz	r2, 8000d3c <ES_WIFI_RegisterBusIO+0x20>
 8000d28:	b145      	cbz	r5, 8000d3c <ES_WIFI_RegisterBusIO+0x20>
 8000d2a:	b13c      	cbz	r4, 8000d3c <ES_WIFI_RegisterBusIO+0x20>
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8000d2c:	e9c0 5446 	strd	r5, r4, [r0, #280]	; 0x118
  Obj->fops.IO_Init = IO_Init;
 8000d30:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
  Obj->fops.IO_Delay = IO_Delay;  
 8000d34:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8000d38:	2000      	movs	r0, #0
}
 8000d3a:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	e7fc      	b.n	8000d3a <ES_WIFI_RegisterBusIO+0x1e>

08000d40 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000d42:	f500 7490 	add.w	r4, r0, #288	; 0x120
{
 8000d46:	4605      	mov	r5, r0
 8000d48:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	4918      	ldr	r1, [pc, #96]	; (8000db0 <ES_WIFI_Connect+0x70>)
{
 8000d50:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000d52:	f002 fcb5 	bl	80036c0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d56:	4622      	mov	r2, r4
 8000d58:	4621      	mov	r1, r4
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f7ff ff4e 	bl	8000bfc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000d60:	bb20      	cbnz	r0, 8000dac <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000d62:	4914      	ldr	r1, [pc, #80]	; (8000db4 <ES_WIFI_Connect+0x74>)
 8000d64:	463a      	mov	r2, r7
 8000d66:	4620      	mov	r0, r4
 8000d68:	f002 fcaa 	bl	80036c0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d6c:	4622      	mov	r2, r4
 8000d6e:	4621      	mov	r1, r4
 8000d70:	4628      	mov	r0, r5
 8000d72:	f7ff ff43 	bl	8000bfc <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 8000d76:	b9c8      	cbnz	r0, 8000dac <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000d78:	490f      	ldr	r1, [pc, #60]	; (8000db8 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000d7a:	f885 6084 	strb.w	r6, [r5, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000d7e:	4632      	mov	r2, r6
 8000d80:	4620      	mov	r0, r4
 8000d82:	f002 fc9d 	bl	80036c0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d86:	4622      	mov	r2, r4
 8000d88:	4621      	mov	r1, r4
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f7ff ff36 	bl	8000bfc <AT_ExecuteCommand>
      
      if(ret == ES_WIFI_STATUS_OK)
 8000d90:	b960      	cbnz	r0, 8000dac <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000d92:	490a      	ldr	r1, [pc, #40]	; (8000dbc <ES_WIFI_Connect+0x7c>)
 8000d94:	4620      	mov	r0, r4
 8000d96:	f002 fcc2 	bl	800371e <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f7ff ff2c 	bl	8000bfc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000da4:	b910      	cbnz	r0, 8000dac <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f885 30ca 	strb.w	r3, [r5, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
}
 8000dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08008d12 	.word	0x08008d12
 8000db4:	08008d19 	.word	0x08008d19
 8000db8:	08008d20 	.word	0x08008d20
 8000dbc:	08008d27 	.word	0x08008d27

08000dc0 <ES_WIFI_GetNetworkSettings>:
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8000dc0:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8000dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8000dc8:	4932      	ldr	r1, [pc, #200]	; (8000e94 <ES_WIFI_GetNetworkSettings+0xd4>)
{
 8000dca:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f002 fca6 	bl	800371e <strcpy>
 8000dd2:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff ff10 	bl	8000bfc <AT_ExecuteCommand>
  
  if(ret == ES_WIFI_STATUS_OK)
 8000ddc:	4605      	mov	r5, r0
 8000dde:	b968      	cbnz	r0, 8000dfc <ES_WIFI_GetNetworkSettings+0x3c>
  ptr = strtok(pdata + 2, ",");   
 8000de0:	492d      	ldr	r1, [pc, #180]	; (8000e98 <ES_WIFI_GetNetworkSettings+0xd8>)
    ptr = strtok(NULL, ","); 
 8000de2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000e98 <ES_WIFI_GetNetworkSettings+0xd8>
  ptr = strtok(pdata + 2, ",");   
 8000de6:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8000dea:	f002 fccb 	bl	8003784 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000dee:	f104 0785 	add.w	r7, r4, #133	; 0x85
  while (ptr != NULL) {
 8000df2:	462e      	mov	r6, r5
      ParseIP(ptr, NetSettings->DNS2);
 8000df4:	f104 08dd 	add.w	r8, r4, #221	; 0xdd
 8000df8:	b2f3      	uxtb	r3, r6
  while (ptr != NULL) {
 8000dfa:	b910      	cbnz	r0, 8000e02 <ES_WIFI_GetNetworkSettings+0x42>
  }  
  return ret;
}
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {      
 8000e02:	2b0b      	cmp	r3, #11
 8000e04:	d80c      	bhi.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
 8000e06:	e8df f003 	tbb	[pc, r3]
 8000e0a:	1106      	.short	0x1106
 8000e0c:	28221c16 	.word	0x28221c16
 8000e10:	3633302d 	.word	0x3633302d
 8000e14:	3e38      	.short	0x3e38
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 8000e16:	4601      	mov	r1, r0
 8000e18:	2221      	movs	r2, #33	; 0x21
 8000e1a:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8000e1c:	f002 fc87 	bl	800372e <strncpy>
    ptr = strtok(NULL, ","); 
 8000e20:	4649      	mov	r1, r9
 8000e22:	2000      	movs	r0, #0
 8000e24:	f002 fcae 	bl	8003784 <strtok>
 8000e28:	3601      	adds	r6, #1
 8000e2a:	e7e5      	b.n	8000df8 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	2221      	movs	r2, #33	; 0x21
 8000e30:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
 8000e34:	e7f2      	b.n	8000e1c <ES_WIFI_GetNetworkSettings+0x5c>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000e36:	2100      	movs	r1, #0
 8000e38:	f7ff fe78 	bl	8000b2c <ParseNumber>
 8000e3c:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
        break;   
 8000e40:	e7ee      	b.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000e42:	2100      	movs	r1, #0
 8000e44:	f7ff fe72 	bl	8000b2c <ParseNumber>
 8000e48:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
      break;
 8000e4c:	e7e8      	b.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f7ff fe6c 	bl	8000b2c <ParseNumber>
 8000e54:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
      break;      
 8000e58:	e7e2      	b.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
      ParseIP(ptr, NetSettings->IP_Addr);
 8000e5a:	f104 01cd 	add.w	r1, r4, #205	; 0xcd
      ParseIP(ptr, NetSettings->IP_Mask);
 8000e5e:	f7ff feb4 	bl	8000bca <ParseIP>
      break;      
 8000e62:	e7dd      	b.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
      ParseIP(ptr, NetSettings->IP_Mask);
 8000e64:	f104 01d1 	add.w	r1, r4, #209	; 0xd1
 8000e68:	e7f9      	b.n	8000e5e <ES_WIFI_GetNetworkSettings+0x9e>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000e6a:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
 8000e6e:	e7f6      	b.n	8000e5e <ES_WIFI_GetNetworkSettings+0x9e>
      ParseIP(ptr, NetSettings->DNS1);
 8000e70:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000e74:	e7f3      	b.n	8000e5e <ES_WIFI_GetNetworkSettings+0x9e>
      ParseIP(ptr, NetSettings->DNS2);
 8000e76:	4641      	mov	r1, r8
 8000e78:	e7f1      	b.n	8000e5e <ES_WIFI_GetNetworkSettings+0x9e>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f7ff fe56 	bl	8000b2c <ParseNumber>
 8000e80:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
      break;  
 8000e84:	e7cc      	b.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000e86:	2100      	movs	r1, #0
 8000e88:	f7ff fe50 	bl	8000b2c <ParseNumber>
 8000e8c:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
      break;  
 8000e90:	e7c6      	b.n	8000e20 <ES_WIFI_GetNetworkSettings+0x60>
 8000e92:	bf00      	nop
 8000e94:	08008d2f 	.word	0x08008d2f
 8000e98:	08008cec 	.word	0x08008cec

08000e9c <ES_WIFI_GetMACAddress>:
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000e9c:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4909      	ldr	r1, [pc, #36]	; (8000ed0 <ES_WIFI_GetMACAddress+0x34>)
 8000eaa:	f002 fc38 	bl	800371e <strcpy>
 8000eae:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000eb0:	4601      	mov	r1, r0
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fea2 	bl	8000bfc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000eb8:	4605      	mov	r5, r0
 8000eba:	b938      	cbnz	r0, 8000ecc <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");    
 8000ebc:	4905      	ldr	r1, [pc, #20]	; (8000ed4 <ES_WIFI_GetMACAddress+0x38>)
 8000ebe:	f504 7091 	add.w	r0, r4, #290	; 0x122
 8000ec2:	f002 fc5f 	bl	8003784 <strtok>
    ParseMAC(ptr, mac) ;
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	f7ff fe4c 	bl	8000b64 <ParseMAC>
  }           
  return ret;
}
 8000ecc:	4628      	mov	r0, r5
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	08008d33 	.word	0x08008d33
 8000ed4:	08008920 	.word	0x08008920

08000ed8 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  char *ptr;
  
  sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8000edc:	f500 7790 	add.w	r7, r0, #288	; 0x120
{
 8000ee0:	4605      	mov	r5, r0
 8000ee2:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	493e      	ldr	r1, [pc, #248]	; (8000fe0 <ES_WIFI_StartServerSingleConn+0x108>)
 8000ee8:	f002 fc19 	bl	800371e <strcpy>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000eec:	463a      	mov	r2, r7
 8000eee:	4639      	mov	r1, r7
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f7ff fe83 	bl	8000bfc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d165      	bne.n	8000fc8 <ES_WIFI_StartServerSingleConn+0xf0>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000efc:	7872      	ldrb	r2, [r6, #1]
 8000efe:	4939      	ldr	r1, [pc, #228]	; (8000fe4 <ES_WIFI_StartServerSingleConn+0x10c>)
 8000f00:	4638      	mov	r0, r7
 8000f02:	f002 fbdd 	bl	80036c0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f06:	463a      	mov	r2, r7
 8000f08:	4639      	mov	r1, r7
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f7ff fe76 	bl	8000bfc <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8000f10:	4604      	mov	r4, r0
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d158      	bne.n	8000fc8 <ES_WIFI_StartServerSingleConn+0xf0>
    {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000f16:	7832      	ldrb	r2, [r6, #0]
 8000f18:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <ES_WIFI_StartServerSingleConn+0x110>)
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f002 fbd0 	bl	80036c0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f20:	463a      	mov	r2, r7
 8000f22:	4639      	mov	r1, r7
 8000f24:	4628      	mov	r0, r5
 8000f26:	f7ff fe69 	bl	8000bfc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d14b      	bne.n	8000fc8 <ES_WIFI_StartServerSingleConn+0xf0>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8000f30:	88b2      	ldrh	r2, [r6, #4]
 8000f32:	492e      	ldr	r1, [pc, #184]	; (8000fec <ES_WIFI_StartServerSingleConn+0x114>)
 8000f34:	4638      	mov	r0, r7
 8000f36:	f002 fbc3 	bl	80036c0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f3a:	463a      	mov	r2, r7
 8000f3c:	4639      	mov	r1, r7
 8000f3e:	4628      	mov	r0, r5
 8000f40:	f7ff fe5c 	bl	8000bfc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000f44:	4604      	mov	r4, r0
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d13e      	bne.n	8000fc8 <ES_WIFI_StartServerSingleConn+0xf0>
        {       
          sprintf((char*)Obj->CmdData,"P5=1\r");
 8000f4a:	4929      	ldr	r1, [pc, #164]	; (8000ff0 <ES_WIFI_StartServerSingleConn+0x118>)
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f002 fbe6 	bl	800371e <strcpy>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8000f52:	463a      	mov	r2, r7
 8000f54:	4639      	mov	r1, r7
 8000f56:	4628      	mov	r0, r5
 8000f58:	f7ff fe50 	bl	8000bfc <AT_ExecuteCommand>
          
          if(ret == ES_WIFI_STATUS_OK)
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	bb98      	cbnz	r0, 8000fc8 <ES_WIFI_StartServerSingleConn+0xf0>
              }  
            }
#else
            do
            {
              sprintf((char*)Obj->CmdData,"MR\r");
 8000f60:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001000 <ES_WIFI_StartServerSingleConn+0x128>
              ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
              if(ret == ES_WIFI_STATUS_OK)
              {  
                if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8000f64:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001004 <ES_WIFI_StartServerSingleConn+0x12c>
 8000f68:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8001008 <ES_WIFI_StartServerSingleConn+0x130>
              sprintf((char*)Obj->CmdData,"MR\r");
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f002 fbd5 	bl	800371e <strcpy>
              ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 8000f74:	463a      	mov	r2, r7
 8000f76:	4639      	mov	r1, r7
 8000f78:	4628      	mov	r0, r5
 8000f7a:	f7ff fe3f 	bl	8000bfc <AT_ExecuteCommand>
              if(ret == ES_WIFI_STATUS_OK)
 8000f7e:	4604      	mov	r4, r0
 8000f80:	bb58      	cbnz	r0, 8000fda <ES_WIFI_StartServerSingleConn+0x102>
                if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8000f82:	4649      	mov	r1, r9
 8000f84:	4638      	mov	r0, r7
 8000f86:	f002 fbe5 	bl	8003754 <strstr>
 8000f8a:	b300      	cbz	r0, 8000fce <ES_WIFI_StartServerSingleConn+0xf6>
 8000f8c:	4651      	mov	r1, sl
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f002 fbe0 	bl	8003754 <strstr>
 8000f94:	b1d8      	cbz	r0, 8000fce <ES_WIFI_StartServerSingleConn+0xf6>
                {
                  if(strstr((char *)Obj->CmdData, "Accepted"))
 8000f96:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <ES_WIFI_StartServerSingleConn+0x11c>)
 8000f98:	4638      	mov	r0, r7
 8000f9a:	f002 fbdb 	bl	8003754 <strstr>
 8000f9e:	b1b0      	cbz	r0, 8000fce <ES_WIFI_StartServerSingleConn+0xf6>
                  {
                    ptr = strtok((char *)Obj->CmdData + 2, " ");
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <ES_WIFI_StartServerSingleConn+0x120>)
 8000fa2:	f505 7091 	add.w	r0, r5, #290	; 0x122
 8000fa6:	f002 fbed 	bl	8003784 <strtok>
                    ptr = strtok(NULL, " ");
 8000faa:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <ES_WIFI_StartServerSingleConn+0x120>)
 8000fac:	4620      	mov	r0, r4
 8000fae:	f002 fbe9 	bl	8003784 <strtok>
                    ptr = strtok(NULL, " "); 
 8000fb2:	4911      	ldr	r1, [pc, #68]	; (8000ff8 <ES_WIFI_StartServerSingleConn+0x120>)
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f002 fbe5 	bl	8003784 <strtok>
                    ptr = strtok(NULL, ":");            
 8000fba:	4910      	ldr	r1, [pc, #64]	; (8000ffc <ES_WIFI_StartServerSingleConn+0x124>)
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f002 fbe1 	bl	8003784 <strtok>
                    ParseIP((char *)ptr, conn->RemoteIP);          
 8000fc2:	1db1      	adds	r1, r6, #6
 8000fc4:	f7ff fe01 	bl	8000bca <ParseIP>
        }
      }  
    }
  }
  return ret;
}
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
              Obj->fops.IO_Delay(1000);
 8000fce:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	4798      	blx	r3
              sprintf((char*)Obj->CmdData,"MR\r");
 8000fd8:	e7c8      	b.n	8000f6c <ES_WIFI_StartServerSingleConn+0x94>
                ret = ES_WIFI_STATUS_ERROR;
 8000fda:	2402      	movs	r4, #2
 8000fdc:	e7f4      	b.n	8000fc8 <ES_WIFI_StartServerSingleConn+0xf0>
 8000fde:	bf00      	nop
 8000fe0:	08008dc6 	.word	0x08008dc6
 8000fe4:	08008d8e 	.word	0x08008d8e
 8000fe8:	08008d95 	.word	0x08008d95
 8000fec:	08008da3 	.word	0x08008da3
 8000ff0:	08008dd1 	.word	0x08008dd1
 8000ff4:	08008de9 	.word	0x08008de9
 8000ff8:	08008c09 	.word	0x08008c09
 8000ffc:	08008bce 	.word	0x08008bce
 8001000:	08008dd7 	.word	0x08008dd7
 8001004:	08008ddb 	.word	0x08008ddb
 8001008:	08008de2 	.word	0x08008de2

0800100c <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj)
{
 800100c:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 800100e:	f500 7290 	add.w	r2, r0, #288	; 0x120
{
 8001012:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8001014:	4905      	ldr	r1, [pc, #20]	; (800102c <ES_WIFI_StopServerSingleConn+0x20>)
 8001016:	4610      	mov	r0, r2
 8001018:	f002 fb81 	bl	800371e <strcpy>
 800101c:	4602      	mov	r2, r0
  return AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800101e:	4601      	mov	r1, r0
 8001020:	4620      	mov	r0, r4
}
 8001022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001026:	f7ff bde9 	b.w	8000bfc <AT_ExecuteCommand>
 800102a:	bf00      	nop
 800102c:	08008df2 	.word	0x08008df2

08001030 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001038:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800103c:	bf28      	it	cs
 800103e:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
  
  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001042:	f500 7a90 	add.w	sl, r0, #288	; 0x120
{
 8001046:	4605      	mov	r5, r0
  *SentLen = Reqlen;
 8001048:	f8a9 3000 	strh.w	r3, [r9]
{
 800104c:	4690      	mov	r8, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800104e:	4650      	mov	r0, sl
 8001050:	460a      	mov	r2, r1
 8001052:	4930      	ldr	r1, [pc, #192]	; (8001114 <ES_WIFI_SendData+0xe4>)
 8001054:	461f      	mov	r7, r3
 8001056:	f002 fb33 	bl	80036c0 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800105a:	4652      	mov	r2, sl
 800105c:	4651      	mov	r1, sl
 800105e:	4628      	mov	r0, r5
 8001060:	f7ff fdcc 	bl	8000bfc <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8001064:	4604      	mov	r4, r0
 8001066:	2800      	cmp	r0, #0
 8001068:	d151      	bne.n	800110e <ES_WIFI_SendData+0xde>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 800106a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800106c:	492a      	ldr	r1, [pc, #168]	; (8001118 <ES_WIFI_SendData+0xe8>)
 800106e:	4650      	mov	r0, sl
 8001070:	f002 fb26 	bl	80036c0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001074:	4652      	mov	r2, sl
 8001076:	4651      	mov	r1, sl
 8001078:	4628      	mov	r0, r5
 800107a:	f7ff fdbf 	bl	8000bfc <AT_ExecuteCommand>
    
    if(ret == ES_WIFI_STATUS_OK)
 800107e:	4604      	mov	r4, r0
 8001080:	2800      	cmp	r0, #0
 8001082:	d144      	bne.n	800110e <ES_WIFI_SendData+0xde>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001084:	4925      	ldr	r1, [pc, #148]	; (800111c <ES_WIFI_SendData+0xec>)
 8001086:	463a      	mov	r2, r7
 8001088:	4650      	mov	r0, sl
 800108a:	f002 fb19 	bl	80036c0 <siprintf>
  uint16_t n=strlen((char*)cmd);
 800108e:	4650      	mov	r0, sl
 8001090:	f7ff f8c6 	bl	8000220 <strlen>
 8001094:	b281      	uxth	r1, r0
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8001096:	f010 0601 	ands.w	r6, r0, #1
 800109a:	468b      	mov	fp, r1
 800109c:	d006      	beq.n	80010ac <ES_WIFI_SendData+0x7c>
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8a9 3000 	strh.w	r3, [r9]
 80010a4:	2402      	movs	r4, #2
  return ret;  
}
 80010a6:	4620      	mov	r0, r4
 80010a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 80010ac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80010b0:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80010b4:	4650      	mov	r0, sl
 80010b6:	4798      	blx	r3
 80010b8:	4583      	cmp	fp, r0
 80010ba:	d001      	beq.n	80010c0 <ES_WIFI_SendData+0x90>
{
 80010bc:	2404      	movs	r4, #4
 80010be:	e7f2      	b.n	80010a6 <ES_WIFI_SendData+0x76>
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80010c0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80010c4:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80010c8:	4639      	mov	r1, r7
 80010ca:	4640      	mov	r0, r8
 80010cc:	4798      	blx	r3
    if(n == len)
 80010ce:	4287      	cmp	r7, r0
 80010d0:	d1e5      	bne.n	800109e <ES_WIFI_SendData+0x6e>
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80010d2:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 80010d6:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80010da:	4631      	mov	r1, r6
 80010dc:	4650      	mov	r0, sl
 80010de:	4798      	blx	r3
      if(n > 0)
 80010e0:	2800      	cmp	r0, #0
 80010e2:	ddeb      	ble.n	80010bc <ES_WIFI_SendData+0x8c>
        *(pdata+n)=0;
 80010e4:	f80a 6000 	strb.w	r6, [sl, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80010e8:	490d      	ldr	r1, [pc, #52]	; (8001120 <ES_WIFI_SendData+0xf0>)
 80010ea:	4650      	mov	r0, sl
 80010ec:	f002 fb32 	bl	8003754 <strstr>
 80010f0:	b930      	cbnz	r0, 8001100 <ES_WIFI_SendData+0xd0>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80010f2:	490c      	ldr	r1, [pc, #48]	; (8001124 <ES_WIFI_SendData+0xf4>)
 80010f4:	4650      	mov	r0, sl
 80010f6:	f002 fb2d 	bl	8003754 <strstr>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d1cf      	bne.n	800109e <ES_WIFI_SendData+0x6e>
 80010fe:	e7dd      	b.n	80010bc <ES_WIFI_SendData+0x8c>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001100:	4909      	ldr	r1, [pc, #36]	; (8001128 <ES_WIFI_SendData+0xf8>)
 8001102:	4650      	mov	r0, sl
 8001104:	f002 fb26 	bl	8003754 <strstr>
 8001108:	2800      	cmp	r0, #0
 800110a:	d1c8      	bne.n	800109e <ES_WIFI_SendData+0x6e>
 800110c:	e7cb      	b.n	80010a6 <ES_WIFI_SendData+0x76>
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 800110e:	2c02      	cmp	r4, #2
 8001110:	d1c9      	bne.n	80010a6 <ES_WIFI_SendData+0x76>
 8001112:	e7c4      	b.n	800109e <ES_WIFI_SendData+0x6e>
 8001114:	08008d8e 	.word	0x08008d8e
 8001118:	08008e10 	.word	0x08008e10
 800111c:	08008e18 	.word	0x08008e18
 8001120:	08008cd6 	.word	0x08008cd6
 8001124:	08008cdf 	.word	0x08008cdf
 8001128:	08008e21 	.word	0x08008e21

0800112c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
  
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001130:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001138:	4605      	mov	r5, r0
 800113a:	4690      	mov	r8, r2
 800113c:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800113e:	d85d      	bhi.n	80011fc <ES_WIFI_ReceiveData+0xd0>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001140:	f500 7690 	add.w	r6, r0, #288	; 0x120
 8001144:	460a      	mov	r2, r1
 8001146:	4630      	mov	r0, r6
 8001148:	492d      	ldr	r1, [pc, #180]	; (8001200 <ES_WIFI_ReceiveData+0xd4>)
 800114a:	f002 fab9 	bl	80036c0 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800114e:	4632      	mov	r2, r6
 8001150:	4631      	mov	r1, r6
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff fd52 	bl	8000bfc <AT_ExecuteCommand>
 8001158:	4604      	mov	r4, r0
 800115a:	4682      	mov	sl, r0
    
    if(ret == ES_WIFI_STATUS_OK)
 800115c:	bb48      	cbnz	r0, 80011b2 <ES_WIFI_ReceiveData+0x86>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800115e:	4929      	ldr	r1, [pc, #164]	; (8001204 <ES_WIFI_ReceiveData+0xd8>)
 8001160:	463a      	mov	r2, r7
 8001162:	4630      	mov	r0, r6
 8001164:	f002 faac 	bl	80036c0 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001168:	4632      	mov	r2, r6
 800116a:	4631      	mov	r1, r6
 800116c:	4628      	mov	r0, r5
 800116e:	f7ff fd45 	bl	8000bfc <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8001172:	4604      	mov	r4, r0
 8001174:	2800      	cmp	r0, #0
 8001176:	d13e      	bne.n	80011f6 <ES_WIFI_ReceiveData+0xca>
      { 
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8001178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800117a:	4923      	ldr	r1, [pc, #140]	; (8001208 <ES_WIFI_ReceiveData+0xdc>)
 800117c:	4630      	mov	r0, r6
 800117e:	f002 fa9f 	bl	80036c0 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001182:	4632      	mov	r2, r6
 8001184:	4631      	mov	r1, r6
 8001186:	4628      	mov	r0, r5
 8001188:	f7ff fd38 	bl	8000bfc <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 800118c:	4604      	mov	r4, r0
 800118e:	b980      	cbnz	r0, 80011b2 <ES_WIFI_ReceiveData+0x86>
        {  
          sprintf((char*)Obj->CmdData,"R0=\r");
 8001190:	491e      	ldr	r1, [pc, #120]	; (800120c <ES_WIFI_ReceiveData+0xe0>)
 8001192:	4630      	mov	r0, r6
 8001194:	f002 fac3 	bl	800371e <strcpy>
    if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8001198:	4630      	mov	r0, r6
 800119a:	f7ff f841 	bl	8000220 <strlen>
 800119e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80011a2:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80011a6:	b281      	uxth	r1, r0
 80011a8:	4630      	mov	r0, r6
 80011aa:	4798      	blx	r3
 80011ac:	2800      	cmp	r0, #0
 80011ae:	dc03      	bgt.n	80011b8 <ES_WIFI_ReceiveData+0x8c>
    return ES_WIFI_STATUS_IO_ERROR;
 80011b0:	2404      	movs	r4, #4
        *Receivedlen = 0;
      }
    }
  }
  return ret;
}
 80011b2:	4620      	mov	r0, r4
 80011b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(Obj->fops.IO_Receive((uint8_t *)pdata, 2, Obj->Timeout) == 2) /* Read Prompt */
 80011b8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 80011bc:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80011c0:	2102      	movs	r1, #2
 80011c2:	4640      	mov	r0, r8
 80011c4:	4798      	blx	r3
 80011c6:	2802      	cmp	r0, #2
 80011c8:	d1f2      	bne.n	80011b0 <ES_WIFI_ReceiveData+0x84>
        len = Obj->fops.IO_Receive((uint8_t *)pdata, Reqlen + strlen(AT_OK_STRING) , Obj->Timeout);
 80011ca:	f107 0108 	add.w	r1, r7, #8
 80011ce:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 80011d2:	f8d5 2760 	ldr.w	r2, [r5, #1888]	; 0x760
 80011d6:	b289      	uxth	r1, r1
 80011d8:	4640      	mov	r0, r8
 80011da:	4798      	blx	r3
 80011dc:	b280      	uxth	r0, r0
        if(strstr((char *)pdata + len -strlen(AT_OK_STRING), AT_OK_STRING))
 80011de:	f1a0 0508 	sub.w	r5, r0, #8
 80011e2:	490b      	ldr	r1, [pc, #44]	; (8001210 <ES_WIFI_ReceiveData+0xe4>)
 80011e4:	eb08 0005 	add.w	r0, r8, r5
 80011e8:	f002 fab4 	bl	8003754 <strstr>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d0df      	beq.n	80011b0 <ES_WIFI_ReceiveData+0x84>
          *ReadData = len - strlen(AT_OK_STRING);
 80011f0:	f8a9 5000 	strh.w	r5, [r9]
          return ES_WIFI_STATUS_OK; 
 80011f4:	e7dd      	b.n	80011b2 <ES_WIFI_ReceiveData+0x86>
        *Receivedlen = 0;
 80011f6:	f8a9 a000 	strh.w	sl, [r9]
 80011fa:	e7da      	b.n	80011b2 <ES_WIFI_ReceiveData+0x86>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
 80011fc:	2402      	movs	r4, #2
 80011fe:	e7d8      	b.n	80011b2 <ES_WIFI_ReceiveData+0x86>
 8001200:	08008d8e 	.word	0x08008d8e
 8001204:	08008e26 	.word	0x08008e26
 8001208:	08008e2d 	.word	0x08008e2d
 800120c:	08008e35 	.word	0x08008e35
 8001210:	08008cd6 	.word	0x08008cd6

08001214 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001218:	b08b      	sub	sp, #44	; 0x2c
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800121a:	2400      	movs	r4, #0
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <SPI_WIFI_MspInit+0x110>)
 800121e:	9401      	str	r4, [sp, #4]
 8001220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 8001222:	4e41      	ldr	r6, [pc, #260]	; (8001328 <SPI_WIFI_MspInit+0x114>)
  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 8001224:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001334 <SPI_WIFI_MspInit+0x120>
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
 800122e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001230:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001234:	9201      	str	r2, [sp, #4]
 8001236:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	9402      	str	r4, [sp, #8]
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	f042 0202 	orr.w	r2, r2, #2
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001244:	f002 0202 	and.w	r2, r2, #2
 8001248:	9202      	str	r2, [sp, #8]
 800124a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	9403      	str	r4, [sp, #12]
 800124e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001254:	631a      	str	r2, [r3, #48]	; 0x30
 8001256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001258:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800125c:	9203      	str	r2, [sp, #12]
 800125e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001260:	9404      	str	r4, [sp, #16]
 8001262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 8001270:	4622      	mov	r2, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 8001274:	4630      	mov	r0, r6
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800127a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 800127e:	f001 fb3b 	bl	80028f8 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001286:	a905      	add	r1, sp, #20
 8001288:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800128a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800128e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001292:	f001 fa57 	bl	8002744 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <SPI_WIFI_MspInit+0x118>)
 8001298:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 800129c:	a905      	add	r1, sp, #20
 800129e:	4640      	mov	r0, r8
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80012a0:	e9cd 9305 	strd	r9, r3, [sp, #20]

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80012a4:	2702      	movs	r7, #2
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80012a6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 80012aa:	f001 fa4b 	bl	8002744 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
  GPIO_Init.Alternate = 0;
  HAL_GPIO_Init( GPIOH, &GPIO_Init );
 80012ae:	a905      	add	r1, sp, #20
 80012b0:	481f      	ldr	r0, [pc, #124]	; (8001330 <SPI_WIFI_MspInit+0x11c>)
  GPIO_Init.Alternate = 0;
 80012b2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80012b4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80012b8:	e9cd 7505 	strd	r7, r5, [sp, #20]
  HAL_GPIO_Init( GPIOH, &GPIO_Init );
 80012bc:	f001 fa42 	bl	8002744 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOG, GPIO_PIN_11, GPIO_PIN_SET ); 
 80012c0:	462a      	mov	r2, r5
 80012c2:	4640      	mov	r0, r8
 80012c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c8:	f001 fb16 	bl	80028f8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_11;
 80012cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 80012d0:	a905      	add	r1, sp, #20
 80012d2:	4640      	mov	r0, r8
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80012d4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012d8:	e9cd 4507 	strd	r4, r5, [sp, #28]
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 80012dc:	f001 fa32 	bl	8002744 <HAL_GPIO_Init>
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF7_SPI3;
 80012e0:	2307      	movs	r3, #7
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80012e2:	a905      	add	r1, sp, #20
 80012e4:	4630      	mov	r0, r6
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012e6:	e9cd 4507 	strd	r4, r5, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF7_SPI3;
 80012ea:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80012ec:	e9cd 9705 	strd	r9, r7, [sp, #20]
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80012f0:	f001 fa28 	bl	8002744 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_5;
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012f4:	e9cd 4507 	strd	r4, r5, [sp, #28]
  GPIO_Init.Pin       = GPIO_PIN_5;
 80012f8:	2320      	movs	r3, #32
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80012fa:	2406      	movs	r4, #6
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80012fc:	a905      	add	r1, sp, #20
 80012fe:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001300:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001304:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8001306:	f001 fa1d 	bl	8002744 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_4;
 800130a:	2310      	movs	r3, #16
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLUP;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 800130c:	a905      	add	r1, sp, #20
 800130e:	4630      	mov	r0, r6
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001310:	e9cd 3705 	strd	r3, r7, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001314:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001318:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 800131a:	f001 fa13 	bl	8002744 <HAL_GPIO_Init>
}
 800131e:	b00b      	add	sp, #44	; 0x2c
 8001320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40020400 	.word	0x40020400
 800132c:	10110000 	.word	0x10110000
 8001330:	40021c00 	.word	0x40021c00
 8001334:	40021800 	.word	0x40021800

08001338 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 8001338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 800133a:	f000 ff85 	bl	8002248 <HAL_GetTick>
  uint8_t Prompt[6];
  uint8_t count = 0;
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 800133e:	4c40      	ldr	r4, [pc, #256]	; (8001440 <SPI_WIFI_Init+0x108>)
 8001340:	4b40      	ldr	r3, [pc, #256]	; (8001444 <SPI_WIFI_Init+0x10c>)
 8001342:	6023      	str	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8001344:	4606      	mov	r6, r0
  SPI_WIFI_MspInit(&hspi);
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff ff64 	bl	8001214 <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800134c:	2500      	movs	r5, #0
 800134e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
  hspi.Init.NSS               = SPI_NSS_SOFT;
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001352:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001356:	e9c4 3501 	strd	r3, r5, [r4, #4]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800135a:	f44f 6700 	mov.w	r7, #2048	; 0x800
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supportes up to 20MHz)*/
 800135e:	2308      	movs	r3, #8
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
  hspi.Init.CRCPolynomial     = 0;
  
  HAL_SPI_Init( &hspi );
 8001360:	4620      	mov	r0, r4
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supportes up to 20MHz)*/
 8001362:	e9c4 2306 	strd	r2, r3, [r4, #24]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001366:	e9c4 7503 	strd	r7, r5, [r4, #12]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800136a:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi.Init.CRCPolynomial     = 0;
 800136e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001372:	6165      	str	r5, [r4, #20]
  HAL_SPI_Init( &hspi );
 8001374:	f001 fdf1 	bl	8002f5a <HAL_SPI_Init>
  
  WIFI_RESET_MODULE();
 8001378:	462a      	mov	r2, r5
 800137a:	2102      	movs	r1, #2
 800137c:	4832      	ldr	r0, [pc, #200]	; (8001448 <SPI_WIFI_Init+0x110>)
 800137e:	f001 fabb 	bl	80028f8 <HAL_GPIO_WritePin>
 8001382:	200a      	movs	r0, #10
 8001384:	f000 ff66 	bl	8002254 <HAL_Delay>
 8001388:	2201      	movs	r2, #1
 800138a:	2102      	movs	r1, #2
 800138c:	482e      	ldr	r0, [pc, #184]	; (8001448 <SPI_WIFI_Init+0x110>)
 800138e:	f001 fab3 	bl	80028f8 <HAL_GPIO_WritePin>
 8001392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001396:	f000 ff5d 	bl	8002254 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <SPI_WIFI_Init+0x114>)
 800139c:	462a      	mov	r2, r5
 800139e:	4639      	mov	r1, r7
 80013a0:	f001 faaa 	bl	80028f8 <HAL_GPIO_WritePin>
 80013a4:	200a      	movs	r0, #10
 80013a6:	f000 ff55 	bl	8002254 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80013aa:	4828      	ldr	r0, [pc, #160]	; (800144c <SPI_WIFI_Init+0x114>)
 80013ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b0:	f001 fa9c 	bl	80028ec <HAL_GPIO_ReadPin>
 80013b4:	2801      	cmp	r0, #1
 80013b6:	4602      	mov	r2, r0
 80013b8:	d022      	beq.n	8001400 <SPI_WIFI_Init+0xc8>
      WIFI_DISABLE_NSS(); 
      return -1;
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80013ba:	f89d 3000 	ldrb.w	r3, [sp]
 80013be:	2b15      	cmp	r3, #21
 80013c0:	d12e      	bne.n	8001420 <SPI_WIFI_Init+0xe8>
 80013c2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80013c6:	2b15      	cmp	r3, #21
 80013c8:	d12a      	bne.n	8001420 <SPI_WIFI_Init+0xe8>
 80013ca:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80013ce:	2b0d      	cmp	r3, #13
 80013d0:	d126      	bne.n	8001420 <SPI_WIFI_Init+0xe8>
 80013d2:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80013d6:	2c0a      	cmp	r4, #10
 80013d8:	d122      	bne.n	8001420 <SPI_WIFI_Init+0xe8>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80013da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013de:	2b3e      	cmp	r3, #62	; 0x3e
 80013e0:	d11e      	bne.n	8001420 <SPI_WIFI_Init+0xe8>
 80013e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d11a      	bne.n	8001420 <SPI_WIFI_Init+0xe8>
  {
    WIFI_DISABLE_NSS(); 
    return -1;
  }    
   
  WIFI_DISABLE_NSS(); 
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <SPI_WIFI_Init+0x114>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f2:	f001 fa81 	bl	80028f8 <HAL_GPIO_WritePin>
 80013f6:	4620      	mov	r0, r4
 80013f8:	f000 ff2c 	bl	8002254 <HAL_Delay>
  return 0;
 80013fc:	2000      	movs	r0, #0
 80013fe:	e01a      	b.n	8001436 <SPI_WIFI_Init+0xfe>
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8001400:	eb0d 0105 	add.w	r1, sp, r5
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	4620      	mov	r0, r4
 800140a:	f001 ffb5 	bl	8003378 <HAL_SPI_Receive>
 800140e:	4607      	mov	r7, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001410:	f000 ff1a 	bl	8002248 <HAL_GetTick>
 8001414:	1b80      	subs	r0, r0, r6
    count += 2;
 8001416:	3502      	adds	r5, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001418:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 800141c:	b2ed      	uxtb	r5, r5
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800141e:	d30c      	bcc.n	800143a <SPI_WIFI_Init+0x102>
      WIFI_DISABLE_NSS(); 
 8001420:	480a      	ldr	r0, [pc, #40]	; (800144c <SPI_WIFI_Init+0x114>)
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001428:	f001 fa66 	bl	80028f8 <HAL_GPIO_WritePin>
 800142c:	200a      	movs	r0, #10
 800142e:	f000 ff11 	bl	8002254 <HAL_Delay>
      return -1;
 8001432:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001436:	b003      	add	sp, #12
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800143a:	2f00      	cmp	r7, #0
 800143c:	d0b5      	beq.n	80013aa <SPI_WIFI_Init+0x72>
 800143e:	e7ef      	b.n	8001420 <SPI_WIFI_Init+0xe8>
 8001440:	20000978 	.word	0x20000978
 8001444:	40003c00 	.word	0x40003c00
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40021800 	.word	0x40021800

08001450 <SPI_WIFI_DeInit>:
  * @brief  Initialize the UART1
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001450:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <SPI_WIFI_DeInit+0xc>)
 8001454:	f001 fdde 	bl	8003014 <HAL_SPI_DeInit>
  return 0;
}
 8001458:	2000      	movs	r0, #0
 800145a:	bd08      	pop	{r3, pc}
 800145c:	20000978 	.word	0x20000978

08001460 <SPI_WIFI_ReceiveData>:
  * @brief  Receive wifi Data from SPI
  * @param  Pdata : pointer to data
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001464:	460f      	mov	r7, r1
 8001466:	4615      	mov	r5, r2
 8001468:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800146a:	f000 feed 	bl	8002248 <HAL_GetTick>
  int16_t length = 0;
   
  WIFI_DISABLE_NSS(); 
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 6100 	mov.w	r1, #2048	; 0x800
  uint32_t tickstart = HAL_GetTick();
 8001474:	4606      	mov	r6, r0
  WIFI_DISABLE_NSS(); 
 8001476:	482f      	ldr	r0, [pc, #188]	; (8001534 <SPI_WIFI_ReceiveData+0xd4>)
  
  while (!WIFI_IS_CMDDATA_READY())
 8001478:	4c2e      	ldr	r4, [pc, #184]	; (8001534 <SPI_WIFI_ReceiveData+0xd4>)
  WIFI_DISABLE_NSS(); 
 800147a:	f001 fa3d 	bl	80028f8 <HAL_GPIO_WritePin>
 800147e:	200a      	movs	r0, #10
 8001480:	f000 fee8 	bl	8002254 <HAL_Delay>
  while (!WIFI_IS_CMDDATA_READY())
 8001484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001488:	4620      	mov	r0, r4
 800148a:	f001 fa2f 	bl	80028ec <HAL_GPIO_ReadPin>
 800148e:	2801      	cmp	r0, #1
 8001490:	d130      	bne.n	80014f4 <SPI_WIFI_ReceiveData+0x94>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <SPI_WIFI_ReceiveData+0xd4>)
  
  while (WIFI_IS_CMDDATA_READY())
 8001494:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8001534 <SPI_WIFI_ReceiveData+0xd4>
  {
    if((length < len) || (!len))
    {
      HAL_SPI_Receive(&hspi, pData, 1, timeout) ;
 8001498:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8001538 <SPI_WIFI_ReceiveData+0xd8>
  WIFI_ENABLE_NSS(); 
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a2:	f001 fa29 	bl	80028f8 <HAL_GPIO_WritePin>
 80014a6:	200a      	movs	r0, #10
 80014a8:	f000 fed4 	bl	8002254 <HAL_Delay>
  while (WIFI_IS_CMDDATA_READY())
 80014ac:	2400      	movs	r4, #0
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4650      	mov	r0, sl
 80014b6:	eb03 0904 	add.w	r9, r3, r4
 80014ba:	f001 fa17 	bl	80028ec <HAL_GPIO_ReadPin>
 80014be:	2801      	cmp	r0, #1
 80014c0:	fa0f f884 	sxth.w	r8, r4
 80014c4:	d102      	bne.n	80014cc <SPI_WIFI_ReceiveData+0x6c>
    if((length < len) || (!len))
 80014c6:	45b8      	cmp	r8, r7
 80014c8:	db1c      	blt.n	8001504 <SPI_WIFI_ReceiveData+0xa4>
 80014ca:	b1df      	cbz	r7, 8001504 <SPI_WIFI_ReceiveData+0xa4>
    {
      break;
    }
  }
  
  if(*(--pData) == 0x15)
 80014cc:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 80014d0:	2a15      	cmp	r2, #21
 80014d2:	d102      	bne.n	80014da <SPI_WIFI_ReceiveData+0x7a>
  {
    length--;
 80014d4:	3c01      	subs	r4, #1
 80014d6:	fa0f f884 	sxth.w	r8, r4
  }
  
  WIFI_DISABLE_NSS(); 
 80014da:	4816      	ldr	r0, [pc, #88]	; (8001534 <SPI_WIFI_ReceiveData+0xd4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e2:	f001 fa09 	bl	80028f8 <HAL_GPIO_WritePin>
 80014e6:	200a      	movs	r0, #10
 80014e8:	f000 feb4 	bl	8002254 <HAL_Delay>
  return length;
}
 80014ec:	4640      	mov	r0, r8
 80014ee:	b003      	add	sp, #12
 80014f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 80014f4:	f000 fea8 	bl	8002248 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	42a8      	cmp	r0, r5
 80014fc:	d9c2      	bls.n	8001484 <SPI_WIFI_ReceiveData+0x24>
      return -1;
 80014fe:	f04f 38ff 	mov.w	r8, #4294967295
 8001502:	e7f3      	b.n	80014ec <SPI_WIFI_ReceiveData+0x8c>
      HAL_SPI_Receive(&hspi, pData, 1, timeout) ;
 8001504:	462b      	mov	r3, r5
 8001506:	2201      	movs	r2, #1
 8001508:	4649      	mov	r1, r9
 800150a:	4658      	mov	r0, fp
 800150c:	f001 ff34 	bl	8003378 <HAL_SPI_Receive>
      if((HAL_GetTick() - tickstart ) > timeout)
 8001510:	f000 fe9a 	bl	8002248 <HAL_GetTick>
 8001514:	1b80      	subs	r0, r0, r6
 8001516:	42a8      	cmp	r0, r5
 8001518:	f104 0402 	add.w	r4, r4, #2
 800151c:	d9c7      	bls.n	80014ae <SPI_WIFI_ReceiveData+0x4e>
        WIFI_DISABLE_NSS(); 
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <SPI_WIFI_ReceiveData+0xd4>)
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001526:	f001 f9e7 	bl	80028f8 <HAL_GPIO_WritePin>
 800152a:	200a      	movs	r0, #10
 800152c:	f000 fe92 	bl	8002254 <HAL_Delay>
        return -1;
 8001530:	e7e5      	b.n	80014fe <SPI_WIFI_ReceiveData+0x9e>
 8001532:	bf00      	nop
 8001534:	40021800 	.word	0x40021800
 8001538:	20000978 	.word	0x20000978

0800153c <SPI_WIFI_SendData>:
  * @brief  Send wifi Data thru SPI
  * @param  Pdata : pointer to data
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800153c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001540:	4605      	mov	r5, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8001546:	f000 fe7f 	bl	8002248 <HAL_GetTick>
   
  while (!WIFI_IS_CMDDATA_READY())
 800154a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80015a4 <SPI_WIFI_SendData+0x68>
  uint32_t tickstart = HAL_GetTick();
 800154e:	4607      	mov	r7, r0
  while (!WIFI_IS_CMDDATA_READY())
 8001550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001554:	4640      	mov	r0, r8
 8001556:	f001 f9c9 	bl	80028ec <HAL_GPIO_ReadPin>
 800155a:	2801      	cmp	r0, #1
 800155c:	d119      	bne.n	8001592 <SPI_WIFI_SendData+0x56>
    {
      return -1;
    }
  }
  
  WIFI_ENABLE_NSS(); 
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <SPI_WIFI_SendData+0x68>)
 8001566:	f001 f9c7 	bl	80028f8 <HAL_GPIO_WritePin>
 800156a:	200a      	movs	r0, #10
 800156c:	f000 fe72 	bl	8002254 <HAL_Delay>
  
  if(len & 0x1) 
 8001570:	07e3      	lsls	r3, r4, #31
  {
    pdata[len] = '\n';
 8001572:	bf48      	it	mi
 8001574:	230a      	movmi	r3, #10
  }
  if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , (len+1)/2, timeout) != HAL_OK)
 8001576:	f104 0201 	add.w	r2, r4, #1
    pdata[len] = '\n';
 800157a:	bf48      	it	mi
 800157c:	552b      	strbmi	r3, [r5, r4]
  if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , (len+1)/2, timeout) != HAL_OK)
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <SPI_WIFI_SendData+0x6c>)
 8001580:	4633      	mov	r3, r6
 8001582:	0852      	lsrs	r2, r2, #1
 8001584:	4629      	mov	r1, r5
 8001586:	f001 fd5b 	bl	8003040 <HAL_SPI_Transmit>
 800158a:	b938      	cbnz	r0, 800159c <SPI_WIFI_SendData+0x60>
  {
    return -1;
  }
  pdata[len] = 0;  
 800158c:	5528      	strb	r0, [r5, r4]
  return len;
 800158e:	b220      	sxth	r0, r4
 8001590:	e006      	b.n	80015a0 <SPI_WIFI_SendData+0x64>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001592:	f000 fe59 	bl	8002248 <HAL_GetTick>
 8001596:	1bc0      	subs	r0, r0, r7
 8001598:	42b0      	cmp	r0, r6
 800159a:	d9d9      	bls.n	8001550 <SPI_WIFI_SendData+0x14>
      return -1;
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a4:	40021800 	.word	0x40021800
 80015a8:	20000978 	.word	0x20000978

080015ac <SPI_WIFI_Delay>:
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80015ac:	f000 be52 	b.w	8002254 <HAL_Delay>

080015b0 <WIFI_Init>:
  * @brief  Initialiaze the LL part of the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80015b0:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <WIFI_Init+0x30>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <WIFI_Init+0x34>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <WIFI_Init+0x38>)
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <WIFI_Init+0x3c>)
 80015be:	490c      	ldr	r1, [pc, #48]	; (80015f0 <WIFI_Init+0x40>)
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <WIFI_Init+0x44>)
 80015c2:	f7ff fbab 	bl	8000d1c <ES_WIFI_RegisterBusIO>
 80015c6:	b940      	cbnz	r0, 80015da <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <WIFI_Init+0x44>)
 80015ca:	f7ff fb47 	bl	8000c5c <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80015ce:	3800      	subs	r0, #0
 80015d0:	bf18      	it	ne
 80015d2:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80015d4:	b003      	add	sp, #12
 80015d6:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80015da:	2001      	movs	r0, #1
 80015dc:	e7fa      	b.n	80015d4 <WIFI_Init+0x24>
 80015de:	bf00      	nop
 80015e0:	08001461 	.word	0x08001461
 80015e4:	0800153d 	.word	0x0800153d
 80015e8:	08001451 	.word	0x08001451
 80015ec:	080015ad 	.word	0x080015ad
 80015f0:	08001339 	.word	0x08001339
 80015f4:	200009d0 	.word	0x200009d0

080015f8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80015f8:	b508      	push	{r3, lr}
 80015fa:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80015fc:	460a      	mov	r2, r1
 80015fe:	4601      	mov	r1, r0
 8001600:	4806      	ldr	r0, [pc, #24]	; (800161c <WIFI_Connect+0x24>)
 8001602:	f7ff fb9d 	bl	8000d40 <ES_WIFI_Connect>
 8001606:	b930      	cbnz	r0, 8001616 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <WIFI_Connect+0x24>)
 800160a:	f7ff fbd9 	bl	8000dc0 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800160e:	3800      	subs	r0, #0
 8001610:	bf18      	it	ne
 8001612:	2001      	movne	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8001614:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8001616:	2001      	movs	r0, #1
 8001618:	e7fc      	b.n	8001614 <WIFI_Connect+0x1c>
 800161a:	bf00      	nop
 800161c:	200009d0 	.word	0x200009d0

08001620 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8001620:	4601      	mov	r1, r0
 8001622:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <WIFI_GetMAC_Address+0x14>)
 8001626:	f7ff fc39 	bl	8000e9c <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 800162a:	3800      	subs	r0, #0
 800162c:	bf18      	it	ne
 800162e:	2001      	movne	r0, #1
 8001630:	bd08      	pop	{r3, pc}
 8001632:	bf00      	nop
 8001634:	200009d0 	.word	0x200009d0

08001638 <WIFI_GetIP_Address>:
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.NetSettings.IsConnected)
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <WIFI_GetIP_Address+0x18>)
 800163a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
 800163e:	b122      	cbz	r2, 800164a <WIFI_GetIP_Address+0x12>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001640:	f8d3 30cd 	ldr.w	r3, [r3, #205]	; 0xcd
 8001644:	6003      	str	r3, [r0, #0]
    ret = WIFI_STATUS_OK;
 8001646:	2000      	movs	r0, #0
 8001648:	4770      	bx	lr
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800164a:	2001      	movs	r0, #1
  }
  return ret;
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200009d0 	.word	0x200009d0

08001654 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, const char* name, uint16_t port)
{
 8001654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
  conn.LocalPort = port;
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001656:	3900      	subs	r1, #0
 8001658:	bf18      	it	ne
 800165a:	2101      	movne	r1, #1
  conn.Number = socket;
 800165c:	f88d 0001 	strb.w	r0, [sp, #1]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001660:	f88d 1000 	strb.w	r1, [sp]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <WIFI_StartServer+0x28>)
  conn.LocalPort = port;
 8001666:	f8ad 3004 	strh.w	r3, [sp, #4]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800166a:	4669      	mov	r1, sp
 800166c:	f7ff fc34 	bl	8000ed8 <ES_WIFI_StartServerSingleConn>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001670:	3800      	subs	r0, #0
 8001672:	bf18      	it	ne
 8001674:	2001      	movne	r0, #1
 8001676:	b005      	add	sp, #20
 8001678:	f85d fb04 	ldr.w	pc, [sp], #4
 800167c:	200009d0 	.word	0x200009d0

08001680 <WIFI_StopServer>:
/**
  * @brief  Stop a server
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8001680:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj)== ES_WIFI_STATUS_OK)
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <WIFI_StopServer+0x10>)
 8001684:	f7ff fcc2 	bl	800100c <ES_WIFI_StopServerSingleConn>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001688:	3800      	subs	r0, #0
 800168a:	bf18      	it	ne
 800168c:	2001      	movne	r0, #1
 800168e:	bd08      	pop	{r3, pc}
 8001690:	200009d0 	.word	0x200009d0

08001694 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen)
{
 8001694:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, 10000) == ES_WIFI_STATUS_OK)
 8001696:	f242 7410 	movw	r4, #10000	; 0x2710
 800169a:	e9cd 3400 	strd	r3, r4, [sp]
 800169e:	4613      	mov	r3, r2
 80016a0:	460a      	mov	r2, r1
 80016a2:	4601      	mov	r1, r0
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <WIFI_SendData+0x20>)
 80016a6:	f7ff fcc3 	bl	8001030 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 80016aa:	3800      	subs	r0, #0
 80016ac:	bf18      	it	ne
 80016ae:	2001      	movne	r0, #1
 80016b0:	b002      	add	sp, #8
 80016b2:	bd10      	pop	{r4, pc}
 80016b4:	200009d0 	.word	0x200009d0

080016b8 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen)
{
 80016b8:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, 10000) == ES_WIFI_STATUS_OK)
 80016ba:	f242 7410 	movw	r4, #10000	; 0x2710
 80016be:	e9cd 3400 	strd	r3, r4, [sp]
 80016c2:	4613      	mov	r3, r2
 80016c4:	460a      	mov	r2, r1
 80016c6:	4601      	mov	r1, r0
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <WIFI_ReceiveData+0x20>)
 80016ca:	f7ff fd2f 	bl	800112c <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 80016ce:	3800      	subs	r0, #0
 80016d0:	bf18      	it	ne
 80016d2:	2001      	movne	r0, #1
 80016d4:	b002      	add	sp, #8
 80016d6:	bd10      	pop	{r4, pc}
 80016d8:	200009d0 	.word	0x200009d0

080016dc <ST7789H2_GetLcdPixelWidth>:
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
}
 80016dc:	20f0      	movs	r0, #240	; 0xf0
 80016de:	4770      	bx	lr

080016e0 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016e0:	b530      	push	{r4, r5, lr}
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80016e2:	28ef      	cmp	r0, #239	; 0xef
 80016e4:	4c0f      	ldr	r4, [pc, #60]	; (8001724 <ST7789H2_SetDisplayWindow+0x44>)
 80016e6:	bf94      	ite	ls
 80016e8:	4605      	movls	r5, r0
 80016ea:	2500      	movhi	r5, #0
  else
  {
    WindowsXstart = 0;
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80016ec:	29ef      	cmp	r1, #239	; 0xef
 80016ee:	8025      	strh	r5, [r4, #0]
 80016f0:	bf94      	ite	ls
 80016f2:	460d      	movls	r5, r1
 80016f4:	2500      	movhi	r5, #0
 80016f6:	8065      	strh	r5, [r4, #2]
  else
  {
    WindowsYstart = 0;
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80016f8:	1814      	adds	r4, r2, r0
 80016fa:	2cf0      	cmp	r4, #240	; 0xf0
  {
    WindowsXend = Width  + Xpos - 1;
 80016fc:	bfdc      	itt	le
 80016fe:	f102 32ff 	addle.w	r2, r2, #4294967295
 8001702:	1880      	addle	r0, r0, r2
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <ST7789H2_SetDisplayWindow+0x48>)
 8001706:	bfd4      	ite	le
 8001708:	b280      	uxthle	r0, r0
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800170a:	20ef      	movgt	r0, #239	; 0xef
 800170c:	8010      	strh	r0, [r2, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800170e:	1858      	adds	r0, r3, r1
 8001710:	28f0      	cmp	r0, #240	; 0xf0
  {
    WindowsYend = Height + Ypos - 1;
 8001712:	bfdd      	ittte	le
 8001714:	f103 33ff 	addle.w	r3, r3, #4294967295
 8001718:	18c9      	addle	r1, r1, r3
 800171a:	b289      	uxthle	r1, r1
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 800171c:	21ef      	movgt	r1, #239	; 0xef
 800171e:	8051      	strh	r1, [r2, #2]
  }
}
 8001720:	bd30      	pop	{r4, r5, pc}
 8001722:	bf00      	nop
 8001724:	20000958 	.word	0x20000958
 8001728:	20000008 	.word	0x20000008

0800172c <ST7789H2_GetLcdPixelHeight>:
 800172c:	20f0      	movs	r0, #240	; 0xf0
 800172e:	4770      	bx	lr

08001730 <ST7789H2_WriteReg>:
{
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	460c      	mov	r4, r1
 8001734:	4615      	mov	r5, r2
  LCD_IO_WriteReg(Command);
 8001736:	f000 fb13 	bl	8001d60 <LCD_IO_WriteReg>
  for (i=0; i<NbParameters; i++)
 800173a:	4425      	add	r5, r4
 800173c:	42ac      	cmp	r4, r5
 800173e:	d100      	bne.n	8001742 <ST7789H2_WriteReg+0x12>
}
 8001740:	bd38      	pop	{r3, r4, r5, pc}
    LCD_IO_WriteData(Parameters[i]);
 8001742:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001746:	f000 fb05 	bl	8001d54 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800174a:	e7f7      	b.n	800173c <ST7789H2_WriteReg+0xc>

0800174c <ST7789H2_SetOrientation>:
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800174c:	2801      	cmp	r0, #1
{
 800174e:	b513      	push	{r0, r1, r4, lr}
 8001750:	4604      	mov	r4, r0
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001752:	d109      	bne.n	8001768 <ST7789H2_SetOrientation+0x1c>
    parameter[0] = 0x00;     
 8001754:	2300      	movs	r3, #0
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001756:	2201      	movs	r2, #1
 8001758:	4669      	mov	r1, sp
 800175a:	2036      	movs	r0, #54	; 0x36
    parameter[0] = 0x60;     
 800175c:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001760:	f7ff ffe6 	bl	8001730 <ST7789H2_WriteReg>
}
 8001764:	b002      	add	sp, #8
 8001766:	bd10      	pop	{r4, pc}
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001768:	2802      	cmp	r0, #2
 800176a:	d114      	bne.n	8001796 <ST7789H2_SetOrientation+0x4a>
    parameter[0] = 0x00;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <ST7789H2_SetOrientation+0x50>)
 800176e:	9300      	str	r3, [sp, #0]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001770:	2206      	movs	r2, #6
    parameter[4] = 0x00;
 8001772:	2300      	movs	r3, #0
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001774:	4669      	mov	r1, sp
 8001776:	2033      	movs	r0, #51	; 0x33
    parameter[4] = 0x00;
 8001778:	f8ad 3004 	strh.w	r3, [sp, #4]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 800177c:	f7ff ffd8 	bl	8001730 <ST7789H2_WriteReg>
    parameter[0] = 0x00;
 8001780:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001784:	4622      	mov	r2, r4
 8001786:	4669      	mov	r1, sp
 8001788:	2037      	movs	r0, #55	; 0x37
    parameter[0] = 0x00;
 800178a:	f8ad 3000 	strh.w	r3, [sp]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800178e:	f7ff ffcf 	bl	8001730 <ST7789H2_WriteReg>
    parameter[0] = 0xC0; 
 8001792:	23c0      	movs	r3, #192	; 0xc0
 8001794:	e7df      	b.n	8001756 <ST7789H2_SetOrientation+0xa>
    parameter[0] = 0x60;     
 8001796:	2360      	movs	r3, #96	; 0x60
 8001798:	e7dd      	b.n	8001756 <ST7789H2_SetOrientation+0xa>
 800179a:	bf00      	nop
 800179c:	f0010000 	.word	0xf0010000

080017a0 <ST7789H2_DisplayOn>:
{
 80017a0:	b508      	push	{r3, lr}
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	4611      	mov	r1, r2
 80017a6:	2029      	movs	r0, #41	; 0x29
 80017a8:	f7ff ffc2 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80017ac:	2200      	movs	r2, #0
}
 80017ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80017b2:	4611      	mov	r1, r2
 80017b4:	2011      	movs	r0, #17
 80017b6:	f7ff bfbb 	b.w	8001730 <ST7789H2_WriteReg>
	...

080017bc <ST7789H2_Init>:
{
 80017bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LCD_IO_Init();
 80017be:	f000 fa39 	bl	8001c34 <LCD_IO_Init>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80017c2:	2200      	movs	r2, #0
 80017c4:	4611      	mov	r1, r2
 80017c6:	2010      	movs	r0, #16
 80017c8:	f7ff ffb2 	bl	8001730 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 80017cc:	200a      	movs	r0, #10
 80017ce:	f000 fad2 	bl	8001d76 <LCD_IO_Delay>
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80017d2:	2200      	movs	r2, #0
 80017d4:	4611      	mov	r1, r2
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff ffaa 	bl	8001730 <ST7789H2_WriteReg>
  LCD_IO_Delay(200);
 80017dc:	20c8      	movs	r0, #200	; 0xc8
 80017de:	f000 faca 	bl	8001d76 <LCD_IO_Delay>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80017e2:	2200      	movs	r2, #0
 80017e4:	4611      	mov	r1, r2
 80017e6:	2011      	movs	r0, #17
 80017e8:	f7ff ffa2 	bl	8001730 <ST7789H2_WriteReg>
  LCD_IO_Delay(120); 
 80017ec:	2078      	movs	r0, #120	; 0x78
 80017ee:	f000 fac2 	bl	8001d76 <LCD_IO_Delay>
  parameter[0] = 0x00;     
 80017f2:	2400      	movs	r4, #0
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80017f4:	4669      	mov	r1, sp
 80017f6:	2201      	movs	r2, #1
 80017f8:	2036      	movs	r0, #54	; 0x36
  parameter[0] = 0x05;     
 80017fa:	2505      	movs	r5, #5
  parameter[0] = 0x00;     
 80017fc:	f88d 4000 	strb.w	r4, [sp]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001800:	f7ff ff96 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001804:	4669      	mov	r1, sp
 8001806:	2201      	movs	r2, #1
 8001808:	203a      	movs	r0, #58	; 0x3a
  parameter[0] = 0x05;     
 800180a:	f88d 5000 	strb.w	r5, [sp]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800180e:	f7ff ff8f 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001812:	4622      	mov	r2, r4
 8001814:	4621      	mov	r1, r4
 8001816:	2021      	movs	r0, #33	; 0x21
 8001818:	f7ff ff8a 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x00;
 800181c:	f04f 466f 	mov.w	r6, #4009754624	; 0xef000000
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001820:	4669      	mov	r1, sp
 8001822:	2204      	movs	r2, #4
 8001824:	202a      	movs	r0, #42	; 0x2a
  parameter[0] = 0x00;
 8001826:	9600      	str	r6, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001828:	f7ff ff82 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800182c:	4669      	mov	r1, sp
 800182e:	2204      	movs	r2, #4
 8001830:	202b      	movs	r0, #43	; 0x2b
  parameter[0] = 0x00;
 8001832:	9600      	str	r6, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001834:	f7ff ff7c 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x0C;
 8001838:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <ST7789H2_Init+0x16c>)
 800183a:	9300      	str	r3, [sp, #0]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800183c:	462a      	mov	r2, r5
  parameter[4] = 0x33; 
 800183e:	2333      	movs	r3, #51	; 0x33
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001840:	4669      	mov	r1, sp
 8001842:	20b2      	movs	r0, #178	; 0xb2
  parameter[4] = 0x33; 
 8001844:	f88d 3004 	strb.w	r3, [sp, #4]
  parameter[0] = 0x35; 
 8001848:	2535      	movs	r5, #53	; 0x35
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800184a:	f7ff ff71 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800184e:	4669      	mov	r1, sp
 8001850:	2201      	movs	r2, #1
 8001852:	20b7      	movs	r0, #183	; 0xb7
  parameter[0] = 0x35; 
 8001854:	f88d 5000 	strb.w	r5, [sp]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001858:	f7ff ff6a 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x1F; 
 800185c:	231f      	movs	r3, #31
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800185e:	4669      	mov	r1, sp
 8001860:	2201      	movs	r2, #1
 8001862:	20bb      	movs	r0, #187	; 0xbb
  parameter[0] = 0x1F; 
 8001864:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001868:	f7ff ff62 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x2C; 
 800186c:	232c      	movs	r3, #44	; 0x2c
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800186e:	4669      	mov	r1, sp
 8001870:	2201      	movs	r2, #1
 8001872:	20c0      	movs	r0, #192	; 0xc0
  parameter[0] = 0x2C; 
 8001874:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001878:	f7ff ff5a 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x01;
 800187c:	f24c 3301 	movw	r3, #49921	; 0xc301
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001880:	4669      	mov	r1, sp
 8001882:	2202      	movs	r2, #2
 8001884:	20c2      	movs	r0, #194	; 0xc2
  parameter[0] = 0x01;
 8001886:	f8ad 3000 	strh.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800188a:	f7ff ff51 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x20; 
 800188e:	2320      	movs	r3, #32
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001890:	4669      	mov	r1, sp
 8001892:	2201      	movs	r2, #1
 8001894:	20c4      	movs	r0, #196	; 0xc4
  parameter[0] = 0x20; 
 8001896:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800189a:	f7ff ff49 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0x0F; 
 800189e:	230f      	movs	r3, #15
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80018a0:	4669      	mov	r1, sp
 80018a2:	2201      	movs	r2, #1
 80018a4:	20c6      	movs	r0, #198	; 0xc6
  parameter[0] = 0x0F; 
 80018a6:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80018aa:	f7ff ff41 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0xA4;
 80018ae:	f24a 13a4 	movw	r3, #41380	; 0xa1a4
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80018b2:	4669      	mov	r1, sp
 80018b4:	2201      	movs	r2, #1
 80018b6:	20d0      	movs	r0, #208	; 0xd0
  parameter[0] = 0xA4;
 80018b8:	f8ad 3000 	strh.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80018bc:	f7ff ff38 	bl	8001730 <ST7789H2_WriteReg>
  parameter[0] = 0xD0;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <ST7789H2_Init+0x170>)
 80018c2:	9300      	str	r3, [sp, #0]
  parameter[4] = 0x0C;
 80018c4:	f103 532c 	add.w	r3, r3, #721420288	; 0x2b000000
 80018c8:	f503 1320 	add.w	r3, r3, #2621440	; 0x280000
 80018cc:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 80018d0:	9301      	str	r3, [sp, #4]
  parameter[8] = 0x50;
 80018d2:	f1a3 53f9 	sub.w	r3, r3, #522190848	; 0x1f200000
 80018d6:	f5a3 23bb 	sub.w	r3, r3, #382976	; 0x5d800
 80018da:	f2a3 63bc 	subw	r3, r3, #1724	; 0x6bc
 80018de:	9302      	str	r3, [sp, #8]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80018e0:	4669      	mov	r1, sp
  parameter[12] = 0x29;
 80018e2:	f642 5329 	movw	r3, #11561	; 0x2d29
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80018e6:	220e      	movs	r2, #14
 80018e8:	20e0      	movs	r0, #224	; 0xe0
  parameter[12] = 0x29;
 80018ea:	f8ad 300c 	strh.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80018ee:	f7ff ff1f 	bl	8001730 <ST7789H2_WriteReg>
  parameter[4] = 0x06;
 80018f2:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <ST7789H2_Init+0x174>)
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <ST7789H2_Init+0x178>)
 80018f6:	e9cd 2300 	strd	r2, r3, [sp]
  parameter[8] = 0x51;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <ST7789H2_Init+0x17c>)
 80018fc:	9302      	str	r3, [sp, #8]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80018fe:	4669      	mov	r1, sp
  parameter[12] = 0x2F;
 8001900:	f243 132f 	movw	r3, #12591	; 0x312f
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001904:	220e      	movs	r2, #14
 8001906:	20e1      	movs	r0, #225	; 0xe1
  parameter[12] = 0x2F;
 8001908:	f8ad 300c 	strh.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800190c:	f7ff ff10 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_DisplayOn();  
 8001910:	f7ff ff46 	bl	80017a0 <ST7789H2_DisplayOn>
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	4669      	mov	r1, sp
 8001918:	4628      	mov	r0, r5
  parameter[0] = 0x00;     
 800191a:	f88d 4000 	strb.w	r4, [sp]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800191e:	f7ff ff07 	bl	8001730 <ST7789H2_WriteReg>
}
 8001922:	b004      	add	sp, #16
 8001924:	bd70      	pop	{r4, r5, r6, pc}
 8001926:	bf00      	nop
 8001928:	33000c0c 	.word	0x33000c0c
 800192c:	081108d0 	.word	0x081108d0
 8001930:	081008d0 	.word	0x081008d0
 8001934:	44390606 	.word	0x44390606
 8001938:	14160b51 	.word	0x14160b51

0800193c <ST7789H2_DisplayOff>:
{
 800193c:	b507      	push	{r0, r1, r2, lr}
  parameter[0] = 0xFE;
 800193e:	23fe      	movs	r3, #254	; 0xfe
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001940:	a901      	add	r1, sp, #4
 8001942:	2201      	movs	r2, #1
 8001944:	20bd      	movs	r0, #189	; 0xbd
  parameter[0] = 0xFE;
 8001946:	f88d 3004 	strb.w	r3, [sp, #4]
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 800194a:	f7ff fef1 	bl	8001730 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800194e:	2200      	movs	r2, #0
 8001950:	4611      	mov	r1, r2
 8001952:	2010      	movs	r0, #16
 8001954:	f7ff feec 	bl	8001730 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8001958:	200a      	movs	r0, #10
 800195a:	f000 fa0c 	bl	8001d76 <LCD_IO_Delay>
}
 800195e:	b003      	add	sp, #12
 8001960:	f85d fb04 	ldr.w	pc, [sp], #4

08001964 <ST7789H2_SetCursor>:
{
 8001964:	b537      	push	{r0, r1, r2, r4, r5, lr}
  parameter[1] = 0x00 + Xpos;
 8001966:	b2c0      	uxtb	r0, r0
 8001968:	f88d 0005 	strb.w	r0, [sp, #5]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800196c:	2204      	movs	r2, #4
  parameter[3] = 0xEF + Xpos;
 800196e:	3811      	subs	r0, #17
  parameter[0] = 0x00;     
 8001970:	2500      	movs	r5, #0
{
 8001972:	460c      	mov	r4, r1
  parameter[3] = 0xEF + Xpos;
 8001974:	f88d 0007 	strb.w	r0, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001978:	eb0d 0102 	add.w	r1, sp, r2
 800197c:	202a      	movs	r0, #42	; 0x2a
  parameter[0] = 0x00;     
 800197e:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[2] = 0x00;
 8001982:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001986:	f7ff fed3 	bl	8001730 <ST7789H2_WriteReg>
  parameter[1] = 0x00 + Ypos;
 800198a:	b2e1      	uxtb	r1, r4
 800198c:	f88d 1005 	strb.w	r1, [sp, #5]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001990:	2204      	movs	r2, #4
  parameter[3] = 0xEF + Ypos;
 8001992:	3911      	subs	r1, #17
 8001994:	f88d 1007 	strb.w	r1, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001998:	202b      	movs	r0, #43	; 0x2b
 800199a:	eb0d 0102 	add.w	r1, sp, r2
  parameter[0] = 0x00;
 800199e:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[2] = 0x00;
 80019a2:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80019a6:	f7ff fec3 	bl	8001730 <ST7789H2_WriteReg>
}
 80019aa:	b003      	add	sp, #12
 80019ac:	bd30      	pop	{r4, r5, pc}

080019ae <ST7789H2_WritePixel>:
{
 80019ae:	b510      	push	{r4, lr}
 80019b0:	4614      	mov	r4, r2
  ST7789H2_SetCursor(Xpos, Ypos);
 80019b2:	f7ff ffd7 	bl	8001964 <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80019b6:	2200      	movs	r2, #0
 80019b8:	202c      	movs	r0, #44	; 0x2c
 80019ba:	4611      	mov	r1, r2
 80019bc:	f7ff feb8 	bl	8001730 <ST7789H2_WriteReg>
  LCD_IO_WriteData(RGBCode);
 80019c0:	4620      	mov	r0, r4
}
 80019c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_IO_WriteData(RGBCode);
 80019c6:	f000 b9c5 	b.w	8001d54 <LCD_IO_WriteData>

080019ca <ST7789H2_ReadPixel>:
{
 80019ca:	b538      	push	{r3, r4, r5, lr}
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
  ST7789H2_SetCursor(Xpos, Ypos);
 80019d0:	f7ff ffc8 	bl	8001964 <ST7789H2_SetCursor>
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80019d4:	4629      	mov	r1, r5
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff ffc4 	bl	8001964 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80019dc:	2200      	movs	r2, #0
 80019de:	4611      	mov	r1, r2
 80019e0:	202e      	movs	r0, #46	; 0x2e
 80019e2:	f7ff fea5 	bl	8001730 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80019e6:	f000 f9c1 	bl	8001d6c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80019ea:	f000 f9bf 	bl	8001d6c <LCD_IO_ReadData>
 80019ee:	4604      	mov	r4, r0
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80019f0:	f000 f9bc 	bl	8001d6c <LCD_IO_ReadData>
  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80019f4:	f3c4 0285 	ubfx	r2, r4, #2, #6
 80019f8:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80019fc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8001a00:	f404 4078 	and.w	r0, r4, #63488	; 0xf800
 8001a04:	4418      	add	r0, r3
}
 8001a06:	b280      	uxth	r0, r0
 8001a08:	bd38      	pop	{r3, r4, r5, pc}

08001a0a <ST7789H2_DrawHLine>:
{
 8001a0a:	b570      	push	{r4, r5, r6, lr}
 8001a0c:	4606      	mov	r6, r0
 8001a0e:	4608      	mov	r0, r1
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001a10:	4611      	mov	r1, r2
{
 8001a12:	461c      	mov	r4, r3
  ST7789H2_SetCursor(Xpos, Ypos); 
 8001a14:	f7ff ffa6 	bl	8001964 <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	202c      	movs	r0, #44	; 0x2c
 8001a1e:	f7ff fe87 	bl	8001730 <ST7789H2_WriteReg>
  for(counter = 0; counter < Length; counter++)
 8001a22:	2500      	movs	r5, #0
 8001a24:	42a5      	cmp	r5, r4
 8001a26:	d100      	bne.n	8001a2a <ST7789H2_DrawHLine+0x20>
}
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
    LCD_IO_WriteData(RGBCode);
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f000 f992 	bl	8001d54 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8001a30:	3501      	adds	r5, #1
 8001a32:	e7f7      	b.n	8001a24 <ST7789H2_DrawHLine+0x1a>

08001a34 <ST7789H2_DrawVLine>:
{
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	460e      	mov	r6, r1
 8001a38:	4607      	mov	r7, r0
  ST7789H2_SetCursor(Xpos, Ypos);
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4630      	mov	r0, r6
{
 8001a3e:	4614      	mov	r4, r2
 8001a40:	461d      	mov	r5, r3
  ST7789H2_SetCursor(Xpos, Ypos);
 8001a42:	f7ff ff8f 	bl	8001964 <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001a46:	2200      	movs	r2, #0
 8001a48:	4611      	mov	r1, r2
 8001a4a:	202c      	movs	r0, #44	; 0x2c
 8001a4c:	f7ff fe70 	bl	8001730 <ST7789H2_WriteReg>
  for(counter = 0; counter < Length; counter++)
 8001a50:	4425      	add	r5, r4
 8001a52:	b2ad      	uxth	r5, r5
 8001a54:	42ac      	cmp	r4, r5
 8001a56:	d100      	bne.n	8001a5a <ST7789H2_DrawVLine+0x26>
}
 8001a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	463a      	mov	r2, r7
 8001a5e:	4630      	mov	r0, r6
 8001a60:	3401      	adds	r4, #1
 8001a62:	f7ff ffa4 	bl	80019ae <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001a66:	b2a4      	uxth	r4, r4
 8001a68:	e7f4      	b.n	8001a54 <ST7789H2_DrawVLine+0x20>
	...

08001a6c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8001a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a70:	4615      	mov	r5, r2
  uint32_t i = 0;
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001a72:	2200      	movs	r2, #0
{
 8001a74:	4604      	mov	r4, r0
 8001a76:	460e      	mov	r6, r1
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001a78:	202c      	movs	r0, #44	; 0x2c
 8001a7a:	4611      	mov	r1, r2
{
 8001a7c:	4698      	mov	r8, r3
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8001a7e:	f7ff fe57 	bl	8001730 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001a82:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8001ac4 <ST7789H2_DrawRGBHLine+0x58>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001a86:	f8df a040 	ldr.w	sl, [pc, #64]	; 8001ac8 <ST7789H2_DrawRGBHLine+0x5c>
  uint32_t i = 0;
 8001a8a:	2700      	movs	r7, #0
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8001a8c:	4425      	add	r5, r4
 8001a8e:	42a5      	cmp	r5, r4
 8001a90:	d801      	bhi.n	8001a96 <ST7789H2_DrawRGBHLine+0x2a>
        LCD_IO_WriteData(rgb565[i]);        
      }      
      i++;
    }
  }
}
 8001a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001a96:	f8b9 3000 	ldrh.w	r3, [r9]
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	d810      	bhi.n	8001ac0 <ST7789H2_DrawRGBHLine+0x54>
 8001a9e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8001aa2:	42b3      	cmp	r3, r6
 8001aa4:	d80c      	bhi.n	8001ac0 <ST7789H2_DrawRGBHLine+0x54>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001aa6:	f8ba 3000 	ldrh.w	r3, [sl]
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8001aaa:	42a3      	cmp	r3, r4
 8001aac:	d308      	bcc.n	8001ac0 <ST7789H2_DrawRGBHLine+0x54>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8001aae:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8001ab2:	42b3      	cmp	r3, r6
 8001ab4:	d304      	bcc.n	8001ac0 <ST7789H2_DrawRGBHLine+0x54>
        LCD_IO_WriteData(rgb565[i]);        
 8001ab6:	f838 0017 	ldrh.w	r0, [r8, r7, lsl #1]
 8001aba:	f000 f94b 	bl	8001d54 <LCD_IO_WriteData>
      i++;
 8001abe:	3701      	adds	r7, #1
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8001ac0:	3401      	adds	r4, #1
 8001ac2:	e7e4      	b.n	8001a8e <ST7789H2_DrawRGBHLine+0x22>
 8001ac4:	20000958 	.word	0x20000958
 8001ac8:	20000008 	.word	0x20000008

08001acc <ST7789H2_DrawBitmap>:
{
 8001acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ad0:	4607      	mov	r7, r0
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001ad2:	4816      	ldr	r0, [pc, #88]	; (8001b2c <ST7789H2_DrawBitmap+0x60>)
{
 8001ad4:	460e      	mov	r6, r1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001ad6:	4916      	ldr	r1, [pc, #88]	; (8001b30 <ST7789H2_DrawBitmap+0x64>)
 8001ad8:	8805      	ldrh	r5, [r0, #0]
 8001ada:	880b      	ldrh	r3, [r1, #0]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001adc:	8844      	ldrh	r4, [r0, #2]
 8001ade:	8849      	ldrh	r1, [r1, #2]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001ae0:	3501      	adds	r5, #1
 8001ae2:	1aed      	subs	r5, r5, r3
  size = *(volatile uint16_t *) (pbmp + 2);
 8001ae4:	8853      	ldrh	r3, [r2, #2]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001ae6:	8893      	ldrh	r3, [r2, #4]
  index = *(volatile uint16_t *) (pbmp + 10);
 8001ae8:	f8b2 800a 	ldrh.w	r8, [r2, #10]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001aec:	8993      	ldrh	r3, [r2, #12]
  index = *(volatile uint16_t *) (pbmp + 10);
 8001aee:	fa1f f888 	uxth.w	r8, r8
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001af2:	3401      	adds	r4, #1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8001af4:	b2ad      	uxth	r5, r5
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8001af6:	1a64      	subs	r4, r4, r1
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001af8:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001afc:	fa16 f484 	uxtah	r4, r6, r4
 8001b00:	ea4f 0945 	mov.w	r9, r5, lsl #1
 8001b04:	4490      	add	r8, r2
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d302      	bcc.n	8001b10 <ST7789H2_DrawBitmap+0x44>
}
 8001b0a:	b003      	add	sp, #12
 8001b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ST7789H2_SetCursor(Xpos, posY - 1);
 8001b10:	3c01      	subs	r4, #1
 8001b12:	b2a1      	uxth	r1, r4
 8001b14:	4638      	mov	r0, r7
 8001b16:	9101      	str	r1, [sp, #4]
 8001b18:	f7ff ff24 	bl	8001964 <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8001b1c:	4643      	mov	r3, r8
 8001b1e:	9901      	ldr	r1, [sp, #4]
 8001b20:	462a      	mov	r2, r5
 8001b22:	4638      	mov	r0, r7
 8001b24:	f7ff ffa2 	bl	8001a6c <ST7789H2_DrawRGBHLine>
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8001b28:	44c8      	add	r8, r9
 8001b2a:	e7ec      	b.n	8001b06 <ST7789H2_DrawBitmap+0x3a>
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000958 	.word	0x20000958

08001b34 <ST7789H2_DrawRGBImage>:
{
 8001b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001b38:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001b3c:	4605      	mov	r5, r0
 8001b3e:	4616      	mov	r6, r2
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8001b40:	460c      	mov	r4, r1
 8001b42:	ea4f 0942 	mov.w	r9, r2, lsl #1
 8001b46:	18cf      	adds	r7, r1, r3
 8001b48:	42a7      	cmp	r7, r4
 8001b4a:	d802      	bhi.n	8001b52 <ST7789H2_DrawRGBImage+0x1e>
}
 8001b4c:	b003      	add	sp, #12
 8001b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ST7789H2_SetCursor(Xpos, posY);
 8001b52:	b2a1      	uxth	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	f7ff ff04 	bl	8001964 <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	9901      	ldr	r1, [sp, #4]
 8001b60:	4632      	mov	r2, r6
 8001b62:	4628      	mov	r0, r5
 8001b64:	f7ff ff82 	bl	8001a6c <ST7789H2_DrawRGBHLine>
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8001b68:	3401      	adds	r4, #1
 8001b6a:	44c8      	add	r8, r9
 8001b6c:	e7ec      	b.n	8001b48 <ST7789H2_DrawRGBImage+0x14>

08001b6e <ST7789H2_ReadReg>:
{
 8001b6e:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(Command);
 8001b70:	f000 f8f6 	bl	8001d60 <LCD_IO_WriteReg>
  LCD_IO_ReadData();
 8001b74:	f000 f8fa 	bl	8001d6c <LCD_IO_ReadData>
  return (LCD_IO_ReadData());
 8001b78:	f000 f8f8 	bl	8001d6c <LCD_IO_ReadData>
}
 8001b7c:	b2c0      	uxtb	r0, r0
 8001b7e:	bd08      	pop	{r3, pc}

08001b80 <ST7789H2_ReadID>:
{
 8001b80:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8001b82:	f000 f857 	bl	8001c34 <LCD_IO_Init>
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8001b86:	2004      	movs	r0, #4
 8001b88:	f7ff fff1 	bl	8001b6e <ST7789H2_ReadReg>
}
 8001b8c:	b280      	uxth	r0, r0
 8001b8e:	bd08      	pop	{r3, pc}

08001b90 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001b90:	b500      	push	{lr}
 8001b92:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8001b94:	b9e0      	cbnz	r0, 8001bd0 <BSP_LED_Init+0x40>
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <BSP_LED_Init+0x60>)
 8001b98:	9001      	str	r0, [sp, #4]
 8001b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9c:	f042 0204 	orr.w	r2, r2, #4
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <BSP_LED_Init+0x64>)
 8001bae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001bb2:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8001bb6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <BSP_LED_Init+0x68>)
 8001bc0:	a903      	add	r1, sp, #12
 8001bc2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001bc6:	f000 fdbd 	bl	8002744 <HAL_GPIO_Init>
}
 8001bca:	b009      	add	sp, #36	; 0x24
 8001bcc:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 8001bd0:	2801      	cmp	r0, #1
 8001bd2:	d1eb      	bne.n	8001bac <BSP_LED_Init+0x1c>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <BSP_LED_Init+0x60>)
 8001bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bdc:	f042 0210 	orr.w	r2, r2, #16
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	9b02      	ldr	r3, [sp, #8]
 8001bec:	e7de      	b.n	8001bac <BSP_LED_Init+0x1c>
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08004bdc 	.word	0x08004bdc
 8001bf8:	20000044 	.word	0x20000044

08001bfc <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <BSP_LED_On+0x14>)
 8001bfe:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <BSP_LED_On+0x18>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c0a:	f000 be75 	b.w	80028f8 <HAL_GPIO_WritePin>
 8001c0e:	bf00      	nop
 8001c10:	08004bdc 	.word	0x08004bdc
 8001c14:	20000044 	.word	0x20000044

08001c18 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <BSP_LED_Off+0x14>)
 8001c1a:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <BSP_LED_Off+0x18>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c26:	f000 be67 	b.w	80028f8 <HAL_GPIO_WritePin>
 8001c2a:	bf00      	nop
 8001c2c:	08004bdc 	.word	0x08004bdc
 8001c30:	20000044 	.word	0x20000044

08001c34 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	b0a1      	sub	sp, #132	; 0x84
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c38:	2400      	movs	r4, #0
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <LCD_IO_Init+0x10c>)
 8001c3c:	9400      	str	r4, [sp, #0]
 8001c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001c40:	4840      	ldr	r0, [pc, #256]	; (8001d44 <LCD_IO_Init+0x110>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
 8001c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c4a:	f002 0201 	and.w	r2, r2, #1
 8001c4e:	9200      	str	r2, [sp, #0]
 8001c50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c52:	9401      	str	r4, [sp, #4]
 8001c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c56:	f042 0208 	orr.w	r2, r2, #8
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5e:	f002 0208 	and.w	r2, r2, #8
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	9402      	str	r4, [sp, #8]
 8001c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6a:	f042 0210 	orr.w	r2, r2, #16
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c72:	f002 0210 	and.w	r2, r2, #16
 8001c76:	9202      	str	r2, [sp, #8]
 8001c78:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c7a:	9403      	str	r4, [sp, #12]
 8001c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
 8001c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c86:	f002 0220 	and.w	r2, r2, #32
 8001c8a:	9203      	str	r2, [sp, #12]
 8001c8c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c8e:	9404      	str	r4, [sp, #16]
 8001c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001ca0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ca2:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001ca4:	2502      	movs	r5, #2
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8001ca6:	2703      	movs	r7, #3
 8001ca8:	230c      	movs	r3, #12
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001caa:	e9cd 560d 	strd	r5, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001cae:	a90c      	add	r1, sp, #48	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8001cb0:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8001cb4:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001cb8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001cba:	f000 fd43 	bl	8002744 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8001cbe:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001cc2:	a90c      	add	r1, sp, #48	; 0x30
 8001cc4:	4820      	ldr	r0, [pc, #128]	; (8001d48 <LCD_IO_Init+0x114>)
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8001cc6:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001cc8:	f000 fd3c 	bl	8002744 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001ccc:	f24f 033f 	movw	r3, #61503	; 0xf03f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001cd0:	a90c      	add	r1, sp, #48	; 0x30
 8001cd2:	481e      	ldr	r0, [pc, #120]	; (8001d4c <LCD_IO_Init+0x118>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001cd4:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001cd6:	f000 fd35 	bl	8002744 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001cda:	f240 433f 	movw	r3, #1087	; 0x43f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001cde:	a90c      	add	r1, sp, #48	; 0x30
 8001ce0:	481b      	ldr	r0, [pc, #108]	; (8001d50 <LCD_IO_Init+0x11c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001ce2:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001ce4:	f000 fd2e 	bl	8002744 <HAL_GPIO_Init>
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8001ce8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001cec:	930c      	str	r3, [sp, #48]	; 0x30
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001cee:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001cf2:	930d      	str	r3, [sp, #52]	; 0x34
  sram_timing.DataSetupTime         = 4;
 8001cf4:	2304      	movs	r3, #4
  sram_timing.BusTurnAroundDuration = 1;
 8001cf6:	e9cd 3607 	strd	r3, r6, [sp, #28]
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001cfa:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001cfe:	2310      	movs	r3, #16
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001d00:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8001d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8001d08:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8001d0c:	aa05      	add	r2, sp, #20
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8001d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001d12:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8001d16:	4611      	mov	r1, r2
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8001d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8001d1c:	a80c      	add	r0, sp, #48	; 0x30
  sram_timing.AddressHoldTime       = 1;
 8001d1e:	e9cd 7605 	strd	r7, r6, [sp, #20]
  sram_timing.DataLatency           = 2;
 8001d22:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8001d26:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8001d2a:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8001d2e:	940b      	str	r4, [sp, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8001d30:	9410      	str	r4, [sp, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d32:	9415      	str	r4, [sp, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8001d34:	941a      	str	r4, [sp, #104]	; 0x68
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001d36:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8001d38:	f001 fbbb 	bl	80034b2 <HAL_SRAM_Init>
  FMC_BANK3_Init();
}
 8001d3c:	b021      	add	sp, #132	; 0x84
 8001d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800

08001d54 <LCD_IO_WriteData>:
  FMC_BANK3->RAM = Data;
 8001d54:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8001d58:	8058      	strh	r0, [r3, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5a:	f3bf 8f4f 	dsb	sy
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
}
 8001d5e:	4770      	bx	lr

08001d60 <LCD_IO_WriteReg>:
  FMC_BANK3->REG = Reg;
 8001d60:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8001d64:	8018      	strh	r0, [r3, #0]
 8001d66:	f3bf 8f4f 	dsb	sy
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
}
 8001d6a:	4770      	bx	lr

08001d6c <LCD_IO_ReadData>:
  return FMC_BANK3->RAM;
 8001d6c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8001d70:	8858      	ldrh	r0, [r3, #2]
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
  return FMC_BANK3_ReadData();
}
 8001d72:	b280      	uxth	r0, r0
 8001d74:	4770      	bx	lr

08001d76 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001d76:	f000 ba6d 	b.w	8002254 <HAL_Delay>
	...

08001d7c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001d7c:	b508      	push	{r3, lr}
  return(LcdDrv->GetLcdPixelWidth());
 8001d7e:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <BSP_LCD_GetXSize+0xc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	4798      	blx	r3
}
 8001d86:	bd08      	pop	{r3, pc}
 8001d88:	2000095c 	.word	0x2000095c

08001d8c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001d8c:	b508      	push	{r3, lr}
  return(LcdDrv->GetLcdPixelHeight());
 8001d8e:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <BSP_LCD_GetYSize+0xc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	4798      	blx	r3
}
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	2000095c 	.word	0x2000095c

08001d9c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
  DrawProp.TextColor = Color;
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <BSP_LCD_SetTextColor+0x8>)
 8001d9e:	6018      	str	r0, [r3, #0]
}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20001138 	.word	0x20001138

08001da8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
  DrawProp.BackColor = Color;
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <BSP_LCD_SetBackColor+0x8>)
 8001daa:	6058      	str	r0, [r3, #4]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20001138 	.word	0x20001138

08001db4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp.pFont = fonts;
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <BSP_LCD_SetFont+0x8>)
 8001db6:	6098      	str	r0, [r3, #8]
}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20001138 	.word	0x20001138

08001dc0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
  if(LcdDrv->WritePixel != NULL)
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <BSP_LCD_DrawPixel+0xc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	b103      	cbz	r3, 8001dca <BSP_LCD_DrawPixel+0xa>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8001dc8:	4718      	bx	r3
  }
}
 8001dca:	4770      	bx	lr
 8001dcc:	2000095c 	.word	0x2000095c

08001dd0 <BSP_LCD_DisplayChar>:
{
 8001dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001dd4:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <BSP_LCD_DisplayChar+0xa8>)
{
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001ddc:	6899      	ldr	r1, [r3, #8]
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001dde:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001de2:	f8b1 a006 	ldrh.w	sl, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001de6:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001dea:	f10b 0607 	add.w	r6, fp, #7
 8001dee:	680a      	ldr	r2, [r1, #0]
 8001df0:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001df2:	fb0a f505 	mul.w	r5, sl, r5
  uint32_t line;
  
  height = DrawProp.pFont->Height;
  width  = DrawProp.pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8001df6:	ebcb 09c6 	rsb	r9, fp, r6, lsl #3
  
  for(i = 0; i < height; i++)
 8001dfa:	fb06 2505 	mla	r5, r6, r5, r2
      break;
    }  
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001dfe:	f10b 32ff 	add.w	r2, fp, #4294967295
 8001e02:	fa52 f389 	uxtab	r3, r2, r9
  for(i = 0; i < height; i++)
 8001e06:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 8001e0e:	45d0      	cmp	r8, sl
 8001e10:	eb03 0108 	add.w	r1, r3, r8
 8001e14:	b289      	uxth	r1, r1
 8001e16:	d302      	bcc.n	8001e1e <BSP_LCD_DisplayChar+0x4e>
}
 8001e18:	b005      	add	sp, #20
 8001e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001e1e:	2e01      	cmp	r6, #1
 8001e20:	782c      	ldrb	r4, [r5, #0]
 8001e22:	d004      	beq.n	8001e2e <BSP_LCD_DisplayChar+0x5e>
 8001e24:	2e02      	cmp	r6, #2
 8001e26:	d10b      	bne.n	8001e40 <BSP_LCD_DisplayChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8001e28:	882c      	ldrh	r4, [r5, #0]
 8001e2a:	ba64      	rev16	r4, r4
 8001e2c:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001e2e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001e78 <BSP_LCD_DisplayChar+0xa8>
 8001e32:	2700      	movs	r7, #0
 8001e34:	45bb      	cmp	fp, r7
 8001e36:	d80a      	bhi.n	8001e4e <BSP_LCD_DisplayChar+0x7e>
  for(i = 0; i < height; i++)
 8001e38:	f108 0801 	add.w	r8, r8, #1
 8001e3c:	4435      	add	r5, r6
 8001e3e:	e7e5      	b.n	8001e0c <BSP_LCD_DisplayChar+0x3c>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001e40:	786a      	ldrb	r2, [r5, #1]
 8001e42:	0424      	lsls	r4, r4, #16
 8001e44:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001e48:	78aa      	ldrb	r2, [r5, #2]
 8001e4a:	4314      	orrs	r4, r2
      break;
 8001e4c:	e7ef      	b.n	8001e2e <BSP_LCD_DisplayChar+0x5e>
      if(line & (1 << (width- j + offset- 1))) 
 8001e4e:	9b00      	ldr	r3, [sp, #0]
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001e50:	9103      	str	r1, [sp, #12]
 8001e52:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001e54:	9b02      	ldr	r3, [sp, #8]
 8001e56:	2201      	movs	r2, #1
 8001e58:	eba3 0c07 	sub.w	ip, r3, r7
 8001e5c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001e60:	4222      	tst	r2, r4
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8001e62:	bf14      	ite	ne
 8001e64:	f8b9 2000 	ldrhne.w	r2, [r9]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001e68:	f8b9 2004 	ldrheq.w	r2, [r9, #4]
 8001e6c:	b280      	uxth	r0, r0
 8001e6e:	f7ff ffa7 	bl	8001dc0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001e72:	3701      	adds	r7, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001e74:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8001e76:	e7dd      	b.n	8001e34 <BSP_LCD_DisplayChar+0x64>
 8001e78:	20001138 	.word	0x20001138

08001e7c <BSP_LCD_DisplayStringAt>:
{
 8001e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e80:	4699      	mov	r9, r3
 8001e82:	4605      	mov	r5, r0
 8001e84:	460f      	mov	r7, r1
 8001e86:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
 8001e88:	4613      	mov	r3, r2
 8001e8a:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d1fa      	bne.n	8001e8a <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001e94:	f7ff ff72 	bl	8001d7c <BSP_LCD_GetXSize>
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <BSP_LCD_DisplayStringAt+0xa0>)
 8001e9a:	689a      	ldr	r2, [r3, #8]
  switch (Mode)
 8001e9c:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001ea0:	8892      	ldrh	r2, [r2, #4]
 8001ea2:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8001ea6:	4698      	mov	r8, r3
 8001ea8:	d01b      	beq.n	8001ee2 <BSP_LCD_DisplayStringAt+0x66>
 8001eaa:	f1b9 0f02 	cmp.w	r9, #2
 8001eae:	d01f      	beq.n	8001ef0 <BSP_LCD_DisplayStringAt+0x74>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001eb0:	b22b      	sxth	r3, r5
    refcolumn = 1;
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bfd8      	it	le
 8001eb6:	2501      	movle	r5, #1
 8001eb8:	3e01      	subs	r6, #1
 8001eba:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001ebe:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8001ec2:	3c00      	subs	r4, #0
 8001ec4:	bf18      	it	ne
 8001ec6:	2401      	movne	r4, #1
 8001ec8:	f7ff ff58 	bl	8001d7c <BSP_LCD_GetXSize>
 8001ecc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ed0:	889b      	ldrh	r3, [r3, #4]
 8001ed2:	fb03 0019 	mls	r0, r3, r9, r0
 8001ed6:	b280      	uxth	r0, r0
 8001ed8:	4298      	cmp	r0, r3
 8001eda:	d300      	bcc.n	8001ede <BSP_LCD_DisplayStringAt+0x62>
 8001edc:	b974      	cbnz	r4, 8001efc <BSP_LCD_DisplayStringAt+0x80>
}
 8001ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8001ee2:	1b34      	subs	r4, r6, r4
 8001ee4:	4420      	add	r0, r4
 8001ee6:	4350      	muls	r0, r2
 8001ee8:	eb05 0050 	add.w	r0, r5, r0, lsr #1
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001eec:	b285      	uxth	r5, r0
      break;
 8001eee:	e7df      	b.n	8001eb0 <BSP_LCD_DisplayStringAt+0x34>
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001ef0:	1b34      	subs	r4, r6, r4
 8001ef2:	4404      	add	r4, r0
 8001ef4:	fb14 f402 	smulbb	r4, r4, r2
 8001ef8:	1b60      	subs	r0, r4, r5
 8001efa:	e7f7      	b.n	8001eec <BSP_LCD_DisplayStringAt+0x70>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001efc:	4628      	mov	r0, r5
 8001efe:	7832      	ldrb	r2, [r6, #0]
 8001f00:	4639      	mov	r1, r7
 8001f02:	f7ff ff65 	bl	8001dd0 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp.pFont->Width;
 8001f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f0a:	8898      	ldrh	r0, [r3, #4]
    i++;
 8001f0c:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp.pFont->Width;
 8001f10:	4428      	add	r0, r5
 8001f12:	b285      	uxth	r5, r0
    i++;
 8001f14:	fa1f f989 	uxth.w	r9, r9
 8001f18:	e7d1      	b.n	8001ebe <BSP_LCD_DisplayStringAt+0x42>
 8001f1a:	bf00      	nop
 8001f1c:	20001138 	.word	0x20001138

08001f20 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp.pFont;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <BSP_LCD_DisplayStringAtLine+0x18>)
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	88db      	ldrh	r3, [r3, #6]
 8001f26:	fb13 f000 	smulbb	r0, r3, r0
{
 8001f2a:	460a      	mov	r2, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	b281      	uxth	r1, r0
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff bfa3 	b.w	8001e7c <BSP_LCD_DisplayStringAt>
 8001f36:	bf00      	nop
 8001f38:	20001138 	.word	0x20001138

08001f3c <BSP_LCD_DrawHLine>:
  if(LcdDrv->DrawHLine != NULL)
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <BSP_LCD_DrawHLine+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
{
 8001f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(LcdDrv->DrawHLine != NULL)
 8001f44:	6a1c      	ldr	r4, [r3, #32]
{
 8001f46:	4605      	mov	r5, r0
 8001f48:	4688      	mov	r8, r1
 8001f4a:	4616      	mov	r6, r2
  if(LcdDrv->DrawHLine != NULL)
 8001f4c:	b964      	cbnz	r4, 8001f68 <BSP_LCD_DrawHLine+0x2c>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8001f4e:	4f0c      	ldr	r7, [pc, #48]	; (8001f80 <BSP_LCD_DrawHLine+0x44>)
    for(index = 0; index < Length; index++)
 8001f50:	42b4      	cmp	r4, r6
 8001f52:	d301      	bcc.n	8001f58 <BSP_LCD_DrawHLine+0x1c>
}
 8001f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8001f58:	1928      	adds	r0, r5, r4
 8001f5a:	883a      	ldrh	r2, [r7, #0]
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	b280      	uxth	r0, r0
 8001f60:	f7ff ff2e 	bl	8001dc0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001f64:	3401      	adds	r4, #1
 8001f66:	e7f3      	b.n	8001f50 <BSP_LCD_DrawHLine+0x14>
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001f68:	4613      	mov	r3, r2
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <BSP_LCD_DrawHLine+0x44>)
 8001f70:	46a4      	mov	ip, r4
 8001f72:	8800      	ldrh	r0, [r0, #0]
}
 8001f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8001f78:	4760      	bx	ip
 8001f7a:	bf00      	nop
 8001f7c:	2000095c 	.word	0x2000095c
 8001f80:	20001138 	.word	0x20001138

08001f84 <BSP_LCD_Clear>:
{ 
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp.TextColor; 
 8001f86:	4c0a      	ldr	r4, [pc, #40]	; (8001fb0 <BSP_LCD_Clear+0x2c>)
 8001f88:	6826      	ldr	r6, [r4, #0]
  DrawProp.TextColor = Color;
 8001f8a:	6020      	str	r0, [r4, #0]
  y_size =  BSP_LCD_GetYSize();
 8001f8c:	f7ff fefe 	bl	8001d8c <BSP_LCD_GetYSize>
  for(counter = 0; counter < y_size; counter++)
 8001f90:	2500      	movs	r5, #0
  y_size =  BSP_LCD_GetYSize();
 8001f92:	4607      	mov	r7, r0
  for(counter = 0; counter < y_size; counter++)
 8001f94:	42bd      	cmp	r5, r7
 8001f96:	d102      	bne.n	8001f9e <BSP_LCD_Clear+0x1a>
  DrawProp.TextColor = Color;
 8001f98:	b2b6      	uxth	r6, r6
 8001f9a:	6026      	str	r6, [r4, #0]
}
 8001f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8001f9e:	f7ff feed 	bl	8001d7c <BSP_LCD_GetXSize>
 8001fa2:	b2a9      	uxth	r1, r5
 8001fa4:	b282      	uxth	r2, r0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff ffc8 	bl	8001f3c <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8001fac:	3501      	adds	r5, #1
 8001fae:	e7f1      	b.n	8001f94 <BSP_LCD_Clear+0x10>
 8001fb0:	20001138 	.word	0x20001138

08001fb4 <BSP_LCD_FillRect>:
{
 8001fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DrawProp.TextColor = Color;
 8001fb8:	4c0a      	ldr	r4, [pc, #40]	; (8001fe4 <BSP_LCD_FillRect+0x30>)
 8001fba:	8825      	ldrh	r5, [r4, #0]
 8001fbc:	6025      	str	r5, [r4, #0]
{
 8001fbe:	4607      	mov	r7, r0
 8001fc0:	4690      	mov	r8, r2
}
 8001fc2:	461c      	mov	r4, r3
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8001fc4:	18cd      	adds	r5, r1, r3
  while(Height--);
 8001fc6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8001fca:	1b29      	subs	r1, r5, r4
  while(Height--);
 8001fcc:	3c01      	subs	r4, #1
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8001fce:	4642      	mov	r2, r8
 8001fd0:	b289      	uxth	r1, r1
 8001fd2:	4638      	mov	r0, r7
  while(Height--);
 8001fd4:	b2a4      	uxth	r4, r4
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8001fd6:	f7ff ffb1 	bl	8001f3c <BSP_LCD_DrawHLine>
  while(Height--);
 8001fda:	42b4      	cmp	r4, r6
 8001fdc:	d1f5      	bne.n	8001fca <BSP_LCD_FillRect+0x16>
}
 8001fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20001138 	.word	0x20001138

08001fe8 <BSP_LCD_ClearStringLine>:
{ 
 8001fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t color_backup = DrawProp.TextColor; 
 8001fea:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <BSP_LCD_ClearStringLine+0x30>)
  DrawProp.TextColor = DrawProp.BackColor;;
 8001fec:	e9d4 5300 	ldrd	r5, r3, [r4]
 8001ff0:	6023      	str	r3, [r4, #0]
  BSP_LCD_FillRect(0, (Line * DrawProp.pFont->Height), BSP_LCD_GetXSize(), DrawProp.pFont->Height);
 8001ff2:	68a3      	ldr	r3, [r4, #8]
 8001ff4:	88db      	ldrh	r3, [r3, #6]
 8001ff6:	fb13 f000 	smulbb	r0, r3, r0
 8001ffa:	b281      	uxth	r1, r0
 8001ffc:	9101      	str	r1, [sp, #4]
 8001ffe:	f7ff febd 	bl	8001d7c <BSP_LCD_GetXSize>
 8002002:	68a3      	ldr	r3, [r4, #8]
 8002004:	9901      	ldr	r1, [sp, #4]
 8002006:	88db      	ldrh	r3, [r3, #6]
 8002008:	b282      	uxth	r2, r0
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff ffd2 	bl	8001fb4 <BSP_LCD_FillRect>
  DrawProp.TextColor = Color;
 8002010:	b2ad      	uxth	r5, r5
 8002012:	6025      	str	r5, [r4, #0]
}
 8002014:	b003      	add	sp, #12
 8002016:	bd30      	pop	{r4, r5, pc}
 8002018:	20001138 	.word	0x20001138

0800201c <BSP_LCD_DisplayOn>:
  LcdDrv->DisplayOn();
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <BSP_LCD_DisplayOn+0x8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4718      	bx	r3
 8002024:	2000095c 	.word	0x2000095c

08002028 <BSP_LCD_MspInit>:
{
 8002028:	b530      	push	{r4, r5, lr}
 800202a:	b089      	sub	sp, #36	; 0x24
  LCD_RESET_GPIO_CLK_ENABLE();
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <BSP_LCD_MspInit+0x80>)
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 800202e:	481f      	ldr	r0, [pc, #124]	; (80020ac <BSP_LCD_MspInit+0x84>)
  LCD_RESET_GPIO_CLK_ENABLE();
 8002030:	2400      	movs	r4, #0
 8002032:	9400      	str	r4, [sp, #0]
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	f042 0202 	orr.w	r2, r2, #2
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
 800203c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203e:	f002 0202 	and.w	r2, r2, #2
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	9a00      	ldr	r2, [sp, #0]
  LCD_TE_GPIO_CLK_ENABLE();
 8002046:	9401      	str	r4, [sp, #4]
 8002048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204a:	f042 0202 	orr.w	r2, r2, #2
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
 8002050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002052:	f002 0202 	and.w	r2, r2, #2
 8002056:	9201      	str	r2, [sp, #4]
 8002058:	9a01      	ldr	r2, [sp, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800205a:	9402      	str	r4, [sp, #8]
 800205c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205e:	f042 0210 	orr.w	r2, r2, #16
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002066:	9405      	str	r4, [sp, #20]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002074:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002076:	2501      	movs	r5, #1
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002078:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 800207a:	a903      	add	r1, sp, #12
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800207c:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800207e:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002080:	f000 fb60 	bl	8002744 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002088:	a903      	add	r1, sp, #12
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <BSP_LCD_MspInit+0x84>)
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800208c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002090:	f000 fb58 	bl	8002744 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002094:	2320      	movs	r3, #32
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <BSP_LCD_MspInit+0x88>)
 8002098:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800209a:	e9cd 3503 	strd	r3, r5, [sp, #12]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800209e:	f000 fb51 	bl	8002744 <HAL_GPIO_Init>
}
 80020a2:	b009      	add	sp, #36	; 0x24
 80020a4:	bd30      	pop	{r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40021000 	.word	0x40021000

080020b4 <BSP_LCD_InitEx>:
{ 
 80020b4:	b570      	push	{r4, r5, r6, lr}
  DrawProp.BackColor = 0xFFFF;
 80020b6:	4c25      	ldr	r4, [pc, #148]	; (800214c <BSP_LCD_InitEx+0x98>)
 80020b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  DrawProp.TextColor = 0x0000;
 80020bc:	2600      	movs	r6, #0
  DrawProp.BackColor = 0xFFFF;
 80020be:	6063      	str	r3, [r4, #4]
  DrawProp.pFont     = &Font24;
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <BSP_LCD_InitEx+0x9c>)
 80020c2:	60a3      	str	r3, [r4, #8]
{ 
 80020c4:	4605      	mov	r5, r0
  DrawProp.TextColor = 0x0000;
 80020c6:	6026      	str	r6, [r4, #0]
  BSP_LCD_MspInit();
 80020c8:	f7ff ffae 	bl	8002028 <BSP_LCD_MspInit>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80020cc:	4821      	ldr	r0, [pc, #132]	; (8002154 <BSP_LCD_InitEx+0xa0>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	2120      	movs	r1, #32
 80020d2:	f000 fc11 	bl	80028f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80020d6:	4632      	mov	r2, r6
 80020d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020dc:	481e      	ldr	r0, [pc, #120]	; (8002158 <BSP_LCD_InitEx+0xa4>)
 80020de:	f000 fc0b 	bl	80028f8 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 80020e2:	2005      	movs	r0, #5
 80020e4:	f000 f8b6 	bl	8002254 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80020e8:	2201      	movs	r2, #1
 80020ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ee:	481a      	ldr	r0, [pc, #104]	; (8002158 <BSP_LCD_InitEx+0xa4>)
 80020f0:	f000 fc02 	bl	80028f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80020f4:	200a      	movs	r0, #10
 80020f6:	f000 f8ad 	bl	8002254 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80020fa:	4632      	mov	r2, r6
 80020fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002100:	4815      	ldr	r0, [pc, #84]	; (8002158 <BSP_LCD_InitEx+0xa4>)
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002102:	4e16      	ldr	r6, [pc, #88]	; (800215c <BSP_LCD_InitEx+0xa8>)
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002104:	f000 fbf8 	bl	80028f8 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002108:	2014      	movs	r0, #20
 800210a:	f000 f8a3 	bl	8002254 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <BSP_LCD_InitEx+0xa4>)
 8002116:	f000 fbef 	bl	80028f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800211a:	200a      	movs	r0, #10
 800211c:	f000 f89a 	bl	8002254 <HAL_Delay>
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002120:	6873      	ldr	r3, [r6, #4]
 8002122:	4798      	blx	r3
 8002124:	2885      	cmp	r0, #133	; 0x85
 8002126:	d10e      	bne.n	8002146 <BSP_LCD_InitEx+0x92>
    LcdDrv = &ST7789H2_drv;
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <BSP_LCD_InitEx+0xac>)
 800212a:	601e      	str	r6, [r3, #0]
    LcdDrv->Init();
 800212c:	6833      	ldr	r3, [r6, #0]
 800212e:	4798      	blx	r3
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002130:	b91d      	cbnz	r5, 800213a <BSP_LCD_InitEx+0x86>
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002132:	4628      	mov	r0, r5
 8002134:	f7ff fb0a 	bl	800174c <ST7789H2_SetOrientation>
 8002138:	e001      	b.n	800213e <BSP_LCD_InitEx+0x8a>
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800213a:	2d02      	cmp	r5, #2
 800213c:	d0f9      	beq.n	8002132 <BSP_LCD_InitEx+0x7e>
  DrawProp.pFont = fonts;
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <BSP_LCD_InitEx+0xb0>)
 8002140:	60a3      	str	r3, [r4, #8]
    ret = LCD_OK;   
 8002142:	2000      	movs	r0, #0
}
 8002144:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = LCD_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	e7fc      	b.n	8002144 <BSP_LCD_InitEx+0x90>
 800214a:	bf00      	nop
 800214c:	20001138 	.word	0x20001138
 8002150:	20000064 	.word	0x20000064
 8002154:	40021000 	.word	0x40021000
 8002158:	40020400 	.word	0x40020400
 800215c:	2000000c 	.word	0x2000000c
 8002160:	2000095c 	.word	0x2000095c
 8002164:	2000005c 	.word	0x2000005c

08002168 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	490f      	ldr	r1, [pc, #60]	; (80021a8 <SystemInit+0x40>)
 800216a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800216e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <SystemInit+0x44>)
 8002178:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800217a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002182:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800218a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800218e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <SystemInit+0x48>)
 8002192:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800219a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800219c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800219e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021a2:	608b      	str	r3, [r1, #8]
#endif
}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	24003010 	.word	0x24003010

080021b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_InitTick+0x3c>)
 80021bc:	4e0e      	ldr	r6, [pc, #56]	; (80021f8 <HAL_InitTick+0x40>)
{
 80021be:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c4:	7830      	ldrb	r0, [r6, #0]
 80021c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80021ca:	6810      	ldr	r0, [r2, #0]
 80021cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80021d0:	f000 faa2 	bl	8002718 <HAL_SYSTICK_Config>
 80021d4:	4604      	mov	r4, r0
 80021d6:	b950      	cbnz	r0, 80021ee <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d8:	2d0f      	cmp	r5, #15
 80021da:	d808      	bhi.n	80021ee <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	4602      	mov	r2, r0
 80021de:	4629      	mov	r1, r5
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 fa66 	bl	80026b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	6075      	str	r5, [r6, #4]
 80021ea:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80021ee:	2001      	movs	r0, #1
 80021f0:	e7fc      	b.n	80021ec <HAL_InitTick+0x34>
 80021f2:	bf00      	nop
 80021f4:	20000084 	.word	0x20000084
 80021f8:	20000088 	.word	0x20000088

080021fc <HAL_Init>:
{
 80021fc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_Init+0x30>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800220e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 fa39 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	200e      	movs	r0, #14
 8002220:	f7ff ffca 	bl	80021b8 <HAL_InitTick>
  HAL_MspInit();
 8002224:	f7ff ffc6 	bl	80021b4 <HAL_MspInit>
}
 8002228:	2000      	movs	r0, #0
 800222a:	bd08      	pop	{r3, pc}
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_IncTick+0x10>)
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <HAL_IncTick+0x14>)
 8002234:	6811      	ldr	r1, [r2, #0]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	440b      	add	r3, r1
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20001144 	.word	0x20001144
 8002244:	20000088 	.word	0x20000088

08002248 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002248:	4b01      	ldr	r3, [pc, #4]	; (8002250 <HAL_GetTick+0x8>)
 800224a:	6818      	ldr	r0, [r3, #0]
}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20001144 	.word	0x20001144

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fff6 	bl	8002248 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	bf1c      	itt	ne
 8002260:	4b05      	ldrne	r3, [pc, #20]	; (8002278 <HAL_Delay+0x24>)
 8002262:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002264:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002266:	bf18      	it	ne
 8002268:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226a:	f7ff ffed 	bl	8002248 <HAL_GetTick>
 800226e:	1b43      	subs	r3, r0, r5
 8002270:	42a3      	cmp	r3, r4
 8002272:	d3fa      	bcc.n	800226a <HAL_Delay+0x16>
  {
  }
}
 8002274:	bd38      	pop	{r3, r4, r5, pc}
 8002276:	bf00      	nop
 8002278:	20000088 	.word	0x20000088

0800227c <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800227c:	4770      	bx	lr
	...

08002280 <HAL_ADC_Init>:
{
 8002280:	b538      	push	{r3, r4, r5, lr}
  if(hadc == NULL)
 8002282:	4604      	mov	r4, r0
 8002284:	2800      	cmp	r0, #0
 8002286:	f000 809b 	beq.w	80023c0 <HAL_ADC_Init+0x140>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800228a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800228c:	b925      	cbnz	r5, 8002298 <HAL_ADC_Init+0x18>
    HAL_ADC_MspInit(hadc);
 800228e:	f7ff fff5 	bl	800227c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002292:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002294:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800229a:	06db      	lsls	r3, r3, #27
 800229c:	f100 808e 	bmi.w	80023bc <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 80022a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022a6:	f023 0302 	bic.w	r3, r3, #2
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022b0:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_ADC_Init+0x144>)
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80022b8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	6861      	ldr	r1, [r4, #4]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022c4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022d8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022da:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022de:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022e6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022e8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f6:	4934      	ldr	r1, [pc, #208]	; (80023c8 <HAL_ADC_Init+0x148>)
 80022f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022fa:	428a      	cmp	r2, r1
 80022fc:	d052      	beq.n	80023a4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002304:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800230e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	f022 0202 	bic.w	r2, r2, #2
 8002322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	7e21      	ldrb	r1, [r4, #24]
 8002328:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800232c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800232e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002332:	2a00      	cmp	r2, #0
 8002334:	d03e      	beq.n	80023b4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002336:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002338:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800233a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	3901      	subs	r1, #1
 800234c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002350:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002354:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002356:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235e:	3901      	subs	r1, #1
 8002360:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800236c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002374:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002378:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800237a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800237c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002386:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002388:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800238c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800238e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800239c:	2300      	movs	r3, #0
 800239e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80023a2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b2:	e7b2      	b.n	800231a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	e7c9      	b.n	8002350 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
 80023be:	e7ed      	b.n	800239c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
 80023c2:	e7ee      	b.n	80023a2 <HAL_ADC_Init+0x122>
 80023c4:	40012300 	.word	0x40012300
 80023c8:	0f000001 	.word	0x0f000001

080023cc <HAL_ADC_Start>:
{
 80023cc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80023d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d05c      	beq.n	8002494 <HAL_ADC_Start+0xc8>
 80023da:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023dc:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 80023de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023e2:	6893      	ldr	r3, [r2, #8]
 80023e4:	07d9      	lsls	r1, r3, #31
 80023e6:	d50c      	bpl.n	8002402 <HAL_ADC_Start+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023e8:	6893      	ldr	r3, [r2, #8]
 80023ea:	f013 0301 	ands.w	r3, r3, #1
 80023ee:	d11a      	bne.n	8002426 <HAL_ADC_Start+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023f2:	f042 0210 	orr.w	r2, r2, #16
 80023f6:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	6442      	str	r2, [r0, #68]	; 0x44
 8002400:	e046      	b.n	8002490 <HAL_ADC_Start+0xc4>
    __HAL_ADC_ENABLE(hadc);
 8002402:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002404:	4925      	ldr	r1, [pc, #148]	; (800249c <HAL_ADC_Start+0xd0>)
    __HAL_ADC_ENABLE(hadc);
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_ADC_Start+0xd4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fbb3 f3f1 	udiv	r3, r3, r1
 8002414:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8002418:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0e3      	beq.n	80023e8 <HAL_ADC_Start+0x1c>
      counter--;
 8002420:	9b01      	ldr	r3, [sp, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	e7f8      	b.n	8002418 <HAL_ADC_Start+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002428:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002436:	6853      	ldr	r3, [r2, #4]
 8002438:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800243a:	bf41      	itttt	mi
 800243c:	6c03      	ldrmi	r3, [r0, #64]	; 0x40
 800243e:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8002442:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8002446:	6403      	strmi	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002448:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800244a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800244e:	bf1c      	itt	ne
 8002450:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8002452:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002456:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002458:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800245c:	2300      	movs	r3, #0
 800245e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002462:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002464:	490f      	ldr	r1, [pc, #60]	; (80024a4 <HAL_ADC_Start+0xd8>)
 8002466:	6849      	ldr	r1, [r1, #4]
 8002468:	f011 011f 	ands.w	r1, r1, #31
 800246c:	d109      	bne.n	8002482 <HAL_ADC_Start+0xb6>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800246e:	6890      	ldr	r0, [r2, #8]
 8002470:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002474:	d110      	bne.n	8002498 <HAL_ADC_Start+0xcc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002476:	6893      	ldr	r3, [r2, #8]
 8002478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800247c:	6093      	str	r3, [r2, #8]
}
 800247e:	b002      	add	sp, #8
 8002480:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002482:	4909      	ldr	r1, [pc, #36]	; (80024a8 <HAL_ADC_Start+0xdc>)
 8002484:	428a      	cmp	r2, r1
 8002486:	d103      	bne.n	8002490 <HAL_ADC_Start+0xc4>
 8002488:	6890      	ldr	r0, [r2, #8]
 800248a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800248e:	d0f2      	beq.n	8002476 <HAL_ADC_Start+0xaa>
  return HAL_OK;
 8002490:	4618      	mov	r0, r3
 8002492:	e7f4      	b.n	800247e <HAL_ADC_Start+0xb2>
  __HAL_LOCK(hadc);
 8002494:	2002      	movs	r0, #2
 8002496:	e7f2      	b.n	800247e <HAL_ADC_Start+0xb2>
  return HAL_OK;
 8002498:	4608      	mov	r0, r1
 800249a:	e7f0      	b.n	800247e <HAL_ADC_Start+0xb2>
 800249c:	000f4240 	.word	0x000f4240
 80024a0:	20000084 	.word	0x20000084
 80024a4:	40012300 	.word	0x40012300
 80024a8:	40012000 	.word	0x40012000

080024ac <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024ac:	6803      	ldr	r3, [r0, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	0552      	lsls	r2, r2, #21
{
 80024b2:	b570      	push	{r4, r5, r6, lr}
 80024b4:	4604      	mov	r4, r0
 80024b6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024b8:	d50b      	bpl.n	80024d2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024ba:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024bc:	05de      	lsls	r6, r3, #23
 80024be:	d508      	bpl.n	80024d2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80024c8:	2300      	movs	r3, #0
 80024ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
}
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80024d2:	f7ff feb9 	bl	8002248 <HAL_GetTick>
 80024d6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	0791      	lsls	r1, r2, #30
 80024de:	d50c      	bpl.n	80024fa <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024e0:	f06f 0212 	mvn.w	r2, #18
 80024e4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ec:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80024f4:	d017      	beq.n	8002526 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 80024f6:	2000      	movs	r0, #0
 80024f8:	e7ea      	b.n	80024d0 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80024fa:	1c68      	adds	r0, r5, #1
 80024fc:	d0ed      	beq.n	80024da <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024fe:	b965      	cbnz	r5, 800251a <HAL_ADC_PollForConversion+0x6e>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f013 0302 	ands.w	r3, r3, #2
 8002508:	d1e6      	bne.n	80024d8 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800250a:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 800250c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002510:	f042 0204 	orr.w	r2, r2, #4
 8002514:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8002516:	2003      	movs	r0, #3
 8002518:	e7da      	b.n	80024d0 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800251a:	f7ff fe95 	bl	8002248 <HAL_GetTick>
 800251e:	1b80      	subs	r0, r0, r6
 8002520:	42a8      	cmp	r0, r5
 8002522:	d8ed      	bhi.n	8002500 <HAL_ADC_PollForConversion+0x54>
 8002524:	e7d8      	b.n	80024d8 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002526:	7e20      	ldrb	r0, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002528:	2800      	cmp	r0, #0
 800252a:	d1e4      	bne.n	80024f6 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002532:	d002      	beq.n	800253a <HAL_ADC_PollForConversion+0x8e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002534:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002536:	055a      	lsls	r2, r3, #21
 8002538:	d4dd      	bmi.n	80024f6 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800253a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800253c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002540:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002544:	04db      	lsls	r3, r3, #19
 8002546:	d4d6      	bmi.n	80024f6 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002548:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6423      	str	r3, [r4, #64]	; 0x40
 8002550:	e7be      	b.n	80024d0 <HAL_ADC_PollForConversion+0x24>

08002552 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002556:	4770      	bx	lr

08002558 <HAL_ADC_ConfigChannel>:
{
 8002558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800255e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d069      	beq.n	800263a <HAL_ADC_ConfigChannel+0xe2>
 8002566:	2301      	movs	r3, #1
 8002568:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800256c:	680d      	ldr	r5, [r1, #0]
 800256e:	6803      	ldr	r3, [r0, #0]
 8002570:	688e      	ldr	r6, [r1, #8]
 8002572:	2d09      	cmp	r5, #9
 8002574:	b2ac      	uxth	r4, r5
 8002576:	d934      	bls.n	80025e2 <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002578:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800257c:	68df      	ldr	r7, [r3, #12]
 800257e:	3a1e      	subs	r2, #30
 8002580:	f04f 0c07 	mov.w	ip, #7
 8002584:	fa0c fc02 	lsl.w	ip, ip, r2
 8002588:	ea27 070c 	bic.w	r7, r7, ip
 800258c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800258e:	68df      	ldr	r7, [r3, #12]
 8002590:	fa06 f202 	lsl.w	r2, r6, r2
 8002594:	433a      	orrs	r2, r7
 8002596:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002598:	6849      	ldr	r1, [r1, #4]
 800259a:	2906      	cmp	r1, #6
 800259c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80025a0:	d82f      	bhi.n	8002602 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a4:	3a05      	subs	r2, #5
 80025a6:	261f      	movs	r6, #31
 80025a8:	4096      	lsls	r6, r2
 80025aa:	ea21 0106 	bic.w	r1, r1, r6
 80025ae:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025b2:	fa04 f202 	lsl.w	r2, r4, r2
 80025b6:	430a      	orrs	r2, r1
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ba:	4a30      	ldr	r2, [pc, #192]	; (800267c <HAL_ADC_ConfigChannel+0x124>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10a      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x7e>
 80025c0:	2d12      	cmp	r5, #18
 80025c2:	d13c      	bne.n	800263e <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_ADC_ConfigChannel+0x128>)
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80025cc:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025d4:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80025d6:	2300      	movs	r3, #0
 80025d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80025dc:	4618      	mov	r0, r3
}
 80025de:	b003      	add	sp, #12
 80025e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025e2:	691f      	ldr	r7, [r3, #16]
 80025e4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80025e8:	f04f 0c07 	mov.w	ip, #7
 80025ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80025f0:	ea27 070c 	bic.w	r7, r7, ip
 80025f4:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025f6:	691f      	ldr	r7, [r3, #16]
 80025f8:	fa06 f202 	lsl.w	r2, r6, r2
 80025fc:	433a      	orrs	r2, r7
 80025fe:	611a      	str	r2, [r3, #16]
 8002600:	e7ca      	b.n	8002598 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8002602:	290c      	cmp	r1, #12
 8002604:	f04f 011f 	mov.w	r1, #31
 8002608:	d80b      	bhi.n	8002622 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800260a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800260c:	3a23      	subs	r2, #35	; 0x23
 800260e:	4091      	lsls	r1, r2
 8002610:	ea26 0101 	bic.w	r1, r6, r1
 8002614:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002618:	fa04 f202 	lsl.w	r2, r4, r2
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
 8002620:	e7cb      	b.n	80025ba <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002622:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002624:	3a41      	subs	r2, #65	; 0x41
 8002626:	4091      	lsls	r1, r2
 8002628:	ea26 0101 	bic.w	r1, r6, r1
 800262c:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800262e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002630:	fa04 f202 	lsl.w	r2, r4, r2
 8002634:	430a      	orrs	r2, r1
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
 8002638:	e7bf      	b.n	80025ba <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800263a:	2002      	movs	r0, #2
 800263c:	e7cf      	b.n	80025de <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_ADC_ConfigChannel+0x12c>)
 8002640:	429d      	cmp	r5, r3
 8002642:	d001      	beq.n	8002648 <HAL_ADC_ConfigChannel+0xf0>
 8002644:	2d11      	cmp	r5, #17
 8002646:	d1c6      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_ADC_ConfigChannel+0x128>)
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002650:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002658:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_ADC_ConfigChannel+0x12c>)
 800265c:	429d      	cmp	r5, r3
 800265e:	d1ba      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_ADC_ConfigChannel+0x130>)
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_ADC_ConfigChannel+0x134>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fbb3 f2f2 	udiv	r2, r3, r2
 800266a:	230a      	movs	r3, #10
 800266c:	4353      	muls	r3, r2
        counter--;
 800266e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002670:	9b01      	ldr	r3, [sp, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0af      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8002676:	9b01      	ldr	r3, [sp, #4]
 8002678:	3b01      	subs	r3, #1
 800267a:	e7f8      	b.n	800266e <HAL_ADC_ConfigChannel+0x116>
 800267c:	40012000 	.word	0x40012000
 8002680:	40012300 	.word	0x40012300
 8002684:	10000012 	.word	0x10000012
 8002688:	20000084 	.word	0x20000084
 800268c:	000f4240 	.word	0x000f4240

08002690 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002692:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002694:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b6:	b530      	push	{r4, r5, lr}
 80026b8:	68dc      	ldr	r4, [r3, #12]
 80026ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c4:	2d04      	cmp	r5, #4
 80026c6:	bf28      	it	cs
 80026c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d0:	bf8c      	ite	hi
 80026d2:	3c03      	subhi	r4, #3
 80026d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d6:	fa03 f505 	lsl.w	r5, r3, r5
 80026da:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026de:	40a3      	lsls	r3, r4
 80026e0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80026e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	bfac      	ite	ge
 80026ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f2:	4a08      	ldrlt	r2, [pc, #32]	; (8002714 <HAL_NVIC_SetPriority+0x60>)
 80026f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80026f8:	bfb8      	it	lt
 80026fa:	f000 000f 	andlt.w	r0, r0, #15
 80026fe:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	bfaa      	itet	ge
 8002702:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800270c:	bd30      	pop	{r4, r5, pc}
 800270e:	bf00      	nop
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	e000ed14 	.word	0xe000ed14

08002718 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	3801      	subs	r0, #1
 800271a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800271e:	d20a      	bcs.n	8002736 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002724:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	21f0      	movs	r1, #240	; 0xf0
 8002728:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002736:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002748:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80028e8 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274c:	4a64      	ldr	r2, [pc, #400]	; (80028e0 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002750:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002752:	2401      	movs	r4, #1
 8002754:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800275a:	43ac      	bics	r4, r5
 800275c:	f040 80ac 	bne.w	80028b8 <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002760:	684d      	ldr	r5, [r1, #4]
 8002762:	f005 0403 	and.w	r4, r5, #3
 8002766:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800276a:	2603      	movs	r6, #3
 800276c:	1e67      	subs	r7, r4, #1
 800276e:	fa06 f608 	lsl.w	r6, r6, r8
 8002772:	2f01      	cmp	r7, #1
 8002774:	ea6f 0606 	mvn.w	r6, r6
 8002778:	d834      	bhi.n	80027e4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800277a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002780:	68cf      	ldr	r7, [r1, #12]
 8002782:	fa07 f708 	lsl.w	r7, r7, r8
 8002786:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800278a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800278c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002792:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002796:	409f      	lsls	r7, r3
 8002798:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800279c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800279e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	688f      	ldr	r7, [r1, #8]
 80027a6:	fa07 f708 	lsl.w	r7, r7, r8
 80027aa:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80027b0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	d119      	bne.n	80027e8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80027b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80027b8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027bc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80027c0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80027c8:	f04f 0e0f 	mov.w	lr, #15
 80027cc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80027d0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027d4:	690f      	ldr	r7, [r1, #16]
 80027d6:	fa07 f70b 	lsl.w	r7, r7, fp
 80027da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	f8ca 7020 	str.w	r7, [sl, #32]
 80027e2:	e001      	b.n	80027e8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	2c03      	cmp	r4, #3
 80027e6:	d1da      	bne.n	800279e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80027e8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ea:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f2:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 80027f4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f6:	d55f      	bpl.n	80028b8 <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f8:	f04f 0a00 	mov.w	sl, #0
 80027fc:	f8cd a004 	str.w	sl, [sp, #4]
 8002800:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002804:	4c37      	ldr	r4, [pc, #220]	; (80028e4 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800280a:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800280e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002812:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002816:	9601      	str	r6, [sp, #4]
 8002818:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800281a:	f023 0603 	bic.w	r6, r3, #3
 800281e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002822:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002826:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800282a:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800282e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002832:	270f      	movs	r7, #15
 8002834:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002838:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800283a:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283e:	d042      	beq.n	80028c6 <HAL_GPIO_Init+0x182>
 8002840:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002844:	42a0      	cmp	r0, r4
 8002846:	d040      	beq.n	80028ca <HAL_GPIO_Init+0x186>
 8002848:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800284c:	42a0      	cmp	r0, r4
 800284e:	d03e      	beq.n	80028ce <HAL_GPIO_Init+0x18a>
 8002850:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002854:	42a0      	cmp	r0, r4
 8002856:	d03c      	beq.n	80028d2 <HAL_GPIO_Init+0x18e>
 8002858:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800285c:	42a0      	cmp	r0, r4
 800285e:	d03a      	beq.n	80028d6 <HAL_GPIO_Init+0x192>
 8002860:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002864:	42a0      	cmp	r0, r4
 8002866:	d038      	beq.n	80028da <HAL_GPIO_Init+0x196>
 8002868:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800286c:	42a0      	cmp	r0, r4
 800286e:	bf0c      	ite	eq
 8002870:	2406      	moveq	r4, #6
 8002872:	2407      	movne	r4, #7
 8002874:	fa04 f40e 	lsl.w	r4, r4, lr
 8002878:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287a:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800287c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800287e:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002882:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002884:	bf54      	ite	pl
 8002886:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002888:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800288c:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 800288e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002890:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002892:	bf54      	ite	pl
 8002894:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002896:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800289a:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289e:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80028a0:	bf54      	ite	pl
 80028a2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80028a4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80028a8:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80028aa:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ac:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80028ae:	bf54      	ite	pl
 80028b0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80028b2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80028b6:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b8:	3301      	adds	r3, #1
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	f47f af48 	bne.w	8002750 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80028c0:	b003      	add	sp, #12
 80028c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	4654      	mov	r4, sl
 80028c8:	e7d4      	b.n	8002874 <HAL_GPIO_Init+0x130>
 80028ca:	2401      	movs	r4, #1
 80028cc:	e7d2      	b.n	8002874 <HAL_GPIO_Init+0x130>
 80028ce:	2402      	movs	r4, #2
 80028d0:	e7d0      	b.n	8002874 <HAL_GPIO_Init+0x130>
 80028d2:	2403      	movs	r4, #3
 80028d4:	e7ce      	b.n	8002874 <HAL_GPIO_Init+0x130>
 80028d6:	2404      	movs	r4, #4
 80028d8:	e7cc      	b.n	8002874 <HAL_GPIO_Init+0x130>
 80028da:	2405      	movs	r4, #5
 80028dc:	e7ca      	b.n	8002874 <HAL_GPIO_Init+0x130>
 80028de:	bf00      	nop
 80028e0:	40013c00 	.word	0x40013c00
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ec:	6903      	ldr	r3, [r0, #16]
 80028ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80028f0:	bf14      	ite	ne
 80028f2:	2001      	movne	r0, #1
 80028f4:	2000      	moveq	r0, #0
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	b10a      	cbz	r2, 80028fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fa:	6181      	str	r1, [r0, #24]
  }
}
 80028fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fe:	0409      	lsls	r1, r1, #16
 8002900:	e7fb      	b.n	80028fa <HAL_GPIO_WritePin+0x2>
	...

08002904 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002904:	4913      	ldr	r1, [pc, #76]	; (8002954 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002906:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002908:	688b      	ldr	r3, [r1, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b04      	cmp	r3, #4
 8002910:	d01c      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x48>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d11c      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002916:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002918:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800291c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002920:	bf14      	ite	ne
 8002922:	480d      	ldrne	r0, [pc, #52]	; (8002958 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	480d      	ldreq	r0, [pc, #52]	; (800295c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002926:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800292a:	bf18      	it	ne
 800292c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	fba1 0100 	umull	r0, r1, r1, r0
 8002936:	f7fd fccb 	bl	80002d0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetSysClockFreq+0x50>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002946:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800294a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <HAL_RCC_GetSysClockFreq+0x54>)
 800294e:	e7fc      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002952:	e7fa      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x46>
 8002954:	40023800 	.word	0x40023800
 8002958:	007a1200 	.word	0x007a1200
 800295c:	00f42400 	.word	0x00f42400

08002960 <HAL_RCC_ClockConfig>:
{
 8002960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002964:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002966:	4604      	mov	r4, r0
 8002968:	b910      	cbnz	r0, 8002970 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800296a:	2001      	movs	r0, #1
}
 800296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCC_ClockConfig+0x124>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	f002 0207 	and.w	r2, r2, #7
 8002978:	428a      	cmp	r2, r1
 800297a:	d328      	bcc.n	80029ce <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	6822      	ldr	r2, [r4, #0]
 800297e:	0797      	lsls	r7, r2, #30
 8002980:	d42d      	bmi.n	80029de <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	07d0      	lsls	r0, r2, #31
 8002984:	d441      	bmi.n	8002a0a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x124>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f002 0207 	and.w	r2, r2, #7
 800298e:	42aa      	cmp	r2, r5
 8002990:	d866      	bhi.n	8002a60 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	0751      	lsls	r1, r2, #29
 8002996:	d46c      	bmi.n	8002a72 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	0713      	lsls	r3, r2, #28
 800299a:	d507      	bpl.n	80029ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299c:	4a3a      	ldr	r2, [pc, #232]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 800299e:	6921      	ldr	r1, [r4, #16]
 80029a0:	6893      	ldr	r3, [r2, #8]
 80029a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ac:	f7ff ffaa 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80029b0:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_RCC_ClockConfig+0x12c>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	40d8      	lsrs	r0, r3
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x130>)
 80029c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x134>)
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f7ff fbf7 	bl	80021b8 <HAL_InitTick>
  return HAL_OK;
 80029ca:	2000      	movs	r0, #0
 80029cc:	e7ce      	b.n	800296c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	428b      	cmp	r3, r1
 80029da:	d1c6      	bne.n	800296a <HAL_RCC_ClockConfig+0xa>
 80029dc:	e7ce      	b.n	800297c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 80029e0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	bf1e      	ittt	ne
 80029e6:	6899      	ldrne	r1, [r3, #8]
 80029e8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80029ec:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ee:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	bf42      	ittt	mi
 80029f2:	6899      	ldrmi	r1, [r3, #8]
 80029f4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80029f8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fa:	4923      	ldr	r1, [pc, #140]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 80029fc:	68a0      	ldr	r0, [r4, #8]
 80029fe:	688b      	ldr	r3, [r1, #8]
 8002a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a04:	4303      	orrs	r3, r0
 8002a06:	608b      	str	r3, [r1, #8]
 8002a08:	e7bb      	b.n	8002982 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	6862      	ldr	r2, [r4, #4]
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 8002a0e:	2a01      	cmp	r2, #1
 8002a10:	d11c      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	d0a7      	beq.n	800296a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4e1b      	ldr	r6, [pc, #108]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 8002a1c:	68b3      	ldr	r3, [r6, #8]
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a26:	f7ff fc0f 	bl	8002248 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	68b3      	ldr	r3, [r6, #8]
 8002a32:	6862      	ldr	r2, [r4, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a3c:	d0a3      	beq.n	8002986 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3e:	f7ff fc03 	bl	8002248 <HAL_GetTick>
 8002a42:	1bc0      	subs	r0, r0, r7
 8002a44:	4540      	cmp	r0, r8
 8002a46:	d9f3      	bls.n	8002a30 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002a48:	2003      	movs	r0, #3
 8002a4a:	e78f      	b.n	800296c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4c:	1e91      	subs	r1, r2, #2
 8002a4e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	d802      	bhi.n	8002a5a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a58:	e7de      	b.n	8002a18 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	f013 0f02 	tst.w	r3, #2
 8002a5e:	e7db      	b.n	8002a18 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a60:	b2ea      	uxtb	r2, r5
 8002a62:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	42ab      	cmp	r3, r5
 8002a6c:	f47f af7d 	bne.w	800296a <HAL_RCC_ClockConfig+0xa>
 8002a70:	e78f      	b.n	8002992 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a72:	4905      	ldr	r1, [pc, #20]	; (8002a88 <HAL_RCC_ClockConfig+0x128>)
 8002a74:	68e0      	ldr	r0, [r4, #12]
 8002a76:	688b      	ldr	r3, [r1, #8]
 8002a78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a7c:	4303      	orrs	r3, r0
 8002a7e:	608b      	str	r3, [r1, #8]
 8002a80:	e78a      	b.n	8002998 <HAL_RCC_ClockConfig+0x38>
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	080088cc 	.word	0x080088cc
 8002a90:	20000084 	.word	0x20000084
 8002a94:	2000008c 	.word	0x2000008c

08002a98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	b340      	cbz	r0, 8002af2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aa0:	6803      	ldr	r3, [r0, #0]
 8002aa2:	07dd      	lsls	r5, r3, #31
 8002aa4:	d410      	bmi.n	8002ac8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	0798      	lsls	r0, r3, #30
 8002aaa:	d45e      	bmi.n	8002b6a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	071a      	lsls	r2, r3, #28
 8002ab0:	f100 80a0 	bmi.w	8002bf4 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	075b      	lsls	r3, r3, #29
 8002ab8:	f100 80be 	bmi.w	8002c38 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abc:	69a0      	ldr	r0, [r4, #24]
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	f040 811f 	bne.w	8002d02 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	e02b      	b.n	8002b20 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ac8:	4ba7      	ldr	r3, [pc, #668]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f002 020c 	and.w	r2, r2, #12
 8002ad0:	2a04      	cmp	r2, #4
 8002ad2:	d007      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ada:	2a08      	cmp	r2, #8
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	0251      	lsls	r1, r2, #9
 8002ae2:	d508      	bpl.n	8002af6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4ba0      	ldr	r3, [pc, #640]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	039a      	lsls	r2, r3, #14
 8002aea:	d5dc      	bpl.n	8002aa6 <HAL_RCC_OscConfig+0xe>
 8002aec:	6863      	ldr	r3, [r4, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1d9      	bne.n	8002aa6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002af2:	2001      	movs	r0, #1
 8002af4:	e014      	b.n	8002b20 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af6:	6862      	ldr	r2, [r4, #4]
 8002af8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002afc:	d113      	bne.n	8002b26 <HAL_RCC_OscConfig+0x8e>
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b06:	f7ff fb9f 	bl	8002248 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4e97      	ldr	r6, [pc, #604]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002b0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	6833      	ldr	r3, [r6, #0]
 8002b10:	039b      	lsls	r3, r3, #14
 8002b12:	d4c8      	bmi.n	8002aa6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff fb98 	bl	8002248 <HAL_GetTick>
 8002b18:	1b40      	subs	r0, r0, r5
 8002b1a:	2864      	cmp	r0, #100	; 0x64
 8002b1c:	d9f7      	bls.n	8002b0e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002b1e:	2003      	movs	r0, #3
}
 8002b20:	b002      	add	sp, #8
 8002b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b26:	4d90      	ldr	r5, [pc, #576]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002b28:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002b2c:	682b      	ldr	r3, [r5, #0]
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0xa8>
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	602b      	str	r3, [r5, #0]
 8002b36:	682b      	ldr	r3, [r5, #0]
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b3e:	e7e2      	b.n	8002b06 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	602b      	str	r3, [r5, #0]
 8002b46:	682b      	ldr	r3, [r5, #0]
 8002b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b4e:	2a00      	cmp	r2, #0
 8002b50:	d1d9      	bne.n	8002b06 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002b52:	f7ff fb79 	bl	8002248 <HAL_GetTick>
 8002b56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	039f      	lsls	r7, r3, #14
 8002b5c:	d5a3      	bpl.n	8002aa6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5e:	f7ff fb73 	bl	8002248 <HAL_GetTick>
 8002b62:	1b80      	subs	r0, r0, r6
 8002b64:	2864      	cmp	r0, #100	; 0x64
 8002b66:	d9f7      	bls.n	8002b58 <HAL_RCC_OscConfig+0xc0>
 8002b68:	e7d9      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	f012 0f0c 	tst.w	r2, #12
 8002b72:	d007      	beq.n	8002b84 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b7a:	2a08      	cmp	r2, #8
 8002b7c:	d111      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	025e      	lsls	r6, r3, #9
 8002b82:	d40e      	bmi.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b84:	4b78      	ldr	r3, [pc, #480]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	0795      	lsls	r5, r2, #30
 8002b8a:	d502      	bpl.n	8002b92 <HAL_RCC_OscConfig+0xfa>
 8002b8c:	68e2      	ldr	r2, [r4, #12]
 8002b8e:	2a01      	cmp	r2, #1
 8002b90:	d1af      	bne.n	8002af2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6921      	ldr	r1, [r4, #16]
 8002b96:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba0:	e784      	b.n	8002aac <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba2:	68e2      	ldr	r2, [r4, #12]
 8002ba4:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <HAL_RCC_OscConfig+0x2d4>)
 8002ba6:	b1b2      	cbz	r2, 8002bd6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bac:	f7ff fb4c 	bl	8002248 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	4d6d      	ldr	r5, [pc, #436]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002bb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	0798      	lsls	r0, r3, #30
 8002bb8:	d507      	bpl.n	8002bca <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	6922      	ldr	r2, [r4, #16]
 8002bbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	e770      	b.n	8002aac <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bca:	f7ff fb3d 	bl	8002248 <HAL_GetTick>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9ef      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x11c>
 8002bd4:	e7a3      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bd8:	f7ff fb36 	bl	8002248 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bdc:	4e62      	ldr	r6, [pc, #392]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002bde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be0:	6833      	ldr	r3, [r6, #0]
 8002be2:	0799      	lsls	r1, r3, #30
 8002be4:	f57f af62 	bpl.w	8002aac <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7ff fb2e 	bl	8002248 <HAL_GetTick>
 8002bec:	1b40      	subs	r0, r0, r5
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d9f6      	bls.n	8002be0 <HAL_RCC_OscConfig+0x148>
 8002bf2:	e794      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf4:	6962      	ldr	r2, [r4, #20]
 8002bf6:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <HAL_RCC_OscConfig+0x2d8>)
 8002bf8:	b17a      	cbz	r2, 8002c1a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002bfe:	f7ff fb23 	bl	8002248 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4e59      	ldr	r6, [pc, #356]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 8002c04:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002c08:	079f      	lsls	r7, r3, #30
 8002c0a:	f53f af53 	bmi.w	8002ab4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0e:	f7ff fb1b 	bl	8002248 <HAL_GetTick>
 8002c12:	1b40      	subs	r0, r0, r5
 8002c14:	2802      	cmp	r0, #2
 8002c16:	d9f6      	bls.n	8002c06 <HAL_RCC_OscConfig+0x16e>
 8002c18:	e781      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002c1a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fb14 	bl	8002248 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4e51      	ldr	r6, [pc, #324]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 8002c22:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002c26:	0798      	lsls	r0, r3, #30
 8002c28:	f57f af44 	bpl.w	8002ab4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fb0c 	bl	8002248 <HAL_GetTick>
 8002c30:	1b40      	subs	r0, r0, r5
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d9f6      	bls.n	8002c24 <HAL_RCC_OscConfig+0x18c>
 8002c36:	e772      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002c40:	d128      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c56:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4d46      	ldr	r5, [pc, #280]	; (8002d74 <HAL_RCC_OscConfig+0x2dc>)
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	05d9      	lsls	r1, r3, #23
 8002c5e:	d51b      	bpl.n	8002c98 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	68a3      	ldr	r3, [r4, #8]
 8002c62:	4d41      	ldr	r5, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d127      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x220>
 8002c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c70:	f7ff faea 	bl	8002248 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4e3c      	ldr	r6, [pc, #240]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
      tickstart = HAL_GetTick();
 8002c76:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c7e:	079b      	lsls	r3, r3, #30
 8002c80:	d539      	bpl.n	8002cf6 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8002c82:	2f00      	cmp	r7, #0
 8002c84:	f43f af1a 	beq.w	8002abc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4a37      	ldr	r2, [pc, #220]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002c8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	e713      	b.n	8002abc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002c94:	2700      	movs	r7, #0
 8002c96:	e7df      	b.n	8002c58 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ca0:	f7ff fad2 	bl	8002248 <HAL_GetTick>
 8002ca4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	05da      	lsls	r2, r3, #23
 8002caa:	d4d9      	bmi.n	8002c60 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7ff facc 	bl	8002248 <HAL_GetTick>
 8002cb0:	1b80      	subs	r0, r0, r6
 8002cb2:	2802      	cmp	r0, #2
 8002cb4:	d9f7      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x20e>
 8002cb6:	e732      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d104      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x22e>
 8002cbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	672b      	str	r3, [r5, #112]	; 0x70
 8002cc4:	e7d0      	b.n	8002c68 <HAL_RCC_OscConfig+0x1d0>
 8002cc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	672a      	str	r2, [r5, #112]	; 0x70
 8002cce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cd0:	f022 0204 	bic.w	r2, r2, #4
 8002cd4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ca      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8002cda:	f7ff fab5 	bl	8002248 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ce2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ce6:	0798      	lsls	r0, r3, #30
 8002ce8:	d5cb      	bpl.n	8002c82 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7ff faad 	bl	8002248 <HAL_GetTick>
 8002cee:	1b80      	subs	r0, r0, r6
 8002cf0:	4540      	cmp	r0, r8
 8002cf2:	d9f7      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
 8002cf4:	e713      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7ff faa7 	bl	8002248 <HAL_GetTick>
 8002cfa:	1b40      	subs	r0, r0, r5
 8002cfc:	4540      	cmp	r0, r8
 8002cfe:	d9bd      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1e4>
 8002d00:	e70d      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d02:	4d19      	ldr	r5, [pc, #100]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
 8002d04:	68ab      	ldr	r3, [r5, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d049      	beq.n	8002da2 <HAL_RCC_OscConfig+0x30a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0e:	4e1a      	ldr	r6, [pc, #104]	; (8002d78 <HAL_RCC_OscConfig+0x2e0>)
 8002d10:	2300      	movs	r3, #0
 8002d12:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002d14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	d137      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 8002d18:	f7ff fa96 	bl	8002248 <HAL_GetTick>
 8002d1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	0199      	lsls	r1, r3, #6
 8002d22:	d42b      	bmi.n	8002d7c <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d24:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d38:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002d3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d3e:	0852      	lsrs	r2, r2, #1
 8002d40:	3a01      	subs	r2, #1
 8002d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d46:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fa7c 	bl	8002248 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	4d05      	ldr	r5, [pc, #20]	; (8002d68 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8002d52:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	f53f aeb4 	bmi.w	8002ac4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7ff fa74 	bl	8002248 <HAL_GetTick>
 8002d60:	1b00      	subs	r0, r0, r4
 8002d62:	2802      	cmp	r0, #2
 8002d64:	d9f6      	bls.n	8002d54 <HAL_RCC_OscConfig+0x2bc>
 8002d66:	e6da      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	42470000 	.word	0x42470000
 8002d70:	42470e80 	.word	0x42470e80
 8002d74:	40007000 	.word	0x40007000
 8002d78:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff fa64 	bl	8002248 <HAL_GetTick>
 8002d80:	1bc0      	subs	r0, r0, r7
 8002d82:	2802      	cmp	r0, #2
 8002d84:	d9cb      	bls.n	8002d1e <HAL_RCC_OscConfig+0x286>
 8002d86:	e6ca      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002d88:	f7ff fa5e 	bl	8002248 <HAL_GetTick>
 8002d8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	019b      	lsls	r3, r3, #6
 8002d92:	f57f ae97 	bpl.w	8002ac4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d96:	f7ff fa57 	bl	8002248 <HAL_GetTick>
 8002d9a:	1b00      	subs	r0, r0, r4
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	d9f6      	bls.n	8002d8e <HAL_RCC_OscConfig+0x2f6>
 8002da0:	e6bd      	b.n	8002b1e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da2:	2801      	cmp	r0, #1
 8002da4:	f43f aebc 	beq.w	8002b20 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002da8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dac:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	4291      	cmp	r1, r2
 8002db2:	f47f ae9e 	bne.w	8002af2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbc:	428a      	cmp	r2, r1
 8002dbe:	f47f ae98 	bne.w	8002af2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002dc8:	401a      	ands	r2, r3
 8002dca:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002dce:	f47f ae90 	bne.w	8002af2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002dd4:	0852      	lsrs	r2, r2, #1
 8002dd6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002dda:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ddc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002de0:	f47f ae87 	bne.w	8002af2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dea:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002dee:	f47f ae80 	bne.w	8002af2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002df2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002df4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002dfc:	f43f ae62 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x2c>
 8002e00:	e677      	b.n	8002af2 <HAL_RCC_OscConfig+0x5a>
 8002e02:	bf00      	nop

08002e04 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e08:	461d      	mov	r5, r3
 8002e0a:	4617      	mov	r7, r2
 8002e0c:	4688      	mov	r8, r1
 8002e0e:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e10:	f7ff fa1a 	bl	8002248 <HAL_GetTick>
 8002e14:	443d      	add	r5, r7
 8002e16:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002e18:	f7ff fa16 	bl	8002248 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e1c:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8002e24:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e26:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e28:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002e2a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e2c:	6893      	ldr	r3, [r2, #8]
 8002e2e:	ea38 0303 	bics.w	r3, r8, r3
 8002e32:	d001      	beq.n	8002e38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002e34:	2000      	movs	r0, #0
 8002e36:	e02d      	b.n	8002e94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8002e38:	1c7b      	adds	r3, r7, #1
 8002e3a:	d0f7      	beq.n	8002e2c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e3c:	f7ff fa04 	bl	8002248 <HAL_GetTick>
 8002e40:	1b40      	subs	r0, r0, r5
 8002e42:	42a0      	cmp	r0, r4
 8002e44:	d329      	bcc.n	8002e9a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e4e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e50:	6872      	ldr	r2, [r6, #4]
 8002e52:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002e56:	d10a      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8002e58:	68b2      	ldr	r2, [r6, #8]
 8002e5a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e5e:	d002      	beq.n	8002e66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e60:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e64:	d103      	bne.n	8002e6e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e6e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8002e70:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002e74:	d107      	bne.n	8002e86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e84:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8002e92:	2003      	movs	r0, #3
}
 8002e94:	b002      	add	sp, #8
 8002e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002e9a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002e9c:	2b00      	cmp	r3, #0
      count--;
 8002e9e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002ea0:	bf08      	it	eq
 8002ea2:	2400      	moveq	r4, #0
      count--;
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	e7bf      	b.n	8002e28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002ea8:	20000084 	.word	0x20000084

08002eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b538      	push	{r3, r4, r5, lr}
 8002eae:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb0:	6842      	ldr	r2, [r0, #4]
 8002eb2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002eb6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb8:	d11f      	bne.n	8002efa <SPI_EndRxTransaction+0x4e>
 8002eba:	6882      	ldr	r2, [r0, #8]
 8002ebc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ec0:	d002      	beq.n	8002ec8 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ec6:	d107      	bne.n	8002ed8 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ec8:	6825      	ldr	r5, [r4, #0]
 8002eca:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ecc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002ed0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002ed4:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ed6:	d007      	beq.n	8002ee8 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed8:	460a      	mov	r2, r1
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7ff ff91 	bl	8002e04 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002ee2:	b920      	cbnz	r0, 8002eee <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002ee4:	2000      	movs	r0, #0
}
 8002ee6:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee8:	460a      	mov	r2, r1
 8002eea:	2101      	movs	r1, #1
 8002eec:	e7f6      	b.n	8002edc <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ef0:	f043 0320 	orr.w	r3, r3, #32
 8002ef4:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	e7f5      	b.n	8002ee6 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002efa:	460a      	mov	r2, r1
 8002efc:	2101      	movs	r1, #1
 8002efe:	e7ee      	b.n	8002ede <SPI_EndRxTransaction+0x32>

08002f00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f02:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <SPI_EndRxTxTransaction+0x50>)
 8002f06:	4d13      	ldr	r5, [pc, #76]	; (8002f54 <SPI_EndRxTxTransaction+0x54>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	fbb2 f5f5 	udiv	r5, r2, r5
 8002f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f12:	436a      	muls	r2, r5
 8002f14:	9201      	str	r2, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f16:	6842      	ldr	r2, [r0, #4]
 8002f18:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002f1c:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f1e:	d10b      	bne.n	8002f38 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	460a      	mov	r2, r1
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	f7ff ff6e 	bl	8002e04 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002f28:	b178      	cbz	r0, 8002f4a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f2c:	f043 0320 	orr.w	r3, r3, #32
 8002f30:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f32:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002f34:	b003      	add	sp, #12
 8002f36:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8002f38:	9b01      	ldr	r3, [sp, #4]
 8002f3a:	b133      	cbz	r3, 8002f4a <SPI_EndRxTxTransaction+0x4a>
      count--;
 8002f3c:	9b01      	ldr	r3, [sp, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	d4f6      	bmi.n	8002f38 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e7f2      	b.n	8002f34 <SPI_EndRxTxTransaction+0x34>
 8002f4e:	bf00      	nop
 8002f50:	20000084 	.word	0x20000084
 8002f54:	016e3600 	.word	0x016e3600

08002f58 <HAL_SPI_MspInit>:
}
 8002f58:	4770      	bx	lr

08002f5a <HAL_SPI_Init>:
{
 8002f5a:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d055      	beq.n	800300e <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d14e      	bne.n	8003006 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f68:	6842      	ldr	r2, [r0, #4]
 8002f6a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f6e:	d000      	beq.n	8002f72 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f70:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f76:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002f7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f7e:	b923      	cbnz	r3, 8002f8a <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8002f80:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff ffe7 	bl	8002f58 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002f8a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f8c:	68a0      	ldr	r0, [r4, #8]
 8002f8e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f90:	2302      	movs	r3, #2
 8002f92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002f96:	680b      	ldr	r3, [r1, #0]
 8002f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f9e:	6863      	ldr	r3, [r4, #4]
 8002fa0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002fa4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002fa8:	4303      	orrs	r3, r0
 8002faa:	68e0      	ldr	r0, [r4, #12]
 8002fac:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002fb0:	4303      	orrs	r3, r0
 8002fb2:	6920      	ldr	r0, [r4, #16]
 8002fb4:	f000 0002 	and.w	r0, r0, #2
 8002fb8:	4303      	orrs	r3, r0
 8002fba:	6960      	ldr	r0, [r4, #20]
 8002fbc:	f000 0001 	and.w	r0, r0, #1
 8002fc0:	4303      	orrs	r3, r0
 8002fc2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002fc6:	4303      	orrs	r3, r0
 8002fc8:	69e0      	ldr	r0, [r4, #28]
 8002fca:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002fce:	4303      	orrs	r3, r0
 8002fd0:	6a20      	ldr	r0, [r4, #32]
 8002fd2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002fd6:	4303      	orrs	r3, r0
 8002fd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002fda:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002fde:	4303      	orrs	r3, r0
 8002fe0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fe4:	0c12      	lsrs	r2, r2, #16
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	f002 0204 	and.w	r2, r2, #4
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ff2:	69cb      	ldr	r3, [r1, #28]
 8002ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ff8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ffa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ffe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003000:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003004:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003006:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003008:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800300c:	e7b1      	b.n	8002f72 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800300e:	2001      	movs	r0, #1
 8003010:	e7f8      	b.n	8003004 <HAL_SPI_Init+0xaa>

08003012 <HAL_SPI_MspDeInit>:
 8003012:	4770      	bx	lr

08003014 <HAL_SPI_DeInit>:
{
 8003014:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003016:	4604      	mov	r4, r0
 8003018:	b180      	cbz	r0, 800303c <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800301a:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003028:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800302a:	f7ff fff2 	bl	8003012 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800302e:	2000      	movs	r0, #0
 8003030:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8003032:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8003036:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 800303a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800303c:	2001      	movs	r0, #1
 800303e:	e7fc      	b.n	800303a <HAL_SPI_DeInit+0x26>

08003040 <HAL_SPI_Transmit>:
{
 8003040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003044:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8003046:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800304a:	2b01      	cmp	r3, #1
{
 800304c:	4604      	mov	r4, r0
 800304e:	460d      	mov	r5, r1
 8003050:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8003052:	f000 80a0 	beq.w	8003196 <HAL_SPI_Transmit+0x156>
 8003056:	2301      	movs	r3, #1
 8003058:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800305c:	f7ff f8f4 	bl	8002248 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003060:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003064:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003066:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003068:	b2d8      	uxtb	r0, r3
 800306a:	f040 8092 	bne.w	8003192 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 800306e:	2d00      	cmp	r5, #0
 8003070:	d061      	beq.n	8003136 <HAL_SPI_Transmit+0xf6>
 8003072:	f1b8 0f00 	cmp.w	r8, #0
 8003076:	d05e      	beq.n	8003136 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003078:	2303      	movs	r3, #3
 800307a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800307e:	2300      	movs	r3, #0
 8003080:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003082:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003086:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800308a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800308c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800308e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003090:	68a3      	ldr	r3, [r4, #8]
 8003092:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003094:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 800309a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309e:	d107      	bne.n	80030b0 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a6:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80030a8:	6833      	ldr	r3, [r6, #0]
 80030aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ae:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b0:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b2:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80030b6:	bf5e      	ittt	pl
 80030b8:	6833      	ldrpl	r3, [r6, #0]
 80030ba:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80030be:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80030c4:	6863      	ldr	r3, [r4, #4]
 80030c6:	d13f      	bne.n	8003148 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c8:	b113      	cbz	r3, 80030d0 <HAL_SPI_Transmit+0x90>
 80030ca:	f1b8 0f01 	cmp.w	r8, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80030d4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d6:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80030d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80030e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	b9a3      	cbnz	r3, 8003110 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e6:	464a      	mov	r2, r9
 80030e8:	4639      	mov	r1, r7
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff ff08 	bl	8002f00 <SPI_EndRxTxTransaction>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d14b      	bne.n	800318c <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	b933      	cbnz	r3, 8003106 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	9201      	str	r2, [sp, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003106:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003108:	3800      	subs	r0, #0
 800310a:	bf18      	it	ne
 800310c:	2001      	movne	r0, #1
error:
 800310e:	e012      	b.n	8003136 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	0798      	lsls	r0, r3, #30
 8003116:	d505      	bpl.n	8003124 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800311a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800311e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003120:	6323      	str	r3, [r4, #48]	; 0x30
 8003122:	e7d9      	b.n	80030d8 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7ff f890 	bl	8002248 <HAL_GetTick>
 8003128:	eba0 0009 	sub.w	r0, r0, r9
 800312c:	42b8      	cmp	r0, r7
 800312e:	d3d7      	bcc.n	80030e0 <HAL_SPI_Transmit+0xa0>
 8003130:	1c79      	adds	r1, r7, #1
 8003132:	d0d5      	beq.n	80030e0 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8003134:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003136:	2301      	movs	r3, #1
 8003138:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800313c:	2300      	movs	r3, #0
 800313e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003142:	b003      	add	sp, #12
 8003144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003148:	b113      	cbz	r3, 8003150 <HAL_SPI_Transmit+0x110>
 800314a:	f1b8 0f01 	cmp.w	r8, #1
 800314e:	d108      	bne.n	8003162 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003150:	782b      	ldrb	r3, [r5, #0]
 8003152:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003156:	3301      	adds	r3, #1
 8003158:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800315a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800315c:	3b01      	subs	r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003162:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0bd      	beq.n	80030e6 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	0792      	lsls	r2, r2, #30
 8003170:	d503      	bpl.n	800317a <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003172:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	731a      	strb	r2, [r3, #12]
 8003178:	e7ec      	b.n	8003154 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317a:	f7ff f865 	bl	8002248 <HAL_GetTick>
 800317e:	eba0 0009 	sub.w	r0, r0, r9
 8003182:	42b8      	cmp	r0, r7
 8003184:	d3ed      	bcc.n	8003162 <HAL_SPI_Transmit+0x122>
 8003186:	1c7b      	adds	r3, r7, #1
 8003188:	d0eb      	beq.n	8003162 <HAL_SPI_Transmit+0x122>
 800318a:	e7d3      	b.n	8003134 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800318c:	2320      	movs	r3, #32
 800318e:	6563      	str	r3, [r4, #84]	; 0x54
 8003190:	e7b0      	b.n	80030f4 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8003192:	2002      	movs	r0, #2
 8003194:	e7cf      	b.n	8003136 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8003196:	2002      	movs	r0, #2
 8003198:	e7d3      	b.n	8003142 <HAL_SPI_Transmit+0x102>

0800319a <HAL_SPI_TransmitReceive>:
{
 800319a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800319e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80031a0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80031a4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80031a8:	2b01      	cmp	r3, #1
{
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
 80031ae:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80031b0:	f000 80e0 	beq.w	8003374 <HAL_SPI_TransmitReceive+0x1da>
 80031b4:	2301      	movs	r3, #1
 80031b6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80031ba:	f7ff f845 	bl	8002248 <HAL_GetTick>
  tmp_state           = hspi->State;
 80031be:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80031c2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80031c6:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 80031c8:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031ca:	d00a      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x48>
 80031cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80031d0:	f040 80ce 	bne.w	8003370 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031d4:	68a3      	ldr	r3, [r4, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80ca 	bne.w	8003370 <HAL_SPI_TransmitReceive+0x1d6>
 80031dc:	2904      	cmp	r1, #4
 80031de:	f040 80c7 	bne.w	8003370 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e2:	2d00      	cmp	r5, #0
 80031e4:	d03f      	beq.n	8003266 <HAL_SPI_TransmitReceive+0xcc>
 80031e6:	f1b9 0f00 	cmp.w	r9, #0
 80031ea:	d03c      	beq.n	8003266 <HAL_SPI_TransmitReceive+0xcc>
 80031ec:	2e00      	cmp	r6, #0
 80031ee:	d03a      	beq.n	8003266 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031f4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031fa:	bf1c      	itt	ne
 80031fc:	2305      	movne	r3, #5
 80031fe:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003202:	2300      	movs	r3, #0
 8003204:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003206:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800320c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800320e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003210:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8003212:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003214:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8003216:	bf58      	it	pl
 8003218:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800321a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800321c:	bf58      	it	pl
 800321e:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8003222:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003224:	bf58      	it	pl
 8003226:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003228:	68e1      	ldr	r1, [r4, #12]
 800322a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800322e:	d151      	bne.n	80032d4 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003230:	b10a      	cbz	r2, 8003236 <HAL_SPI_TransmitReceive+0x9c>
 8003232:	2e01      	cmp	r6, #1
 8003234:	d107      	bne.n	8003246 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	f835 2b02 	ldrh.w	r2, [r5], #2
 800323a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800323c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800323e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003240:	3b01      	subs	r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003246:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003248:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800324a:	b29b      	uxth	r3, r3
 800324c:	b96b      	cbnz	r3, 800326a <HAL_SPI_TransmitReceive+0xd0>
 800324e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	b953      	cbnz	r3, 800326a <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003254:	463a      	mov	r2, r7
 8003256:	4641      	mov	r1, r8
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff fe51 	bl	8002f00 <SPI_EndRxTxTransaction>
 800325e:	2800      	cmp	r0, #0
 8003260:	d07b      	beq.n	800335a <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003262:	2320      	movs	r3, #32
 8003264:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003266:	2001      	movs	r0, #1
 8003268:	e02b      	b.n	80032c2 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800326a:	6821      	ldr	r1, [r4, #0]
 800326c:	688b      	ldr	r3, [r1, #8]
 800326e:	079a      	lsls	r2, r3, #30
 8003270:	d50d      	bpl.n	800328e <HAL_SPI_TransmitReceive+0xf4>
 8003272:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	b153      	cbz	r3, 800328e <HAL_SPI_TransmitReceive+0xf4>
 8003278:	b14d      	cbz	r5, 800328e <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800327c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003280:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003282:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003284:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003286:	3b01      	subs	r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800328c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800328e:	688a      	ldr	r2, [r1, #8]
 8003290:	f012 0201 	ands.w	r2, r2, #1
 8003294:	d00c      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x116>
 8003296:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	b14b      	cbz	r3, 80032b0 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800329c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800329e:	68c9      	ldr	r1, [r1, #12]
 80032a0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80032a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80032ae:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032b0:	f7fe ffca 	bl	8002248 <HAL_GetTick>
 80032b4:	1bc0      	subs	r0, r0, r7
 80032b6:	4540      	cmp	r0, r8
 80032b8:	d3c6      	bcc.n	8003248 <HAL_SPI_TransmitReceive+0xae>
 80032ba:	f1b8 3fff 	cmp.w	r8, #4294967295
 80032be:	d0c3      	beq.n	8003248 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032c8:	2300      	movs	r3, #0
 80032ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80032ce:	b003      	add	sp, #12
 80032d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d4:	b10a      	cbz	r2, 80032da <HAL_SPI_TransmitReceive+0x140>
 80032d6:	2e01      	cmp	r6, #1
 80032d8:	d108      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032da:	782a      	ldrb	r2, [r5, #0]
 80032dc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032e0:	3301      	adds	r3, #1
 80032e2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80032e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80032ec:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	b91b      	cbnz	r3, 80032fc <HAL_SPI_TransmitReceive+0x162>
 80032f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ab      	beq.n	8003254 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	6893      	ldr	r3, [r2, #8]
 8003300:	079b      	lsls	r3, r3, #30
 8003302:	d50e      	bpl.n	8003322 <HAL_SPI_TransmitReceive+0x188>
 8003304:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	b15b      	cbz	r3, 8003322 <HAL_SPI_TransmitReceive+0x188>
 800330a:	b155      	cbz	r5, 8003322 <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003312:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003314:	3301      	adds	r3, #1
 8003316:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003318:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800331a:	3b01      	subs	r3, #1
 800331c:	b29b      	uxth	r3, r3
 800331e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003320:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6891      	ldr	r1, [r2, #8]
 8003326:	f011 0101 	ands.w	r1, r1, #1
 800332a:	d00d      	beq.n	8003348 <HAL_SPI_TransmitReceive+0x1ae>
 800332c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	b153      	cbz	r3, 8003348 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800333a:	3301      	adds	r3, #1
 800333c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800333e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003340:	3b01      	subs	r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003346:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003348:	f7fe ff7e 	bl	8002248 <HAL_GetTick>
 800334c:	1bc0      	subs	r0, r0, r7
 800334e:	4540      	cmp	r0, r8
 8003350:	d3cd      	bcc.n	80032ee <HAL_SPI_TransmitReceive+0x154>
 8003352:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003356:	d0ca      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x154>
 8003358:	e7b2      	b.n	80032c0 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800335a:	68a3      	ldr	r3, [r4, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1b0      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	9001      	str	r0, [sp, #4]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	9201      	str	r2, [sp, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	9b01      	ldr	r3, [sp, #4]
 800336e:	e7a8      	b.n	80032c2 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8003370:	2002      	movs	r0, #2
 8003372:	e7a6      	b.n	80032c2 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8003374:	2002      	movs	r0, #2
 8003376:	e7aa      	b.n	80032ce <HAL_SPI_TransmitReceive+0x134>

08003378 <HAL_SPI_Receive>:
{
 8003378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800337c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800337e:	6843      	ldr	r3, [r0, #4]
 8003380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8003384:	4604      	mov	r4, r0
 8003386:	4688      	mov	r8, r1
 8003388:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800338a:	d10c      	bne.n	80033a6 <HAL_SPI_Receive+0x2e>
 800338c:	6883      	ldr	r3, [r0, #8]
 800338e:	b953      	cbnz	r3, 80033a6 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003390:	2304      	movs	r3, #4
 8003392:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003396:	4613      	mov	r3, r2
 8003398:	9500      	str	r5, [sp, #0]
 800339a:	460a      	mov	r2, r1
 800339c:	f7ff fefd 	bl	800319a <HAL_SPI_TransmitReceive>
}
 80033a0:	b002      	add	sp, #8
 80033a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80033a6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d07e      	beq.n	80034ac <HAL_SPI_Receive+0x134>
 80033ae:	2301      	movs	r3, #1
 80033b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80033b4:	f7fe ff48 	bl	8002248 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80033b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80033bc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80033be:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80033c0:	b2d8      	uxtb	r0, r3
 80033c2:	d171      	bne.n	80034a8 <HAL_SPI_Receive+0x130>
  if ((pData == NULL) || (Size == 0U))
 80033c4:	f1b8 0f00 	cmp.w	r8, #0
 80033c8:	d05c      	beq.n	8003484 <HAL_SPI_Receive+0x10c>
 80033ca:	2e00      	cmp	r6, #0
 80033cc:	d05a      	beq.n	8003484 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ce:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033d0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033d4:	2304      	movs	r3, #4
 80033d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80033e4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033e8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033ea:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80033ec:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80033ee:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferSize  = Size;
 80033f0:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	d107      	bne.n	8003406 <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003404:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800340a:	bf5e      	ittt	pl
 800340c:	681a      	ldrpl	r2, [r3, #0]
 800340e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003412:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003414:	68e3      	ldr	r3, [r4, #12]
 8003416:	b1f3      	cbz	r3, 8003456 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8003418:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	b1fb      	cbz	r3, 800345e <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	07d2      	lsls	r2, r2, #31
 8003424:	d535      	bpl.n	8003492 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800342a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800342e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003430:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003432:	3b01      	subs	r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003438:	e7ee      	b.n	8003418 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	07d0      	lsls	r0, r2, #31
 8003440:	d518      	bpl.n	8003474 <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003442:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003444:	7b1b      	ldrb	r3, [r3, #12]
 8003446:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800344a:	3301      	adds	r3, #1
 800344c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800344e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003450:	3b01      	subs	r3, #1
 8003452:	b29b      	uxth	r3, r3
 8003454:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003456:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ed      	bne.n	800343a <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345e:	463a      	mov	r2, r7
 8003460:	4629      	mov	r1, r5
 8003462:	4620      	mov	r0, r4
 8003464:	f7ff fd22 	bl	8002eac <SPI_EndRxTransaction>
 8003468:	b9d8      	cbnz	r0, 80034a2 <HAL_SPI_Receive+0x12a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800346a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800346c:	3800      	subs	r0, #0
 800346e:	bf18      	it	ne
 8003470:	2001      	movne	r0, #1
error :
 8003472:	e007      	b.n	8003484 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003474:	f7fe fee8 	bl	8002248 <HAL_GetTick>
 8003478:	1bc0      	subs	r0, r0, r7
 800347a:	42a8      	cmp	r0, r5
 800347c:	d3eb      	bcc.n	8003456 <HAL_SPI_Receive+0xde>
 800347e:	1c69      	adds	r1, r5, #1
 8003480:	d0e9      	beq.n	8003456 <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8003482:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003484:	2301      	movs	r3, #1
 8003486:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800348a:	2300      	movs	r3, #0
 800348c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8003490:	e786      	b.n	80033a0 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003492:	f7fe fed9 	bl	8002248 <HAL_GetTick>
 8003496:	1bc0      	subs	r0, r0, r7
 8003498:	42a8      	cmp	r0, r5
 800349a:	d3bd      	bcc.n	8003418 <HAL_SPI_Receive+0xa0>
 800349c:	1c6b      	adds	r3, r5, #1
 800349e:	d0bb      	beq.n	8003418 <HAL_SPI_Receive+0xa0>
 80034a0:	e7ef      	b.n	8003482 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a2:	2320      	movs	r3, #32
 80034a4:	6563      	str	r3, [r4, #84]	; 0x54
 80034a6:	e7e0      	b.n	800346a <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 80034a8:	2002      	movs	r0, #2
 80034aa:	e7eb      	b.n	8003484 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 80034ac:	2002      	movs	r0, #2
 80034ae:	e777      	b.n	80033a0 <HAL_SPI_Receive+0x28>

080034b0 <HAL_SRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsram);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */ 
}
 80034b0:	4770      	bx	lr

080034b2 <HAL_SRAM_Init>:
{ 
 80034b2:	b570      	push	{r4, r5, r6, lr}
 80034b4:	460e      	mov	r6, r1
 80034b6:	4615      	mov	r5, r2
  if(hsram == NULL)
 80034b8:	4604      	mov	r4, r0
 80034ba:	b310      	cbz	r0, 8003502 <HAL_SRAM_Init+0x50>
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80034bc:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80034c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034c4:	b91b      	cbnz	r3, 80034ce <HAL_SRAM_Init+0x1c>
    hsram->Lock = HAL_UNLOCKED;
 80034c6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    HAL_SRAM_MspInit(hsram);
 80034ca:	f7ff fff1 	bl	80034b0 <HAL_SRAM_MspInit>
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80034ce:	f104 0108 	add.w	r1, r4, #8
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	f000 f818 	bl	8003508 <FSMC_NORSRAM_Init>
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80034d8:	68a2      	ldr	r2, [r4, #8]
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	4631      	mov	r1, r6
 80034de:	f000 f851 	bl	8003584 <FSMC_NORSRAM_Timing_Init>
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80034e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034e4:	68a2      	ldr	r2, [r4, #8]
 80034e6:	6860      	ldr	r0, [r4, #4]
 80034e8:	4629      	mov	r1, r5
 80034ea:	f000 f875 	bl	80035d8 <FSMC_NORSRAM_Extended_Timing_Init>
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80034ee:	68a1      	ldr	r1, [r4, #8]
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  return HAL_OK;
 80034fe:	2000      	movs	r0, #0
}
 8003500:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 8003502:	2001      	movs	r0, #1
 8003504:	e7fc      	b.n	8003500 <HAL_SRAM_Init+0x4e>
	...

08003508 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8003508:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800350a:	680d      	ldr	r5, [r1, #0]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800350c:	4e1c      	ldr	r6, [pc, #112]	; (8003580 <FSMC_NORSRAM_Init+0x78>)
  tmpr = Device->BTCR[Init->NSBank];
 800350e:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 8003512:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003516:	684a      	ldr	r2, [r1, #4]
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8003518:	401e      	ands	r6, r3
                     Init->MemoryType           |\
 800351a:	68cb      	ldr	r3, [r1, #12]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800351c:	ea4c 0202 	orr.w	r2, ip, r2
                     Init->MemoryType           |\
 8003520:	4313      	orrs	r3, r2
                     Init->MemoryDataWidth      |\
 8003522:	690a      	ldr	r2, [r1, #16]
 8003524:	4313      	orrs	r3, r2
                     Init->BurstAccessMode      |\
 8003526:	694a      	ldr	r2, [r1, #20]
 8003528:	4313      	orrs	r3, r2
                     Init->WaitSignalPolarity   |\
 800352a:	69ca      	ldr	r2, [r1, #28]
 800352c:	4313      	orrs	r3, r2
                     Init->WaitSignalActive     |\
 800352e:	6a0a      	ldr	r2, [r1, #32]
 8003530:	4313      	orrs	r3, r2
                     Init->WriteOperation       |\
 8003532:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003534:	4313      	orrs	r3, r2
                     Init->WaitSignal           |\
 8003536:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003538:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
 800353a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                     Init->AsynchronousWait     |\
                     Init->WriteBurst           |\
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
 800353c:	e9d1 740d 	ldrd	r7, r4, [r1, #52]	; 0x34
                     Init->ExtendedMode         |\
 8003540:	4313      	orrs	r3, r2
                     Init->AsynchronousWait     |\
 8003542:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003544:	4313      	orrs	r3, r2
                     Init->ContinuousClock      |\
 8003546:	6bca      	ldr	r2, [r1, #60]	; 0x3c
                     Init->WriteBurst           |\
 8003548:	433b      	orrs	r3, r7
                     Init->ContinuousClock      |\
 800354a:	4313      	orrs	r3, r2
                     Init->PageSize             |\
 800354c:	4323      	orrs	r3, r4
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800354e:	4333      	orrs	r3, r6
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003550:	f1bc 0f08 	cmp.w	ip, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003554:	bf08      	it	eq
 8003556:	f043 0340 	orreq.w	r3, r3, #64	; 0x40

  Device->BTCR[Init->NSBank] = tmpr;

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800355a:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
  Device->BTCR[Init->NSBank] = tmpr;
 800355e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8003562:	d108      	bne.n	8003576 <FSMC_NORSRAM_Init+0x6e>
 8003564:	b14d      	cbz	r5, 800357a <FSMC_NORSRAM_Init+0x72>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800356c:	6003      	str	r3, [r0, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800356e:	6803      	ldr	r3, [r0, #0]
 8003570:	431c      	orrs	r4, r3
 8003572:	6004      	str	r4, [r0, #0]
 8003574:	e001      	b.n	800357a <FSMC_NORSRAM_Init+0x72>
  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8003576:	2d00      	cmp	r5, #0
 8003578:	d1f9      	bne.n	800356e <FSMC_NORSRAM_Init+0x66>
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 800357a:	2000      	movs	r0, #0
 800357c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357e:	bf00      	nop
 8003580:	ffc00480 	.word	0xffc00480

08003584 <FSMC_NORSRAM_Timing_Init>:
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                    ((Timing->AddressHoldTime) << 4U)          |\
                    ((Timing->DataSetupTime) << 8U)            |\
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8003584:	690b      	ldr	r3, [r1, #16]
{
 8003586:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003588:	698f      	ldr	r7, [r1, #24]
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800358a:	1e5c      	subs	r4, r3, #1
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800358c:	680b      	ldr	r3, [r1, #0]
 800358e:	433b      	orrs	r3, r7
                    ((Timing->AddressHoldTime) << 4U)          |\
 8003590:	684f      	ldr	r7, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003592:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
                    ((Timing->DataSetupTime) << 8U)            |\
 8003596:	688f      	ldr	r7, [r1, #8]
 8003598:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800359c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80035a0:	68cf      	ldr	r7, [r1, #12]
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80035a2:	6949      	ldr	r1, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 80035a4:	6856      	ldr	r6, [r2, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80035a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80035aa:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80035ae:	3902      	subs	r1, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80035b0:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80035b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80035b8:	4333      	orrs	r3, r6
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 80035ba:	6053      	str	r3, [r2, #4]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80035bc:	6803      	ldr	r3, [r0, #0]
 80035be:	02db      	lsls	r3, r3, #11
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80035c0:	bf48      	it	mi
 80035c2:	6843      	ldrmi	r3, [r0, #4]
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80035c4:	ea4f 5504 	mov.w	r5, r4, lsl #20
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80035c8:	bf42      	ittt	mi
 80035ca:	f423 0370 	bicmi.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80035ce:	432b      	orrmi	r3, r5
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80035d0:	6043      	strmi	r3, [r0, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 80035d2:	2000      	movs	r0, #0
 80035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035d8 <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80035d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 80035dc:	b530      	push	{r4, r5, lr}
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80035de:	d114      	bne.n	800360a <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80035e0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80035e4:	4c0a      	ldr	r4, [pc, #40]	; (8003610 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                      ((Timing->AddressHoldTime) << 4U)          |\
                      ((Timing->DataSetupTime) << 8U)            |\
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80035e6:	698d      	ldr	r5, [r1, #24]
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80035e8:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80035ea:	680b      	ldr	r3, [r1, #0]
 80035ec:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 80035ee:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80035f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 80035f4:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80035f6:	68c9      	ldr	r1, [r1, #12]
 80035f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80035fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003600:	4323      	orrs	r3, r4
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003602:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 8003606:	2000      	movs	r0, #0
 8003608:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800360a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800360e:	e7f8      	b.n	8003602 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8003610:	cff00000 	.word	0xcff00000

08003614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800364c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003618:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800361a:	e003      	b.n	8003624 <LoopCopyDataInit>

0800361c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800361e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003620:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003622:	3104      	adds	r1, #4

08003624 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003628:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800362a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800362c:	d3f6      	bcc.n	800361c <CopyDataInit>
  ldr  r2, =_sbss
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003630:	e002      	b.n	8003638 <LoopFillZerobss>

08003632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003632:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003634:	f842 3b04 	str.w	r3, [r2], #4

08003638 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800363a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800363c:	d3f9      	bcc.n	8003632 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800363e:	f7fe fd93 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003642:	f000 f811 	bl	8003668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003646:	f7fd f859 	bl	80006fc <main>
  bx  lr    
 800364a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800364c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003650:	08008f98 	.word	0x08008f98
  ldr  r0, =_sdata
 8003654:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003658:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 800365c:	200000f4 	.word	0x200000f4
  ldr  r3, = _ebss
 8003660:	20001158 	.word	0x20001158

08003664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC_IRQHandler>
	...

08003668 <__libc_init_array>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	4d0d      	ldr	r5, [pc, #52]	; (80036a0 <__libc_init_array+0x38>)
 800366c:	4c0d      	ldr	r4, [pc, #52]	; (80036a4 <__libc_init_array+0x3c>)
 800366e:	1b64      	subs	r4, r4, r5
 8003670:	10a4      	asrs	r4, r4, #2
 8003672:	2600      	movs	r6, #0
 8003674:	42a6      	cmp	r6, r4
 8003676:	d109      	bne.n	800368c <__libc_init_array+0x24>
 8003678:	4d0b      	ldr	r5, [pc, #44]	; (80036a8 <__libc_init_array+0x40>)
 800367a:	4c0c      	ldr	r4, [pc, #48]	; (80036ac <__libc_init_array+0x44>)
 800367c:	f001 faa2 	bl	8004bc4 <_init>
 8003680:	1b64      	subs	r4, r4, r5
 8003682:	10a4      	asrs	r4, r4, #2
 8003684:	2600      	movs	r6, #0
 8003686:	42a6      	cmp	r6, r4
 8003688:	d105      	bne.n	8003696 <__libc_init_array+0x2e>
 800368a:	bd70      	pop	{r4, r5, r6, pc}
 800368c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003690:	4798      	blx	r3
 8003692:	3601      	adds	r6, #1
 8003694:	e7ee      	b.n	8003674 <__libc_init_array+0xc>
 8003696:	f855 3b04 	ldr.w	r3, [r5], #4
 800369a:	4798      	blx	r3
 800369c:	3601      	adds	r6, #1
 800369e:	e7f2      	b.n	8003686 <__libc_init_array+0x1e>
 80036a0:	08008f90 	.word	0x08008f90
 80036a4:	08008f90 	.word	0x08008f90
 80036a8:	08008f90 	.word	0x08008f90
 80036ac:	08008f94 	.word	0x08008f94

080036b0 <memset>:
 80036b0:	4402      	add	r2, r0
 80036b2:	4603      	mov	r3, r0
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d100      	bne.n	80036ba <memset+0xa>
 80036b8:	4770      	bx	lr
 80036ba:	f803 1b01 	strb.w	r1, [r3], #1
 80036be:	e7f9      	b.n	80036b4 <memset+0x4>

080036c0 <siprintf>:
 80036c0:	b40e      	push	{r1, r2, r3}
 80036c2:	b500      	push	{lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	ab1d      	add	r3, sp, #116	; 0x74
 80036c8:	9002      	str	r0, [sp, #8]
 80036ca:	9006      	str	r0, [sp, #24]
 80036cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036d0:	4809      	ldr	r0, [pc, #36]	; (80036f8 <siprintf+0x38>)
 80036d2:	9107      	str	r1, [sp, #28]
 80036d4:	9104      	str	r1, [sp, #16]
 80036d6:	4909      	ldr	r1, [pc, #36]	; (80036fc <siprintf+0x3c>)
 80036d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036dc:	9105      	str	r1, [sp, #20]
 80036de:	6800      	ldr	r0, [r0, #0]
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	a902      	add	r1, sp, #8
 80036e4:	f000 f9e8 	bl	8003ab8 <_svfiprintf_r>
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	b01c      	add	sp, #112	; 0x70
 80036f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f4:	b003      	add	sp, #12
 80036f6:	4770      	bx	lr
 80036f8:	20000090 	.word	0x20000090
 80036fc:	ffff0208 	.word	0xffff0208

08003700 <strcat>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4602      	mov	r2, r0
 8003704:	7814      	ldrb	r4, [r2, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	3201      	adds	r2, #1
 800370a:	2c00      	cmp	r4, #0
 800370c:	d1fa      	bne.n	8003704 <strcat+0x4>
 800370e:	3b01      	subs	r3, #1
 8003710:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003714:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003718:	2a00      	cmp	r2, #0
 800371a:	d1f9      	bne.n	8003710 <strcat+0x10>
 800371c:	bd10      	pop	{r4, pc}

0800371e <strcpy>:
 800371e:	4603      	mov	r3, r0
 8003720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003724:	f803 2b01 	strb.w	r2, [r3], #1
 8003728:	2a00      	cmp	r2, #0
 800372a:	d1f9      	bne.n	8003720 <strcpy+0x2>
 800372c:	4770      	bx	lr

0800372e <strncpy>:
 800372e:	b510      	push	{r4, lr}
 8003730:	3901      	subs	r1, #1
 8003732:	4603      	mov	r3, r0
 8003734:	b132      	cbz	r2, 8003744 <strncpy+0x16>
 8003736:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800373a:	f803 4b01 	strb.w	r4, [r3], #1
 800373e:	3a01      	subs	r2, #1
 8003740:	2c00      	cmp	r4, #0
 8003742:	d1f7      	bne.n	8003734 <strncpy+0x6>
 8003744:	441a      	add	r2, r3
 8003746:	2100      	movs	r1, #0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <strncpy+0x20>
 800374c:	bd10      	pop	{r4, pc}
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <strncpy+0x1a>

08003754 <strstr>:
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	780c      	ldrb	r4, [r1, #0]
 8003758:	b164      	cbz	r4, 8003774 <strstr+0x20>
 800375a:	4603      	mov	r3, r0
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	1c5e      	adds	r6, r3, #1
 8003762:	b90a      	cbnz	r2, 8003768 <strstr+0x14>
 8003764:	4610      	mov	r0, r2
 8003766:	e005      	b.n	8003774 <strstr+0x20>
 8003768:	4294      	cmp	r4, r2
 800376a:	d108      	bne.n	800377e <strstr+0x2a>
 800376c:	460d      	mov	r5, r1
 800376e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003772:	b902      	cbnz	r2, 8003776 <strstr+0x22>
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003776:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800377a:	4297      	cmp	r7, r2
 800377c:	d0f7      	beq.n	800376e <strstr+0x1a>
 800377e:	4633      	mov	r3, r6
 8003780:	e7ec      	b.n	800375c <strstr+0x8>
	...

08003784 <strtok>:
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <strtok+0x5c>)
 8003786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003788:	681e      	ldr	r6, [r3, #0]
 800378a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800378c:	4605      	mov	r5, r0
 800378e:	b9fc      	cbnz	r4, 80037d0 <strtok+0x4c>
 8003790:	2050      	movs	r0, #80	; 0x50
 8003792:	9101      	str	r1, [sp, #4]
 8003794:	f000 f882 	bl	800389c <malloc>
 8003798:	9901      	ldr	r1, [sp, #4]
 800379a:	65b0      	str	r0, [r6, #88]	; 0x58
 800379c:	4602      	mov	r2, r0
 800379e:	b920      	cbnz	r0, 80037aa <strtok+0x26>
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <strtok+0x60>)
 80037a2:	4811      	ldr	r0, [pc, #68]	; (80037e8 <strtok+0x64>)
 80037a4:	2157      	movs	r1, #87	; 0x57
 80037a6:	f000 f849 	bl	800383c <__assert_func>
 80037aa:	e9c0 4400 	strd	r4, r4, [r0]
 80037ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80037b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80037b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80037ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80037be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80037c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80037c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80037ca:	6184      	str	r4, [r0, #24]
 80037cc:	7704      	strb	r4, [r0, #28]
 80037ce:	6244      	str	r4, [r0, #36]	; 0x24
 80037d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80037d2:	2301      	movs	r3, #1
 80037d4:	4628      	mov	r0, r5
 80037d6:	b002      	add	sp, #8
 80037d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80037dc:	f000 b806 	b.w	80037ec <__strtok_r>
 80037e0:	20000090 	.word	0x20000090
 80037e4:	08008e40 	.word	0x08008e40
 80037e8:	08008e57 	.word	0x08008e57

080037ec <__strtok_r>:
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	b908      	cbnz	r0, 80037f4 <__strtok_r+0x8>
 80037f0:	6810      	ldr	r0, [r2, #0]
 80037f2:	b188      	cbz	r0, 8003818 <__strtok_r+0x2c>
 80037f4:	4604      	mov	r4, r0
 80037f6:	4620      	mov	r0, r4
 80037f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80037fc:	460f      	mov	r7, r1
 80037fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003802:	b91e      	cbnz	r6, 800380c <__strtok_r+0x20>
 8003804:	b965      	cbnz	r5, 8003820 <__strtok_r+0x34>
 8003806:	6015      	str	r5, [r2, #0]
 8003808:	4628      	mov	r0, r5
 800380a:	e005      	b.n	8003818 <__strtok_r+0x2c>
 800380c:	42b5      	cmp	r5, r6
 800380e:	d1f6      	bne.n	80037fe <__strtok_r+0x12>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <__strtok_r+0xa>
 8003814:	6014      	str	r4, [r2, #0]
 8003816:	7003      	strb	r3, [r0, #0]
 8003818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800381a:	461c      	mov	r4, r3
 800381c:	e00c      	b.n	8003838 <__strtok_r+0x4c>
 800381e:	b915      	cbnz	r5, 8003826 <__strtok_r+0x3a>
 8003820:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003824:	460e      	mov	r6, r1
 8003826:	f816 5b01 	ldrb.w	r5, [r6], #1
 800382a:	42ab      	cmp	r3, r5
 800382c:	d1f7      	bne.n	800381e <__strtok_r+0x32>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f3      	beq.n	800381a <__strtok_r+0x2e>
 8003832:	2300      	movs	r3, #0
 8003834:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003838:	6014      	str	r4, [r2, #0]
 800383a:	e7ed      	b.n	8003818 <__strtok_r+0x2c>

0800383c <__assert_func>:
 800383c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800383e:	4614      	mov	r4, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <__assert_func+0x2c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4605      	mov	r5, r0
 8003848:	68d8      	ldr	r0, [r3, #12]
 800384a:	b14c      	cbz	r4, 8003860 <__assert_func+0x24>
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <__assert_func+0x30>)
 800384e:	9100      	str	r1, [sp, #0]
 8003850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003854:	4906      	ldr	r1, [pc, #24]	; (8003870 <__assert_func+0x34>)
 8003856:	462b      	mov	r3, r5
 8003858:	f000 f80e 	bl	8003878 <fiprintf>
 800385c:	f000 fdea 	bl	8004434 <abort>
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <__assert_func+0x38>)
 8003862:	461c      	mov	r4, r3
 8003864:	e7f3      	b.n	800384e <__assert_func+0x12>
 8003866:	bf00      	nop
 8003868:	20000090 	.word	0x20000090
 800386c:	08008eb8 	.word	0x08008eb8
 8003870:	08008ec5 	.word	0x08008ec5
 8003874:	08008922 	.word	0x08008922

08003878 <fiprintf>:
 8003878:	b40e      	push	{r1, r2, r3}
 800387a:	b503      	push	{r0, r1, lr}
 800387c:	4601      	mov	r1, r0
 800387e:	ab03      	add	r3, sp, #12
 8003880:	4805      	ldr	r0, [pc, #20]	; (8003898 <fiprintf+0x20>)
 8003882:	f853 2b04 	ldr.w	r2, [r3], #4
 8003886:	6800      	ldr	r0, [r0, #0]
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	f000 fa3f 	bl	8003d0c <_vfiprintf_r>
 800388e:	b002      	add	sp, #8
 8003890:	f85d eb04 	ldr.w	lr, [sp], #4
 8003894:	b003      	add	sp, #12
 8003896:	4770      	bx	lr
 8003898:	20000090 	.word	0x20000090

0800389c <malloc>:
 800389c:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <malloc+0xc>)
 800389e:	4601      	mov	r1, r0
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	f000 b853 	b.w	800394c <_malloc_r>
 80038a6:	bf00      	nop
 80038a8:	20000090 	.word	0x20000090

080038ac <_free_r>:
 80038ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ae:	2900      	cmp	r1, #0
 80038b0:	d048      	beq.n	8003944 <_free_r+0x98>
 80038b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b6:	9001      	str	r0, [sp, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f1a1 0404 	sub.w	r4, r1, #4
 80038be:	bfb8      	it	lt
 80038c0:	18e4      	addlt	r4, r4, r3
 80038c2:	f001 f805 	bl	80048d0 <__malloc_lock>
 80038c6:	4a20      	ldr	r2, [pc, #128]	; (8003948 <_free_r+0x9c>)
 80038c8:	9801      	ldr	r0, [sp, #4]
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	4615      	mov	r5, r2
 80038ce:	b933      	cbnz	r3, 80038de <_free_r+0x32>
 80038d0:	6063      	str	r3, [r4, #4]
 80038d2:	6014      	str	r4, [r2, #0]
 80038d4:	b003      	add	sp, #12
 80038d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038da:	f000 bfff 	b.w	80048dc <__malloc_unlock>
 80038de:	42a3      	cmp	r3, r4
 80038e0:	d90b      	bls.n	80038fa <_free_r+0x4e>
 80038e2:	6821      	ldr	r1, [r4, #0]
 80038e4:	1862      	adds	r2, r4, r1
 80038e6:	4293      	cmp	r3, r2
 80038e8:	bf04      	itt	eq
 80038ea:	681a      	ldreq	r2, [r3, #0]
 80038ec:	685b      	ldreq	r3, [r3, #4]
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	bf04      	itt	eq
 80038f2:	1852      	addeq	r2, r2, r1
 80038f4:	6022      	streq	r2, [r4, #0]
 80038f6:	602c      	str	r4, [r5, #0]
 80038f8:	e7ec      	b.n	80038d4 <_free_r+0x28>
 80038fa:	461a      	mov	r2, r3
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b10b      	cbz	r3, 8003904 <_free_r+0x58>
 8003900:	42a3      	cmp	r3, r4
 8003902:	d9fa      	bls.n	80038fa <_free_r+0x4e>
 8003904:	6811      	ldr	r1, [r2, #0]
 8003906:	1855      	adds	r5, r2, r1
 8003908:	42a5      	cmp	r5, r4
 800390a:	d10b      	bne.n	8003924 <_free_r+0x78>
 800390c:	6824      	ldr	r4, [r4, #0]
 800390e:	4421      	add	r1, r4
 8003910:	1854      	adds	r4, r2, r1
 8003912:	42a3      	cmp	r3, r4
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	d1dd      	bne.n	80038d4 <_free_r+0x28>
 8003918:	681c      	ldr	r4, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	6053      	str	r3, [r2, #4]
 800391e:	4421      	add	r1, r4
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	e7d7      	b.n	80038d4 <_free_r+0x28>
 8003924:	d902      	bls.n	800392c <_free_r+0x80>
 8003926:	230c      	movs	r3, #12
 8003928:	6003      	str	r3, [r0, #0]
 800392a:	e7d3      	b.n	80038d4 <_free_r+0x28>
 800392c:	6825      	ldr	r5, [r4, #0]
 800392e:	1961      	adds	r1, r4, r5
 8003930:	428b      	cmp	r3, r1
 8003932:	bf04      	itt	eq
 8003934:	6819      	ldreq	r1, [r3, #0]
 8003936:	685b      	ldreq	r3, [r3, #4]
 8003938:	6063      	str	r3, [r4, #4]
 800393a:	bf04      	itt	eq
 800393c:	1949      	addeq	r1, r1, r5
 800393e:	6021      	streq	r1, [r4, #0]
 8003940:	6054      	str	r4, [r2, #4]
 8003942:	e7c7      	b.n	80038d4 <_free_r+0x28>
 8003944:	b003      	add	sp, #12
 8003946:	bd30      	pop	{r4, r5, pc}
 8003948:	20000960 	.word	0x20000960

0800394c <_malloc_r>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	1ccd      	adds	r5, r1, #3
 8003950:	f025 0503 	bic.w	r5, r5, #3
 8003954:	3508      	adds	r5, #8
 8003956:	2d0c      	cmp	r5, #12
 8003958:	bf38      	it	cc
 800395a:	250c      	movcc	r5, #12
 800395c:	2d00      	cmp	r5, #0
 800395e:	4606      	mov	r6, r0
 8003960:	db01      	blt.n	8003966 <_malloc_r+0x1a>
 8003962:	42a9      	cmp	r1, r5
 8003964:	d903      	bls.n	800396e <_malloc_r+0x22>
 8003966:	230c      	movs	r3, #12
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	2000      	movs	r0, #0
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800396e:	f000 ffaf 	bl	80048d0 <__malloc_lock>
 8003972:	4921      	ldr	r1, [pc, #132]	; (80039f8 <_malloc_r+0xac>)
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	4614      	mov	r4, r2
 8003978:	b99c      	cbnz	r4, 80039a2 <_malloc_r+0x56>
 800397a:	4f20      	ldr	r7, [pc, #128]	; (80039fc <_malloc_r+0xb0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b923      	cbnz	r3, 800398a <_malloc_r+0x3e>
 8003980:	4621      	mov	r1, r4
 8003982:	4630      	mov	r0, r6
 8003984:	f000 fc86 	bl	8004294 <_sbrk_r>
 8003988:	6038      	str	r0, [r7, #0]
 800398a:	4629      	mov	r1, r5
 800398c:	4630      	mov	r0, r6
 800398e:	f000 fc81 	bl	8004294 <_sbrk_r>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d123      	bne.n	80039de <_malloc_r+0x92>
 8003996:	230c      	movs	r3, #12
 8003998:	6033      	str	r3, [r6, #0]
 800399a:	4630      	mov	r0, r6
 800399c:	f000 ff9e 	bl	80048dc <__malloc_unlock>
 80039a0:	e7e3      	b.n	800396a <_malloc_r+0x1e>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	1b5b      	subs	r3, r3, r5
 80039a6:	d417      	bmi.n	80039d8 <_malloc_r+0x8c>
 80039a8:	2b0b      	cmp	r3, #11
 80039aa:	d903      	bls.n	80039b4 <_malloc_r+0x68>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	441c      	add	r4, r3
 80039b0:	6025      	str	r5, [r4, #0]
 80039b2:	e004      	b.n	80039be <_malloc_r+0x72>
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	42a2      	cmp	r2, r4
 80039b8:	bf0c      	ite	eq
 80039ba:	600b      	streq	r3, [r1, #0]
 80039bc:	6053      	strne	r3, [r2, #4]
 80039be:	4630      	mov	r0, r6
 80039c0:	f000 ff8c 	bl	80048dc <__malloc_unlock>
 80039c4:	f104 000b 	add.w	r0, r4, #11
 80039c8:	1d23      	adds	r3, r4, #4
 80039ca:	f020 0007 	bic.w	r0, r0, #7
 80039ce:	1ac2      	subs	r2, r0, r3
 80039d0:	d0cc      	beq.n	800396c <_malloc_r+0x20>
 80039d2:	1a1b      	subs	r3, r3, r0
 80039d4:	50a3      	str	r3, [r4, r2]
 80039d6:	e7c9      	b.n	800396c <_malloc_r+0x20>
 80039d8:	4622      	mov	r2, r4
 80039da:	6864      	ldr	r4, [r4, #4]
 80039dc:	e7cc      	b.n	8003978 <_malloc_r+0x2c>
 80039de:	1cc4      	adds	r4, r0, #3
 80039e0:	f024 0403 	bic.w	r4, r4, #3
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d0e3      	beq.n	80039b0 <_malloc_r+0x64>
 80039e8:	1a21      	subs	r1, r4, r0
 80039ea:	4630      	mov	r0, r6
 80039ec:	f000 fc52 	bl	8004294 <_sbrk_r>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d1dd      	bne.n	80039b0 <_malloc_r+0x64>
 80039f4:	e7cf      	b.n	8003996 <_malloc_r+0x4a>
 80039f6:	bf00      	nop
 80039f8:	20000960 	.word	0x20000960
 80039fc:	20000964 	.word	0x20000964

08003a00 <__ssputs_r>:
 8003a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	688e      	ldr	r6, [r1, #8]
 8003a06:	429e      	cmp	r6, r3
 8003a08:	4682      	mov	sl, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4690      	mov	r8, r2
 8003a0e:	461f      	mov	r7, r3
 8003a10:	d838      	bhi.n	8003a84 <__ssputs_r+0x84>
 8003a12:	898a      	ldrh	r2, [r1, #12]
 8003a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a18:	d032      	beq.n	8003a80 <__ssputs_r+0x80>
 8003a1a:	6825      	ldr	r5, [r4, #0]
 8003a1c:	6909      	ldr	r1, [r1, #16]
 8003a1e:	eba5 0901 	sub.w	r9, r5, r1
 8003a22:	6965      	ldr	r5, [r4, #20]
 8003a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	444b      	add	r3, r9
 8003a30:	106d      	asrs	r5, r5, #1
 8003a32:	429d      	cmp	r5, r3
 8003a34:	bf38      	it	cc
 8003a36:	461d      	movcc	r5, r3
 8003a38:	0553      	lsls	r3, r2, #21
 8003a3a:	d531      	bpl.n	8003aa0 <__ssputs_r+0xa0>
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7ff ff85 	bl	800394c <_malloc_r>
 8003a42:	4606      	mov	r6, r0
 8003a44:	b950      	cbnz	r0, 8003a5c <__ssputs_r+0x5c>
 8003a46:	230c      	movs	r3, #12
 8003a48:	f8ca 3000 	str.w	r3, [sl]
 8003a4c:	89a3      	ldrh	r3, [r4, #12]
 8003a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a52:	81a3      	strh	r3, [r4, #12]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5c:	6921      	ldr	r1, [r4, #16]
 8003a5e:	464a      	mov	r2, r9
 8003a60:	f000 ff0e 	bl	8004880 <memcpy>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6e:	81a3      	strh	r3, [r4, #12]
 8003a70:	6126      	str	r6, [r4, #16]
 8003a72:	6165      	str	r5, [r4, #20]
 8003a74:	444e      	add	r6, r9
 8003a76:	eba5 0509 	sub.w	r5, r5, r9
 8003a7a:	6026      	str	r6, [r4, #0]
 8003a7c:	60a5      	str	r5, [r4, #8]
 8003a7e:	463e      	mov	r6, r7
 8003a80:	42be      	cmp	r6, r7
 8003a82:	d900      	bls.n	8003a86 <__ssputs_r+0x86>
 8003a84:	463e      	mov	r6, r7
 8003a86:	4632      	mov	r2, r6
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	f000 ff06 	bl	800489c <memmove>
 8003a90:	68a3      	ldr	r3, [r4, #8]
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	1b9b      	subs	r3, r3, r6
 8003a96:	4432      	add	r2, r6
 8003a98:	60a3      	str	r3, [r4, #8]
 8003a9a:	6022      	str	r2, [r4, #0]
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	e7db      	b.n	8003a58 <__ssputs_r+0x58>
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	f000 ff21 	bl	80048e8 <_realloc_r>
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d1e1      	bne.n	8003a70 <__ssputs_r+0x70>
 8003aac:	6921      	ldr	r1, [r4, #16]
 8003aae:	4650      	mov	r0, sl
 8003ab0:	f7ff fefc 	bl	80038ac <_free_r>
 8003ab4:	e7c7      	b.n	8003a46 <__ssputs_r+0x46>
	...

08003ab8 <_svfiprintf_r>:
 8003ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003abc:	4698      	mov	r8, r3
 8003abe:	898b      	ldrh	r3, [r1, #12]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	b09d      	sub	sp, #116	; 0x74
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	460d      	mov	r5, r1
 8003ac8:	4614      	mov	r4, r2
 8003aca:	d50e      	bpl.n	8003aea <_svfiprintf_r+0x32>
 8003acc:	690b      	ldr	r3, [r1, #16]
 8003ace:	b963      	cbnz	r3, 8003aea <_svfiprintf_r+0x32>
 8003ad0:	2140      	movs	r1, #64	; 0x40
 8003ad2:	f7ff ff3b 	bl	800394c <_malloc_r>
 8003ad6:	6028      	str	r0, [r5, #0]
 8003ad8:	6128      	str	r0, [r5, #16]
 8003ada:	b920      	cbnz	r0, 8003ae6 <_svfiprintf_r+0x2e>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	e0d1      	b.n	8003c8a <_svfiprintf_r+0x1d2>
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	616b      	str	r3, [r5, #20]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9309      	str	r3, [sp, #36]	; 0x24
 8003aee:	2320      	movs	r3, #32
 8003af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af8:	2330      	movs	r3, #48	; 0x30
 8003afa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ca4 <_svfiprintf_r+0x1ec>
 8003afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b02:	f04f 0901 	mov.w	r9, #1
 8003b06:	4623      	mov	r3, r4
 8003b08:	469a      	mov	sl, r3
 8003b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b0e:	b10a      	cbz	r2, 8003b14 <_svfiprintf_r+0x5c>
 8003b10:	2a25      	cmp	r2, #37	; 0x25
 8003b12:	d1f9      	bne.n	8003b08 <_svfiprintf_r+0x50>
 8003b14:	ebba 0b04 	subs.w	fp, sl, r4
 8003b18:	d00b      	beq.n	8003b32 <_svfiprintf_r+0x7a>
 8003b1a:	465b      	mov	r3, fp
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4638      	mov	r0, r7
 8003b22:	f7ff ff6d 	bl	8003a00 <__ssputs_r>
 8003b26:	3001      	adds	r0, #1
 8003b28:	f000 80aa 	beq.w	8003c80 <_svfiprintf_r+0x1c8>
 8003b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b2e:	445a      	add	r2, fp
 8003b30:	9209      	str	r2, [sp, #36]	; 0x24
 8003b32:	f89a 3000 	ldrb.w	r3, [sl]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a2 	beq.w	8003c80 <_svfiprintf_r+0x1c8>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b46:	f10a 0a01 	add.w	sl, sl, #1
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	9307      	str	r3, [sp, #28]
 8003b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b52:	931a      	str	r3, [sp, #104]	; 0x68
 8003b54:	4654      	mov	r4, sl
 8003b56:	2205      	movs	r2, #5
 8003b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5c:	4851      	ldr	r0, [pc, #324]	; (8003ca4 <_svfiprintf_r+0x1ec>)
 8003b5e:	f7fc fb67 	bl	8000230 <memchr>
 8003b62:	9a04      	ldr	r2, [sp, #16]
 8003b64:	b9d8      	cbnz	r0, 8003b9e <_svfiprintf_r+0xe6>
 8003b66:	06d0      	lsls	r0, r2, #27
 8003b68:	bf44      	itt	mi
 8003b6a:	2320      	movmi	r3, #32
 8003b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b70:	0711      	lsls	r1, r2, #28
 8003b72:	bf44      	itt	mi
 8003b74:	232b      	movmi	r3, #43	; 0x2b
 8003b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b80:	d015      	beq.n	8003bae <_svfiprintf_r+0xf6>
 8003b82:	9a07      	ldr	r2, [sp, #28]
 8003b84:	4654      	mov	r4, sl
 8003b86:	2000      	movs	r0, #0
 8003b88:	f04f 0c0a 	mov.w	ip, #10
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b92:	3b30      	subs	r3, #48	; 0x30
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d94e      	bls.n	8003c36 <_svfiprintf_r+0x17e>
 8003b98:	b1b0      	cbz	r0, 8003bc8 <_svfiprintf_r+0x110>
 8003b9a:	9207      	str	r2, [sp, #28]
 8003b9c:	e014      	b.n	8003bc8 <_svfiprintf_r+0x110>
 8003b9e:	eba0 0308 	sub.w	r3, r0, r8
 8003ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	46a2      	mov	sl, r4
 8003bac:	e7d2      	b.n	8003b54 <_svfiprintf_r+0x9c>
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	1d19      	adds	r1, r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	9103      	str	r1, [sp, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfbb      	ittet	lt
 8003bba:	425b      	neglt	r3, r3
 8003bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8003bc0:	9307      	strge	r3, [sp, #28]
 8003bc2:	9307      	strlt	r3, [sp, #28]
 8003bc4:	bfb8      	it	lt
 8003bc6:	9204      	strlt	r2, [sp, #16]
 8003bc8:	7823      	ldrb	r3, [r4, #0]
 8003bca:	2b2e      	cmp	r3, #46	; 0x2e
 8003bcc:	d10c      	bne.n	8003be8 <_svfiprintf_r+0x130>
 8003bce:	7863      	ldrb	r3, [r4, #1]
 8003bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd2:	d135      	bne.n	8003c40 <_svfiprintf_r+0x188>
 8003bd4:	9b03      	ldr	r3, [sp, #12]
 8003bd6:	1d1a      	adds	r2, r3, #4
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	9203      	str	r2, [sp, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bfb8      	it	lt
 8003be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003be4:	3402      	adds	r4, #2
 8003be6:	9305      	str	r3, [sp, #20]
 8003be8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cb4 <_svfiprintf_r+0x1fc>
 8003bec:	7821      	ldrb	r1, [r4, #0]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	4650      	mov	r0, sl
 8003bf2:	f7fc fb1d 	bl	8000230 <memchr>
 8003bf6:	b140      	cbz	r0, 8003c0a <_svfiprintf_r+0x152>
 8003bf8:	2340      	movs	r3, #64	; 0x40
 8003bfa:	eba0 000a 	sub.w	r0, r0, sl
 8003bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8003c02:	9b04      	ldr	r3, [sp, #16]
 8003c04:	4303      	orrs	r3, r0
 8003c06:	3401      	adds	r4, #1
 8003c08:	9304      	str	r3, [sp, #16]
 8003c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c0e:	4826      	ldr	r0, [pc, #152]	; (8003ca8 <_svfiprintf_r+0x1f0>)
 8003c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c14:	2206      	movs	r2, #6
 8003c16:	f7fc fb0b 	bl	8000230 <memchr>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d038      	beq.n	8003c90 <_svfiprintf_r+0x1d8>
 8003c1e:	4b23      	ldr	r3, [pc, #140]	; (8003cac <_svfiprintf_r+0x1f4>)
 8003c20:	bb1b      	cbnz	r3, 8003c6a <_svfiprintf_r+0x1b2>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	3307      	adds	r3, #7
 8003c26:	f023 0307 	bic.w	r3, r3, #7
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	9303      	str	r3, [sp, #12]
 8003c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c30:	4433      	add	r3, r6
 8003c32:	9309      	str	r3, [sp, #36]	; 0x24
 8003c34:	e767      	b.n	8003b06 <_svfiprintf_r+0x4e>
 8003c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	e7a5      	b.n	8003b8c <_svfiprintf_r+0xd4>
 8003c40:	2300      	movs	r3, #0
 8003c42:	3401      	adds	r4, #1
 8003c44:	9305      	str	r3, [sp, #20]
 8003c46:	4619      	mov	r1, r3
 8003c48:	f04f 0c0a 	mov.w	ip, #10
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c52:	3a30      	subs	r2, #48	; 0x30
 8003c54:	2a09      	cmp	r2, #9
 8003c56:	d903      	bls.n	8003c60 <_svfiprintf_r+0x1a8>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0c5      	beq.n	8003be8 <_svfiprintf_r+0x130>
 8003c5c:	9105      	str	r1, [sp, #20]
 8003c5e:	e7c3      	b.n	8003be8 <_svfiprintf_r+0x130>
 8003c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c64:	4604      	mov	r4, r0
 8003c66:	2301      	movs	r3, #1
 8003c68:	e7f0      	b.n	8003c4c <_svfiprintf_r+0x194>
 8003c6a:	ab03      	add	r3, sp, #12
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	462a      	mov	r2, r5
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <_svfiprintf_r+0x1f8>)
 8003c72:	a904      	add	r1, sp, #16
 8003c74:	4638      	mov	r0, r7
 8003c76:	f3af 8000 	nop.w
 8003c7a:	1c42      	adds	r2, r0, #1
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	d1d6      	bne.n	8003c2e <_svfiprintf_r+0x176>
 8003c80:	89ab      	ldrh	r3, [r5, #12]
 8003c82:	065b      	lsls	r3, r3, #25
 8003c84:	f53f af2c 	bmi.w	8003ae0 <_svfiprintf_r+0x28>
 8003c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c8a:	b01d      	add	sp, #116	; 0x74
 8003c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	462a      	mov	r2, r5
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <_svfiprintf_r+0x1f8>)
 8003c98:	a904      	add	r1, sp, #16
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	f000 f9d4 	bl	8004048 <_printf_i>
 8003ca0:	e7eb      	b.n	8003c7a <_svfiprintf_r+0x1c2>
 8003ca2:	bf00      	nop
 8003ca4:	08008ef4 	.word	0x08008ef4
 8003ca8:	08008efe 	.word	0x08008efe
 8003cac:	00000000 	.word	0x00000000
 8003cb0:	08003a01 	.word	0x08003a01
 8003cb4:	08008efa 	.word	0x08008efa

08003cb8 <__sfputc_r>:
 8003cb8:	6893      	ldr	r3, [r2, #8]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	b410      	push	{r4}
 8003cc0:	6093      	str	r3, [r2, #8]
 8003cc2:	da08      	bge.n	8003cd6 <__sfputc_r+0x1e>
 8003cc4:	6994      	ldr	r4, [r2, #24]
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	db01      	blt.n	8003cce <__sfputc_r+0x16>
 8003cca:	290a      	cmp	r1, #10
 8003ccc:	d103      	bne.n	8003cd6 <__sfputc_r+0x1e>
 8003cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cd2:	f000 baef 	b.w	80042b4 <__swbuf_r>
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	1c58      	adds	r0, r3, #1
 8003cda:	6010      	str	r0, [r2, #0]
 8003cdc:	7019      	strb	r1, [r3, #0]
 8003cde:	4608      	mov	r0, r1
 8003ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <__sfputs_r>:
 8003ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce8:	4606      	mov	r6, r0
 8003cea:	460f      	mov	r7, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	18d5      	adds	r5, r2, r3
 8003cf0:	42ac      	cmp	r4, r5
 8003cf2:	d101      	bne.n	8003cf8 <__sfputs_r+0x12>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e007      	b.n	8003d08 <__sfputs_r+0x22>
 8003cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cfc:	463a      	mov	r2, r7
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f7ff ffda 	bl	8003cb8 <__sfputc_r>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d1f3      	bne.n	8003cf0 <__sfputs_r+0xa>
 8003d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d0c <_vfiprintf_r>:
 8003d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d10:	460d      	mov	r5, r1
 8003d12:	b09d      	sub	sp, #116	; 0x74
 8003d14:	4614      	mov	r4, r2
 8003d16:	4698      	mov	r8, r3
 8003d18:	4606      	mov	r6, r0
 8003d1a:	b118      	cbz	r0, 8003d24 <_vfiprintf_r+0x18>
 8003d1c:	6983      	ldr	r3, [r0, #24]
 8003d1e:	b90b      	cbnz	r3, 8003d24 <_vfiprintf_r+0x18>
 8003d20:	f000 fcaa 	bl	8004678 <__sinit>
 8003d24:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <_vfiprintf_r+0x240>)
 8003d26:	429d      	cmp	r5, r3
 8003d28:	d11b      	bne.n	8003d62 <_vfiprintf_r+0x56>
 8003d2a:	6875      	ldr	r5, [r6, #4]
 8003d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d2e:	07d9      	lsls	r1, r3, #31
 8003d30:	d405      	bmi.n	8003d3e <_vfiprintf_r+0x32>
 8003d32:	89ab      	ldrh	r3, [r5, #12]
 8003d34:	059a      	lsls	r2, r3, #22
 8003d36:	d402      	bmi.n	8003d3e <_vfiprintf_r+0x32>
 8003d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d3a:	f000 fd3b 	bl	80047b4 <__retarget_lock_acquire_recursive>
 8003d3e:	89ab      	ldrh	r3, [r5, #12]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	d501      	bpl.n	8003d48 <_vfiprintf_r+0x3c>
 8003d44:	692b      	ldr	r3, [r5, #16]
 8003d46:	b9eb      	cbnz	r3, 8003d84 <_vfiprintf_r+0x78>
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f000 fb04 	bl	8004358 <__swsetup_r>
 8003d50:	b1c0      	cbz	r0, 8003d84 <_vfiprintf_r+0x78>
 8003d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d54:	07dc      	lsls	r4, r3, #31
 8003d56:	d50e      	bpl.n	8003d76 <_vfiprintf_r+0x6a>
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	b01d      	add	sp, #116	; 0x74
 8003d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d62:	4b7b      	ldr	r3, [pc, #492]	; (8003f50 <_vfiprintf_r+0x244>)
 8003d64:	429d      	cmp	r5, r3
 8003d66:	d101      	bne.n	8003d6c <_vfiprintf_r+0x60>
 8003d68:	68b5      	ldr	r5, [r6, #8]
 8003d6a:	e7df      	b.n	8003d2c <_vfiprintf_r+0x20>
 8003d6c:	4b79      	ldr	r3, [pc, #484]	; (8003f54 <_vfiprintf_r+0x248>)
 8003d6e:	429d      	cmp	r5, r3
 8003d70:	bf08      	it	eq
 8003d72:	68f5      	ldreq	r5, [r6, #12]
 8003d74:	e7da      	b.n	8003d2c <_vfiprintf_r+0x20>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	0598      	lsls	r0, r3, #22
 8003d7a:	d4ed      	bmi.n	8003d58 <_vfiprintf_r+0x4c>
 8003d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d7e:	f000 fd1a 	bl	80047b6 <__retarget_lock_release_recursive>
 8003d82:	e7e9      	b.n	8003d58 <_vfiprintf_r+0x4c>
 8003d84:	2300      	movs	r3, #0
 8003d86:	9309      	str	r3, [sp, #36]	; 0x24
 8003d88:	2320      	movs	r3, #32
 8003d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d92:	2330      	movs	r3, #48	; 0x30
 8003d94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f58 <_vfiprintf_r+0x24c>
 8003d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d9c:	f04f 0901 	mov.w	r9, #1
 8003da0:	4623      	mov	r3, r4
 8003da2:	469a      	mov	sl, r3
 8003da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da8:	b10a      	cbz	r2, 8003dae <_vfiprintf_r+0xa2>
 8003daa:	2a25      	cmp	r2, #37	; 0x25
 8003dac:	d1f9      	bne.n	8003da2 <_vfiprintf_r+0x96>
 8003dae:	ebba 0b04 	subs.w	fp, sl, r4
 8003db2:	d00b      	beq.n	8003dcc <_vfiprintf_r+0xc0>
 8003db4:	465b      	mov	r3, fp
 8003db6:	4622      	mov	r2, r4
 8003db8:	4629      	mov	r1, r5
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f7ff ff93 	bl	8003ce6 <__sfputs_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	f000 80aa 	beq.w	8003f1a <_vfiprintf_r+0x20e>
 8003dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc8:	445a      	add	r2, fp
 8003dca:	9209      	str	r2, [sp, #36]	; 0x24
 8003dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80a2 	beq.w	8003f1a <_vfiprintf_r+0x20e>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de0:	f10a 0a01 	add.w	sl, sl, #1
 8003de4:	9304      	str	r3, [sp, #16]
 8003de6:	9307      	str	r3, [sp, #28]
 8003de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dec:	931a      	str	r3, [sp, #104]	; 0x68
 8003dee:	4654      	mov	r4, sl
 8003df0:	2205      	movs	r2, #5
 8003df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df6:	4858      	ldr	r0, [pc, #352]	; (8003f58 <_vfiprintf_r+0x24c>)
 8003df8:	f7fc fa1a 	bl	8000230 <memchr>
 8003dfc:	9a04      	ldr	r2, [sp, #16]
 8003dfe:	b9d8      	cbnz	r0, 8003e38 <_vfiprintf_r+0x12c>
 8003e00:	06d1      	lsls	r1, r2, #27
 8003e02:	bf44      	itt	mi
 8003e04:	2320      	movmi	r3, #32
 8003e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e0a:	0713      	lsls	r3, r2, #28
 8003e0c:	bf44      	itt	mi
 8003e0e:	232b      	movmi	r3, #43	; 0x2b
 8003e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e14:	f89a 3000 	ldrb.w	r3, [sl]
 8003e18:	2b2a      	cmp	r3, #42	; 0x2a
 8003e1a:	d015      	beq.n	8003e48 <_vfiprintf_r+0x13c>
 8003e1c:	9a07      	ldr	r2, [sp, #28]
 8003e1e:	4654      	mov	r4, sl
 8003e20:	2000      	movs	r0, #0
 8003e22:	f04f 0c0a 	mov.w	ip, #10
 8003e26:	4621      	mov	r1, r4
 8003e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e2c:	3b30      	subs	r3, #48	; 0x30
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	d94e      	bls.n	8003ed0 <_vfiprintf_r+0x1c4>
 8003e32:	b1b0      	cbz	r0, 8003e62 <_vfiprintf_r+0x156>
 8003e34:	9207      	str	r2, [sp, #28]
 8003e36:	e014      	b.n	8003e62 <_vfiprintf_r+0x156>
 8003e38:	eba0 0308 	sub.w	r3, r0, r8
 8003e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	46a2      	mov	sl, r4
 8003e46:	e7d2      	b.n	8003dee <_vfiprintf_r+0xe2>
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	1d19      	adds	r1, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	9103      	str	r1, [sp, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bfbb      	ittet	lt
 8003e54:	425b      	neglt	r3, r3
 8003e56:	f042 0202 	orrlt.w	r2, r2, #2
 8003e5a:	9307      	strge	r3, [sp, #28]
 8003e5c:	9307      	strlt	r3, [sp, #28]
 8003e5e:	bfb8      	it	lt
 8003e60:	9204      	strlt	r2, [sp, #16]
 8003e62:	7823      	ldrb	r3, [r4, #0]
 8003e64:	2b2e      	cmp	r3, #46	; 0x2e
 8003e66:	d10c      	bne.n	8003e82 <_vfiprintf_r+0x176>
 8003e68:	7863      	ldrb	r3, [r4, #1]
 8003e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6c:	d135      	bne.n	8003eda <_vfiprintf_r+0x1ce>
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	9203      	str	r2, [sp, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bfb8      	it	lt
 8003e7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e7e:	3402      	adds	r4, #2
 8003e80:	9305      	str	r3, [sp, #20]
 8003e82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f68 <_vfiprintf_r+0x25c>
 8003e86:	7821      	ldrb	r1, [r4, #0]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	4650      	mov	r0, sl
 8003e8c:	f7fc f9d0 	bl	8000230 <memchr>
 8003e90:	b140      	cbz	r0, 8003ea4 <_vfiprintf_r+0x198>
 8003e92:	2340      	movs	r3, #64	; 0x40
 8003e94:	eba0 000a 	sub.w	r0, r0, sl
 8003e98:	fa03 f000 	lsl.w	r0, r3, r0
 8003e9c:	9b04      	ldr	r3, [sp, #16]
 8003e9e:	4303      	orrs	r3, r0
 8003ea0:	3401      	adds	r4, #1
 8003ea2:	9304      	str	r3, [sp, #16]
 8003ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea8:	482c      	ldr	r0, [pc, #176]	; (8003f5c <_vfiprintf_r+0x250>)
 8003eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eae:	2206      	movs	r2, #6
 8003eb0:	f7fc f9be 	bl	8000230 <memchr>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d03f      	beq.n	8003f38 <_vfiprintf_r+0x22c>
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <_vfiprintf_r+0x254>)
 8003eba:	bb1b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x1f8>
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	3307      	adds	r3, #7
 8003ec0:	f023 0307 	bic.w	r3, r3, #7
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	9303      	str	r3, [sp, #12]
 8003ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eca:	443b      	add	r3, r7
 8003ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ece:	e767      	b.n	8003da0 <_vfiprintf_r+0x94>
 8003ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	e7a5      	b.n	8003e26 <_vfiprintf_r+0x11a>
 8003eda:	2300      	movs	r3, #0
 8003edc:	3401      	adds	r4, #1
 8003ede:	9305      	str	r3, [sp, #20]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 0c0a 	mov.w	ip, #10
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eec:	3a30      	subs	r2, #48	; 0x30
 8003eee:	2a09      	cmp	r2, #9
 8003ef0:	d903      	bls.n	8003efa <_vfiprintf_r+0x1ee>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0c5      	beq.n	8003e82 <_vfiprintf_r+0x176>
 8003ef6:	9105      	str	r1, [sp, #20]
 8003ef8:	e7c3      	b.n	8003e82 <_vfiprintf_r+0x176>
 8003efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003efe:	4604      	mov	r4, r0
 8003f00:	2301      	movs	r3, #1
 8003f02:	e7f0      	b.n	8003ee6 <_vfiprintf_r+0x1da>
 8003f04:	ab03      	add	r3, sp, #12
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	462a      	mov	r2, r5
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <_vfiprintf_r+0x258>)
 8003f0c:	a904      	add	r1, sp, #16
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f3af 8000 	nop.w
 8003f14:	4607      	mov	r7, r0
 8003f16:	1c78      	adds	r0, r7, #1
 8003f18:	d1d6      	bne.n	8003ec8 <_vfiprintf_r+0x1bc>
 8003f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f1c:	07d9      	lsls	r1, r3, #31
 8003f1e:	d405      	bmi.n	8003f2c <_vfiprintf_r+0x220>
 8003f20:	89ab      	ldrh	r3, [r5, #12]
 8003f22:	059a      	lsls	r2, r3, #22
 8003f24:	d402      	bmi.n	8003f2c <_vfiprintf_r+0x220>
 8003f26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f28:	f000 fc45 	bl	80047b6 <__retarget_lock_release_recursive>
 8003f2c:	89ab      	ldrh	r3, [r5, #12]
 8003f2e:	065b      	lsls	r3, r3, #25
 8003f30:	f53f af12 	bmi.w	8003d58 <_vfiprintf_r+0x4c>
 8003f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f36:	e711      	b.n	8003d5c <_vfiprintf_r+0x50>
 8003f38:	ab03      	add	r3, sp, #12
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <_vfiprintf_r+0x258>)
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	4630      	mov	r0, r6
 8003f44:	f000 f880 	bl	8004048 <_printf_i>
 8003f48:	e7e4      	b.n	8003f14 <_vfiprintf_r+0x208>
 8003f4a:	bf00      	nop
 8003f4c:	08008f48 	.word	0x08008f48
 8003f50:	08008f68 	.word	0x08008f68
 8003f54:	08008f28 	.word	0x08008f28
 8003f58:	08008ef4 	.word	0x08008ef4
 8003f5c:	08008efe 	.word	0x08008efe
 8003f60:	00000000 	.word	0x00000000
 8003f64:	08003ce7 	.word	0x08003ce7
 8003f68:	08008efa 	.word	0x08008efa

08003f6c <_printf_common>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	4616      	mov	r6, r2
 8003f72:	4699      	mov	r9, r3
 8003f74:	688a      	ldr	r2, [r1, #8]
 8003f76:	690b      	ldr	r3, [r1, #16]
 8003f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfb8      	it	lt
 8003f80:	4613      	movlt	r3, r2
 8003f82:	6033      	str	r3, [r6, #0]
 8003f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f88:	4607      	mov	r7, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b10a      	cbz	r2, 8003f92 <_printf_common+0x26>
 8003f8e:	3301      	adds	r3, #1
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	0699      	lsls	r1, r3, #26
 8003f96:	bf42      	ittt	mi
 8003f98:	6833      	ldrmi	r3, [r6, #0]
 8003f9a:	3302      	addmi	r3, #2
 8003f9c:	6033      	strmi	r3, [r6, #0]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	f015 0506 	ands.w	r5, r5, #6
 8003fa4:	d106      	bne.n	8003fb4 <_printf_common+0x48>
 8003fa6:	f104 0a19 	add.w	sl, r4, #25
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	6832      	ldr	r2, [r6, #0]
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dc26      	bgt.n	8004002 <_printf_common+0x96>
 8003fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb8:	1e13      	subs	r3, r2, #0
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	bf18      	it	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	0692      	lsls	r2, r2, #26
 8003fc2:	d42b      	bmi.n	800401c <_printf_common+0xb0>
 8003fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc8:	4649      	mov	r1, r9
 8003fca:	4638      	mov	r0, r7
 8003fcc:	47c0      	blx	r8
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d01e      	beq.n	8004010 <_printf_common+0xa4>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	68e5      	ldr	r5, [r4, #12]
 8003fd6:	6832      	ldr	r2, [r6, #0]
 8003fd8:	f003 0306 	and.w	r3, r3, #6
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	bf08      	it	eq
 8003fe0:	1aad      	subeq	r5, r5, r2
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	bf0c      	ite	eq
 8003fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fec:	2500      	movne	r5, #0
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bfc4      	itt	gt
 8003ff2:	1a9b      	subgt	r3, r3, r2
 8003ff4:	18ed      	addgt	r5, r5, r3
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	341a      	adds	r4, #26
 8003ffa:	42b5      	cmp	r5, r6
 8003ffc:	d11a      	bne.n	8004034 <_printf_common+0xc8>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e008      	b.n	8004014 <_printf_common+0xa8>
 8004002:	2301      	movs	r3, #1
 8004004:	4652      	mov	r2, sl
 8004006:	4649      	mov	r1, r9
 8004008:	4638      	mov	r0, r7
 800400a:	47c0      	blx	r8
 800400c:	3001      	adds	r0, #1
 800400e:	d103      	bne.n	8004018 <_printf_common+0xac>
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004018:	3501      	adds	r5, #1
 800401a:	e7c6      	b.n	8003faa <_printf_common+0x3e>
 800401c:	18e1      	adds	r1, r4, r3
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	2030      	movs	r0, #48	; 0x30
 8004022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004026:	4422      	add	r2, r4
 8004028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800402c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004030:	3302      	adds	r3, #2
 8004032:	e7c7      	b.n	8003fc4 <_printf_common+0x58>
 8004034:	2301      	movs	r3, #1
 8004036:	4622      	mov	r2, r4
 8004038:	4649      	mov	r1, r9
 800403a:	4638      	mov	r0, r7
 800403c:	47c0      	blx	r8
 800403e:	3001      	adds	r0, #1
 8004040:	d0e6      	beq.n	8004010 <_printf_common+0xa4>
 8004042:	3601      	adds	r6, #1
 8004044:	e7d9      	b.n	8003ffa <_printf_common+0x8e>
	...

08004048 <_printf_i>:
 8004048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	460c      	mov	r4, r1
 800404e:	4691      	mov	r9, r2
 8004050:	7e27      	ldrb	r7, [r4, #24]
 8004052:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004054:	2f78      	cmp	r7, #120	; 0x78
 8004056:	4680      	mov	r8, r0
 8004058:	469a      	mov	sl, r3
 800405a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800405e:	d807      	bhi.n	8004070 <_printf_i+0x28>
 8004060:	2f62      	cmp	r7, #98	; 0x62
 8004062:	d80a      	bhi.n	800407a <_printf_i+0x32>
 8004064:	2f00      	cmp	r7, #0
 8004066:	f000 80d8 	beq.w	800421a <_printf_i+0x1d2>
 800406a:	2f58      	cmp	r7, #88	; 0x58
 800406c:	f000 80a3 	beq.w	80041b6 <_printf_i+0x16e>
 8004070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004078:	e03a      	b.n	80040f0 <_printf_i+0xa8>
 800407a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800407e:	2b15      	cmp	r3, #21
 8004080:	d8f6      	bhi.n	8004070 <_printf_i+0x28>
 8004082:	a001      	add	r0, pc, #4	; (adr r0, 8004088 <_printf_i+0x40>)
 8004084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004088:	080040e1 	.word	0x080040e1
 800408c:	080040f5 	.word	0x080040f5
 8004090:	08004071 	.word	0x08004071
 8004094:	08004071 	.word	0x08004071
 8004098:	08004071 	.word	0x08004071
 800409c:	08004071 	.word	0x08004071
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004071 	.word	0x08004071
 80040a8:	08004071 	.word	0x08004071
 80040ac:	08004071 	.word	0x08004071
 80040b0:	08004071 	.word	0x08004071
 80040b4:	08004201 	.word	0x08004201
 80040b8:	08004125 	.word	0x08004125
 80040bc:	080041e3 	.word	0x080041e3
 80040c0:	08004071 	.word	0x08004071
 80040c4:	08004071 	.word	0x08004071
 80040c8:	08004223 	.word	0x08004223
 80040cc:	08004071 	.word	0x08004071
 80040d0:	08004125 	.word	0x08004125
 80040d4:	08004071 	.word	0x08004071
 80040d8:	08004071 	.word	0x08004071
 80040dc:	080041eb 	.word	0x080041eb
 80040e0:	680b      	ldr	r3, [r1, #0]
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	600a      	str	r2, [r1, #0]
 80040e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0a3      	b.n	800423c <_printf_i+0x1f4>
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	6808      	ldr	r0, [r1, #0]
 80040f8:	062e      	lsls	r6, r5, #24
 80040fa:	f100 0304 	add.w	r3, r0, #4
 80040fe:	d50a      	bpl.n	8004116 <_printf_i+0xce>
 8004100:	6805      	ldr	r5, [r0, #0]
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	2d00      	cmp	r5, #0
 8004106:	da03      	bge.n	8004110 <_printf_i+0xc8>
 8004108:	232d      	movs	r3, #45	; 0x2d
 800410a:	426d      	negs	r5, r5
 800410c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004110:	485e      	ldr	r0, [pc, #376]	; (800428c <_printf_i+0x244>)
 8004112:	230a      	movs	r3, #10
 8004114:	e019      	b.n	800414a <_printf_i+0x102>
 8004116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800411a:	6805      	ldr	r5, [r0, #0]
 800411c:	600b      	str	r3, [r1, #0]
 800411e:	bf18      	it	ne
 8004120:	b22d      	sxthne	r5, r5
 8004122:	e7ef      	b.n	8004104 <_printf_i+0xbc>
 8004124:	680b      	ldr	r3, [r1, #0]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	1d18      	adds	r0, r3, #4
 800412a:	6008      	str	r0, [r1, #0]
 800412c:	0628      	lsls	r0, r5, #24
 800412e:	d501      	bpl.n	8004134 <_printf_i+0xec>
 8004130:	681d      	ldr	r5, [r3, #0]
 8004132:	e002      	b.n	800413a <_printf_i+0xf2>
 8004134:	0669      	lsls	r1, r5, #25
 8004136:	d5fb      	bpl.n	8004130 <_printf_i+0xe8>
 8004138:	881d      	ldrh	r5, [r3, #0]
 800413a:	4854      	ldr	r0, [pc, #336]	; (800428c <_printf_i+0x244>)
 800413c:	2f6f      	cmp	r7, #111	; 0x6f
 800413e:	bf0c      	ite	eq
 8004140:	2308      	moveq	r3, #8
 8004142:	230a      	movne	r3, #10
 8004144:	2100      	movs	r1, #0
 8004146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800414a:	6866      	ldr	r6, [r4, #4]
 800414c:	60a6      	str	r6, [r4, #8]
 800414e:	2e00      	cmp	r6, #0
 8004150:	bfa2      	ittt	ge
 8004152:	6821      	ldrge	r1, [r4, #0]
 8004154:	f021 0104 	bicge.w	r1, r1, #4
 8004158:	6021      	strge	r1, [r4, #0]
 800415a:	b90d      	cbnz	r5, 8004160 <_printf_i+0x118>
 800415c:	2e00      	cmp	r6, #0
 800415e:	d04d      	beq.n	80041fc <_printf_i+0x1b4>
 8004160:	4616      	mov	r6, r2
 8004162:	fbb5 f1f3 	udiv	r1, r5, r3
 8004166:	fb03 5711 	mls	r7, r3, r1, r5
 800416a:	5dc7      	ldrb	r7, [r0, r7]
 800416c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004170:	462f      	mov	r7, r5
 8004172:	42bb      	cmp	r3, r7
 8004174:	460d      	mov	r5, r1
 8004176:	d9f4      	bls.n	8004162 <_printf_i+0x11a>
 8004178:	2b08      	cmp	r3, #8
 800417a:	d10b      	bne.n	8004194 <_printf_i+0x14c>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	07df      	lsls	r7, r3, #31
 8004180:	d508      	bpl.n	8004194 <_printf_i+0x14c>
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	6861      	ldr	r1, [r4, #4]
 8004186:	4299      	cmp	r1, r3
 8004188:	bfde      	ittt	le
 800418a:	2330      	movle	r3, #48	; 0x30
 800418c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004194:	1b92      	subs	r2, r2, r6
 8004196:	6122      	str	r2, [r4, #16]
 8004198:	f8cd a000 	str.w	sl, [sp]
 800419c:	464b      	mov	r3, r9
 800419e:	aa03      	add	r2, sp, #12
 80041a0:	4621      	mov	r1, r4
 80041a2:	4640      	mov	r0, r8
 80041a4:	f7ff fee2 	bl	8003f6c <_printf_common>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d14c      	bne.n	8004246 <_printf_i+0x1fe>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	b004      	add	sp, #16
 80041b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b6:	4835      	ldr	r0, [pc, #212]	; (800428c <_printf_i+0x244>)
 80041b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	680e      	ldr	r6, [r1, #0]
 80041c0:	061f      	lsls	r7, r3, #24
 80041c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80041c6:	600e      	str	r6, [r1, #0]
 80041c8:	d514      	bpl.n	80041f4 <_printf_i+0x1ac>
 80041ca:	07d9      	lsls	r1, r3, #31
 80041cc:	bf44      	itt	mi
 80041ce:	f043 0320 	orrmi.w	r3, r3, #32
 80041d2:	6023      	strmi	r3, [r4, #0]
 80041d4:	b91d      	cbnz	r5, 80041de <_printf_i+0x196>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	f023 0320 	bic.w	r3, r3, #32
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	2310      	movs	r3, #16
 80041e0:	e7b0      	b.n	8004144 <_printf_i+0xfc>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	f043 0320 	orr.w	r3, r3, #32
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	2378      	movs	r3, #120	; 0x78
 80041ec:	4828      	ldr	r0, [pc, #160]	; (8004290 <_printf_i+0x248>)
 80041ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041f2:	e7e3      	b.n	80041bc <_printf_i+0x174>
 80041f4:	065e      	lsls	r6, r3, #25
 80041f6:	bf48      	it	mi
 80041f8:	b2ad      	uxthmi	r5, r5
 80041fa:	e7e6      	b.n	80041ca <_printf_i+0x182>
 80041fc:	4616      	mov	r6, r2
 80041fe:	e7bb      	b.n	8004178 <_printf_i+0x130>
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	6826      	ldr	r6, [r4, #0]
 8004204:	6960      	ldr	r0, [r4, #20]
 8004206:	1d1d      	adds	r5, r3, #4
 8004208:	600d      	str	r5, [r1, #0]
 800420a:	0635      	lsls	r5, r6, #24
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	d501      	bpl.n	8004214 <_printf_i+0x1cc>
 8004210:	6018      	str	r0, [r3, #0]
 8004212:	e002      	b.n	800421a <_printf_i+0x1d2>
 8004214:	0671      	lsls	r1, r6, #25
 8004216:	d5fb      	bpl.n	8004210 <_printf_i+0x1c8>
 8004218:	8018      	strh	r0, [r3, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	6123      	str	r3, [r4, #16]
 800421e:	4616      	mov	r6, r2
 8004220:	e7ba      	b.n	8004198 <_printf_i+0x150>
 8004222:	680b      	ldr	r3, [r1, #0]
 8004224:	1d1a      	adds	r2, r3, #4
 8004226:	600a      	str	r2, [r1, #0]
 8004228:	681e      	ldr	r6, [r3, #0]
 800422a:	6862      	ldr	r2, [r4, #4]
 800422c:	2100      	movs	r1, #0
 800422e:	4630      	mov	r0, r6
 8004230:	f7fb fffe 	bl	8000230 <memchr>
 8004234:	b108      	cbz	r0, 800423a <_printf_i+0x1f2>
 8004236:	1b80      	subs	r0, r0, r6
 8004238:	6060      	str	r0, [r4, #4]
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	2300      	movs	r3, #0
 8004240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004244:	e7a8      	b.n	8004198 <_printf_i+0x150>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	4632      	mov	r2, r6
 800424a:	4649      	mov	r1, r9
 800424c:	4640      	mov	r0, r8
 800424e:	47d0      	blx	sl
 8004250:	3001      	adds	r0, #1
 8004252:	d0ab      	beq.n	80041ac <_printf_i+0x164>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	079b      	lsls	r3, r3, #30
 8004258:	d413      	bmi.n	8004282 <_printf_i+0x23a>
 800425a:	68e0      	ldr	r0, [r4, #12]
 800425c:	9b03      	ldr	r3, [sp, #12]
 800425e:	4298      	cmp	r0, r3
 8004260:	bfb8      	it	lt
 8004262:	4618      	movlt	r0, r3
 8004264:	e7a4      	b.n	80041b0 <_printf_i+0x168>
 8004266:	2301      	movs	r3, #1
 8004268:	4632      	mov	r2, r6
 800426a:	4649      	mov	r1, r9
 800426c:	4640      	mov	r0, r8
 800426e:	47d0      	blx	sl
 8004270:	3001      	adds	r0, #1
 8004272:	d09b      	beq.n	80041ac <_printf_i+0x164>
 8004274:	3501      	adds	r5, #1
 8004276:	68e3      	ldr	r3, [r4, #12]
 8004278:	9903      	ldr	r1, [sp, #12]
 800427a:	1a5b      	subs	r3, r3, r1
 800427c:	42ab      	cmp	r3, r5
 800427e:	dcf2      	bgt.n	8004266 <_printf_i+0x21e>
 8004280:	e7eb      	b.n	800425a <_printf_i+0x212>
 8004282:	2500      	movs	r5, #0
 8004284:	f104 0619 	add.w	r6, r4, #25
 8004288:	e7f5      	b.n	8004276 <_printf_i+0x22e>
 800428a:	bf00      	nop
 800428c:	08008f05 	.word	0x08008f05
 8004290:	08008f16 	.word	0x08008f16

08004294 <_sbrk_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d06      	ldr	r5, [pc, #24]	; (80042b0 <_sbrk_r+0x1c>)
 8004298:	2300      	movs	r3, #0
 800429a:	4604      	mov	r4, r0
 800429c:	4608      	mov	r0, r1
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	f000 fc78 	bl	8004b94 <_sbrk>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d102      	bne.n	80042ae <_sbrk_r+0x1a>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	b103      	cbz	r3, 80042ae <_sbrk_r+0x1a>
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	20001154 	.word	0x20001154

080042b4 <__swbuf_r>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	460e      	mov	r6, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	4605      	mov	r5, r0
 80042bc:	b118      	cbz	r0, 80042c6 <__swbuf_r+0x12>
 80042be:	6983      	ldr	r3, [r0, #24]
 80042c0:	b90b      	cbnz	r3, 80042c6 <__swbuf_r+0x12>
 80042c2:	f000 f9d9 	bl	8004678 <__sinit>
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <__swbuf_r+0x98>)
 80042c8:	429c      	cmp	r4, r3
 80042ca:	d12b      	bne.n	8004324 <__swbuf_r+0x70>
 80042cc:	686c      	ldr	r4, [r5, #4]
 80042ce:	69a3      	ldr	r3, [r4, #24]
 80042d0:	60a3      	str	r3, [r4, #8]
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	071a      	lsls	r2, r3, #28
 80042d6:	d52f      	bpl.n	8004338 <__swbuf_r+0x84>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	b36b      	cbz	r3, 8004338 <__swbuf_r+0x84>
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	1ac0      	subs	r0, r0, r3
 80042e2:	6963      	ldr	r3, [r4, #20]
 80042e4:	b2f6      	uxtb	r6, r6
 80042e6:	4283      	cmp	r3, r0
 80042e8:	4637      	mov	r7, r6
 80042ea:	dc04      	bgt.n	80042f6 <__swbuf_r+0x42>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	f000 f92e 	bl	8004550 <_fflush_r>
 80042f4:	bb30      	cbnz	r0, 8004344 <__swbuf_r+0x90>
 80042f6:	68a3      	ldr	r3, [r4, #8]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	60a3      	str	r3, [r4, #8]
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	6022      	str	r2, [r4, #0]
 8004302:	701e      	strb	r6, [r3, #0]
 8004304:	6963      	ldr	r3, [r4, #20]
 8004306:	3001      	adds	r0, #1
 8004308:	4283      	cmp	r3, r0
 800430a:	d004      	beq.n	8004316 <__swbuf_r+0x62>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	07db      	lsls	r3, r3, #31
 8004310:	d506      	bpl.n	8004320 <__swbuf_r+0x6c>
 8004312:	2e0a      	cmp	r6, #10
 8004314:	d104      	bne.n	8004320 <__swbuf_r+0x6c>
 8004316:	4621      	mov	r1, r4
 8004318:	4628      	mov	r0, r5
 800431a:	f000 f919 	bl	8004550 <_fflush_r>
 800431e:	b988      	cbnz	r0, 8004344 <__swbuf_r+0x90>
 8004320:	4638      	mov	r0, r7
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <__swbuf_r+0x9c>)
 8004326:	429c      	cmp	r4, r3
 8004328:	d101      	bne.n	800432e <__swbuf_r+0x7a>
 800432a:	68ac      	ldr	r4, [r5, #8]
 800432c:	e7cf      	b.n	80042ce <__swbuf_r+0x1a>
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <__swbuf_r+0xa0>)
 8004330:	429c      	cmp	r4, r3
 8004332:	bf08      	it	eq
 8004334:	68ec      	ldreq	r4, [r5, #12]
 8004336:	e7ca      	b.n	80042ce <__swbuf_r+0x1a>
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	f000 f80c 	bl	8004358 <__swsetup_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	d0cb      	beq.n	80042dc <__swbuf_r+0x28>
 8004344:	f04f 37ff 	mov.w	r7, #4294967295
 8004348:	e7ea      	b.n	8004320 <__swbuf_r+0x6c>
 800434a:	bf00      	nop
 800434c:	08008f48 	.word	0x08008f48
 8004350:	08008f68 	.word	0x08008f68
 8004354:	08008f28 	.word	0x08008f28

08004358 <__swsetup_r>:
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <__swsetup_r+0xcc>)
 800435a:	b570      	push	{r4, r5, r6, lr}
 800435c:	681d      	ldr	r5, [r3, #0]
 800435e:	4606      	mov	r6, r0
 8004360:	460c      	mov	r4, r1
 8004362:	b125      	cbz	r5, 800436e <__swsetup_r+0x16>
 8004364:	69ab      	ldr	r3, [r5, #24]
 8004366:	b913      	cbnz	r3, 800436e <__swsetup_r+0x16>
 8004368:	4628      	mov	r0, r5
 800436a:	f000 f985 	bl	8004678 <__sinit>
 800436e:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <__swsetup_r+0xd0>)
 8004370:	429c      	cmp	r4, r3
 8004372:	d10f      	bne.n	8004394 <__swsetup_r+0x3c>
 8004374:	686c      	ldr	r4, [r5, #4]
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800437c:	0719      	lsls	r1, r3, #28
 800437e:	d42c      	bmi.n	80043da <__swsetup_r+0x82>
 8004380:	06dd      	lsls	r5, r3, #27
 8004382:	d411      	bmi.n	80043a8 <__swsetup_r+0x50>
 8004384:	2309      	movs	r3, #9
 8004386:	6033      	str	r3, [r6, #0]
 8004388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800438c:	81a3      	strh	r3, [r4, #12]
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	e03e      	b.n	8004412 <__swsetup_r+0xba>
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <__swsetup_r+0xd4>)
 8004396:	429c      	cmp	r4, r3
 8004398:	d101      	bne.n	800439e <__swsetup_r+0x46>
 800439a:	68ac      	ldr	r4, [r5, #8]
 800439c:	e7eb      	b.n	8004376 <__swsetup_r+0x1e>
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <__swsetup_r+0xd8>)
 80043a0:	429c      	cmp	r4, r3
 80043a2:	bf08      	it	eq
 80043a4:	68ec      	ldreq	r4, [r5, #12]
 80043a6:	e7e6      	b.n	8004376 <__swsetup_r+0x1e>
 80043a8:	0758      	lsls	r0, r3, #29
 80043aa:	d512      	bpl.n	80043d2 <__swsetup_r+0x7a>
 80043ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ae:	b141      	cbz	r1, 80043c2 <__swsetup_r+0x6a>
 80043b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d002      	beq.n	80043be <__swsetup_r+0x66>
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7ff fa77 	bl	80038ac <_free_r>
 80043be:	2300      	movs	r3, #0
 80043c0:	6363      	str	r3, [r4, #52]	; 0x34
 80043c2:	89a3      	ldrh	r3, [r4, #12]
 80043c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043c8:	81a3      	strh	r3, [r4, #12]
 80043ca:	2300      	movs	r3, #0
 80043cc:	6063      	str	r3, [r4, #4]
 80043ce:	6923      	ldr	r3, [r4, #16]
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	b94b      	cbnz	r3, 80043f2 <__swsetup_r+0x9a>
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d003      	beq.n	80043f2 <__swsetup_r+0x9a>
 80043ea:	4621      	mov	r1, r4
 80043ec:	4630      	mov	r0, r6
 80043ee:	f000 fa07 	bl	8004800 <__smakebuf_r>
 80043f2:	89a0      	ldrh	r0, [r4, #12]
 80043f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043f8:	f010 0301 	ands.w	r3, r0, #1
 80043fc:	d00a      	beq.n	8004414 <__swsetup_r+0xbc>
 80043fe:	2300      	movs	r3, #0
 8004400:	60a3      	str	r3, [r4, #8]
 8004402:	6963      	ldr	r3, [r4, #20]
 8004404:	425b      	negs	r3, r3
 8004406:	61a3      	str	r3, [r4, #24]
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	b943      	cbnz	r3, 800441e <__swsetup_r+0xc6>
 800440c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004410:	d1ba      	bne.n	8004388 <__swsetup_r+0x30>
 8004412:	bd70      	pop	{r4, r5, r6, pc}
 8004414:	0781      	lsls	r1, r0, #30
 8004416:	bf58      	it	pl
 8004418:	6963      	ldrpl	r3, [r4, #20]
 800441a:	60a3      	str	r3, [r4, #8]
 800441c:	e7f4      	b.n	8004408 <__swsetup_r+0xb0>
 800441e:	2000      	movs	r0, #0
 8004420:	e7f7      	b.n	8004412 <__swsetup_r+0xba>
 8004422:	bf00      	nop
 8004424:	20000090 	.word	0x20000090
 8004428:	08008f48 	.word	0x08008f48
 800442c:	08008f68 	.word	0x08008f68
 8004430:	08008f28 	.word	0x08008f28

08004434 <abort>:
 8004434:	b508      	push	{r3, lr}
 8004436:	2006      	movs	r0, #6
 8004438:	f000 faa4 	bl	8004984 <raise>
 800443c:	2001      	movs	r0, #1
 800443e:	f000 fbbf 	bl	8004bc0 <_exit>
	...

08004444 <__sflush_r>:
 8004444:	898a      	ldrh	r2, [r1, #12]
 8004446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444a:	4605      	mov	r5, r0
 800444c:	0710      	lsls	r0, r2, #28
 800444e:	460c      	mov	r4, r1
 8004450:	d458      	bmi.n	8004504 <__sflush_r+0xc0>
 8004452:	684b      	ldr	r3, [r1, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	dc05      	bgt.n	8004464 <__sflush_r+0x20>
 8004458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	dc02      	bgt.n	8004464 <__sflush_r+0x20>
 800445e:	2000      	movs	r0, #0
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004466:	2e00      	cmp	r6, #0
 8004468:	d0f9      	beq.n	800445e <__sflush_r+0x1a>
 800446a:	2300      	movs	r3, #0
 800446c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004470:	682f      	ldr	r7, [r5, #0]
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	d032      	beq.n	80044dc <__sflush_r+0x98>
 8004476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	075a      	lsls	r2, r3, #29
 800447c:	d505      	bpl.n	800448a <__sflush_r+0x46>
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	1ac0      	subs	r0, r0, r3
 8004482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004484:	b10b      	cbz	r3, 800448a <__sflush_r+0x46>
 8004486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004488:	1ac0      	subs	r0, r0, r3
 800448a:	2300      	movs	r3, #0
 800448c:	4602      	mov	r2, r0
 800448e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004490:	6a21      	ldr	r1, [r4, #32]
 8004492:	4628      	mov	r0, r5
 8004494:	47b0      	blx	r6
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	d106      	bne.n	80044aa <__sflush_r+0x66>
 800449c:	6829      	ldr	r1, [r5, #0]
 800449e:	291d      	cmp	r1, #29
 80044a0:	d82c      	bhi.n	80044fc <__sflush_r+0xb8>
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <__sflush_r+0x108>)
 80044a4:	40ca      	lsrs	r2, r1
 80044a6:	07d6      	lsls	r6, r2, #31
 80044a8:	d528      	bpl.n	80044fc <__sflush_r+0xb8>
 80044aa:	2200      	movs	r2, #0
 80044ac:	6062      	str	r2, [r4, #4]
 80044ae:	04d9      	lsls	r1, r3, #19
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	d504      	bpl.n	80044c0 <__sflush_r+0x7c>
 80044b6:	1c42      	adds	r2, r0, #1
 80044b8:	d101      	bne.n	80044be <__sflush_r+0x7a>
 80044ba:	682b      	ldr	r3, [r5, #0]
 80044bc:	b903      	cbnz	r3, 80044c0 <__sflush_r+0x7c>
 80044be:	6560      	str	r0, [r4, #84]	; 0x54
 80044c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c2:	602f      	str	r7, [r5, #0]
 80044c4:	2900      	cmp	r1, #0
 80044c6:	d0ca      	beq.n	800445e <__sflush_r+0x1a>
 80044c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044cc:	4299      	cmp	r1, r3
 80044ce:	d002      	beq.n	80044d6 <__sflush_r+0x92>
 80044d0:	4628      	mov	r0, r5
 80044d2:	f7ff f9eb 	bl	80038ac <_free_r>
 80044d6:	2000      	movs	r0, #0
 80044d8:	6360      	str	r0, [r4, #52]	; 0x34
 80044da:	e7c1      	b.n	8004460 <__sflush_r+0x1c>
 80044dc:	6a21      	ldr	r1, [r4, #32]
 80044de:	2301      	movs	r3, #1
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b0      	blx	r6
 80044e4:	1c41      	adds	r1, r0, #1
 80044e6:	d1c7      	bne.n	8004478 <__sflush_r+0x34>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0c4      	beq.n	8004478 <__sflush_r+0x34>
 80044ee:	2b1d      	cmp	r3, #29
 80044f0:	d001      	beq.n	80044f6 <__sflush_r+0xb2>
 80044f2:	2b16      	cmp	r3, #22
 80044f4:	d101      	bne.n	80044fa <__sflush_r+0xb6>
 80044f6:	602f      	str	r7, [r5, #0]
 80044f8:	e7b1      	b.n	800445e <__sflush_r+0x1a>
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004500:	81a3      	strh	r3, [r4, #12]
 8004502:	e7ad      	b.n	8004460 <__sflush_r+0x1c>
 8004504:	690f      	ldr	r7, [r1, #16]
 8004506:	2f00      	cmp	r7, #0
 8004508:	d0a9      	beq.n	800445e <__sflush_r+0x1a>
 800450a:	0793      	lsls	r3, r2, #30
 800450c:	680e      	ldr	r6, [r1, #0]
 800450e:	bf08      	it	eq
 8004510:	694b      	ldreq	r3, [r1, #20]
 8004512:	600f      	str	r7, [r1, #0]
 8004514:	bf18      	it	ne
 8004516:	2300      	movne	r3, #0
 8004518:	eba6 0807 	sub.w	r8, r6, r7
 800451c:	608b      	str	r3, [r1, #8]
 800451e:	f1b8 0f00 	cmp.w	r8, #0
 8004522:	dd9c      	ble.n	800445e <__sflush_r+0x1a>
 8004524:	6a21      	ldr	r1, [r4, #32]
 8004526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004528:	4643      	mov	r3, r8
 800452a:	463a      	mov	r2, r7
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	2800      	cmp	r0, #0
 8004532:	dc06      	bgt.n	8004542 <__sflush_r+0xfe>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	e78e      	b.n	8004460 <__sflush_r+0x1c>
 8004542:	4407      	add	r7, r0
 8004544:	eba8 0800 	sub.w	r8, r8, r0
 8004548:	e7e9      	b.n	800451e <__sflush_r+0xda>
 800454a:	bf00      	nop
 800454c:	20400001 	.word	0x20400001

08004550 <_fflush_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	690b      	ldr	r3, [r1, #16]
 8004554:	4605      	mov	r5, r0
 8004556:	460c      	mov	r4, r1
 8004558:	b913      	cbnz	r3, 8004560 <_fflush_r+0x10>
 800455a:	2500      	movs	r5, #0
 800455c:	4628      	mov	r0, r5
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	b118      	cbz	r0, 800456a <_fflush_r+0x1a>
 8004562:	6983      	ldr	r3, [r0, #24]
 8004564:	b90b      	cbnz	r3, 800456a <_fflush_r+0x1a>
 8004566:	f000 f887 	bl	8004678 <__sinit>
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <_fflush_r+0x6c>)
 800456c:	429c      	cmp	r4, r3
 800456e:	d11b      	bne.n	80045a8 <_fflush_r+0x58>
 8004570:	686c      	ldr	r4, [r5, #4]
 8004572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ef      	beq.n	800455a <_fflush_r+0xa>
 800457a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800457c:	07d0      	lsls	r0, r2, #31
 800457e:	d404      	bmi.n	800458a <_fflush_r+0x3a>
 8004580:	0599      	lsls	r1, r3, #22
 8004582:	d402      	bmi.n	800458a <_fflush_r+0x3a>
 8004584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004586:	f000 f915 	bl	80047b4 <__retarget_lock_acquire_recursive>
 800458a:	4628      	mov	r0, r5
 800458c:	4621      	mov	r1, r4
 800458e:	f7ff ff59 	bl	8004444 <__sflush_r>
 8004592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004594:	07da      	lsls	r2, r3, #31
 8004596:	4605      	mov	r5, r0
 8004598:	d4e0      	bmi.n	800455c <_fflush_r+0xc>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	059b      	lsls	r3, r3, #22
 800459e:	d4dd      	bmi.n	800455c <_fflush_r+0xc>
 80045a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045a2:	f000 f908 	bl	80047b6 <__retarget_lock_release_recursive>
 80045a6:	e7d9      	b.n	800455c <_fflush_r+0xc>
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <_fflush_r+0x70>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d101      	bne.n	80045b2 <_fflush_r+0x62>
 80045ae:	68ac      	ldr	r4, [r5, #8]
 80045b0:	e7df      	b.n	8004572 <_fflush_r+0x22>
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <_fflush_r+0x74>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	bf08      	it	eq
 80045b8:	68ec      	ldreq	r4, [r5, #12]
 80045ba:	e7da      	b.n	8004572 <_fflush_r+0x22>
 80045bc:	08008f48 	.word	0x08008f48
 80045c0:	08008f68 	.word	0x08008f68
 80045c4:	08008f28 	.word	0x08008f28

080045c8 <std>:
 80045c8:	2300      	movs	r3, #0
 80045ca:	b510      	push	{r4, lr}
 80045cc:	4604      	mov	r4, r0
 80045ce:	e9c0 3300 	strd	r3, r3, [r0]
 80045d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045d6:	6083      	str	r3, [r0, #8]
 80045d8:	8181      	strh	r1, [r0, #12]
 80045da:	6643      	str	r3, [r0, #100]	; 0x64
 80045dc:	81c2      	strh	r2, [r0, #14]
 80045de:	6183      	str	r3, [r0, #24]
 80045e0:	4619      	mov	r1, r3
 80045e2:	2208      	movs	r2, #8
 80045e4:	305c      	adds	r0, #92	; 0x5c
 80045e6:	f7ff f863 	bl	80036b0 <memset>
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <std+0x38>)
 80045ec:	6263      	str	r3, [r4, #36]	; 0x24
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <std+0x3c>)
 80045f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <std+0x40>)
 80045f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <std+0x44>)
 80045f8:	6224      	str	r4, [r4, #32]
 80045fa:	6323      	str	r3, [r4, #48]	; 0x30
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	bf00      	nop
 8004600:	080049bd 	.word	0x080049bd
 8004604:	080049df 	.word	0x080049df
 8004608:	08004a17 	.word	0x08004a17
 800460c:	08004a3b 	.word	0x08004a3b

08004610 <_cleanup_r>:
 8004610:	4901      	ldr	r1, [pc, #4]	; (8004618 <_cleanup_r+0x8>)
 8004612:	f000 b8af 	b.w	8004774 <_fwalk_reent>
 8004616:	bf00      	nop
 8004618:	08004551 	.word	0x08004551

0800461c <__sfmoreglue>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	1e4a      	subs	r2, r1, #1
 8004620:	2568      	movs	r5, #104	; 0x68
 8004622:	4355      	muls	r5, r2
 8004624:	460e      	mov	r6, r1
 8004626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800462a:	f7ff f98f 	bl	800394c <_malloc_r>
 800462e:	4604      	mov	r4, r0
 8004630:	b140      	cbz	r0, 8004644 <__sfmoreglue+0x28>
 8004632:	2100      	movs	r1, #0
 8004634:	e9c0 1600 	strd	r1, r6, [r0]
 8004638:	300c      	adds	r0, #12
 800463a:	60a0      	str	r0, [r4, #8]
 800463c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004640:	f7ff f836 	bl	80036b0 <memset>
 8004644:	4620      	mov	r0, r4
 8004646:	bd70      	pop	{r4, r5, r6, pc}

08004648 <__sfp_lock_acquire>:
 8004648:	4801      	ldr	r0, [pc, #4]	; (8004650 <__sfp_lock_acquire+0x8>)
 800464a:	f000 b8b3 	b.w	80047b4 <__retarget_lock_acquire_recursive>
 800464e:	bf00      	nop
 8004650:	20001150 	.word	0x20001150

08004654 <__sfp_lock_release>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__sfp_lock_release+0x8>)
 8004656:	f000 b8ae 	b.w	80047b6 <__retarget_lock_release_recursive>
 800465a:	bf00      	nop
 800465c:	20001150 	.word	0x20001150

08004660 <__sinit_lock_acquire>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__sinit_lock_acquire+0x8>)
 8004662:	f000 b8a7 	b.w	80047b4 <__retarget_lock_acquire_recursive>
 8004666:	bf00      	nop
 8004668:	2000114b 	.word	0x2000114b

0800466c <__sinit_lock_release>:
 800466c:	4801      	ldr	r0, [pc, #4]	; (8004674 <__sinit_lock_release+0x8>)
 800466e:	f000 b8a2 	b.w	80047b6 <__retarget_lock_release_recursive>
 8004672:	bf00      	nop
 8004674:	2000114b 	.word	0x2000114b

08004678 <__sinit>:
 8004678:	b510      	push	{r4, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	f7ff fff0 	bl	8004660 <__sinit_lock_acquire>
 8004680:	69a3      	ldr	r3, [r4, #24]
 8004682:	b11b      	cbz	r3, 800468c <__sinit+0x14>
 8004684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004688:	f7ff bff0 	b.w	800466c <__sinit_lock_release>
 800468c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004690:	6523      	str	r3, [r4, #80]	; 0x50
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <__sinit+0x68>)
 8004694:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <__sinit+0x6c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	62a2      	str	r2, [r4, #40]	; 0x28
 800469a:	42a3      	cmp	r3, r4
 800469c:	bf04      	itt	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	61a3      	streq	r3, [r4, #24]
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 f820 	bl	80046e8 <__sfp>
 80046a8:	6060      	str	r0, [r4, #4]
 80046aa:	4620      	mov	r0, r4
 80046ac:	f000 f81c 	bl	80046e8 <__sfp>
 80046b0:	60a0      	str	r0, [r4, #8]
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 f818 	bl	80046e8 <__sfp>
 80046b8:	2200      	movs	r2, #0
 80046ba:	60e0      	str	r0, [r4, #12]
 80046bc:	2104      	movs	r1, #4
 80046be:	6860      	ldr	r0, [r4, #4]
 80046c0:	f7ff ff82 	bl	80045c8 <std>
 80046c4:	68a0      	ldr	r0, [r4, #8]
 80046c6:	2201      	movs	r2, #1
 80046c8:	2109      	movs	r1, #9
 80046ca:	f7ff ff7d 	bl	80045c8 <std>
 80046ce:	68e0      	ldr	r0, [r4, #12]
 80046d0:	2202      	movs	r2, #2
 80046d2:	2112      	movs	r1, #18
 80046d4:	f7ff ff78 	bl	80045c8 <std>
 80046d8:	2301      	movs	r3, #1
 80046da:	61a3      	str	r3, [r4, #24]
 80046dc:	e7d2      	b.n	8004684 <__sinit+0xc>
 80046de:	bf00      	nop
 80046e0:	08008e3c 	.word	0x08008e3c
 80046e4:	08004611 	.word	0x08004611

080046e8 <__sfp>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	4607      	mov	r7, r0
 80046ec:	f7ff ffac 	bl	8004648 <__sfp_lock_acquire>
 80046f0:	4b1e      	ldr	r3, [pc, #120]	; (800476c <__sfp+0x84>)
 80046f2:	681e      	ldr	r6, [r3, #0]
 80046f4:	69b3      	ldr	r3, [r6, #24]
 80046f6:	b913      	cbnz	r3, 80046fe <__sfp+0x16>
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7ff ffbd 	bl	8004678 <__sinit>
 80046fe:	3648      	adds	r6, #72	; 0x48
 8004700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004704:	3b01      	subs	r3, #1
 8004706:	d503      	bpl.n	8004710 <__sfp+0x28>
 8004708:	6833      	ldr	r3, [r6, #0]
 800470a:	b30b      	cbz	r3, 8004750 <__sfp+0x68>
 800470c:	6836      	ldr	r6, [r6, #0]
 800470e:	e7f7      	b.n	8004700 <__sfp+0x18>
 8004710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004714:	b9d5      	cbnz	r5, 800474c <__sfp+0x64>
 8004716:	4b16      	ldr	r3, [pc, #88]	; (8004770 <__sfp+0x88>)
 8004718:	60e3      	str	r3, [r4, #12]
 800471a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800471e:	6665      	str	r5, [r4, #100]	; 0x64
 8004720:	f000 f847 	bl	80047b2 <__retarget_lock_init_recursive>
 8004724:	f7ff ff96 	bl	8004654 <__sfp_lock_release>
 8004728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800472c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004730:	6025      	str	r5, [r4, #0]
 8004732:	61a5      	str	r5, [r4, #24]
 8004734:	2208      	movs	r2, #8
 8004736:	4629      	mov	r1, r5
 8004738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800473c:	f7fe ffb8 	bl	80036b0 <memset>
 8004740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004748:	4620      	mov	r0, r4
 800474a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474c:	3468      	adds	r4, #104	; 0x68
 800474e:	e7d9      	b.n	8004704 <__sfp+0x1c>
 8004750:	2104      	movs	r1, #4
 8004752:	4638      	mov	r0, r7
 8004754:	f7ff ff62 	bl	800461c <__sfmoreglue>
 8004758:	4604      	mov	r4, r0
 800475a:	6030      	str	r0, [r6, #0]
 800475c:	2800      	cmp	r0, #0
 800475e:	d1d5      	bne.n	800470c <__sfp+0x24>
 8004760:	f7ff ff78 	bl	8004654 <__sfp_lock_release>
 8004764:	230c      	movs	r3, #12
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	e7ee      	b.n	8004748 <__sfp+0x60>
 800476a:	bf00      	nop
 800476c:	08008e3c 	.word	0x08008e3c
 8004770:	ffff0001 	.word	0xffff0001

08004774 <_fwalk_reent>:
 8004774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004778:	4606      	mov	r6, r0
 800477a:	4688      	mov	r8, r1
 800477c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004780:	2700      	movs	r7, #0
 8004782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004786:	f1b9 0901 	subs.w	r9, r9, #1
 800478a:	d505      	bpl.n	8004798 <_fwalk_reent+0x24>
 800478c:	6824      	ldr	r4, [r4, #0]
 800478e:	2c00      	cmp	r4, #0
 8004790:	d1f7      	bne.n	8004782 <_fwalk_reent+0xe>
 8004792:	4638      	mov	r0, r7
 8004794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004798:	89ab      	ldrh	r3, [r5, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d907      	bls.n	80047ae <_fwalk_reent+0x3a>
 800479e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047a2:	3301      	adds	r3, #1
 80047a4:	d003      	beq.n	80047ae <_fwalk_reent+0x3a>
 80047a6:	4629      	mov	r1, r5
 80047a8:	4630      	mov	r0, r6
 80047aa:	47c0      	blx	r8
 80047ac:	4307      	orrs	r7, r0
 80047ae:	3568      	adds	r5, #104	; 0x68
 80047b0:	e7e9      	b.n	8004786 <_fwalk_reent+0x12>

080047b2 <__retarget_lock_init_recursive>:
 80047b2:	4770      	bx	lr

080047b4 <__retarget_lock_acquire_recursive>:
 80047b4:	4770      	bx	lr

080047b6 <__retarget_lock_release_recursive>:
 80047b6:	4770      	bx	lr

080047b8 <__swhatbuf_r>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	460e      	mov	r6, r1
 80047bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c0:	2900      	cmp	r1, #0
 80047c2:	b096      	sub	sp, #88	; 0x58
 80047c4:	4614      	mov	r4, r2
 80047c6:	461d      	mov	r5, r3
 80047c8:	da07      	bge.n	80047da <__swhatbuf_r+0x22>
 80047ca:	2300      	movs	r3, #0
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	89b3      	ldrh	r3, [r6, #12]
 80047d0:	061a      	lsls	r2, r3, #24
 80047d2:	d410      	bmi.n	80047f6 <__swhatbuf_r+0x3e>
 80047d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d8:	e00e      	b.n	80047f8 <__swhatbuf_r+0x40>
 80047da:	466a      	mov	r2, sp
 80047dc:	f000 f954 	bl	8004a88 <_fstat_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	dbf2      	blt.n	80047ca <__swhatbuf_r+0x12>
 80047e4:	9a01      	ldr	r2, [sp, #4]
 80047e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047ee:	425a      	negs	r2, r3
 80047f0:	415a      	adcs	r2, r3
 80047f2:	602a      	str	r2, [r5, #0]
 80047f4:	e7ee      	b.n	80047d4 <__swhatbuf_r+0x1c>
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	2000      	movs	r0, #0
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	b016      	add	sp, #88	; 0x58
 80047fe:	bd70      	pop	{r4, r5, r6, pc}

08004800 <__smakebuf_r>:
 8004800:	898b      	ldrh	r3, [r1, #12]
 8004802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004804:	079d      	lsls	r5, r3, #30
 8004806:	4606      	mov	r6, r0
 8004808:	460c      	mov	r4, r1
 800480a:	d507      	bpl.n	800481c <__smakebuf_r+0x1c>
 800480c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	2301      	movs	r3, #1
 8004816:	6163      	str	r3, [r4, #20]
 8004818:	b002      	add	sp, #8
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	ab01      	add	r3, sp, #4
 800481e:	466a      	mov	r2, sp
 8004820:	f7ff ffca 	bl	80047b8 <__swhatbuf_r>
 8004824:	9900      	ldr	r1, [sp, #0]
 8004826:	4605      	mov	r5, r0
 8004828:	4630      	mov	r0, r6
 800482a:	f7ff f88f 	bl	800394c <_malloc_r>
 800482e:	b948      	cbnz	r0, 8004844 <__smakebuf_r+0x44>
 8004830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004834:	059a      	lsls	r2, r3, #22
 8004836:	d4ef      	bmi.n	8004818 <__smakebuf_r+0x18>
 8004838:	f023 0303 	bic.w	r3, r3, #3
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e7e3      	b.n	800480c <__smakebuf_r+0xc>
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <__smakebuf_r+0x7c>)
 8004846:	62b3      	str	r3, [r6, #40]	; 0x28
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	6020      	str	r0, [r4, #0]
 800484c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004850:	81a3      	strh	r3, [r4, #12]
 8004852:	9b00      	ldr	r3, [sp, #0]
 8004854:	6163      	str	r3, [r4, #20]
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	6120      	str	r0, [r4, #16]
 800485a:	b15b      	cbz	r3, 8004874 <__smakebuf_r+0x74>
 800485c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004860:	4630      	mov	r0, r6
 8004862:	f000 f923 	bl	8004aac <_isatty_r>
 8004866:	b128      	cbz	r0, 8004874 <__smakebuf_r+0x74>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	81a3      	strh	r3, [r4, #12]
 8004874:	89a0      	ldrh	r0, [r4, #12]
 8004876:	4305      	orrs	r5, r0
 8004878:	81a5      	strh	r5, [r4, #12]
 800487a:	e7cd      	b.n	8004818 <__smakebuf_r+0x18>
 800487c:	08004611 	.word	0x08004611

08004880 <memcpy>:
 8004880:	440a      	add	r2, r1
 8004882:	4291      	cmp	r1, r2
 8004884:	f100 33ff 	add.w	r3, r0, #4294967295
 8004888:	d100      	bne.n	800488c <memcpy+0xc>
 800488a:	4770      	bx	lr
 800488c:	b510      	push	{r4, lr}
 800488e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004896:	4291      	cmp	r1, r2
 8004898:	d1f9      	bne.n	800488e <memcpy+0xe>
 800489a:	bd10      	pop	{r4, pc}

0800489c <memmove>:
 800489c:	4288      	cmp	r0, r1
 800489e:	b510      	push	{r4, lr}
 80048a0:	eb01 0402 	add.w	r4, r1, r2
 80048a4:	d902      	bls.n	80048ac <memmove+0x10>
 80048a6:	4284      	cmp	r4, r0
 80048a8:	4623      	mov	r3, r4
 80048aa:	d807      	bhi.n	80048bc <memmove+0x20>
 80048ac:	1e43      	subs	r3, r0, #1
 80048ae:	42a1      	cmp	r1, r4
 80048b0:	d008      	beq.n	80048c4 <memmove+0x28>
 80048b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048ba:	e7f8      	b.n	80048ae <memmove+0x12>
 80048bc:	4402      	add	r2, r0
 80048be:	4601      	mov	r1, r0
 80048c0:	428a      	cmp	r2, r1
 80048c2:	d100      	bne.n	80048c6 <memmove+0x2a>
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048ce:	e7f7      	b.n	80048c0 <memmove+0x24>

080048d0 <__malloc_lock>:
 80048d0:	4801      	ldr	r0, [pc, #4]	; (80048d8 <__malloc_lock+0x8>)
 80048d2:	f7ff bf6f 	b.w	80047b4 <__retarget_lock_acquire_recursive>
 80048d6:	bf00      	nop
 80048d8:	2000114c 	.word	0x2000114c

080048dc <__malloc_unlock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_unlock+0x8>)
 80048de:	f7ff bf6a 	b.w	80047b6 <__retarget_lock_release_recursive>
 80048e2:	bf00      	nop
 80048e4:	2000114c 	.word	0x2000114c

080048e8 <_realloc_r>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	4607      	mov	r7, r0
 80048ec:	4614      	mov	r4, r2
 80048ee:	460e      	mov	r6, r1
 80048f0:	b921      	cbnz	r1, 80048fc <_realloc_r+0x14>
 80048f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048f6:	4611      	mov	r1, r2
 80048f8:	f7ff b828 	b.w	800394c <_malloc_r>
 80048fc:	b922      	cbnz	r2, 8004908 <_realloc_r+0x20>
 80048fe:	f7fe ffd5 	bl	80038ac <_free_r>
 8004902:	4625      	mov	r5, r4
 8004904:	4628      	mov	r0, r5
 8004906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004908:	f000 f8f2 	bl	8004af0 <_malloc_usable_size_r>
 800490c:	42a0      	cmp	r0, r4
 800490e:	d20f      	bcs.n	8004930 <_realloc_r+0x48>
 8004910:	4621      	mov	r1, r4
 8004912:	4638      	mov	r0, r7
 8004914:	f7ff f81a 	bl	800394c <_malloc_r>
 8004918:	4605      	mov	r5, r0
 800491a:	2800      	cmp	r0, #0
 800491c:	d0f2      	beq.n	8004904 <_realloc_r+0x1c>
 800491e:	4631      	mov	r1, r6
 8004920:	4622      	mov	r2, r4
 8004922:	f7ff ffad 	bl	8004880 <memcpy>
 8004926:	4631      	mov	r1, r6
 8004928:	4638      	mov	r0, r7
 800492a:	f7fe ffbf 	bl	80038ac <_free_r>
 800492e:	e7e9      	b.n	8004904 <_realloc_r+0x1c>
 8004930:	4635      	mov	r5, r6
 8004932:	e7e7      	b.n	8004904 <_realloc_r+0x1c>

08004934 <_raise_r>:
 8004934:	291f      	cmp	r1, #31
 8004936:	b538      	push	{r3, r4, r5, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	460d      	mov	r5, r1
 800493c:	d904      	bls.n	8004948 <_raise_r+0x14>
 800493e:	2316      	movs	r3, #22
 8004940:	6003      	str	r3, [r0, #0]
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800494a:	b112      	cbz	r2, 8004952 <_raise_r+0x1e>
 800494c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004950:	b94b      	cbnz	r3, 8004966 <_raise_r+0x32>
 8004952:	4620      	mov	r0, r4
 8004954:	f000 f830 	bl	80049b8 <_getpid_r>
 8004958:	462a      	mov	r2, r5
 800495a:	4601      	mov	r1, r0
 800495c:	4620      	mov	r0, r4
 800495e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004962:	f000 b817 	b.w	8004994 <_kill_r>
 8004966:	2b01      	cmp	r3, #1
 8004968:	d00a      	beq.n	8004980 <_raise_r+0x4c>
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	d103      	bne.n	8004976 <_raise_r+0x42>
 800496e:	2316      	movs	r3, #22
 8004970:	6003      	str	r3, [r0, #0]
 8004972:	2001      	movs	r0, #1
 8004974:	e7e7      	b.n	8004946 <_raise_r+0x12>
 8004976:	2400      	movs	r4, #0
 8004978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800497c:	4628      	mov	r0, r5
 800497e:	4798      	blx	r3
 8004980:	2000      	movs	r0, #0
 8004982:	e7e0      	b.n	8004946 <_raise_r+0x12>

08004984 <raise>:
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <raise+0xc>)
 8004986:	4601      	mov	r1, r0
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	f7ff bfd3 	b.w	8004934 <_raise_r>
 800498e:	bf00      	nop
 8004990:	20000090 	.word	0x20000090

08004994 <_kill_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d07      	ldr	r5, [pc, #28]	; (80049b4 <_kill_r+0x20>)
 8004998:	2300      	movs	r3, #0
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	f000 f8df 	bl	8004b64 <_kill>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	d102      	bne.n	80049b0 <_kill_r+0x1c>
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	b103      	cbz	r3, 80049b0 <_kill_r+0x1c>
 80049ae:	6023      	str	r3, [r4, #0]
 80049b0:	bd38      	pop	{r3, r4, r5, pc}
 80049b2:	bf00      	nop
 80049b4:	20001154 	.word	0x20001154

080049b8 <_getpid_r>:
 80049b8:	f000 b8c4 	b.w	8004b44 <_getpid>

080049bc <__sread>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c4:	f000 f89c 	bl	8004b00 <_read_r>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	bfab      	itete	ge
 80049cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ce:	89a3      	ldrhlt	r3, [r4, #12]
 80049d0:	181b      	addge	r3, r3, r0
 80049d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049d6:	bfac      	ite	ge
 80049d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049da:	81a3      	strhlt	r3, [r4, #12]
 80049dc:	bd10      	pop	{r4, pc}

080049de <__swrite>:
 80049de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e2:	461f      	mov	r7, r3
 80049e4:	898b      	ldrh	r3, [r1, #12]
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	4605      	mov	r5, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	4616      	mov	r6, r2
 80049ee:	d505      	bpl.n	80049fc <__swrite+0x1e>
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	2302      	movs	r3, #2
 80049f6:	2200      	movs	r2, #0
 80049f8:	f000 f868 	bl	8004acc <_lseek_r>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	f000 b817 	b.w	8004a44 <_write_r>

08004a16 <__sseek>:
 8004a16:	b510      	push	{r4, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1e:	f000 f855 	bl	8004acc <_lseek_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	bf15      	itete	ne
 8004a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a32:	81a3      	strheq	r3, [r4, #12]
 8004a34:	bf18      	it	ne
 8004a36:	81a3      	strhne	r3, [r4, #12]
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <__sclose>:
 8004a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3e:	f000 b813 	b.w	8004a68 <_close_r>
	...

08004a44 <_write_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d07      	ldr	r5, [pc, #28]	; (8004a64 <_write_r+0x20>)
 8004a48:	4604      	mov	r4, r0
 8004a4a:	4608      	mov	r0, r1
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	2200      	movs	r2, #0
 8004a50:	602a      	str	r2, [r5, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f000 f8ac 	bl	8004bb0 <_write>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_write_r+0x1e>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_write_r+0x1e>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20001154 	.word	0x20001154

08004a68 <_close_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d06      	ldr	r5, [pc, #24]	; (8004a84 <_close_r+0x1c>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	f000 f856 	bl	8004b24 <_close>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_close_r+0x1a>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_close_r+0x1a>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20001154 	.word	0x20001154

08004a88 <_fstat_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d07      	ldr	r5, [pc, #28]	; (8004aa8 <_fstat_r+0x20>)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	602b      	str	r3, [r5, #0]
 8004a96:	f000 f84d 	bl	8004b34 <_fstat>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	d102      	bne.n	8004aa4 <_fstat_r+0x1c>
 8004a9e:	682b      	ldr	r3, [r5, #0]
 8004aa0:	b103      	cbz	r3, 8004aa4 <_fstat_r+0x1c>
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	bd38      	pop	{r3, r4, r5, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20001154 	.word	0x20001154

08004aac <_isatty_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d06      	ldr	r5, [pc, #24]	; (8004ac8 <_isatty_r+0x1c>)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	f000 f84c 	bl	8004b54 <_isatty>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_isatty_r+0x1a>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_isatty_r+0x1a>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20001154 	.word	0x20001154

08004acc <_lseek_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	; (8004aec <_lseek_r+0x20>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 f84a 	bl	8004b74 <_lseek>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_lseek_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_lseek_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20001154 	.word	0x20001154

08004af0 <_malloc_usable_size_r>:
 8004af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af4:	1f18      	subs	r0, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfbc      	itt	lt
 8004afa:	580b      	ldrlt	r3, [r1, r0]
 8004afc:	18c0      	addlt	r0, r0, r3
 8004afe:	4770      	bx	lr

08004b00 <_read_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d07      	ldr	r5, [pc, #28]	; (8004b20 <_read_r+0x20>)
 8004b04:	4604      	mov	r4, r0
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 f838 	bl	8004b84 <_read>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_read_r+0x1e>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_read_r+0x1e>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	20001154 	.word	0x20001154

08004b24 <_close>:
 8004b24:	4b02      	ldr	r3, [pc, #8]	; (8004b30 <_close+0xc>)
 8004b26:	2258      	movs	r2, #88	; 0x58
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2e:	4770      	bx	lr
 8004b30:	20001154 	.word	0x20001154

08004b34 <_fstat>:
 8004b34:	4b02      	ldr	r3, [pc, #8]	; (8004b40 <_fstat+0xc>)
 8004b36:	2258      	movs	r2, #88	; 0x58
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3e:	4770      	bx	lr
 8004b40:	20001154 	.word	0x20001154

08004b44 <_getpid>:
 8004b44:	4b02      	ldr	r3, [pc, #8]	; (8004b50 <_getpid+0xc>)
 8004b46:	2258      	movs	r2, #88	; 0x58
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4e:	4770      	bx	lr
 8004b50:	20001154 	.word	0x20001154

08004b54 <_isatty>:
 8004b54:	4b02      	ldr	r3, [pc, #8]	; (8004b60 <_isatty+0xc>)
 8004b56:	2258      	movs	r2, #88	; 0x58
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20001154 	.word	0x20001154

08004b64 <_kill>:
 8004b64:	4b02      	ldr	r3, [pc, #8]	; (8004b70 <_kill+0xc>)
 8004b66:	2258      	movs	r2, #88	; 0x58
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	4770      	bx	lr
 8004b70:	20001154 	.word	0x20001154

08004b74 <_lseek>:
 8004b74:	4b02      	ldr	r3, [pc, #8]	; (8004b80 <_lseek+0xc>)
 8004b76:	2258      	movs	r2, #88	; 0x58
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	4770      	bx	lr
 8004b80:	20001154 	.word	0x20001154

08004b84 <_read>:
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <_read+0xc>)
 8004b86:	2258      	movs	r2, #88	; 0x58
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8e:	4770      	bx	lr
 8004b90:	20001154 	.word	0x20001154

08004b94 <_sbrk>:
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <_sbrk+0x14>)
 8004b96:	6819      	ldr	r1, [r3, #0]
 8004b98:	4602      	mov	r2, r0
 8004b9a:	b909      	cbnz	r1, 8004ba0 <_sbrk+0xc>
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <_sbrk+0x18>)
 8004b9e:	6019      	str	r1, [r3, #0]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	4402      	add	r2, r0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	4770      	bx	lr
 8004ba8:	20000968 	.word	0x20000968
 8004bac:	20001158 	.word	0x20001158

08004bb0 <_write>:
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <_write+0xc>)
 8004bb2:	2258      	movs	r2, #88	; 0x58
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bba:	4770      	bx	lr
 8004bbc:	20001154 	.word	0x20001154

08004bc0 <_exit>:
 8004bc0:	e7fe      	b.n	8004bc0 <_exit>
	...

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
