
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bebc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800c050  0800c050  0001c050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc88  0800cc88  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc90  0800cc90  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc90  0800cc90  0001cc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc94  0800cc94  0001cc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800cc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002880  200000d8  0800cd70  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002958  0800cd70  00022958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d10  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004edc  00000000  00000000  00046e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  0004bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c40  00000000  00000000  0004db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5e4  00000000  00000000  0004f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022553  00000000  00000000  0007bd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105185  00000000  00000000  0009e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a344c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e74  00000000  00000000  001a34a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001ac314  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001ac3c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c034 	.word	0x0800c034

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800c034 	.word	0x0800c034

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b2f      	cmp	r3, #47	; 0x2f
 8000e82:	d906      	bls.n	8000e92 <Hex2Num+0x1e>
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b39      	cmp	r3, #57	; 0x39
 8000e88:	d803      	bhi.n	8000e92 <Hex2Num+0x1e>
        return a - '0';
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3b30      	subs	r3, #48	; 0x30
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	e014      	b.n	8000ebc <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b60      	cmp	r3, #96	; 0x60
 8000e96:	d906      	bls.n	8000ea6 <Hex2Num+0x32>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b66      	cmp	r3, #102	; 0x66
 8000e9c:	d803      	bhi.n	8000ea6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	3b57      	subs	r3, #87	; 0x57
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	e00a      	b.n	8000ebc <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b40      	cmp	r3, #64	; 0x40
 8000eaa:	d906      	bls.n	8000eba <Hex2Num+0x46>
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b46      	cmp	r3, #70	; 0x46
 8000eb0:	d803      	bhi.n	8000eba <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3b37      	subs	r3, #55	; 0x37
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	e000      	b.n	8000ebc <Hex2Num+0x48>
    }

    return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000eda:	e012      	b.n	8000f02 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ffc4 	bl	8000e74 <Hex2Num>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
        i++;
 8000efc:	7afb      	ldrb	r3, [r7, #11]
 8000efe:	3301      	adds	r3, #1
 8000f00:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b2f      	cmp	r3, #47	; 0x2f
 8000f08:	d903      	bls.n	8000f12 <ParseHexNumber+0x4a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b39      	cmp	r3, #57	; 0x39
 8000f10:	d9e4      	bls.n	8000edc <ParseHexNumber+0x14>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b60      	cmp	r3, #96	; 0x60
 8000f18:	d903      	bls.n	8000f22 <ParseHexNumber+0x5a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b66      	cmp	r3, #102	; 0x66
 8000f20:	d9dc      	bls.n	8000edc <ParseHexNumber+0x14>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b40      	cmp	r3, #64	; 0x40
 8000f28:	d903      	bls.n	8000f32 <ParseHexNumber+0x6a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b46      	cmp	r3, #70	; 0x46
 8000f30:	d9d4      	bls.n	8000edc <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <ParseHexNumber+0x76>
        *cnt = i;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	7afa      	ldrb	r2, [r7, #11]
 8000f3c:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b2d      	cmp	r3, #45	; 0x2d
 8000f64:	d119      	bne.n	8000f9a <ParseNumber+0x52>
        minus = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
        i++;
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f76:	e010      	b.n	8000f9a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b30      	subs	r3, #48	; 0x30
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
        i++;
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa0:	d903      	bls.n	8000faa <ParseNumber+0x62>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b39      	cmp	r3, #57	; 0x39
 8000fa8:	d9e6      	bls.n	8000f78 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <ParseNumber+0x6e>
        *cnt = i;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	7bba      	ldrb	r2, [r7, #14]
 8000fb4:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <ParseNumber+0x7a>
        return 0 - sum;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	e000      	b.n	8000fc4 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fc2:	68bb      	ldr	r3, [r7, #8]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000fde:	e019      	b.n	8001014 <ParseMAC+0x44>
    hexcnt = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b3a      	cmp	r3, #58	; 0x3a
 8000fea:	d00e      	beq.n	800100a <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000fec:	f107 030e 	add.w	r3, r7, #14
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff68 	bl	8000ec8 <ParseHexNumber>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	73fa      	strb	r2, [r7, #15]
 8001000:	461a      	mov	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e1      	bne.n	8000fe0 <ParseMAC+0x10>
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001034:	e019      	b.n	800106a <ParseIP+0x44>
    hexcnt = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b2e      	cmp	r3, #46	; 0x2e
 8001040:	d00e      	beq.n	8001060 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8001042:	f107 030e 	add.w	r3, r7, #14
 8001046:	4619      	mov	r1, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff7d 	bl	8000f48 <ParseNumber>
 800104e:	4601      	mov	r1, r0
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	73fa      	strb	r2, [r7, #15]
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e1      	bne.n	8001036 <ParseIP+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3302      	adds	r3, #2
 800108e:	4934      	ldr	r1, [pc, #208]	; (8001160 <AT_ParseInfo+0xe4>)
 8001090:	4618      	mov	r0, r3
 8001092:	f009 fbf5 	bl	800a880 <strtok>
 8001096:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001098:	e05a      	b.n	8001150 <AT_ParseInfo+0xd4>
    switch (num++) {
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	72fa      	strb	r2, [r7, #11]
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d84f      	bhi.n	8001144 <AT_ParseInfo+0xc8>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <AT_ParseInfo+0x30>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010d7 	.word	0x080010d7
 80010b4:	080010e7 	.word	0x080010e7
 80010b8:	080010f7 	.word	0x080010f7
 80010bc:	08001107 	.word	0x08001107
 80010c0:	08001117 	.word	0x08001117
 80010c4:	0800112b 	.word	0x0800112b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2220      	movs	r2, #32
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fbab 	bl	800a82a <strncpy>
      break;
 80010d4:	e037      	b.n	8001146 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3320      	adds	r3, #32
 80010da:	2218      	movs	r2, #24
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fba3 	bl	800a82a <strncpy>
      break;
 80010e4:	e02f      	b.n	8001146 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3338      	adds	r3, #56	; 0x38
 80010ea:	2210      	movs	r2, #16
 80010ec:	68f9      	ldr	r1, [r7, #12]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 fb9b 	bl	800a82a <strncpy>
      break;
 80010f4:	e027      	b.n	8001146 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3348      	adds	r3, #72	; 0x48
 80010fa:	2210      	movs	r2, #16
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fb93 	bl	800a82a <strncpy>
      break;
 8001104:	e01f      	b.n	8001146 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3358      	adds	r3, #88	; 0x58
 800110a:	2210      	movs	r2, #16
 800110c:	68f9      	ldr	r1, [r7, #12]
 800110e:	4618      	mov	r0, r3
 8001110:	f009 fb8b 	bl	800a82a <strncpy>
      break;
 8001114:	e017      	b.n	8001146 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001116:	2100      	movs	r1, #0
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff ff15 	bl	8000f48 <ParseNumber>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001128:	e00d      	b.n	8001146 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <AT_ParseInfo+0xe8>)
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f009 fba7 	bl	800a880 <strtok>
 8001132:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3368      	adds	r3, #104	; 0x68
 8001138:	2220      	movs	r2, #32
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	f009 fb74 	bl	800a82a <strncpy>
      break;
 8001142:	e000      	b.n	8001146 <AT_ParseInfo+0xca>

    default: break;
 8001144:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001146:	4906      	ldr	r1, [pc, #24]	; (8001160 <AT_ParseInfo+0xe4>)
 8001148:	2000      	movs	r0, #0
 800114a:	f009 fb99 	bl	800a880 <strtok>
 800114e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1a1      	bne.n	800109a <AT_ParseInfo+0x1e>
  }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800c080 	.word	0x0800c080
 8001164:	0800c084 	.word	0x0800c084

08001168 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3302      	adds	r3, #2
 800117a:	4952      	ldr	r1, [pc, #328]	; (80012c4 <AT_ParseConnSettings+0x15c>)
 800117c:	4618      	mov	r0, r3
 800117e:	f009 fb7f 	bl	800a880 <strtok>
 8001182:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001184:	e095      	b.n	80012b2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	73fa      	strb	r2, [r7, #15]
 800118c:	2b0b      	cmp	r3, #11
 800118e:	d87f      	bhi.n	8001290 <AT_ParseConnSettings+0x128>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <AT_ParseConnSettings+0x30>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011c9 	.word	0x080011c9
 800119c:	080011d7 	.word	0x080011d7
 80011a0:	080011e7 	.word	0x080011e7
 80011a4:	080011fb 	.word	0x080011fb
 80011a8:	0800120f 	.word	0x0800120f
 80011ac:	08001223 	.word	0x08001223
 80011b0:	08001231 	.word	0x08001231
 80011b4:	0800123f 	.word	0x0800123f
 80011b8:	0800124d 	.word	0x0800124d
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	08001269 	.word	0x08001269
 80011c4:	0800127d 	.word	0x0800127d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2221      	movs	r2, #33	; 0x21
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f009 fb2b 	bl	800a82a <strncpy>
      break;
 80011d4:	e05d      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3321      	adds	r3, #33	; 0x21
 80011da:	2221      	movs	r2, #33	; 0x21
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fb23 	bl	800a82a <strncpy>
      break;
 80011e4:	e055      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80011e6:	2100      	movs	r1, #0
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff fead 	bl	8000f48 <ParseNumber>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80011f8:	e04b      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80011fa:	2100      	movs	r1, #0
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f7ff fea3 	bl	8000f48 <ParseNumber>
 8001202:	4603      	mov	r3, r0
 8001204:	b2da      	uxtb	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800120c:	e041      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800120e:	2100      	movs	r1, #0
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fe99 	bl	8000f48 <ParseNumber>
 8001216:	4603      	mov	r3, r0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001220:	e037      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3348      	adds	r3, #72	; 0x48
 8001226:	4619      	mov	r1, r3
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff fefc 	bl	8001026 <ParseIP>
      break;
 800122e:	e030      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	334c      	adds	r3, #76	; 0x4c
 8001234:	4619      	mov	r1, r3
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	f7ff fef5 	bl	8001026 <ParseIP>
      break;
 800123c:	e029      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3350      	adds	r3, #80	; 0x50
 8001242:	4619      	mov	r1, r3
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7ff feee 	bl	8001026 <ParseIP>
      break;
 800124a:	e022      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3354      	adds	r3, #84	; 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff fee7 	bl	8001026 <ParseIP>
      break;
 8001258:	e01b      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3358      	adds	r3, #88	; 0x58
 800125e:	4619      	mov	r1, r3
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff fee0 	bl	8001026 <ParseIP>
      break;
 8001266:	e014      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001268:	2100      	movs	r1, #0
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f7ff fe6c 	bl	8000f48 <ParseNumber>
 8001270:	4603      	mov	r3, r0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800127a:	e00a      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800127c:	2100      	movs	r1, #0
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff fe62 	bl	8000f48 <ParseNumber>
 8001284:	4603      	mov	r3, r0
 8001286:	b2da      	uxtb	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800128e:	e000      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001290:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001292:	490c      	ldr	r1, [pc, #48]	; (80012c4 <AT_ParseConnSettings+0x15c>)
 8001294:	2000      	movs	r0, #0
 8001296:	f009 faf3 	bl	800a880 <strtok>
 800129a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <AT_ParseConnSettings+0x14a>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b2c      	cmp	r3, #44	; 0x2c
 80012aa:	d102      	bne.n	80012b2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f af66 	bne.w	8001186 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800c080 	.word	0x0800c080

080012c8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3302      	adds	r3, #2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b31      	cmp	r3, #49	; 0x31
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	701a      	strb	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f7fe ff5e 	bl	80001d0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b299      	uxth	r1, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800131e:	461a      	mov	r2, r3
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	47a0      	blx	r4
 8001324:	4603      	mov	r3, r0
 8001326:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dd33      	ble.n	8001396 <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800133a:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
 8001342:	4603      	mov	r3, r0
 8001344:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8001346:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd1c      	ble.n	8001388 <AT_ExecuteCommand+0x94>
 800134e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001352:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001356:	da17      	bge.n	8001388 <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 8001358:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <AT_ExecuteCommand+0xac>)
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f009 fa72 	bl	800a850 <strstr>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e010      	b.n	8001398 <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001376:	490b      	ldr	r1, [pc, #44]	; (80013a4 <AT_ExecuteCommand+0xb0>)
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f009 fa69 	bl	800a850 <strstr>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001384:	2305      	movs	r3, #5
 8001386:	e007      	b.n	8001398 <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8001388:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800138c:	f113 0f04 	cmn.w	r3, #4
 8001390:	d101      	bne.n	8001396 <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001392:	2306      	movs	r3, #6
 8001394:	e000      	b.n	8001398 <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 8001396:	2304      	movs	r3, #4
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	0800c08c 	.word	0x0800c08c
 80013a4:	0800c098 	.word	0x0800c098

080013a8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7fe ff04 	bl	80001d0 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80013cc:	8a7b      	ldrh	r3, [r7, #18]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <AT_RequestSendData+0x32>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e053      	b.n	8001482 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80013e6:	8a79      	ldrh	r1, [r7, #18]
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	4798      	blx	r3
 80013ec:	4603      	mov	r3, r0
 80013ee:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80013f0:	8a3a      	ldrh	r2, [r7, #16]
 80013f2:	8a7b      	ldrh	r3, [r7, #18]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d143      	bne.n	8001480 <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001404:	8879      	ldrh	r1, [r7, #2]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800140e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	429a      	cmp	r2, r3
 8001416:	d131      	bne.n	800147c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001424:	2100      	movs	r1, #0
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	4798      	blx	r3
 800142a:	4603      	mov	r3, r0
 800142c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800142e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dd19      	ble.n	800146a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	4413      	add	r3, r2
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001442:	4912      	ldr	r1, [pc, #72]	; (800148c <AT_RequestSendData+0xe4>)
 8001444:	6a38      	ldr	r0, [r7, #32]
 8001446:	f009 fa03 	bl	800a850 <strstr>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e016      	b.n	8001482 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <AT_RequestSendData+0xe8>)
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f009 f9fa 	bl	800a850 <strstr>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001462:	2305      	movs	r3, #5
 8001464:	e00d      	b.n	8001482 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001466:	2302      	movs	r3, #2
 8001468:	e00b      	b.n	8001482 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800146a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800146e:	f113 0f04 	cmn.w	r3, #4
 8001472:	d101      	bne.n	8001478 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001474:	2306      	movs	r3, #6
 8001476:	e004      	b.n	8001482 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001478:	2302      	movs	r3, #2
 800147a:	e002      	b.n	8001482 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800147c:	2302      	movs	r3, #2
 800147e:	e000      	b.n	8001482 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001480:	2304      	movs	r3, #4
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800c08c 	.word	0x0800c08c
 8001490:	0800c098 	.word	0x0800c098

08001494 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014a8:	613b      	str	r3, [r7, #16]
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7fe fe8d 	bl	80001d0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b299      	uxth	r1, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80014c0:	461a      	mov	r2, r3
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	47a0      	blx	r4
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dd6f      	ble.n	80015ac <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80014d8:	2100      	movs	r1, #0
 80014da:	6938      	ldr	r0, [r7, #16]
 80014dc:	4798      	blx	r3
 80014de:	4603      	mov	r3, r0
 80014e0:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b0d      	cmp	r3, #13
 80014e8:	d104      	bne.n	80014f4 <AT_RequestReceiveData+0x60>
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3301      	adds	r3, #1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d001      	beq.n	80014f8 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 80014f4:	2304      	movs	r3, #4
 80014f6:	e05a      	b.n	80015ae <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3b02      	subs	r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
    p+=2;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	3302      	adds	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b07      	cmp	r3, #7
 8001508:	d94a      	bls.n	80015a0 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800150a:	e002      	b.n	8001512 <AT_RequestReceiveData+0x7e>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3b01      	subs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <AT_RequestReceiveData+0x92>
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3b01      	subs	r3, #1
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b15      	cmp	r3, #21
 8001524:	d0f2      	beq.n	800150c <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3b08      	subs	r3, #8
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	491f      	ldr	r1, [pc, #124]	; (80015b8 <AT_RequestReceiveData+0x124>)
 800153a:	4618      	mov	r0, r3
 800153c:	f009 f988 	bl	800a850 <strstr>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d016      	beq.n	8001574 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	b29b      	uxth	r3, r3
 800154a:	3b08      	subs	r3, #8
 800154c:	b29a      	uxth	r2, r3
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	429a      	cmp	r2, r3
 800155a:	d202      	bcs.n	8001562 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f009 f856 	bl	800a61c <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e01c      	b.n	80015ae <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3b04      	subs	r3, #4
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	2204      	movs	r2, #4
 800157e:	490f      	ldr	r1, [pc, #60]	; (80015bc <AT_RequestReceiveData+0x128>)
 8001580:	4618      	mov	r0, r3
 8001582:	f009 f83d 	bl	800a600 <memcmp>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d104      	bne.n	8001596 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001592:	2305      	movs	r3, #5
 8001594:	e00b      	b.n	80015ae <AT_RequestReceiveData+0x11a>
     }
     
     UNLOCK_WIFI();
     *ReadData = 0;
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	2200      	movs	r2, #0
 800159a:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800159c:	2305      	movs	r3, #5
 800159e:	e006      	b.n	80015ae <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f113 0f04 	cmn.w	r3, #4
 80015a6:	d101      	bne.n	80015ac <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80015a8:	2306      	movs	r3, #6
 80015aa:	e000      	b.n	80015ae <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80015ac:	2304      	movs	r3, #4
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	0800c08c 	.word	0x0800c08c
 80015bc:	0800c0a0 	.word	0x0800c0a0

080015c0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80015c8:	2302      	movs	r3, #2
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f247 5230 	movw	r2, #30000	; 0x7530
 80015d2:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80015dc:	2000      	movs	r0, #0
 80015de:	4798      	blx	r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ec:	461a      	mov	r2, r3
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <ES_WIFI_Init+0x58>)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe7f 	bl	80012f4 <AT_ExecuteCommand>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fd37 	bl	800107c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800c0a8 	.word	0x0800c0a8

0800161c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001648:	2302      	movs	r3, #2
 800164a:	e014      	b.n	8001676 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	4932      	ldr	r1, [pc, #200]	; (8001764 <ES_WIFI_Connect+0xe0>)
 800169c:	4618      	mov	r0, r3
 800169e:	f009 f895 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ae:	461a      	mov	r2, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fe1f 	bl	80012f4 <AT_ExecuteCommand>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d14b      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4927      	ldr	r1, [pc, #156]	; (8001768 <ES_WIFI_Connect+0xe4>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f009 f87e 	bl	800a7cc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016dc:	461a      	mov	r2, r3
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fe08 	bl	80012f4 <AT_ExecuteCommand>
 80016e4:	4603      	mov	r3, r0
 80016e6:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d134      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <ES_WIFI_Connect+0xe8>)
 8001700:	4618      	mov	r0, r3
 8001702:	f009 f863 	bl	800a7cc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001712:	461a      	mov	r2, r3
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fded 	bl	80012f4 <AT_ExecuteCommand>
 800171a:	4603      	mov	r3, r0
 800171c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d119      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800172a:	4911      	ldr	r1, [pc, #68]	; (8001770 <ES_WIFI_Connect+0xec>)
 800172c:	4618      	mov	r0, r3
 800172e:	f009 f84d 	bl	800a7cc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800173e:	461a      	mov	r2, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fdd7 	bl	80012f4 <AT_ExecuteCommand>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001758:	7dfb      	ldrb	r3, [r7, #23]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800c0c0 	.word	0x0800c0c0
 8001768:	0800c0c8 	.word	0x0800c0c8
 800176c:	0800c0d0 	.word	0x0800c0d0
 8001770:	0800c0d8 	.word	0x0800c0d8

08001774 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001782:	4911      	ldr	r1, [pc, #68]	; (80017c8 <ES_WIFI_IsConnected+0x54>)
 8001784:	4618      	mov	r0, r3
 8001786:	f009 f821 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001796:	461a      	mov	r2, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fdab 	bl	80012f4 <AT_ExecuteCommand>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d108      	bne.n	80017ba <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	33d2      	adds	r3, #210	; 0xd2
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f7ff fd87 	bl	80012c8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0800c0dc 	.word	0x0800c0dc

080017cc <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017da:	4910      	ldr	r1, [pc, #64]	; (800181c <ES_WIFI_GetNetworkSettings+0x50>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f008 fff5 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ee:	461a      	mov	r2, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fd7f 	bl	80012f4 <AT_ExecuteCommand>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d108      	bne.n	8001812 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	338d      	adds	r3, #141	; 0x8d
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f7ff fcab 	bl	8001168 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0800c0e4 	.word	0x0800c0e4

08001820 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001830:	4912      	ldr	r1, [pc, #72]	; (800187c <ES_WIFI_GetMACAddress+0x5c>)
 8001832:	4618      	mov	r0, r3
 8001834:	f008 ffca 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001844:	461a      	mov	r2, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd54 	bl	80012f4 <AT_ExecuteCommand>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800185c:	3302      	adds	r3, #2
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <ES_WIFI_GetMACAddress+0x60>)
 8001860:	4618      	mov	r0, r3
 8001862:	f009 f80d 	bl	800a880 <strtok>
 8001866:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f7ff fbb0 	bl	8000fd0 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	0800c140 	.word	0x0800c140
 8001880:	0800c144 	.word	0x0800c144

08001884 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  
    
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	461a      	mov	r2, r3
 800189e:	4949      	ldr	r1, [pc, #292]	; (80019c4 <ES_WIFI_StartServerSingleConn+0x140>)
 80018a0:	f008 ff94 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018b0:	461a      	mov	r2, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fd1e 	bl	80012f4 <AT_ExecuteCommand>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	e079      	b.n	80019ba <ES_WIFI_StartServerSingleConn+0x136>
  }
  
  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d016      	beq.n	80018fc <ES_WIFI_StartServerSingleConn+0x78>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d012      	beq.n	80018fc <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018dc:	493a      	ldr	r1, [pc, #232]	; (80019c8 <ES_WIFI_StartServerSingleConn+0x144>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f008 ff74 	bl	800a7cc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f0:	461a      	mov	r2, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fcfe 	bl	80012f4 <AT_ExecuteCommand>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == ES_WIFI_STATUS_OK)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d15a      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
  {  
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	492f      	ldr	r1, [pc, #188]	; (80019cc <ES_WIFI_StartServerSingleConn+0x148>)
 8001910:	f008 ff5c 	bl	800a7cc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001920:	461a      	mov	r2, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fce6 	bl	80012f4 <AT_ExecuteCommand>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d142      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	461a      	mov	r2, r3
 800193e:	4924      	ldr	r1, [pc, #144]	; (80019d0 <ES_WIFI_StartServerSingleConn+0x14c>)
 8001940:	f008 ff44 	bl	800a7cc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001950:	461a      	mov	r2, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fcce 	bl	80012f4 <AT_ExecuteCommand>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)    
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d12a      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
		    {	
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	461a      	mov	r2, r3
 800196e:	4919      	ldr	r1, [pc, #100]	; (80019d4 <ES_WIFI_StartServerSingleConn+0x150>)
 8001970:	f008 ff2c 	bl	800a7cc <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001980:	461a      	mov	r2, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fcb6 	bl	80012f4 <AT_ExecuteCommand>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d112      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001998:	490f      	ldr	r1, [pc, #60]	; (80019d8 <ES_WIFI_StartServerSingleConn+0x154>)
 800199a:	4618      	mov	r0, r3
 800199c:	f008 ff16 	bl	800a7cc <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ac:	461a      	mov	r2, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fca0 	bl	80012f4 <AT_ExecuteCommand>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	0800c1bc 	.word	0x0800c1bc
 80019c8:	0800c1f4 	.word	0x0800c1f4
 80019cc:	0800c1c4 	.word	0x0800c1c4
 80019d0:	0800c200 	.word	0x0800c200
 80019d4:	0800c1cc 	.word	0x0800c1cc
 80019d8:	0800c208 	.word	0x0800c208

080019dc <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4926      	ldr	r1, [pc, #152]	; (8001a88 <ES_WIFI_StopServerSingleConn+0xac>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 feeb 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a02:	461a      	mov	r2, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fc75 	bl	80012f4 <AT_ExecuteCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG_ES("Selecting socket failed: %s\n", Obj->CmdData);
 8001a14:	f240 7292 	movw	r2, #1938	; 0x792
 8001a18:	491c      	ldr	r1, [pc, #112]	; (8001a8c <ES_WIFI_StopServerSingleConn+0xb0>)
 8001a1a:	481d      	ldr	r0, [pc, #116]	; (8001a90 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001a1c:	f008 fe14 	bl	800a648 <iprintf>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a26:	4619      	mov	r1, r3
 8001a28:	481a      	ldr	r0, [pc, #104]	; (8001a94 <ES_WIFI_StopServerSingleConn+0xb8>)
 8001a2a:	f008 fe0d 	bl	800a648 <iprintf>
    UNLOCK_WIFI();
    return ret;  
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	e025      	b.n	8001a7e <ES_WIFI_StopServerSingleConn+0xa2>
  }
  
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a38:	4917      	ldr	r1, [pc, #92]	; (8001a98 <ES_WIFI_StopServerSingleConn+0xbc>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fec6 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fc50 	bl	80012f4 <AT_ExecuteCommand>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00e      	beq.n	8001a7c <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG_ES("Stopping server failed %s\n", Obj->CmdData);
 8001a5e:	f240 729b 	movw	r2, #1947	; 0x79b
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <ES_WIFI_StopServerSingleConn+0xb0>)
 8001a64:	480a      	ldr	r0, [pc, #40]	; (8001a90 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001a66:	f008 fdef 	bl	800a648 <iprintf>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a70:	4619      	mov	r1, r3
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <ES_WIFI_StopServerSingleConn+0xc0>)
 8001a74:	f008 fde8 	bl	800a648 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e000      	b.n	8001a7e <ES_WIFI_StopServerSingleConn+0xa2>
  }
  
  UNLOCK_WIFI();
  return ret;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800c1bc 	.word	0x0800c1bc
 8001a8c:	0800c23c 	.word	0x0800c23c
 8001a90:	0800c254 	.word	0x0800c254
 8001a94:	0800c2f0 	.word	0x0800c2f0
 8001a98:	0800c310 	.word	0x0800c310
 8001a9c:	0800c318 	.word	0x0800c318

08001aa0 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	460b      	mov	r3, r1
 8001aae:	72fb      	strb	r3, [r7, #11]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001ab8:	893b      	ldrh	r3, [r7, #8]
 8001aba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001abe:	d302      	bcc.n	8001ac6 <ES_WIFI_SendData+0x26>
 8001ac0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001ac4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ad2:	7afa      	ldrb	r2, [r7, #11]
 8001ad4:	4942      	ldr	r1, [pc, #264]	; (8001be0 <ES_WIFI_SendData+0x140>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f008 fe78 	bl	800a7cc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fc02 	bl	80012f4 <AT_ExecuteCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d15e      	bne.n	8001bb8 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	4938      	ldr	r1, [pc, #224]	; (8001be4 <ES_WIFI_SendData+0x144>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 fe61 	bl	800a7cc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b16:	461a      	mov	r2, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff fbeb 	bl	80012f4 <AT_ExecuteCommand>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d13d      	bne.n	8001ba4 <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	492d      	ldr	r1, [pc, #180]	; (8001be8 <ES_WIFI_SendData+0x148>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f008 fe4a 	bl	800a7cc <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff fc2b 	bl	80013a8 <AT_RequestSendData>
 8001b52:	4603      	mov	r3, r0
 8001b54:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <ES_WIFI_SendData+0x14c>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f008 fe73 	bl	800a850 <strstr>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02c      	beq.n	8001bca <ES_WIFI_SendData+0x12a>
        {
          DEBUG_ES("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001b70:	f640 023b 	movw	r2, #2107	; 0x83b
 8001b74:	491e      	ldr	r1, [pc, #120]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001b76:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001b78:	f008 fd66 	bl	800a648 <iprintf>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b82:	4619      	mov	r1, r3
 8001b84:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <ES_WIFI_SendData+0x158>)
 8001b86:	f008 fd5f 	bl	800a648 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	75fb      	strb	r3, [r7, #23]
 8001b8e:	e01c      	b.n	8001bca <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        DEBUG_ES("Send Data command failed\n");
 8001b90:	f640 0241 	movw	r2, #2113	; 0x841
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001b96:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001b98:	f008 fd56 	bl	800a648 <iprintf>
 8001b9c:	4817      	ldr	r0, [pc, #92]	; (8001bfc <ES_WIFI_SendData+0x15c>)
 8001b9e:	f008 fdd9 	bl	800a754 <puts>
 8001ba2:	e012      	b.n	8001bca <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      DEBUG_ES("S2 command failed\n");
 8001ba4:	f640 0246 	movw	r2, #2118	; 0x846
 8001ba8:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001bac:	f008 fd4c 	bl	800a648 <iprintf>
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <ES_WIFI_SendData+0x160>)
 8001bb2:	f008 fdcf 	bl	800a754 <puts>
 8001bb6:	e008      	b.n	8001bca <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   DEBUG_ES("P0 command failed\n");
 8001bb8:	f640 024b 	movw	r2, #2123	; 0x84b
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001bc0:	f008 fd42 	bl	800a648 <iprintf>
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <ES_WIFI_SendData+0x164>)
 8001bc6:	f008 fdc5 	bl	800a754 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d102      	bne.n	8001bd6 <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	0800c1bc 	.word	0x0800c1bc
 8001be4:	0800c35c 	.word	0x0800c35c
 8001be8:	0800c364 	.word	0x0800c364
 8001bec:	0800c370 	.word	0x0800c370
 8001bf0:	0800c23c 	.word	0x0800c23c
 8001bf4:	0800c254 	.word	0x0800c254
 8001bf8:	0800c378 	.word	0x0800c378
 8001bfc:	0800c394 	.word	0x0800c394
 8001c00:	0800c3b0 	.word	0x0800c3b0
 8001c04:	0800c3c4 	.word	0x0800c3c4

08001c08 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	460b      	mov	r3, r1
 8001c16:	72fb      	strb	r3, [r7, #11]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001c20:	893b      	ldrh	r3, [r7, #8]
 8001c22:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001c26:	f200 808b 	bhi.w	8001d40 <ES_WIFI_ReceiveData+0x138>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c30:	7afa      	ldrb	r2, [r7, #11]
 8001c32:	4946      	ldr	r1, [pc, #280]	; (8001d4c <ES_WIFI_ReceiveData+0x144>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f008 fdc9 	bl	800a7cc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c46:	461a      	mov	r2, r3
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff fb53 	bl	80012f4 <AT_ExecuteCommand>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d165      	bne.n	8001d24 <ES_WIFI_ReceiveData+0x11c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c5e:	893a      	ldrh	r2, [r7, #8]
 8001c60:	493b      	ldr	r1, [pc, #236]	; (8001d50 <ES_WIFI_ReceiveData+0x148>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f008 fdb2 	bl	800a7cc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c74:	461a      	mov	r2, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fb3c 	bl	80012f4 <AT_ExecuteCommand>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	75fb      	strb	r3, [r7, #23]
      if(ret == ES_WIFI_STATUS_OK)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d141      	bne.n	8001d0a <ES_WIFI_ReceiveData+0x102>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	4931      	ldr	r1, [pc, #196]	; (8001d54 <ES_WIFI_ReceiveData+0x14c>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f008 fd9b 	bl	800a7cc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fb25 	bl	80012f4 <AT_ExecuteCommand>
 8001caa:	4603      	mov	r3, r0
 8001cac:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d120      	bne.n	8001cf6 <ES_WIFI_ReceiveData+0xee>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cba:	4927      	ldr	r1, [pc, #156]	; (8001d58 <ES_WIFI_ReceiveData+0x150>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f008 fd85 	bl	800a7cc <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fbde 	bl	8001494 <AT_RequestReceiveData>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	75fb      	strb	r3, [r7, #23]
          if (ret != ES_WIFI_STATUS_OK)
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02e      	beq.n	8001d40 <ES_WIFI_ReceiveData+0x138>
          {
            DEBUG_ES("AT_RequestReceiveData  failed\n");
 8001ce2:	f640 02c4 	movw	r2, #2244	; 0x8c4
 8001ce6:	491d      	ldr	r1, [pc, #116]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001ce8:	481d      	ldr	r0, [pc, #116]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001cea:	f008 fcad 	bl	800a648 <iprintf>
 8001cee:	481d      	ldr	r0, [pc, #116]	; (8001d64 <ES_WIFI_ReceiveData+0x15c>)
 8001cf0:	f008 fd30 	bl	800a754 <puts>
 8001cf4:	e024      	b.n	8001d40 <ES_WIFI_ReceiveData+0x138>
          }
        }
        else
        {
         DEBUG_ES("setting timeout failed\n");
 8001cf6:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8001cfa:	4918      	ldr	r1, [pc, #96]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001cfc:	4818      	ldr	r0, [pc, #96]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001cfe:	f008 fca3 	bl	800a648 <iprintf>
 8001d02:	4819      	ldr	r0, [pc, #100]	; (8001d68 <ES_WIFI_ReceiveData+0x160>)
 8001d04:	f008 fd26 	bl	800a754 <puts>
 8001d08:	e01a      	b.n	8001d40 <ES_WIFI_ReceiveData+0x138>
        }
      }
      else
      {
        DEBUG_ES("setting requested len failed\n");
 8001d0a:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001d0e:	4913      	ldr	r1, [pc, #76]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001d12:	f008 fc99 	bl	800a648 <iprintf>
 8001d16:	4815      	ldr	r0, [pc, #84]	; (8001d6c <ES_WIFI_ReceiveData+0x164>)
 8001d18:	f008 fd1c 	bl	800a754 <puts>
        *Receivedlen = 0;
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	e00d      	b.n	8001d40 <ES_WIFI_ReceiveData+0x138>
      }
    }
    else
    {
      DEBUG_ES("setting socket for read failed\n");
 8001d24:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001d2c:	f008 fc8c 	bl	800a648 <iprintf>
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <ES_WIFI_ReceiveData+0x168>)
 8001d32:	f008 fd0f 	bl	800a754 <puts>
      issue15++;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <ES_WIFI_ReceiveData+0x16c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <ES_WIFI_ReceiveData+0x16c>)
 8001d3e:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	0800c1bc 	.word	0x0800c1bc
 8001d50:	0800c3e8 	.word	0x0800c3e8
 8001d54:	0800c3f0 	.word	0x0800c3f0
 8001d58:	0800c3f8 	.word	0x0800c3f8
 8001d5c:	0800c23c 	.word	0x0800c23c
 8001d60:	0800c254 	.word	0x0800c254
 8001d64:	0800c3fc 	.word	0x0800c3fc
 8001d68:	0800c41c 	.word	0x0800c41c
 8001d6c:	0800c434 	.word	0x0800c434
 8001d70:	0800c454 	.word	0x0800c454
 8001d74:	200000f4 	.word	0x200000f4

08001d78 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	/* SPI initialization is completed during board initialization, and should not be repeated
	 * here. See:
	 * 	MX_SPI3_Init()
	 */

	return SPI_WIFI_ResetModule();
 8001d82:	f000 f805 	bl	8001d90 <SPI_WIFI_ResetModule>
 8001d86:	4603      	mov	r3, r0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <SPI_WIFI_ResetModule>:

#endif


int8_t SPI_WIFI_ResetModule(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001d96:	f002 fb63 	bl	8004460 <HAL_GetTick>
 8001d9a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	4830      	ldr	r0, [pc, #192]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001da8:	f002 ff22 	bl	8004bf0 <HAL_GPIO_WritePin>
 8001dac:	200a      	movs	r0, #10
 8001dae:	f002 fb63 	bl	8004478 <HAL_Delay>
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db8:	482b      	ldr	r0, [pc, #172]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001dba:	f002 ff19 	bl	8004bf0 <HAL_GPIO_WritePin>
 8001dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc2:	f002 fb59 	bl	8004478 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4827      	ldr	r0, [pc, #156]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001dcc:	f002 ff10 	bl	8004bf0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f000 f9cd 	bl	8002170 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001dd6:	e020      	b.n	8001e1a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 0xFFFF);
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	463a      	mov	r2, r7
 8001ddc:	18d1      	adds	r1, r2, r3
 8001dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de2:	2201      	movs	r2, #1
 8001de4:	4821      	ldr	r0, [pc, #132]	; (8001e6c <SPI_WIFI_ResetModule+0xdc>)
 8001de6:	f005 f8a6 	bl	8006f36 <HAL_SPI_Receive>
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3302      	adds	r3, #2
 8001df2:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001df4:	f002 fb34 	bl	8004460 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d202      	bcs.n	8001e0a <SPI_WIFI_ResetModule+0x7a>
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4816      	ldr	r0, [pc, #88]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001e10:	f002 feee 	bl	8004bf0 <HAL_GPIO_WritePin>
      return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e021      	b.n	8001e5e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001e1e:	f002 fecf 	bl	8004bc0 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d0d7      	beq.n	8001dd8 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001e2e:	f002 fedf 	bl	8004bf0 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e32:	783b      	ldrb	r3, [r7, #0]
 8001e34:	2b15      	cmp	r3, #21
 8001e36:	d10e      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b15      	cmp	r3, #21
 8001e3c:	d10b      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
 8001e3e:	78bb      	ldrb	r3, [r7, #2]
 8001e40:	2b0d      	cmp	r3, #13
 8001e42:	d108      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e44:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e46:	2b0a      	cmp	r3, #10
 8001e48:	d105      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e4a:	793b      	ldrb	r3, [r7, #4]
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	d102      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
 8001e50:	797b      	ldrb	r3, [r7, #5]
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d002      	beq.n	8001e5c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e000      	b.n	8001e5e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	20002078 	.word	0x20002078

08001e70 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <SPI_WIFI_DeInit+0x10>)
 8001e76:	f005 f836 	bl	8006ee6 <HAL_SPI_DeInit>
  RTOS_FREE_SEM_MUTEX();
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20002078 	.word	0x20002078

08001e84 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001e8c:	f002 fae8 	bl	8004460 <HAL_GetTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001e94:	e00a      	b.n	8001eac <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e96:	f002 fae3 	bl	8004460 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad2      	subs	r2, r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d902      	bls.n	8001eac <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e007      	b.n	8001ebc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001eac:	2102      	movs	r1, #2
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <wait_cmddata_rdy_high+0x40>)
 8001eb0:	f002 fe86 	bl	8004bc0 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d1ed      	bne.n	8001e96 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	48001000 	.word	0x48001000

08001ec8 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001ed0:	f002 fac6 	bl	8004460 <HAL_GetTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001ed8:	e00a      	b.n	8001ef0 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001eda:	f002 fac1 	bl	8004460 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d902      	bls.n	8001ef0 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e004      	b.n	8001efa <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <wait_cmddata_rdy_rising_event+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d0f0      	beq.n	8001eda <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 8001ef8:	2300      	movs	r3, #0
#endif
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000100 	.word	0x20000100

08001f08 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001f10:	f002 faa6 	bl	8004460 <HAL_GetTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001f18:	e00a      	b.n	8001f30 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f1a:	f002 faa1 	bl	8004460 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d902      	bls.n	8001f30 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e004      	b.n	8001f3a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <wait_spi_rx_event+0x3c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d0f0      	beq.n	8001f1a <wait_spi_rx_event+0x12>
    }
  }
  return 0; 
 8001f38:	2300      	movs	r3, #0
#endif
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000f8 	.word	0x200000f8

08001f48 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001f50:	f002 fa86 	bl	8004460 <HAL_GetTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001f58:	e00a      	b.n	8001f70 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f5a:	f002 fa81 	bl	8004460 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d902      	bls.n	8001f70 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e004      	b.n	8001f7a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <wait_spi_tx_event+0x3c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d0f0      	beq.n	8001f5a <wait_spi_tx_event+0x12>
    }
  }
  return 0; 
 8001f78:	2300      	movs	r3, #0
#endif
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200000fc 	.word	0x200000fc

08001f88 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	460b      	mov	r3, r1
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4834      	ldr	r0, [pc, #208]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8001fa0:	f002 fe26 	bl	8004bf0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f8e3 	bl	8002170 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff8b 	bl	8001ec8 <wait_cmddata_rdy_rising_event>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da02      	bge.n	8001fbe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001fb8:	f06f 0302 	mvn.w	r3, #2
 8001fbc:	e054      	b.n	8002068 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	482b      	ldr	r0, [pc, #172]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8001fc4:	f002 fe14 	bl	8004bf0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001fc8:	200f      	movs	r0, #15
 8001fca:	f000 f8d1 	bl	8002170 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001fce:	e03d      	b.n	800204c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	db02      	blt.n	8001fe0 <SPI_WIFI_ReceiveData+0x58>
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d13c      	bne.n	800205a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <SPI_WIFI_ReceiveData+0xec>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi3, tmp, 1) != HAL_OK) {
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	4822      	ldr	r0, [pc, #136]	; (8002078 <SPI_WIFI_ReceiveData+0xf0>)
 8001ff0:	f005 fb72 	bl	80076d8 <HAL_SPI_Receive_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	481c      	ldr	r0, [pc, #112]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8002000:	f002 fdf6 	bl	8004bf0 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	e02e      	b.n	8002068 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff7b 	bl	8001f08 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002012:	7d3a      	ldrb	r2, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	7d7a      	ldrb	r2, [r7, #21]
 800201e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	3302      	adds	r3, #2
 8002024:	b29b      	uxth	r3, r3
 8002026:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3302      	adds	r3, #2
 800202c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800202e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002032:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002036:	db09      	blt.n	800204c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002038:	2201      	movs	r2, #1
 800203a:	2101      	movs	r1, #1
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 800203e:	f002 fdd7 	bl	8004bf0 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 8002042:	f7ff fea5 	bl	8001d90 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002046:	f06f 0303 	mvn.w	r3, #3
 800204a:	e00d      	b.n	8002068 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800204c:	2102      	movs	r1, #2
 800204e:	4808      	ldr	r0, [pc, #32]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8002050:	f002 fdb6 	bl	8004bc0 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d0ba      	beq.n	8001fd0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 800205a:	2201      	movs	r2, #1
 800205c:	2101      	movs	r1, #1
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8002060:	f002 fdc6 	bl	8004bf0 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	48001000 	.word	0x48001000
 8002074:	200000f8 	.word	0x200000f8
 8002078:	20002078 	.word	0x20002078

0800207c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	460b      	mov	r3, r1
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fef9 	bl	8001e84 <wait_cmddata_rdy_high>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	da02      	bge.n	800209e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	e04f      	b.n	800213e <SPI_WIFI_SendData+0xc2>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <SPI_WIFI_SendData+0xcc>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80020a4:	2200      	movs	r2, #0
 80020a6:	2101      	movs	r1, #1
 80020a8:	4828      	ldr	r0, [pc, #160]	; (800214c <SPI_WIFI_SendData+0xd0>)
 80020aa:	f002 fda1 	bl	8004bf0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f000 f85e 	bl	8002170 <SPI_WIFI_DelayUs>
  if (len > 1)
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d919      	bls.n	80020ee <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <SPI_WIFI_SendData+0xd4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, (uint8_t *)pdata , len/2) != HAL_OK)
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4822      	ldr	r0, [pc, #136]	; (8002154 <SPI_WIFI_SendData+0xd8>)
 80020cc:	f005 fa76 	bl	80075bc <HAL_SPI_Transmit_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80020d6:	2201      	movs	r2, #1
 80020d8:	2101      	movs	r1, #1
 80020da:	481c      	ldr	r0, [pc, #112]	; (800214c <SPI_WIFI_SendData+0xd0>)
 80020dc:	f002 fd88 	bl	8004bf0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	e02b      	b.n	800213e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff2d 	bl	8001f48 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002104:	230a      	movs	r3, #10
 8002106:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <SPI_WIFI_SendData+0xd4>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, Padding, 1) != HAL_OK)
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	480f      	ldr	r0, [pc, #60]	; (8002154 <SPI_WIFI_SendData+0xd8>)
 8002118:	f005 fa50 	bl	80075bc <HAL_SPI_Transmit_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002122:	2201      	movs	r2, #1
 8002124:	2101      	movs	r1, #1
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <SPI_WIFI_SendData+0xd0>)
 8002128:	f002 fd62 	bl	8004bf0 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	e005      	b.n	800213e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff07 	bl	8001f48 <wait_spi_tx_event>
    
  }
  return len;
 800213a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000100 	.word	0x20000100
 800214c:	48001000 	.word	0x48001000
 8002150:	200000fc 	.word	0x200000fc
 8002154:	20002078 	.word	0x20002078

08002158 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f002 f989 	bl	8004478 <HAL_Delay>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	uint32_t       loop_per_us;
	static  uint32_t cycle_per_loop=0;

	// calibration happen on first call for a duration of 1 ms * nbcycle per loop
	// 10 cycle for STM32L4
	if (cycle_per_loop == 0 )
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d120      	bne.n	80021c2 <SPI_WIFI_DelayUs+0x52>
	{
		uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <SPI_WIFI_DelayUs+0x8c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <SPI_WIFI_DelayUs+0x90>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	617b      	str	r3, [r7, #20]
		uint32_t   t;
		ct=cycle_per_ms;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	60bb      	str	r3, [r7, #8]
		t=HAL_GetTick();
 8002192:	f002 f965 	bl	8004460 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]
		while(ct) ct--;
 8002198:	e002      	b.n	80021a0 <SPI_WIFI_DelayUs+0x30>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <SPI_WIFI_DelayUs+0x2a>
		cycle_per_loop=HAL_GetTick()-t;
 80021a6:	f002 f95b 	bl	8004460 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021b2:	6013      	str	r3, [r2, #0]
		if (cycle_per_loop==0) cycle_per_loop=1;
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <SPI_WIFI_DelayUs+0x52>
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
	}

	loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <SPI_WIFI_DelayUs+0x8c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <SPI_WIFI_DelayUs+0x94>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	60fb      	str	r3, [r7, #12]
	ct = n * loop_per_us;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	60bb      	str	r3, [r7, #8]
	while(ct) ct--;
 80021e2:	e002      	b.n	80021ea <SPI_WIFI_DelayUs+0x7a>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <SPI_WIFI_DelayUs+0x74>
	return;
 80021f0:	bf00      	nop
}
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000104 	.word	0x20000104
 80021fc:	20000004 	.word	0x20000004
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	431bde83 	.word	0x431bde83

08002208 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_SPI_RxCpltCallback+0x24>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_SPI_RxCpltCallback+0x24>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200000f8 	.word	0x200000f8

08002230 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_SPI_TxCpltCallback+0x24>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_SPI_TxCpltCallback+0x24>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	200000fc 	.word	0x200000fc

08002258 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <vApplicationGetIdleTaskMemory+0x2c>)
 8002268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <vApplicationGetIdleTaskMemory+0x30>)
 800226e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000108 	.word	0x20000108
 8002288:	2000015c 	.word	0x2000015c

0800228c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	b29a      	uxth	r2, r3
 800229c:	230a      	movs	r3, #10
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	4803      	ldr	r0, [pc, #12]	; (80022b0 <_write+0x24>)
 80022a2:	f006 fab3 	bl	800880c <HAL_UART_Transmit>
	return len;
 80022a6:	687b      	ldr	r3, [r7, #4]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200020e0 	.word	0x200020e0

080022b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b0aa      	sub	sp, #168	; 0xa8
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ba:	f002 f8a4 	bl	8004406 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022be:	f000 f891 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c2:	f000 f973 	bl	80025ac <MX_GPIO_Init>
  MX_SPI3_Init();
 80022c6:	f000 f903 	bl	80024d0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80022ca:	f000 f93f 	bl	800254c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <main+0x100>)
 80022d0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80022d4:	461d      	mov	r5, r3
 80022d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 ff33 	bl	8009154 <osThreadCreate>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <main+0x104>)
 80022f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of readTemp */
  osThreadDef(readTemp, StartReadTemp, osPriorityNormal, 0, 128);
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <main+0x108>)
 80022f6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80022fa:	461d      	mov	r5, r3
 80022fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002300:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempHandle = osThreadCreate(osThread(readTemp), NULL);
 8002308:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f006 ff20 	bl	8009154 <osThreadCreate>
 8002314:	4603      	mov	r3, r0
 8002316:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <main+0x10c>)
 8002318:	6013      	str	r3, [r2, #0]

  /* definition and creation of readHumidity */
  osThreadDef(readHumidity, StartReadHum, osPriorityNormal, 0, 128);
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <main+0x110>)
 800231c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002320:	461d      	mov	r5, r3
 8002322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800232a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readHumidityHandle = osThreadCreate(osThread(readHumidity), NULL);
 800232e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f006 ff0d 	bl	8009154 <osThreadCreate>
 800233a:	4603      	mov	r3, r0
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <main+0x114>)
 800233e:	6013      	str	r3, [r2, #0]

  /* definition and creation of readPressure */
  osThreadDef(readPressure, StartReadPressure, osPriorityNormal, 0, 128);
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <main+0x118>)
 8002342:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002346:	461d      	mov	r5, r3
 8002348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800234c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readPressureHandle = osThreadCreate(osThread(readPressure), NULL);
 8002354:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f006 fefa 	bl	8009154 <osThreadCreate>
 8002360:	4603      	mov	r3, r0
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <main+0x11c>)
 8002364:	6013      	str	r3, [r2, #0]

  /* definition and creation of readMagneto */
  osThreadDef(readMagneto, StartReadMagnetometer, osPriorityNormal, 0, 128);
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <main+0x120>)
 8002368:	f107 041c 	add.w	r4, r7, #28
 800236c:	461d      	mov	r5, r3
 800236e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readMagnetoHandle = osThreadCreate(osThread(readMagneto), NULL);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fee7 	bl	8009154 <osThreadCreate>
 8002386:	4603      	mov	r3, r0
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <main+0x124>)
 800238a:	6013      	str	r3, [r2, #0]

  /* definition and creation of WebServer */
  osThreadDef(WebServer, StartWebServer, osPriorityNormal, 0, 128);
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <main+0x128>)
 800238e:	463c      	mov	r4, r7
 8002390:	461d      	mov	r5, r3
 8002392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800239a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerHandle = osThreadCreate(osThread(WebServer), NULL);
 800239e:	463b      	mov	r3, r7
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f006 fed6 	bl	8009154 <osThreadCreate>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <main+0x12c>)
 80023ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80023ae:	f006 feca 	bl	8009146 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <main+0xfe>
 80023b4:	0800c55c 	.word	0x0800c55c
 80023b8:	20002064 	.word	0x20002064
 80023bc:	0800c578 	.word	0x0800c578
 80023c0:	20002070 	.word	0x20002070
 80023c4:	0800c594 	.word	0x0800c594
 80023c8:	20002174 	.word	0x20002174
 80023cc:	0800c5b0 	.word	0x0800c5b0
 80023d0:	2000206c 	.word	0x2000206c
 80023d4:	0800c5cc 	.word	0x0800c5cc
 80023d8:	20002164 	.word	0x20002164
 80023dc:	0800c5e8 	.word	0x0800c5e8
 80023e0:	20002170 	.word	0x20002170

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0b8      	sub	sp, #224	; 0xe0
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023ee:	2244      	movs	r2, #68	; 0x44
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 f920 	bl	800a638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	463b      	mov	r3, r7
 800240a:	2288      	movs	r2, #136	; 0x88
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f008 f912 	bl	800a638 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800241a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002422:	2310      	movs	r3, #16
 8002424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800242e:	2302      	movs	r3, #2
 8002430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002434:	2301      	movs	r3, #1
 8002436:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800243a:	230a      	movs	r3, #10
 800243c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002440:	2307      	movs	r3, #7
 8002442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800244c:	2302      	movs	r3, #2
 800244e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002456:	4618      	mov	r0, r3
 8002458:	f003 f9c8 	bl	80057ec <HAL_RCC_OscConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002462:	f000 fb31 	bl	8002ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002466:	230f      	movs	r3, #15
 8002468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246c:	2303      	movs	r3, #3
 800246e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002484:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002488:	2104      	movs	r1, #4
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fd94 	bl	8005fb8 <HAL_RCC_ClockConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002496:	f000 fb17 	bl	8002ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800249a:	2301      	movs	r3, #1
 800249c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800249e:	2300      	movs	r3, #0
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a2:	463b      	mov	r3, r7
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 ffbf 	bl	8006428 <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80024b0:	f000 fb0a 	bl	8002ac8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024b8:	f003 f942 	bl	8005740 <HAL_PWREx_ControlVoltageScaling>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80024c2:	f000 fb01 	bl	8002ac8 <Error_Handler>
  }
}
 80024c6:	bf00      	nop
 80024c8:	37e0      	adds	r7, #224	; 0xe0
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <MX_SPI3_Init+0x74>)
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <MX_SPI3_Init+0x78>)
 80024d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_SPI3_Init+0x74>)
 80024dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_SPI3_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_SPI3_Init+0x74>)
 80024ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80024ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MX_SPI3_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_SPI3_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_SPI3_Init+0x74>)
 80024fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002502:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_SPI3_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_SPI3_Init+0x74>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_SPI3_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <MX_SPI3_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_SPI3_Init+0x74>)
 800251e:	2207      	movs	r2, #7
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <MX_SPI3_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_SPI3_Init+0x74>)
 800252a:	2208      	movs	r2, #8
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_SPI3_Init+0x74>)
 8002530:	f004 fc36 	bl	8006da0 <HAL_SPI_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800253a:	f000 fac5 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20002078 	.word	0x20002078
 8002548:	40003c00 	.word	0x40003c00

0800254c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <MX_USART1_UART_Init+0x5c>)
 8002554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800255c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_USART1_UART_Init+0x58>)
 8002590:	f006 f8ee 	bl	8008770 <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800259a:	f000 fa95 	bl	8002ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200020e0 	.word	0x200020e0
 80025a8:	40013800 	.word	0x40013800

080025ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 030c 	add.w	r3, r7, #12
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <MX_GPIO_Init+0x90>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <MX_GPIO_Init+0x90>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <MX_GPIO_Init+0x90>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_GPIO_Init+0x90>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <MX_GPIO_Init+0x90>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_GPIO_Init+0x90>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_GPIO_Init+0x90>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <MX_GPIO_Init+0x90>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_GPIO_Init+0x90>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002610:	480b      	ldr	r0, [pc, #44]	; (8002640 <MX_GPIO_Init+0x94>)
 8002612:	f002 faed 	bl	8004bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <MX_GPIO_Init+0x94>)
 8002630:	f002 f828 	bl	8004684 <HAL_GPIO_Init>

}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	48000400 	.word	0x48000400

08002644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 // HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	 osDelay(1000);
 800264c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002650:	f006 fdcc 	bl	80091ec <osDelay>
 8002654:	e7fa      	b.n	800264c <StartDefaultTask+0x8>
	...

08002658 <StartReadTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTemp */
void StartReadTemp(void const * argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af02      	add	r7, sp, #8
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTemp */
	float temp_value = 0;
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
	char *str_tmp = "Temperatura = %d.%02d°C\n\r";
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <StartReadTemp+0xa0>)
 8002668:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_tmp)];
	int tmpInt1, tmpInt2;
	float tmpFrac;

	BSP_TSENSOR_Init();
 800266a:	f001 fb51 	bl	8003d10 <BSP_TSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		temp_value = BSP_TSENSOR_ReadTemp();
 800266e:	f001 fb6b 	bl	8003d48 <BSP_TSENSOR_ReadTemp>
 8002672:	ed87 0a07 	vstr	s0, [r7, #28]
		tmpInt1 = temp_value;
 8002676:	edd7 7a07 	vldr	s15, [r7, #28]
 800267a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800267e:	ee17 3a90 	vmov	r3, s15
 8002682:	617b      	str	r3, [r7, #20]
		tmpFrac = temp_value - tmpInt1;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002696:	edc7 7a04 	vstr	s15, [r7, #16]
		tmpInt2 = trunc(tmpFrac * 100);
 800269a:	edd7 7a04 	vldr	s15, [r7, #16]
 800269e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80026fc <StartReadTemp+0xa4>
 80026a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a6:	ee17 0a90 	vmov	r0, s15
 80026aa:	f7fd ff4d 	bl	8000548 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ec43 2b10 	vmov	d0, r2, r3
 80026b6:	f009 fc51 	bl	800bf5c <trunc>
 80026ba:	ec53 2b10 	vmov	r2, r3, d0
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe fa33 	bl	8000b2c <__aeabi_d2iz>
 80026c6:	4603      	mov	r3, r0
 80026c8:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_tmp, tmpInt1, tmpInt2);
 80026ca:	f107 0008 	add.w	r0, r7, #8
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	2104      	movs	r1, #4
 80026d8:	f008 f844 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
 80026dc:	f107 0108 	add.w	r1, r7, #8
 80026e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e4:	2204      	movs	r2, #4
 80026e6:	4806      	ldr	r0, [pc, #24]	; (8002700 <StartReadTemp+0xa8>)
 80026e8:	f006 f890 	bl	800880c <HAL_UART_Transmit>
		osDelay(delay);
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <StartReadTemp+0xac>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 fd7b 	bl	80091ec <osDelay>
		temp_value = BSP_TSENSOR_ReadTemp();
 80026f6:	e7ba      	b.n	800266e <StartReadTemp+0x16>
 80026f8:	0800c604 	.word	0x0800c604
 80026fc:	42c80000 	.word	0x42c80000
 8002700:	200020e0 	.word	0x200020e0
 8002704:	20000002 	.word	0x20000002

08002708 <StartReadHum>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadHum */
void StartReadHum(void const * argument)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadHum */
  /* Infinite loop */
	float hum_value = 0;
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
	char *str_hum = "Umidita' = %d.%02d\n\r";
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <StartReadHum+0xa0>)
 8002718:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_hum)];
	int humInt1, humInt2;
	float humFrac;

	BSP_HSENSOR_Init();
 800271a:	f001 fa59 	bl	8003bd0 <BSP_HSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		hum_value = BSP_HSENSOR_ReadHumidity();
 800271e:	f001 fa77 	bl	8003c10 <BSP_HSENSOR_ReadHumidity>
 8002722:	ed87 0a07 	vstr	s0, [r7, #28]
		humInt1 = hum_value;
 8002726:	edd7 7a07 	vldr	s15, [r7, #28]
 800272a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272e:	ee17 3a90 	vmov	r3, s15
 8002732:	617b      	str	r3, [r7, #20]
		humFrac = hum_value - humInt1;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002746:	edc7 7a04 	vstr	s15, [r7, #16]
		humInt2 = trunc(humFrac * 100);
 800274a:	edd7 7a04 	vldr	s15, [r7, #16]
 800274e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80027ac <StartReadHum+0xa4>
 8002752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002756:	ee17 0a90 	vmov	r0, s15
 800275a:	f7fd fef5 	bl	8000548 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ec43 2b10 	vmov	d0, r2, r3
 8002766:	f009 fbf9 	bl	800bf5c <trunc>
 800276a:	ec53 2b10 	vmov	r2, r3, d0
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe f9db 	bl	8000b2c <__aeabi_d2iz>
 8002776:	4603      	mov	r3, r0
 8002778:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_hum, humInt1, humInt2);
 800277a:	f107 0008 	add.w	r0, r7, #8
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	2104      	movs	r1, #4
 8002788:	f007 ffec 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_hum), 1000);
 800278c:	f107 0108 	add.w	r1, r7, #8
 8002790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002794:	2204      	movs	r2, #4
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <StartReadHum+0xa8>)
 8002798:	f006 f838 	bl	800880c <HAL_UART_Transmit>
		osDelay(delay);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <StartReadHum+0xac>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f006 fd23 	bl	80091ec <osDelay>
		hum_value = BSP_HSENSOR_ReadHumidity();
 80027a6:	e7ba      	b.n	800271e <StartReadHum+0x16>
 80027a8:	0800c620 	.word	0x0800c620
 80027ac:	42c80000 	.word	0x42c80000
 80027b0:	200020e0 	.word	0x200020e0
 80027b4:	20000002 	.word	0x20000002

080027b8 <StartReadPressure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadPressure */
void StartReadPressure(void const * argument)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadPressure */
	float pres_value = 0;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
	char *str_pres = "Pressione = %d.%02d hPa\n\r";
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <StartReadPressure+0xa0>)
 80027c8:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_pres)];
	int presInt1, presInt2;
	float presFrac;

	BSP_PSENSOR_Init();
 80027ca:	f001 fa73 	bl	8003cb4 <BSP_PSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		pres_value = BSP_PSENSOR_ReadPressure();
 80027ce:	f001 fa91 	bl	8003cf4 <BSP_PSENSOR_ReadPressure>
 80027d2:	ed87 0a07 	vstr	s0, [r7, #28]
		presInt1 = pres_value;
 80027d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80027da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027de:	ee17 3a90 	vmov	r3, s15
 80027e2:	617b      	str	r3, [r7, #20]
		presFrac = pres_value - presInt1;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80027f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f6:	edc7 7a04 	vstr	s15, [r7, #16]
		presInt2 = trunc(presFrac * 100);
 80027fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80027fe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800285c <StartReadPressure+0xa4>
 8002802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002806:	ee17 0a90 	vmov	r0, s15
 800280a:	f7fd fe9d 	bl	8000548 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	ec43 2b10 	vmov	d0, r2, r3
 8002816:	f009 fba1 	bl	800bf5c <trunc>
 800281a:	ec53 2b10 	vmov	r2, r3, d0
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f7fe f983 	bl	8000b2c <__aeabi_d2iz>
 8002826:	4603      	mov	r3, r0
 8002828:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_pres, presInt1, presInt2);
 800282a:	f107 0008 	add.w	r0, r7, #8
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	2104      	movs	r1, #4
 8002838:	f007 ff94 	bl	800a764 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_pres), 1000);
 800283c:	f107 0108 	add.w	r1, r7, #8
 8002840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002844:	2204      	movs	r2, #4
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <StartReadPressure+0xa8>)
 8002848:	f005 ffe0 	bl	800880c <HAL_UART_Transmit>
		osDelay(delay);
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <StartReadPressure+0xac>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f006 fccb 	bl	80091ec <osDelay>
		pres_value = BSP_PSENSOR_ReadPressure();
 8002856:	e7ba      	b.n	80027ce <StartReadPressure+0x16>
 8002858:	0800c638 	.word	0x0800c638
 800285c:	42c80000 	.word	0x42c80000
 8002860:	200020e0 	.word	0x200020e0
 8002864:	20000002 	.word	0x20000002

08002868 <StartReadMagnetometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadMagnetometer */
void StartReadMagnetometer(void const * argument)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b092      	sub	sp, #72	; 0x48
 800286c:	af02      	add	r7, sp, #8
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadMagnetometer */
	int16_t xyz[3];
	int16_t x, y;
	char *str_tmp = "Direzione del nord = %d.%02d°\n\r";
 8002870:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <StartReadMagnetometer+0x1f8>)
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
	char output_str[sizeof(str_tmp)];
	double direction, magnFrac;
	int magnInt1, magnInt2;
	double declination_angle = 3.45;
 8002874:	a374      	add	r3, pc, #464	; (adr r3, 8002a48 <StartReadMagnetometer+0x1e0>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28


	BSP_MAGNETO_Init();
 800287e:	f001 f9d5 	bl	8003c2c <BSP_MAGNETO_Init>
	/* Infinite loop */
	for(;;)
	{
		BSP_MAGNETO_GetXYZ(xyz);
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f9fc 	bl	8003c84 <BSP_MAGNETO_GetXYZ>
		x = xyz[0];
 800288c:	89bb      	ldrh	r3, [r7, #12]
 800288e:	84fb      	strh	r3, [r7, #38]	; 0x26
		y = xyz[1];
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	84bb      	strh	r3, [r7, #36]	; 0x24

		if(y > 0)
 8002894:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002898:	2b00      	cmp	r3, #0
 800289a:	dd2a      	ble.n	80028f2 <StartReadMagnetometer+0x8a>
			direction = 90 - (atan(x/y) * 180/M_PI);
 800289c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80028a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80028a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe3b 	bl	8000524 <__aeabi_i2d>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	ec43 2b10 	vmov	d0, r2, r3
 80028b6:	f009 f9a7 	bl	800bc08 <atan>
 80028ba:	ec51 0b10 	vmov	r0, r1, d0
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <StartReadMagnetometer+0x1fc>)
 80028c4:	f7fd fe98 	bl	80005f8 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	a35f      	add	r3, pc, #380	; (adr r3, 8002a50 <StartReadMagnetometer+0x1e8>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd ffb9 	bl	800084c <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	4961      	ldr	r1, [pc, #388]	; (8002a68 <StartReadMagnetometer+0x200>)
 80028e4:	f7fd fcd0 	bl	8000288 <__aeabi_dsub>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80028f0:	e050      	b.n	8002994 <StartReadMagnetometer+0x12c>
		else if(y < 0)
 80028f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da2a      	bge.n	8002950 <StartReadMagnetometer+0xe8>
			direction = 270 - (atan(x/y) * 180/M_PI);
 80028fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80028fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002902:	fb92 f3f3 	sdiv	r3, r2, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe0c 	bl	8000524 <__aeabi_i2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	ec43 2b10 	vmov	d0, r2, r3
 8002914:	f009 f978 	bl	800bc08 <atan>
 8002918:	ec51 0b10 	vmov	r0, r1, d0
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <StartReadMagnetometer+0x1fc>)
 8002922:	f7fd fe69 	bl	80005f8 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	a348      	add	r3, pc, #288	; (adr r3, 8002a50 <StartReadMagnetometer+0x1e8>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd ff8a 	bl	800084c <__aeabi_ddiv>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	a146      	add	r1, pc, #280	; (adr r1, 8002a58 <StartReadMagnetometer+0x1f0>)
 800293e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002942:	f7fd fca1 	bl	8000288 <__aeabi_dsub>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800294e:	e021      	b.n	8002994 <StartReadMagnetometer+0x12c>
		else if(y == 0 && x < 0)
 8002950:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <StartReadMagnetometer+0x104>
 8002958:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800295c:	2b00      	cmp	r3, #0
 800295e:	da05      	bge.n	800296c <StartReadMagnetometer+0x104>
			direction = 180.0;
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <StartReadMagnetometer+0x1fc>)
 8002966:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800296a:	e013      	b.n	8002994 <StartReadMagnetometer+0x12c>
		else if(y == 0 && x > 0)
 800296c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <StartReadMagnetometer+0x122>
 8002974:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002978:	2b00      	cmp	r3, #0
 800297a:	dd06      	ble.n	800298a <StartReadMagnetometer+0x122>
			direction = 0.0;
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002988:	e004      	b.n	8002994 <StartReadMagnetometer+0x12c>
		else
			direction = -1.0;
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <StartReadMagnetometer+0x204>)
 8002990:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		if(direction != -1.0){
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <StartReadMagnetometer+0x204>)
 800299a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800299e:	f7fe f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d146      	bne.n	8002a36 <StartReadMagnetometer+0x1ce>
			direction += declination_angle;
 80029a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029b0:	f7fd fc6c 	bl	800028c <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			magnInt1 = direction;
 80029bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029c0:	f7fe f8b4 	bl	8000b2c <__aeabi_d2iz>
 80029c4:	4603      	mov	r3, r0
 80029c6:	623b      	str	r3, [r7, #32]
			magnFrac = direction - magnInt1;
 80029c8:	6a38      	ldr	r0, [r7, #32]
 80029ca:	f7fd fdab 	bl	8000524 <__aeabi_i2d>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029d6:	f7fd fc57 	bl	8000288 <__aeabi_dsub>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	e9c7 2306 	strd	r2, r3, [r7, #24]
			magnInt2 = trunc(magnFrac * 100);
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <StartReadMagnetometer+0x208>)
 80029e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029ec:	f7fd fe04 	bl	80005f8 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	ec43 2b17 	vmov	d7, r2, r3
 80029f8:	eeb0 0a47 	vmov.f32	s0, s14
 80029fc:	eef0 0a67 	vmov.f32	s1, s15
 8002a00:	f009 faac 	bl	800bf5c <trunc>
 8002a04:	ec53 2b10 	vmov	r2, r3, d0
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7fe f88e 	bl	8000b2c <__aeabi_d2iz>
 8002a10:	4603      	mov	r3, r0
 8002a12:	617b      	str	r3, [r7, #20]
			snprintf(output_str, sizeof(output_str), str_tmp, magnInt1, magnInt2);
 8002a14:	f107 0008 	add.w	r0, r7, #8
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a20:	2104      	movs	r1, #4
 8002a22:	f007 fe9f 	bl	800a764 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
 8002a26:	f107 0108 	add.w	r1, r7, #8
 8002a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <StartReadMagnetometer+0x20c>)
 8002a32:	f005 feeb 	bl	800880c <HAL_UART_Transmit>
		}

		osDelay(delay);
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <StartReadMagnetometer+0x210>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f006 fbd6 	bl	80091ec <osDelay>
		BSP_MAGNETO_GetXYZ(xyz);
 8002a40:	e71f      	b.n	8002882 <StartReadMagnetometer+0x1a>
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	9999999a 	.word	0x9999999a
 8002a4c:	400b9999 	.word	0x400b9999
 8002a50:	54442d18 	.word	0x54442d18
 8002a54:	400921fb 	.word	0x400921fb
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	4070e000 	.word	0x4070e000
 8002a60:	0800c654 	.word	0x0800c654
 8002a64:	40668000 	.word	0x40668000
 8002a68:	40568000 	.word	0x40568000
 8002a6c:	bff00000 	.word	0xbff00000
 8002a70:	40590000 	.word	0x40590000
 8002a74:	200020e0 	.word	0x200020e0
 8002a78:	20000002 	.word	0x20000002

08002a7c <StartWebServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebServer */
void StartWebServer(void const * argument)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  do{
		  Initialize_WiFi(LED2_GPIO_Port, LED2_Pin);
 8002a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <StartWebServer+0x20>)
 8002a8a:	f000 fb03 	bl	8003094 <Initialize_WiFi>
	  }while(State == WS_ERROR);
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <StartWebServer+0x24>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d0f6      	beq.n	8002a84 <StartWebServer+0x8>

	  WebServerProcess();
 8002a96:	f000 fb6d 	bl	8003174 <WebServerProcess>
  for(;;)
 8002a9a:	e7f3      	b.n	8002a84 <StartWebServer+0x8>
 8002a9c:	48000400 	.word	0x48000400
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ab6:	f001 fcbf 	bl	8004438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40001000 	.word	0x40001000

08002ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002acc:	b672      	cpsid	i
}
 8002ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <Error_Handler+0x8>
	...

08002ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_MspInit+0x4c>)
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_MspInit+0x4c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_MspInit+0x4c>)
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_MspInit+0x4c>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_MspInit+0x4c>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_MspInit+0x4c>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	210f      	movs	r1, #15
 8002b0e:	f06f 0001 	mvn.w	r0, #1
 8002b12:	f001 fd8d 	bl	8004630 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a17      	ldr	r2, [pc, #92]	; (8002ba0 <HAL_SPI_MspInit+0x7c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d128      	bne.n	8002b98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_SPI_MspInit+0x80>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_SPI_MspInit+0x80>)
 8002b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b50:	6593      	str	r3, [r2, #88]	; 0x58
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_SPI_MspInit+0x80>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_SPI_MspInit+0x80>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <HAL_SPI_MspInit+0x80>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_SPI_MspInit+0x80>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b76:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b88:	2306      	movs	r3, #6
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <HAL_SPI_MspInit+0x84>)
 8002b94:	f001 fd76 	bl	8004684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	; 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40003c00 	.word	0x40003c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	48000800 	.word	0x48000800

08002bac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_SPI_MspDeInit+0x30>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10a      	bne.n	8002bd4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_SPI_MspDeInit+0x34>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <HAL_SPI_MspDeInit+0x34>)
 8002bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8002bca:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <HAL_SPI_MspDeInit+0x38>)
 8002bd0:	f001 ff02 	bl	80049d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40003c00 	.word	0x40003c00
 8002be0:	40021000 	.word	0x40021000
 8002be4:	48000800 	.word	0x48000800

08002be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_UART_MspInit+0x80>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d129      	bne.n	8002c5e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_UART_MspInit+0x84>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_UART_MspInit+0x84>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6613      	str	r3, [r2, #96]	; 0x60
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_UART_MspInit+0x84>)
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_UART_MspInit+0x84>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_UART_MspInit+0x84>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_UART_MspInit+0x84>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	4619      	mov	r1, r3
 8002c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5a:	f001 fd13 	bl	8004684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c5e:	bf00      	nop
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	2036      	movs	r0, #54	; 0x36
 8002c86:	f001 fcd3 	bl	8004630 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c8a:	2036      	movs	r0, #54	; 0x36
 8002c8c:	f001 fcec 	bl	8004668 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <HAL_InitTick+0x9c>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_InitTick+0x9c>)
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_InitTick+0x9c>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca8:	f107 0210 	add.w	r2, r7, #16
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fb26 	bl	8006304 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f003 faf8 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8002cbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_InitTick+0xa0>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0c9b      	lsrs	r3, r3, #18
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_InitTick+0xa4>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <HAL_InitTick+0xa8>)
 8002cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_InitTick+0xa4>)
 8002cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <HAL_InitTick+0xa4>)
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_InitTick+0xa4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_InitTick+0xa4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002cec:	4809      	ldr	r0, [pc, #36]	; (8002d14 <HAL_InitTick+0xa4>)
 8002cee:	f005 fa6e 	bl	80081ce <HAL_TIM_Base_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002cf8:	4806      	ldr	r0, [pc, #24]	; (8002d14 <HAL_InitTick+0xa4>)
 8002cfa:	f005 fac9 	bl	8008290 <HAL_TIM_Base_Start_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	e000      	b.n	8002d04 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3730      	adds	r7, #48	; 0x30
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	20002180 	.word	0x20002180
 8002d18:	40001000 	.word	0x40001000

08002d1c <prvGetRegistersFromStack>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void prvGetRegistersFromStack(uint32_t *pulFaultStackAddress)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
volatile uint32_t r12;
volatile uint32_t lr; /* Link register. */
volatile uint32_t pc; /* Program counter. */
volatile uint32_t psr;/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    r1 = pulFaultStackAddress[ 1 ];
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	623b      	str	r3, [r7, #32]
    r2 = pulFaultStackAddress[ 2 ];
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	61fb      	str	r3, [r7, #28]
    r3 = pulFaultStackAddress[ 3 ];
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	61bb      	str	r3, [r7, #24]

    r12 = pulFaultStackAddress[ 4 ];
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	617b      	str	r3, [r7, #20]
    lr = pulFaultStackAddress[ 5 ];
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	613b      	str	r3, [r7, #16]
    pc = pulFaultStackAddress[ 6 ];
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	60fb      	str	r3, [r7, #12]
    psr = pulFaultStackAddress[ 7 ];
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	60bb      	str	r3, [r7, #8]

    /* When the following line is hit, the variables contain the register values. */
    for( ;; );
 8002d54:	e7fe      	b.n	8002d54 <prvGetRegistersFromStack+0x38>

08002d56 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <NMI_Handler+0x4>

08002d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm volatile
 8002d60:	f01e 0f04 	tst.w	lr, #4
 8002d64:	bf0c      	ite	eq
 8002d66:	f3ef 8008 	mrseq	r0, MSP
 8002d6a:	f3ef 8009 	mrsne	r0, PSP
 8002d6e:	6981      	ldr	r1, [r0, #24]
 8002d70:	4a00      	ldr	r2, [pc, #0]	; (8002d74 <handler2_address_const>)
 8002d72:	4710      	bx	r2

08002d74 <handler2_address_const>:
 8002d74:	08002d1d 	.word	0x08002d1d
	        " ldr r2, handler2_address_const                            \n"
	        " bx r2                                                     \n"
	        " handler2_address_const: .word prvGetRegistersFromStack    \n"
	    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <handler2_address_const+0x4>

08002d7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d7e:	e7fe      	b.n	8002d7e <MemManage_Handler+0x4>

08002d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d84:	e7fe      	b.n	8002d84 <BusFault_Handler+0x4>

08002d86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <UsageFault_Handler+0x4>

08002d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <TIM6_DAC_IRQHandler+0x10>)
 8002da2:	f005 fae5 	bl	8008370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20002180 	.word	0x20002180

08002db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <_sbrk+0x5c>)
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <_sbrk+0x60>)
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <_sbrk+0x64>)
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <_sbrk+0x68>)
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <_sbrk+0x64>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de0:	f007 fbe4 	bl	800a5ac <__errno>
 8002de4:	4603      	mov	r3, r0
 8002de6:	220c      	movs	r2, #12
 8002de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	e009      	b.n	8002e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <_sbrk+0x64>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a05      	ldr	r2, [pc, #20]	; (8002e14 <_sbrk+0x64>)
 8002e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20018000 	.word	0x20018000
 8002e10:	00000400 	.word	0x00000400
 8002e14:	2000035c 	.word	0x2000035c
 8002e18:	20002958 	.word	0x20002958

08002e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <SystemInit+0x5c>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <SystemInit+0x5c>)
 8002e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <SystemInit+0x60>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <SystemInit+0x60>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <SystemInit+0x60>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <SystemInit+0x60>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <SystemInit+0x60>)
 8002e48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <SystemInit+0x60>)
 8002e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <SystemInit+0x60>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <SystemInit+0x60>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SystemInit+0x60>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00
 8002e7c:	40021000 	.word	0x40021000

08002e80 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <WIFI_Init+0x40>)
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <WIFI_Init+0x44>)
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <WIFI_Init+0x48>)
 8002e94:	4a0d      	ldr	r2, [pc, #52]	; (8002ecc <WIFI_Init+0x4c>)
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <WIFI_Init+0x50>)
 8002e98:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <WIFI_Init+0x54>)
 8002e9a:	f7fe fbbf 	bl	800161c <ES_WIFI_RegisterBusIO>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002ea4:	480b      	ldr	r0, [pc, #44]	; (8002ed4 <WIFI_Init+0x54>)
 8002ea6:	f7fe fb8b 	bl	80015c0 <ES_WIFI_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	08001f89 	.word	0x08001f89
 8002ec4:	0800207d 	.word	0x0800207d
 8002ec8:	08002159 	.word	0x08002159
 8002ecc:	08001e71 	.word	0x08001e71
 8002ed0:	08001d79 	.word	0x08001d79
 8002ed4:	200021cc 	.word	0x200021cc

08002ed8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	4809      	ldr	r0, [pc, #36]	; (8002f18 <WIFI_Connect+0x40>)
 8002ef4:	f7fe fbc6 	bl	8001684 <ES_WIFI_Connect>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <WIFI_Connect+0x36>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <WIFI_Connect+0x40>)
 8002f00:	f7fe fc64 	bl	80017cc <ES_WIFI_GetNetworkSettings>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <WIFI_Connect+0x36>
    {
       ret = WIFI_STATUS_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200021cc 	.word	0x200021cc

08002f1c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4806      	ldr	r0, [pc, #24]	; (8002f44 <WIFI_GetMAC_Address+0x28>)
 8002f2c:	f7fe fc78 	bl	8001820 <ES_WIFI_GetMACAddress>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200021cc 	.word	0x200021cc

08002f48 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002f54:	4809      	ldr	r0, [pc, #36]	; (8002f7c <WIFI_GetIP_Address+0x34>)
 8002f56:	f7fe fc0d 	bl	8001774 <ES_WIFI_IsConnected>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <WIFI_GetIP_Address+0x28>
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <WIFI_GetIP_Address+0x34>)
 8002f62:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002f66:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200021cc 	.word	0x200021cc

08002f80 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, const char *name, uint16_t port)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	72fb      	strb	r3, [r7, #11]
 8002f90:	4613      	mov	r3, r2
 8002f92:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8002fa0:	893b      	ldrh	r3, [r7, #8]
 8002fa2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	743b      	strb	r3, [r7, #16]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <WIFI_StartServer+0x58>)
 8002fba:	f7fe fc63 	bl	8001884 <ES_WIFI_StartServerSingleConn>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <WIFI_StartServer+0x4a>
  {
    ret = WIFI_STATUS_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3728      	adds	r7, #40	; 0x28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200021cc 	.word	0x200021cc

08002fdc <WIFI_StopServer>:
/**
  * @brief  Stop a server
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, socket)== ES_WIFI_STATUS_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4806      	ldr	r0, [pc, #24]	; (8003008 <WIFI_StopServer+0x2c>)
 8002fee:	f7fe fcf5 	bl	80019dc <ES_WIFI_StopServerSingleConn>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200021cc 	.word	0x200021cc

0800300c <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	4603      	mov	r3, r0
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	4613      	mov	r3, r2
 800301c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003022:	89ba      	ldrh	r2, [r7, #12]
 8003024:	7bf9      	ldrb	r1, [r7, #15]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <WIFI_SendData+0x40>)
 8003034:	f7fe fd34 	bl	8001aa0 <ES_WIFI_SendData>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200021cc 	.word	0x200021cc

08003050 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	4613      	mov	r3, r2
 8003060:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003066:	89ba      	ldrh	r2, [r7, #12]
 8003068:	7bf9      	ldrb	r1, [r7, #15]
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	4806      	ldr	r0, [pc, #24]	; (8003090 <WIFI_ReceiveData+0x40>)
 8003078:	f7fe fdc6 	bl	8001c08 <ES_WIFI_ReceiveData>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK; 
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200021cc 	.word	0x200021cc

08003094 <Initialize_WiFi>:
#include "wifi_lib.h"

void Initialize_WiFi(GPIO_TypeDef * led_port, uint16_t led) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]

	wifi_error_led_port = led_port;
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <Initialize_WiFi+0xc0>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]
	error_led = led;
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <Initialize_WiFi+0xc4>)
 80030a8:	887b      	ldrh	r3, [r7, #2]
 80030aa:	8013      	strh	r3, [r2, #0]
	Socket = -1;
 80030ac:	4b2b      	ldr	r3, [pc, #172]	; (800315c <Initialize_WiFi+0xc8>)
 80030ae:	f04f 32ff 	mov.w	r2, #4294967295
 80030b2:	601a      	str	r2, [r3, #0]

	if (WIFI_Init() == WIFI_STATUS_OK) {
 80030b4:	f7ff fee4 	bl	8002e80 <WIFI_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d13b      	bne.n	8003136 <Initialize_WiFi+0xa2>

		if (WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK) {
 80030be:	4828      	ldr	r0, [pc, #160]	; (8003160 <Initialize_WiFi+0xcc>)
 80030c0:	f7ff ff2c 	bl	8002f1c <WIFI_GetMAC_Address>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d129      	bne.n	800311e <Initialize_WiFi+0x8a>

			if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK) {
 80030ca:	2203      	movs	r2, #3
 80030cc:	4925      	ldr	r1, [pc, #148]	; (8003164 <Initialize_WiFi+0xd0>)
 80030ce:	4826      	ldr	r0, [pc, #152]	; (8003168 <Initialize_WiFi+0xd4>)
 80030d0:	f7ff ff02 	bl	8002ed8 <WIFI_Connect>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d115      	bne.n	8003106 <Initialize_WiFi+0x72>
				if (WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80030da:	4824      	ldr	r0, [pc, #144]	; (800316c <Initialize_WiFi+0xd8>)
 80030dc:	f7ff ff34 	bl	8002f48 <WIFI_GetIP_Address>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <Initialize_WiFi+0x5a>
					State = WS_IDLE;
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <Initialize_WiFi+0xdc>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e02f      	b.n	800314e <Initialize_WiFi+0xba>
				else {
					HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <Initialize_WiFi+0xc0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <Initialize_WiFi+0xc4>)
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 fd91 	bl	8004c20 <HAL_GPIO_TogglePin>
					State = WS_ERROR;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <Initialize_WiFi+0xdc>)
 8003100:	2203      	movs	r2, #3
 8003102:	701a      	strb	r2, [r3, #0]
					return;
 8003104:	e023      	b.n	800314e <Initialize_WiFi+0xba>
				}
			}
			else {
				HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <Initialize_WiFi+0xc0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <Initialize_WiFi+0xc4>)
 800310c:	8812      	ldrh	r2, [r2, #0]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fd85 	bl	8004c20 <HAL_GPIO_TogglePin>
				State = WS_ERROR;
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <Initialize_WiFi+0xdc>)
 8003118:	2203      	movs	r2, #3
 800311a:	701a      	strb	r2, [r3, #0]
				return;
 800311c:	e017      	b.n	800314e <Initialize_WiFi+0xba>
			}
		}
		else {
			HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <Initialize_WiFi+0xc0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <Initialize_WiFi+0xc4>)
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fd79 	bl	8004c20 <HAL_GPIO_TogglePin>
			State = WS_ERROR;
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <Initialize_WiFi+0xdc>)
 8003130:	2203      	movs	r2, #3
 8003132:	701a      	strb	r2, [r3, #0]
			return;
 8003134:	e00b      	b.n	800314e <Initialize_WiFi+0xba>
		}
	}
	else {
		HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <Initialize_WiFi+0xc0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <Initialize_WiFi+0xc4>)
 800313c:	8812      	ldrh	r2, [r2, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fd6d 	bl	8004c20 <HAL_GPIO_TogglePin>
		State = WS_ERROR;
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <Initialize_WiFi+0xdc>)
 8003148:	2203      	movs	r2, #3
 800314a:	701a      	strb	r2, [r3, #0]
		return;
 800314c:	bf00      	nop
	}
}
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20002068 	.word	0x20002068
 8003158:	200020dc 	.word	0x200020dc
 800315c:	20002178 	.word	0x20002178
 8003160:	20002168 	.word	0x20002168
 8003164:	0800c678 	.word	0x0800c678
 8003168:	0800c690 	.word	0x0800c690
 800316c:	2000217c 	.word	0x2000217c
 8003170:	20000008 	.word	0x20000008

08003174 <WebServerProcess>:

void WebServerProcess(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af02      	add	r7, sp, #8
	WIFI_Status_t ret;

  switch(State)
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <WebServerProcess+0x1a4>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <WebServerProcess+0x14>
 8003182:	2b01      	cmp	r3, #1
 8003184:	d018      	beq.n	80031b8 <WebServerProcess+0x44>
      State = WS_ERROR;
    }
    break;
  case WS_ERROR:
  default:
    break;
 8003186:	e0c2      	b.n	800330e <WebServerProcess+0x19a>
    Socket = 0;
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <WebServerProcess+0x1a8>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <WebServerProcess+0x1a8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	2350      	movs	r3, #80	; 0x50
 8003196:	4a62      	ldr	r2, [pc, #392]	; (8003320 <WebServerProcess+0x1ac>)
 8003198:	2100      	movs	r1, #0
 800319a:	f7ff fef1 	bl	8002f80 <WIFI_StartServer>
    if(Socket != -1)
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <WebServerProcess+0x1a8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d003      	beq.n	80031b0 <WebServerProcess+0x3c>
      State = WS_CONNECTED;
 80031a8:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <WebServerProcess+0x1a4>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    break;
 80031ae:	e0ae      	b.n	800330e <WebServerProcess+0x19a>
      State = WS_ERROR;
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <WebServerProcess+0x1a4>)
 80031b2:	2203      	movs	r2, #3
 80031b4:	701a      	strb	r2, [r3, #0]
    break;
 80031b6:	e0aa      	b.n	800330e <WebServerProcess+0x19a>
    WIFI_ReceiveData(Socket, resp, 1200, &respLen, 1000);
 80031b8:	4b58      	ldr	r3, [pc, #352]	; (800331c <WebServerProcess+0x1a8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b2d8      	uxtb	r0, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <WebServerProcess+0x1b0>)
 80031c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80031ca:	4957      	ldr	r1, [pc, #348]	; (8003328 <WebServerProcess+0x1b4>)
 80031cc:	f7ff ff40 	bl	8003050 <WIFI_ReceiveData>
    if( respLen > 0)
 80031d0:	4b54      	ldr	r3, [pc, #336]	; (8003324 <WebServerProcess+0x1b0>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8085 	beq.w	80032e4 <WebServerProcess+0x170>
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 80031da:	4954      	ldr	r1, [pc, #336]	; (800332c <WebServerProcess+0x1b8>)
 80031dc:	4852      	ldr	r0, [pc, #328]	; (8003328 <WebServerProcess+0x1b4>)
 80031de:	f007 fb37 	bl	800a850 <strstr>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <WebServerProcess+0xac>
    	  ret = SendWebPage(sensor_data);
 80031e8:	4b51      	ldr	r3, [pc, #324]	; (8003330 <WebServerProcess+0x1bc>)
 80031ea:	ed93 6a00 	vldr	s12, [r3]
 80031ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80031f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80031f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80031fa:	eeb0 0a46 	vmov.f32	s0, s12
 80031fe:	eef0 0a66 	vmov.f32	s1, s13
 8003202:	eeb0 1a47 	vmov.f32	s2, s14
 8003206:	eef0 1a67 	vmov.f32	s3, s15
 800320a:	f000 f8a5 	bl	8003358 <SendWebPage>
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
    	  if(ret == WIFI_STATUS_ERROR){
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d165      	bne.n	80032e4 <WebServerProcess+0x170>
    		  printf("There was an error during web page's sending operation.\n\r");
 8003218:	4846      	ldr	r0, [pc, #280]	; (8003334 <WebServerProcess+0x1c0>)
 800321a:	f007 fa15 	bl	800a648 <iprintf>
    		  break;
 800321e:	e076      	b.n	800330e <WebServerProcess+0x19a>
      else if(strstr((char *)resp, "POST"))/* POST: received info */
 8003220:	4945      	ldr	r1, [pc, #276]	; (8003338 <WebServerProcess+0x1c4>)
 8003222:	4841      	ldr	r0, [pc, #260]	; (8003328 <WebServerProcess+0x1b4>)
 8003224:	f007 fb14 	bl	800a850 <strstr>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d05a      	beq.n	80032e4 <WebServerProcess+0x170>
          if(strstr((char *)resp, "radio"))
 800322e:	4943      	ldr	r1, [pc, #268]	; (800333c <WebServerProcess+0x1c8>)
 8003230:	483d      	ldr	r0, [pc, #244]	; (8003328 <WebServerProcess+0x1b4>)
 8003232:	f007 fb0d 	bl	800a850 <strstr>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d053      	beq.n	80032e4 <WebServerProcess+0x170>
            if(strstr((char *)resp, "radio=500"))
 800323c:	4940      	ldr	r1, [pc, #256]	; (8003340 <WebServerProcess+0x1cc>)
 800323e:	483a      	ldr	r0, [pc, #232]	; (8003328 <WebServerProcess+0x1b4>)
 8003240:	f007 fb06 	bl	800a850 <strstr>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <WebServerProcess+0xe0>
            	delay = FAST;
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <WebServerProcess+0x1d0>)
 800324c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	e02e      	b.n	80032b2 <WebServerProcess+0x13e>
            else if(strstr((char *)resp, "radio=1000"))
 8003254:	493c      	ldr	r1, [pc, #240]	; (8003348 <WebServerProcess+0x1d4>)
 8003256:	4834      	ldr	r0, [pc, #208]	; (8003328 <WebServerProcess+0x1b4>)
 8003258:	f007 fafa 	bl	800a850 <strstr>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <WebServerProcess+0xf8>
            	delay = MEDIUM;
 8003262:	4b38      	ldr	r3, [pc, #224]	; (8003344 <WebServerProcess+0x1d0>)
 8003264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003268:	801a      	strh	r2, [r3, #0]
 800326a:	e022      	b.n	80032b2 <WebServerProcess+0x13e>
            else if(strstr((char *)resp, "radio=2500"))
 800326c:	4937      	ldr	r1, [pc, #220]	; (800334c <WebServerProcess+0x1d8>)
 800326e:	482e      	ldr	r0, [pc, #184]	; (8003328 <WebServerProcess+0x1b4>)
 8003270:	f007 faee 	bl	800a850 <strstr>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <WebServerProcess+0x110>
            	delay = SLOW;
 800327a:	4b32      	ldr	r3, [pc, #200]	; (8003344 <WebServerProcess+0x1d0>)
 800327c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	e016      	b.n	80032b2 <WebServerProcess+0x13e>
            else if(strstr((char * )resp, "radio=5000"))
 8003284:	4932      	ldr	r1, [pc, #200]	; (8003350 <WebServerProcess+0x1dc>)
 8003286:	4828      	ldr	r0, [pc, #160]	; (8003328 <WebServerProcess+0x1b4>)
 8003288:	f007 fae2 	bl	800a850 <strstr>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <WebServerProcess+0x128>
            	delay = VERY_SLOW;
 8003292:	4b2c      	ldr	r3, [pc, #176]	; (8003344 <WebServerProcess+0x1d0>)
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	e00a      	b.n	80032b2 <WebServerProcess+0x13e>
            else if(strstr((char *)resp, "radio=10000"))
 800329c:	492d      	ldr	r1, [pc, #180]	; (8003354 <WebServerProcess+0x1e0>)
 800329e:	4822      	ldr	r0, [pc, #136]	; (8003328 <WebServerProcess+0x1b4>)
 80032a0:	f007 fad6 	bl	800a850 <strstr>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <WebServerProcess+0x13e>
            	delay = TAKE_A_BREAK;
 80032aa:	4b26      	ldr	r3, [pc, #152]	; (8003344 <WebServerProcess+0x1d0>)
 80032ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80032b0:	801a      	strh	r2, [r3, #0]
            if(SendWebPage(sensor_data) != WIFI_STATUS_OK)
 80032b2:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <WebServerProcess+0x1bc>)
 80032b4:	ed93 6a00 	vldr	s12, [r3]
 80032b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80032bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80032c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80032c4:	eeb0 0a46 	vmov.f32	s0, s12
 80032c8:	eef0 0a66 	vmov.f32	s1, s13
 80032cc:	eeb0 1a47 	vmov.f32	s2, s14
 80032d0:	eef0 1a67 	vmov.f32	s3, s15
 80032d4:	f000 f840 	bl	8003358 <SendWebPage>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <WebServerProcess+0x170>
              State = WS_ERROR;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <WebServerProcess+0x1a4>)
 80032e0:	2203      	movs	r2, #3
 80032e2:	701a      	strb	r2, [r3, #0]
    if(WIFI_StopServer(Socket) == WIFI_STATUS_OK)
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <WebServerProcess+0x1a8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe77 	bl	8002fdc <WIFI_StopServer>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d108      	bne.n	8003306 <WebServerProcess+0x192>
      WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <WebServerProcess+0x1a8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	2350      	movs	r3, #80	; 0x50
 80032fc:	4a08      	ldr	r2, [pc, #32]	; (8003320 <WebServerProcess+0x1ac>)
 80032fe:	2100      	movs	r1, #0
 8003300:	f7ff fe3e 	bl	8002f80 <WIFI_StartServer>
    break;
 8003304:	e002      	b.n	800330c <WebServerProcess+0x198>
      State = WS_ERROR;
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <WebServerProcess+0x1a4>)
 8003308:	2203      	movs	r2, #3
 800330a:	701a      	strb	r2, [r3, #0]
    break;
 800330c:	bf00      	nop
  }
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000008 	.word	0x20000008
 800331c:	20002178 	.word	0x20002178
 8003320:	0800c6b0 	.word	0x0800c6b0
 8003324:	20002074 	.word	0x20002074
 8003328:	20000760 	.word	0x20000760
 800332c:	0800c6b4 	.word	0x0800c6b4
 8003330:	20002054 	.word	0x20002054
 8003334:	0800c6b8 	.word	0x0800c6b8
 8003338:	0800c6f4 	.word	0x0800c6f4
 800333c:	0800c6fc 	.word	0x0800c6fc
 8003340:	0800c704 	.word	0x0800c704
 8003344:	20000002 	.word	0x20000002
 8003348:	0800c710 	.word	0x0800c710
 800334c:	0800c71c 	.word	0x0800c71c
 8003350:	0800c728 	.word	0x0800c728
 8003354:	0800c734 	.word	0x0800c734

08003358 <SendWebPage>:

WIFI_Status_t SendWebPage(sensor_data_t sensor_data)
{
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	b0c1      	sub	sp, #260	; 0x104
 800335c:	af02      	add	r7, sp, #8
 800335e:	eeb0 6a40 	vmov.f32	s12, s0
 8003362:	eef0 6a60 	vmov.f32	s13, s1
 8003366:	eeb0 7a41 	vmov.f32	s14, s2
 800336a:	eef0 7a61 	vmov.f32	s15, s3
 800336e:	ed87 6a00 	vstr	s12, [r7]
 8003372:	edc7 6a01 	vstr	s13, [r7, #4]
 8003376:	ed87 7a02 	vstr	s14, [r7, #8]
 800337a:	edc7 7a03 	vstr	s15, [r7, #12]
  int dataInt1, dataFrac, dataInt2;
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 800337e:	4ac8      	ldr	r2, [pc, #800]	; (80036a0 <SendWebPage+0x348>)
 8003380:	4bc8      	ldr	r3, [pc, #800]	; (80036a4 <SendWebPage+0x34c>)
 8003382:	4614      	mov	r4, r2
 8003384:	461d      	mov	r5, r3
 8003386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800338a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800338c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800338e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003392:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003396:	c407      	stmia	r4!, {r0, r1, r2}
 8003398:	8023      	strh	r3, [r4, #0]
 800339a:	3402      	adds	r4, #2
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 80033a0:	48bf      	ldr	r0, [pc, #764]	; (80036a0 <SendWebPage+0x348>)
 80033a2:	f7fc ff15 	bl	80001d0 <strlen>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4bbd      	ldr	r3, [pc, #756]	; (80036a0 <SendWebPage+0x348>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4abe      	ldr	r2, [pc, #760]	; (80036a8 <SendWebPage+0x350>)
 80033b0:	461d      	mov	r5, r3
 80033b2:	4614      	mov	r4, r2
 80033b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b6:	6028      	str	r0, [r5, #0]
 80033b8:	6069      	str	r1, [r5, #4]
 80033ba:	60aa      	str	r2, [r5, #8]
 80033bc:	60eb      	str	r3, [r5, #12]
 80033be:	7823      	ldrb	r3, [r4, #0]
 80033c0:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80033c2:	48b7      	ldr	r0, [pc, #732]	; (80036a0 <SendWebPage+0x348>)
 80033c4:	f7fc ff04 	bl	80001d0 <strlen>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	4bb4      	ldr	r3, [pc, #720]	; (80036a0 <SendWebPage+0x348>)
 80033ce:	4413      	add	r3, r2
 80033d0:	4ab6      	ldr	r2, [pc, #728]	; (80036ac <SendWebPage+0x354>)
 80033d2:	4614      	mov	r4, r2
 80033d4:	469c      	mov	ip, r3
 80033d6:	f104 0e20 	add.w	lr, r4, #32
 80033da:	4665      	mov	r5, ip
 80033dc:	4626      	mov	r6, r4
 80033de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80033e0:	6028      	str	r0, [r5, #0]
 80033e2:	6069      	str	r1, [r5, #4]
 80033e4:	60aa      	str	r2, [r5, #8]
 80033e6:	60eb      	str	r3, [r5, #12]
 80033e8:	3410      	adds	r4, #16
 80033ea:	f10c 0c10 	add.w	ip, ip, #16
 80033ee:	4574      	cmp	r4, lr
 80033f0:	d1f3      	bne.n	80033da <SendWebPage+0x82>
 80033f2:	4662      	mov	r2, ip
 80033f4:	4623      	mov	r3, r4
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 80033fa:	48a9      	ldr	r0, [pc, #676]	; (80036a0 <SendWebPage+0x348>)
 80033fc:	f7fc fee8 	bl	80001d0 <strlen>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	4ba6      	ldr	r3, [pc, #664]	; (80036a0 <SendWebPage+0x348>)
 8003406:	4413      	add	r3, r2
 8003408:	4aa9      	ldr	r2, [pc, #676]	; (80036b0 <SendWebPage+0x358>)
 800340a:	4614      	mov	r4, r2
 800340c:	469c      	mov	ip, r3
 800340e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003412:	4665      	mov	r5, ip
 8003414:	4626      	mov	r6, r4
 8003416:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003418:	6028      	str	r0, [r5, #0]
 800341a:	6069      	str	r1, [r5, #4]
 800341c:	60aa      	str	r2, [r5, #8]
 800341e:	60eb      	str	r3, [r5, #12]
 8003420:	3410      	adds	r4, #16
 8003422:	f10c 0c10 	add.w	ip, ip, #16
 8003426:	4574      	cmp	r4, lr
 8003428:	d1f3      	bne.n	8003412 <SendWebPage+0xba>
 800342a:	4665      	mov	r5, ip
 800342c:	4623      	mov	r3, r4
 800342e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003430:	6028      	str	r0, [r5, #0]
 8003432:	6069      	str	r1, [r5, #4]
 8003434:	60aa      	str	r2, [r5, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 800343a:	4899      	ldr	r0, [pc, #612]	; (80036a0 <SendWebPage+0x348>)
 800343c:	f7fc fec8 	bl	80001d0 <strlen>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	4b96      	ldr	r3, [pc, #600]	; (80036a0 <SendWebPage+0x348>)
 8003446:	4413      	add	r3, r2
 8003448:	4a9a      	ldr	r2, [pc, #616]	; (80036b4 <SendWebPage+0x35c>)
 800344a:	461c      	mov	r4, r3
 800344c:	4613      	mov	r3, r2
 800344e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003450:	6020      	str	r0, [r4, #0]
 8003452:	6061      	str	r1, [r4, #4]
 8003454:	60a2      	str	r2, [r4, #8]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	7323      	strb	r3, [r4, #12]

  // Add temperature
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temperature: <input type=\"text\" size=2 value=\"");
 800345a:	4891      	ldr	r0, [pc, #580]	; (80036a0 <SendWebPage+0x348>)
 800345c:	f7fc feb8 	bl	80001d0 <strlen>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	4b8e      	ldr	r3, [pc, #568]	; (80036a0 <SendWebPage+0x348>)
 8003466:	4413      	add	r3, r2
 8003468:	4a93      	ldr	r2, [pc, #588]	; (80036b8 <SendWebPage+0x360>)
 800346a:	4618      	mov	r0, r3
 800346c:	4611      	mov	r1, r2
 800346e:	234e      	movs	r3, #78	; 0x4e
 8003470:	461a      	mov	r2, r3
 8003472:	f007 f8d3 	bl	800a61c <memcpy>
  dataInt1 = sensor_data.temperature;
 8003476:	edd7 7a00 	vldr	s15, [r7]
 800347a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800347e:	ee17 3a90 	vmov	r3, s15
 8003482:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.temperature - dataInt1;
 8003486:	ed97 7a00 	vldr	s14, [r7]
 800348a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800349e:	ee17 3a90 	vmov	r3, s15
 80034a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 80034a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80034aa:	2264      	movs	r2, #100	; 0x64
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd f837 	bl	8000524 <__aeabi_i2d>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f7fd fb35 	bl	8000b2c <__aeabi_d2iz>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)temp, "%d.%02d", dataInt1, dataInt2);
 80034c8:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80034cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034d0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80034d4:	4979      	ldr	r1, [pc, #484]	; (80036bc <SendWebPage+0x364>)
 80034d6:	f007 f979 	bl	800a7cc <siprintf>
  strcat((char *)http, (char *)temp);
 80034da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034de:	4619      	mov	r1, r3
 80034e0:	486f      	ldr	r0, [pc, #444]	; (80036a0 <SendWebPage+0x348>)
 80034e2:	f007 f993 	bl	800a80c <strcat>
  strcat((char *)http, (char *)"\">°C");
 80034e6:	486e      	ldr	r0, [pc, #440]	; (80036a0 <SendWebPage+0x348>)
 80034e8:	f7fc fe72 	bl	80001d0 <strlen>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b6b      	ldr	r3, [pc, #428]	; (80036a0 <SendWebPage+0x348>)
 80034f2:	4413      	add	r3, r2
 80034f4:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <SendWebPage+0x368>)
 80034f6:	6810      	ldr	r0, [r2, #0]
 80034f8:	6018      	str	r0, [r3, #0]
 80034fa:	8892      	ldrh	r2, [r2, #4]
 80034fc:	809a      	strh	r2, [r3, #4]

  // Add humidity
  strcat((char *)http, (char *)"Humidity: <input type=\"text\" size=2 value=\"");
 80034fe:	4868      	ldr	r0, [pc, #416]	; (80036a0 <SendWebPage+0x348>)
 8003500:	f7fc fe66 	bl	80001d0 <strlen>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	4b65      	ldr	r3, [pc, #404]	; (80036a0 <SendWebPage+0x348>)
 800350a:	4413      	add	r3, r2
 800350c:	4a6d      	ldr	r2, [pc, #436]	; (80036c4 <SendWebPage+0x36c>)
 800350e:	4614      	mov	r4, r2
 8003510:	469c      	mov	ip, r3
 8003512:	f104 0e20 	add.w	lr, r4, #32
 8003516:	4665      	mov	r5, ip
 8003518:	4626      	mov	r6, r4
 800351a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800351c:	6028      	str	r0, [r5, #0]
 800351e:	6069      	str	r1, [r5, #4]
 8003520:	60aa      	str	r2, [r5, #8]
 8003522:	60eb      	str	r3, [r5, #12]
 8003524:	3410      	adds	r4, #16
 8003526:	f10c 0c10 	add.w	ip, ip, #16
 800352a:	4574      	cmp	r4, lr
 800352c:	d1f3      	bne.n	8003516 <SendWebPage+0x1be>
 800352e:	4665      	mov	r5, ip
 8003530:	4623      	mov	r3, r4
 8003532:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003534:	6028      	str	r0, [r5, #0]
 8003536:	6069      	str	r1, [r5, #4]
 8003538:	60aa      	str	r2, [r5, #8]
  dataInt1 = sensor_data.humidity;
 800353a:	edd7 7a02 	vldr	s15, [r7, #8]
 800353e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.humidity - dataInt1;
 800354a:	ed97 7a02 	vldr	s14, [r7, #8]
 800354e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003562:	ee17 3a90 	vmov	r3, s15
 8003566:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 800356a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800356e:	2264      	movs	r2, #100	; 0x64
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	4618      	mov	r0, r3
 8003576:	f7fc ffd5 	bl	8000524 <__aeabi_i2d>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f7fd fad3 	bl	8000b2c <__aeabi_d2iz>
 8003586:	4603      	mov	r3, r0
 8003588:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)hum, "%d.%02d", dataInt1, dataInt2);
 800358c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8003590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003594:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003598:	4948      	ldr	r1, [pc, #288]	; (80036bc <SendWebPage+0x364>)
 800359a:	f007 f917 	bl	800a7cc <siprintf>
  strcat((char *)http, (char *)hum);
 800359e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80035a2:	4619      	mov	r1, r3
 80035a4:	483e      	ldr	r0, [pc, #248]	; (80036a0 <SendWebPage+0x348>)
 80035a6:	f007 f931 	bl	800a80c <strcat>
  strcat((char *)http, (char *)"\">\%");
 80035aa:	483d      	ldr	r0, [pc, #244]	; (80036a0 <SendWebPage+0x348>)
 80035ac:	f7fc fe10 	bl	80001d0 <strlen>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <SendWebPage+0x348>)
 80035b6:	4413      	add	r3, r2
 80035b8:	4a43      	ldr	r2, [pc, #268]	; (80036c8 <SendWebPage+0x370>)
 80035ba:	6810      	ldr	r0, [r2, #0]
 80035bc:	6018      	str	r0, [r3, #0]

  // Add pressure
  strcat((char *)http, (char *)"Pressure: <input type=\"text\" size=2 value=\"");
 80035be:	4838      	ldr	r0, [pc, #224]	; (80036a0 <SendWebPage+0x348>)
 80035c0:	f7fc fe06 	bl	80001d0 <strlen>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <SendWebPage+0x348>)
 80035ca:	4413      	add	r3, r2
 80035cc:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <SendWebPage+0x374>)
 80035ce:	4614      	mov	r4, r2
 80035d0:	469c      	mov	ip, r3
 80035d2:	f104 0e20 	add.w	lr, r4, #32
 80035d6:	4665      	mov	r5, ip
 80035d8:	4626      	mov	r6, r4
 80035da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80035dc:	6028      	str	r0, [r5, #0]
 80035de:	6069      	str	r1, [r5, #4]
 80035e0:	60aa      	str	r2, [r5, #8]
 80035e2:	60eb      	str	r3, [r5, #12]
 80035e4:	3410      	adds	r4, #16
 80035e6:	f10c 0c10 	add.w	ip, ip, #16
 80035ea:	4574      	cmp	r4, lr
 80035ec:	d1f3      	bne.n	80035d6 <SendWebPage+0x27e>
 80035ee:	4665      	mov	r5, ip
 80035f0:	4623      	mov	r3, r4
 80035f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035f4:	6028      	str	r0, [r5, #0]
 80035f6:	6069      	str	r1, [r5, #4]
 80035f8:	60aa      	str	r2, [r5, #8]
  dataInt1 = sensor_data.pressure;
 80035fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80035fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003602:	ee17 3a90 	vmov	r3, s15
 8003606:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.pressure - dataInt1;
 800360a:	ed97 7a01 	vldr	s14, [r7, #4]
 800360e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800361a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800361e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003622:	ee17 3a90 	vmov	r3, s15
 8003626:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 800362a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800362e:	2264      	movs	r2, #100	; 0x64
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff75 	bl	8000524 <__aeabi_i2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	f7fd fa73 	bl	8000b2c <__aeabi_d2iz>
 8003646:	4603      	mov	r3, r0
 8003648:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)press, "%d.%02d", dataInt1, dataInt2);
 800364c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003650:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003654:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003658:	4918      	ldr	r1, [pc, #96]	; (80036bc <SendWebPage+0x364>)
 800365a:	f007 f8b7 	bl	800a7cc <siprintf>
  strcat((char *)http, (char *)press);
 800365e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003662:	4619      	mov	r1, r3
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <SendWebPage+0x348>)
 8003666:	f007 f8d1 	bl	800a80c <strcat>
  strcat((char *)http, (char *)"\"> hPa");
 800366a:	480d      	ldr	r0, [pc, #52]	; (80036a0 <SendWebPage+0x348>)
 800366c:	f7fc fdb0 	bl	80001d0 <strlen>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <SendWebPage+0x348>)
 8003676:	4413      	add	r3, r2
 8003678:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <SendWebPage+0x378>)
 800367a:	6810      	ldr	r0, [r2, #0]
 800367c:	6018      	str	r0, [r3, #0]
 800367e:	8891      	ldrh	r1, [r2, #4]
 8003680:	7992      	ldrb	r2, [r2, #6]
 8003682:	8099      	strh	r1, [r3, #4]
 8003684:	719a      	strb	r2, [r3, #6]

  // Add north direction
  strcat((char *)http, (char *)"North direction: <input type=\"text\" size=2 value=\"");
 8003686:	4806      	ldr	r0, [pc, #24]	; (80036a0 <SendWebPage+0x348>)
 8003688:	f7fc fda2 	bl	80001d0 <strlen>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <SendWebPage+0x348>)
 8003692:	4413      	add	r3, r2
 8003694:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <SendWebPage+0x37c>)
 8003696:	4614      	mov	r4, r2
 8003698:	469c      	mov	ip, r3
 800369a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800369e:	e01b      	b.n	80036d8 <SendWebPage+0x380>
 80036a0:	20000360 	.word	0x20000360
 80036a4:	0800c740 	.word	0x0800c740
 80036a8:	0800c780 	.word	0x0800c780
 80036ac:	0800c794 	.word	0x0800c794
 80036b0:	0800c7b8 	.word	0x0800c7b8
 80036b4:	0800c7f8 	.word	0x0800c7f8
 80036b8:	0800c808 	.word	0x0800c808
 80036bc:	0800c858 	.word	0x0800c858
 80036c0:	0800c860 	.word	0x0800c860
 80036c4:	0800c868 	.word	0x0800c868
 80036c8:	0800c894 	.word	0x0800c894
 80036cc:	0800c898 	.word	0x0800c898
 80036d0:	0800c8c4 	.word	0x0800c8c4
 80036d4:	0800c8cc 	.word	0x0800c8cc
 80036d8:	4665      	mov	r5, ip
 80036da:	4626      	mov	r6, r4
 80036dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036de:	6028      	str	r0, [r5, #0]
 80036e0:	6069      	str	r1, [r5, #4]
 80036e2:	60aa      	str	r2, [r5, #8]
 80036e4:	60eb      	str	r3, [r5, #12]
 80036e6:	3410      	adds	r4, #16
 80036e8:	f10c 0c10 	add.w	ip, ip, #16
 80036ec:	4574      	cmp	r4, lr
 80036ee:	d1f3      	bne.n	80036d8 <SendWebPage+0x380>
 80036f0:	4663      	mov	r3, ip
 80036f2:	4622      	mov	r2, r4
 80036f4:	8811      	ldrh	r1, [r2, #0]
 80036f6:	7892      	ldrb	r2, [r2, #2]
 80036f8:	8019      	strh	r1, [r3, #0]
 80036fa:	709a      	strb	r2, [r3, #2]
  dataInt1 = sensor_data.north_direction;
 80036fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003704:	ee17 3a90 	vmov	r3, s15
 8003708:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.north_direction - dataInt1;
 800370c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003710:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800371c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003724:	ee17 3a90 	vmov	r3, s15
 8003728:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 800372c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003730:	2264      	movs	r2, #100	; 0x64
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc fef4 	bl	8000524 <__aeabi_i2d>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f7fd f9f2 	bl	8000b2c <__aeabi_d2iz>
 8003748:	4603      	mov	r3, r0
 800374a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)magneto_dir, "%d.%02d", dataInt1, dataInt2);
 800374e:	f107 0018 	add.w	r0, r7, #24
 8003752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003756:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800375a:	4956      	ldr	r1, [pc, #344]	; (80038b4 <SendWebPage+0x55c>)
 800375c:	f007 f836 	bl	800a7cc <siprintf>
  strcat((char *)http, (char *)magneto_dir);
 8003760:	f107 0318 	add.w	r3, r7, #24
 8003764:	4619      	mov	r1, r3
 8003766:	4854      	ldr	r0, [pc, #336]	; (80038b8 <SendWebPage+0x560>)
 8003768:	f007 f850 	bl	800a80c <strcat>
  strcat((char *)http, (char *)"\">°");
 800376c:	4852      	ldr	r0, [pc, #328]	; (80038b8 <SendWebPage+0x560>)
 800376e:	f7fc fd2f 	bl	80001d0 <strlen>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <SendWebPage+0x560>)
 8003778:	4413      	add	r3, r2
 800377a:	4a50      	ldr	r2, [pc, #320]	; (80038bc <SendWebPage+0x564>)
 800377c:	6810      	ldr	r0, [r2, #0]
 800377e:	6018      	str	r0, [r3, #0]
 8003780:	7912      	ldrb	r2, [r2, #4]
 8003782:	711a      	strb	r2, [r3, #4]

  // Add delay edit
  strcat((char *)http, (char *)"<p>Delay:<br><input type=\"radio\" name=\"radio\" value=\"500\" >0.5 seconds");
 8003784:	484c      	ldr	r0, [pc, #304]	; (80038b8 <SendWebPage+0x560>)
 8003786:	f7fc fd23 	bl	80001d0 <strlen>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <SendWebPage+0x560>)
 8003790:	4413      	add	r3, r2
 8003792:	4a4b      	ldr	r2, [pc, #300]	; (80038c0 <SendWebPage+0x568>)
 8003794:	4618      	mov	r0, r3
 8003796:	4611      	mov	r1, r2
 8003798:	2347      	movs	r3, #71	; 0x47
 800379a:	461a      	mov	r2, r3
 800379c:	f006 ff3e 	bl	800a61c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1000\" checked>1 second");
 80037a0:	4845      	ldr	r0, [pc, #276]	; (80038b8 <SendWebPage+0x560>)
 80037a2:	f7fc fd15 	bl	80001d0 <strlen>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <SendWebPage+0x560>)
 80037ac:	4413      	add	r3, r2
 80037ae:	4a45      	ldr	r2, [pc, #276]	; (80038c4 <SendWebPage+0x56c>)
 80037b0:	4618      	mov	r0, r3
 80037b2:	4611      	mov	r1, r2
 80037b4:	2343      	movs	r3, #67	; 0x43
 80037b6:	461a      	mov	r2, r3
 80037b8:	f006 ff30 	bl	800a61c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"2500\" checked>2.5 seconds");
 80037bc:	483e      	ldr	r0, [pc, #248]	; (80038b8 <SendWebPage+0x560>)
 80037be:	f7fc fd07 	bl	80001d0 <strlen>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <SendWebPage+0x560>)
 80037c8:	4413      	add	r3, r2
 80037ca:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <SendWebPage+0x570>)
 80037cc:	4618      	mov	r0, r3
 80037ce:	4611      	mov	r1, r2
 80037d0:	2346      	movs	r3, #70	; 0x46
 80037d2:	461a      	mov	r2, r3
 80037d4:	f006 ff22 	bl	800a61c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"5000\" checked>5 seconds");
 80037d8:	4837      	ldr	r0, [pc, #220]	; (80038b8 <SendWebPage+0x560>)
 80037da:	f7fc fcf9 	bl	80001d0 <strlen>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b35      	ldr	r3, [pc, #212]	; (80038b8 <SendWebPage+0x560>)
 80037e4:	4413      	add	r3, r2
 80037e6:	4a39      	ldr	r2, [pc, #228]	; (80038cc <SendWebPage+0x574>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	4611      	mov	r1, r2
 80037ec:	2344      	movs	r3, #68	; 0x44
 80037ee:	461a      	mov	r2, r3
 80037f0:	f006 ff14 	bl	800a61c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"10000\" checked>10 seconds");
 80037f4:	4830      	ldr	r0, [pc, #192]	; (80038b8 <SendWebPage+0x560>)
 80037f6:	f7fc fceb 	bl	80001d0 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <SendWebPage+0x560>)
 8003800:	4413      	add	r3, r2
 8003802:	4a33      	ldr	r2, [pc, #204]	; (80038d0 <SendWebPage+0x578>)
 8003804:	4618      	mov	r0, r3
 8003806:	4611      	mov	r1, r2
 8003808:	2346      	movs	r3, #70	; 0x46
 800380a:	461a      	mov	r2, r3
 800380c:	f006 ff06 	bl	800a61c <memcpy>

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8003810:	4829      	ldr	r0, [pc, #164]	; (80038b8 <SendWebPage+0x560>)
 8003812:	f7fc fcdd 	bl	80001d0 <strlen>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <SendWebPage+0x560>)
 800381c:	4413      	add	r3, r2
 800381e:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <SendWebPage+0x57c>)
 8003820:	4614      	mov	r4, r2
 8003822:	469c      	mov	ip, r3
 8003824:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003828:	4665      	mov	r5, ip
 800382a:	4626      	mov	r6, r4
 800382c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800382e:	6028      	str	r0, [r5, #0]
 8003830:	6069      	str	r1, [r5, #4]
 8003832:	60aa      	str	r2, [r5, #8]
 8003834:	60eb      	str	r3, [r5, #12]
 8003836:	3410      	adds	r4, #16
 8003838:	f10c 0c10 	add.w	ip, ip, #16
 800383c:	4574      	cmp	r4, lr
 800383e:	d1f3      	bne.n	8003828 <SendWebPage+0x4d0>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8003840:	481d      	ldr	r0, [pc, #116]	; (80038b8 <SendWebPage+0x560>)
 8003842:	f7fc fcc5 	bl	80001d0 <strlen>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <SendWebPage+0x560>)
 800384c:	4413      	add	r3, r2
 800384e:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <SendWebPage+0x580>)
 8003850:	461d      	mov	r5, r3
 8003852:	4614      	mov	r4, r2
 8003854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003856:	6028      	str	r0, [r5, #0]
 8003858:	6069      	str	r1, [r5, #4]
 800385a:	60aa      	str	r2, [r5, #8]
 800385c:	60eb      	str	r3, [r5, #12]
 800385e:	8823      	ldrh	r3, [r4, #0]
 8003860:	78a2      	ldrb	r2, [r4, #2]
 8003862:	822b      	strh	r3, [r5, #16]
 8003864:	4613      	mov	r3, r2
 8003866:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, 1000);
 8003868:	4813      	ldr	r0, [pc, #76]	; (80038b8 <SendWebPage+0x560>)
 800386a:	f7fc fcb1 	bl	80001d0 <strlen>
 800386e:	4603      	mov	r3, r0
 8003870:	b29a      	uxth	r2, r3
 8003872:	f107 0316 	add.w	r3, r7, #22
 8003876:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800387a:	9100      	str	r1, [sp, #0]
 800387c:	490e      	ldr	r1, [pc, #56]	; (80038b8 <SendWebPage+0x560>)
 800387e:	2000      	movs	r0, #0
 8003880:	f7ff fbc4 	bl	800300c <WIFI_SendData>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 800388a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <SendWebPage+0x550>
 8003892:	8afb      	ldrh	r3, [r7, #22]
 8003894:	461c      	mov	r4, r3
 8003896:	4808      	ldr	r0, [pc, #32]	; (80038b8 <SendWebPage+0x560>)
 8003898:	f7fc fc9a 	bl	80001d0 <strlen>
 800389c:	4603      	mov	r3, r0
 800389e:	429c      	cmp	r4, r3
 80038a0:	d002      	beq.n	80038a8 <SendWebPage+0x550>
  {
    ret = WIFI_STATUS_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  }

  return ret;
 80038a8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	37fc      	adds	r7, #252	; 0xfc
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	0800c858 	.word	0x0800c858
 80038b8:	20000360 	.word	0x20000360
 80038bc:	0800c900 	.word	0x0800c900
 80038c0:	0800c908 	.word	0x0800c908
 80038c4:	0800c950 	.word	0x0800c950
 80038c8:	0800c994 	.word	0x0800c994
 80038cc:	0800c9dc 	.word	0x0800c9dc
 80038d0:	0800ca20 	.word	0x0800ca20
 80038d4:	0800ca68 	.word	0x0800ca68
 80038d8:	0800ca98 	.word	0x0800ca98

080038dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038e0:	f7ff fa9c 	bl	8002e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038e6:	e003      	b.n	80038f0 <LoopCopyDataInit>

080038e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038ee:	3104      	adds	r1, #4

080038f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038f0:	480a      	ldr	r0, [pc, #40]	; (800391c <LoopForever+0xa>)
	ldr	r3, =_edata
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <LoopForever+0xe>)
	adds	r2, r0, r1
 80038f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038f8:	d3f6      	bcc.n	80038e8 <CopyDataInit>
	ldr	r2, =_sbss
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038fc:	e002      	b.n	8003904 <LoopFillZerobss>

080038fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003900:	f842 3b04 	str.w	r3, [r2], #4

08003904 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <LoopForever+0x16>)
	cmp	r2, r3
 8003906:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003908:	d3f9      	bcc.n	80038fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800390a:	f006 fe55 	bl	800a5b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800390e:	f7fe fcd1 	bl	80022b4 <main>

08003912 <LoopForever>:

LoopForever:
    b LoopForever
 8003912:	e7fe      	b.n	8003912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003914:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003918:	0800cc98 	.word	0x0800cc98
	ldr	r0, =_sdata
 800391c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003920:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8003924:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8003928:	20002958 	.word	0x20002958

0800392c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800392c:	e7fe      	b.n	800392c <ADC1_2_IRQHandler>
	...

08003930 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <I2Cx_MspInit+0xa8>)
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <I2Cx_MspInit+0xa8>)
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003944:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <I2Cx_MspInit+0xa8>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003950:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003954:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003956:	2312      	movs	r3, #18
 8003958:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800395a:	2301      	movs	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003962:	2304      	movs	r3, #4
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	4619      	mov	r1, r3
 800396c:	481b      	ldr	r0, [pc, #108]	; (80039dc <I2Cx_MspInit+0xac>)
 800396e:	f000 fe89 	bl	8004684 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	4619      	mov	r1, r3
 8003978:	4818      	ldr	r0, [pc, #96]	; (80039dc <I2Cx_MspInit+0xac>)
 800397a:	f000 fe83 	bl	8004684 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800397e:	4b16      	ldr	r3, [pc, #88]	; (80039d8 <I2Cx_MspInit+0xa8>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <I2Cx_MspInit+0xa8>)
 8003984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <I2Cx_MspInit+0xa8>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <I2Cx_MspInit+0xa8>)
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <I2Cx_MspInit+0xa8>)
 800399c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039a0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <I2Cx_MspInit+0xa8>)
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <I2Cx_MspInit+0xa8>)
 80039a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80039ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	210f      	movs	r1, #15
 80039b2:	2021      	movs	r0, #33	; 0x21
 80039b4:	f000 fe3c 	bl	8004630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80039b8:	2021      	movs	r0, #33	; 0x21
 80039ba:	f000 fe55 	bl	8004668 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	210f      	movs	r1, #15
 80039c2:	2022      	movs	r0, #34	; 0x22
 80039c4:	f000 fe34 	bl	8004630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80039c8:	2022      	movs	r0, #34	; 0x22
 80039ca:	f000 fe4d 	bl	8004668 <HAL_NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	48000400 	.word	0x48000400

080039e0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <I2Cx_Init+0x54>)
 80039ec:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <I2Cx_Init+0x58>)
 80039f2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff89 	bl	8003930 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f001 f918 	bl	8004c54 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003a24:	2100      	movs	r1, #0
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f001 fe30 	bl	800568c <HAL_I2CEx_ConfigAnalogFilter>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40005800 	.word	0x40005800
 8003a38:	00702681 	.word	0x00702681

08003a3c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af04      	add	r7, sp, #16
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	72fb      	strb	r3, [r7, #11]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	813b      	strh	r3, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	b299      	uxth	r1, r3
 8003a5e:	88f8      	ldrh	r0, [r7, #6]
 8003a60:	893a      	ldrh	r2, [r7, #8]
 8003a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f001 fad4 	bl	8005020 <HAL_I2C_Mem_Read>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	4619      	mov	r1, r3
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f832 	bl	8003af0 <I2Cx_Error>
  }
  return status;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b08a      	sub	sp, #40	; 0x28
 8003a9a:	af04      	add	r7, sp, #16
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	72fb      	strb	r3, [r7, #11]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	813b      	strh	r3, [r7, #8]
 8003aac:	4613      	mov	r3, r2
 8003aae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ab4:	7afb      	ldrb	r3, [r7, #11]
 8003ab6:	b299      	uxth	r1, r3
 8003ab8:	88f8      	ldrh	r0, [r7, #6]
 8003aba:	893a      	ldrh	r2, [r7, #8]
 8003abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4603      	mov	r3, r0
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f001 f993 	bl	8004df8 <HAL_I2C_Mem_Write>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f805 	bl	8003af0 <I2Cx_Error>
  }
  return status;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f001 f938 	bl	8004d72 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff6c 	bl	80039e0 <I2Cx_Init>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <SENSOR_IO_Init+0x10>)
 8003b16:	f7ff ff63 	bl	80039e0 <I2Cx_Init>
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200028f8 	.word	0x200028f8

08003b24 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	71bb      	strb	r3, [r7, #6]
 8003b32:	4613      	mov	r3, r2
 8003b34:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003b36:	79bb      	ldrb	r3, [r7, #6]
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	79f9      	ldrb	r1, [r7, #7]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	1d7b      	adds	r3, r7, #5
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2301      	movs	r3, #1
 8003b46:	4803      	ldr	r0, [pc, #12]	; (8003b54 <SENSOR_IO_Write+0x30>)
 8003b48:	f7ff ffa5 	bl	8003a96 <I2Cx_WriteMultiple>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	200028f8 	.word	0x200028f8

08003b58 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460a      	mov	r2, r1
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003b6c:	79bb      	ldrb	r3, [r7, #6]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	79f9      	ldrb	r1, [r7, #7]
 8003b72:	2301      	movs	r3, #1
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	f107 030f 	add.w	r3, r7, #15
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4804      	ldr	r0, [pc, #16]	; (8003b90 <SENSOR_IO_Read+0x38>)
 8003b80:	f7ff ff5c 	bl	8003a3c <I2Cx_ReadMultiple>

  return read_value;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200028f8 	.word	0x200028f8

08003b94 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	603a      	str	r2, [r7, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	71bb      	strb	r3, [r7, #6]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	79f9      	ldrb	r1, [r7, #7]
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4804      	ldr	r0, [pc, #16]	; (8003bcc <SENSOR_IO_ReadMultiple+0x38>)
 8003bbc:	f7ff ff3e 	bl	8003a3c <I2Cx_ReadMultiple>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b29b      	uxth	r3, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200028f8 	.word	0x200028f8

08003bd0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <BSP_HSENSOR_Init+0x38>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	20be      	movs	r0, #190	; 0xbe
 8003bdc:	4798      	blx	r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	2bbc      	cmp	r3, #188	; 0xbc
 8003be2:	d002      	beq.n	8003bea <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e009      	b.n	8003bfe <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <BSP_HSENSOR_Init+0x3c>)
 8003bec:	4a06      	ldr	r2, [pc, #24]	; (8003c08 <BSP_HSENSOR_Init+0x38>)
 8003bee:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <BSP_HSENSOR_Init+0x3c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	20be      	movs	r0, #190	; 0xbe
 8003bf8:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003bfe:	687b      	ldr	r3, [r7, #4]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	2000000c 	.word	0x2000000c
 8003c0c:	20000b60 	.word	0x20000b60

08003c10 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	20be      	movs	r0, #190	; 0xbe
 8003c1c:	4798      	blx	r3
 8003c1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000b60 	.word	0x20000b60

08003c2c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <BSP_MAGNETO_Init+0x50>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	4798      	blx	r3
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b3d      	cmp	r3, #61	; 0x3d
 8003c40:	d002      	beq.n	8003c48 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	e013      	b.n	8003c70 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003c48:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <BSP_MAGNETO_Init+0x54>)
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <BSP_MAGNETO_Init+0x50>)
 8003c4c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003c4e:	2358      	movs	r3, #88	; 0x58
 8003c50:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003c52:	2300      	movs	r3, #0
 8003c54:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <BSP_MAGNETO_Init+0x54>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	463a      	mov	r2, r7
 8003c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c6e:	4798      	blx	r3
  } 

  return ret;  
 8003c70:	79fb      	ldrb	r3, [r7, #7]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000028 	.word	0x20000028
 8003c80:	20000b64 	.word	0x20000b64

08003c84 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000b64 	.word	0x20000b64

08003cb4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003cba:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <BSP_PSENSOR_Init+0x38>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	20ba      	movs	r0, #186	; 0xba
 8003cc0:	4798      	blx	r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2bb1      	cmp	r3, #177	; 0xb1
 8003cc6:	d002      	beq.n	8003cce <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	e009      	b.n	8003ce2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <BSP_PSENSOR_Init+0x3c>)
 8003cd0:	4a06      	ldr	r2, [pc, #24]	; (8003cec <BSP_PSENSOR_Init+0x38>)
 8003cd2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <BSP_PSENSOR_Init+0x3c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	20ba      	movs	r0, #186	; 0xba
 8003cdc:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003ce2:	687b      	ldr	r3, [r7, #4]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2000005c 	.word	0x2000005c
 8003cf0:	20000b68 	.word	0x20000b68

08003cf4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <BSP_PSENSOR_ReadPressure+0x18>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	20ba      	movs	r0, #186	; 0xba
 8003d00:	4798      	blx	r3
 8003d02:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d06:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000b68 	.word	0x20000b68

08003d10 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <BSP_TSENSOR_Init+0x30>)
 8003d1c:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <BSP_TSENSOR_Init+0x34>)
 8003d1e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003d20:	f7ff fef6 	bl	8003b10 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <BSP_TSENSOR_Init+0x30>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	20be      	movs	r0, #190	; 0xbe
 8003d2e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003d34:	79fb      	ldrb	r3, [r7, #7]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000b6c 	.word	0x20000b6c
 8003d44:	20000018 	.word	0x20000018

08003d48 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <BSP_TSENSOR_ReadTemp+0x18>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	20be      	movs	r0, #190	; 0xbe
 8003d54:	4798      	blx	r3
 8003d56:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000b6c 	.word	0x20000b6c

08003d64 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2120      	movs	r1, #32
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff feef 	bl	8003b58 <SENSOR_IO_Read>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	f023 0303 	bic.w	r3, r3, #3
 8003d94:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003da4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	2120      	movs	r1, #32
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff feb8 	bl	8003b24 <SENSOR_IO_Write>
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8003dca:	f7ff fea1 	bl	8003b10 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff febf 	bl	8003b58 <SENSOR_IO_Read>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	b2d8      	uxtb	r0, r3
 8003df6:	f107 020c 	add.w	r2, r7, #12
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	21b0      	movs	r1, #176	; 0xb0
 8003dfe:	f7ff fec9 	bl	8003b94 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003e02:	7b3b      	ldrb	r3, [r7, #12]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003e0a:	7b7b      	ldrb	r3, [r7, #13]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	b2d8      	uxtb	r0, r3
 8003e16:	f107 020c 	add.w	r2, r7, #12
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	21b6      	movs	r1, #182	; 0xb6
 8003e1e:	f7ff feb9 	bl	8003b94 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003e22:	7b7b      	ldrb	r3, [r7, #13]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	b21a      	sxth	r2, r3
 8003e28:	7b3b      	ldrb	r3, [r7, #12]
 8003e2a:	b21b      	sxth	r3, r3
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	b2d8      	uxtb	r0, r3
 8003e34:	f107 020c 	add.w	r2, r7, #12
 8003e38:	2302      	movs	r3, #2
 8003e3a:	21ba      	movs	r1, #186	; 0xba
 8003e3c:	f7ff feaa 	bl	8003b94 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003e40:	7b7b      	ldrb	r3, [r7, #13]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	b21a      	sxth	r2, r3
 8003e46:	7b3b      	ldrb	r3, [r7, #12]
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	b2d8      	uxtb	r0, r3
 8003e52:	f107 020c 	add.w	r2, r7, #12
 8003e56:	2302      	movs	r3, #2
 8003e58:	21a8      	movs	r1, #168	; 0xa8
 8003e5a:	f7ff fe9b 	bl	8003b94 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003e5e:	7b7b      	ldrb	r3, [r7, #13]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	b21a      	sxth	r2, r3
 8003e64:	7b3b      	ldrb	r3, [r7, #12]
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003e6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e7e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003e82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003e98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eaa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eba:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003ebe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ec2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eca:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8003ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ed2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003f18 <HTS221_H_ReadHumidity+0x130>
 8003ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ede:	dd01      	ble.n	8003ee4 <HTS221_H_ReadHumidity+0xfc>
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HTS221_H_ReadHumidity+0x134>)
 8003ee2:	e00a      	b.n	8003efa <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003ee4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	d502      	bpl.n	8003ef8 <HTS221_H_ReadHumidity+0x110>
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e000      	b.n	8003efa <HTS221_H_ReadHumidity+0x112>
 8003ef8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8003efa:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8003efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f08:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	447a0000 	.word	0x447a0000
 8003f1c:	447a0000 	.word	0x447a0000

08003f20 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2120      	movs	r1, #32
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fe10 	bl	8003b58 <SENSOR_IO_Read>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f62:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	2120      	movs	r1, #32
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fdd9 	bl	8003b24 <SENSOR_IO_Write>
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b088      	sub	sp, #32
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	4603      	mov	r3, r0
 8003f82:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	b2d8      	uxtb	r0, r3
 8003f88:	f107 0208 	add.w	r2, r7, #8
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	21b2      	movs	r1, #178	; 0xb2
 8003f90:	f7ff fe00 	bl	8003b94 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2135      	movs	r1, #53	; 0x35
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fddc 	bl	8003b58 <SENSOR_IO_Read>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003fa4:	7ffb      	ldrb	r3, [r7, #31]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	b21b      	sxth	r3, r3
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	b21a      	sxth	r2, r3
 8003fb0:	7a3b      	ldrb	r3, [r7, #8]
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003fb8:	7ffb      	ldrb	r3, [r7, #31]
 8003fba:	019b      	lsls	r3, r3, #6
 8003fbc:	b21b      	sxth	r3, r3
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	b21a      	sxth	r2, r3
 8003fc4:	7a7b      	ldrb	r3, [r7, #9]
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003fcc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003fd0:	10db      	asrs	r3, r3, #3
 8003fd2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003fd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fd8:	10db      	asrs	r3, r3, #3
 8003fda:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	b2d8      	uxtb	r0, r3
 8003fe0:	f107 0208 	add.w	r2, r7, #8
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	21bc      	movs	r1, #188	; 0xbc
 8003fe8:	f7ff fdd4 	bl	8003b94 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003fec:	7a7b      	ldrb	r3, [r7, #9]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	b21a      	sxth	r2, r3
 8003ff2:	7a3b      	ldrb	r3, [r7, #8]
 8003ff4:	b21b      	sxth	r3, r3
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	b21a      	sxth	r2, r3
 8004000:	7abb      	ldrb	r3, [r7, #10]
 8004002:	b21b      	sxth	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	b2d8      	uxtb	r0, r3
 800400c:	f107 0208 	add.w	r2, r7, #8
 8004010:	2302      	movs	r3, #2
 8004012:	21aa      	movs	r1, #170	; 0xaa
 8004014:	f7ff fdbe 	bl	8003b94 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004018:	7a7b      	ldrb	r3, [r7, #9]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	b21a      	sxth	r2, r3
 800401e:	7a3b      	ldrb	r3, [r7, #8]
 8004020:	b21b      	sxth	r3, r3
 8004022:	4313      	orrs	r3, r2
 8004024:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004026:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800402a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004038:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800403c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800404a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800404e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004052:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004064:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004074:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	ee07 3a90 	vmov	s15, r3
}
 800407e:	eeb0 0a67 	vmov.f32	s0, s15
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	463b      	mov	r3, r7
 8004090:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8004094:	783b      	ldrb	r3, [r7, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	2120      	movs	r1, #32
 800409a:	203c      	movs	r0, #60	; 0x3c
 800409c:	f7ff fd42 	bl	8003b24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	461a      	mov	r2, r3
 80040a4:	2121      	movs	r1, #33	; 0x21
 80040a6:	203c      	movs	r0, #60	; 0x3c
 80040a8:	f7ff fd3c 	bl	8003b24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80040ac:	78bb      	ldrb	r3, [r7, #2]
 80040ae:	461a      	mov	r2, r3
 80040b0:	2122      	movs	r1, #34	; 0x22
 80040b2:	203c      	movs	r0, #60	; 0x3c
 80040b4:	f7ff fd36 	bl	8003b24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	461a      	mov	r2, r3
 80040bc:	2123      	movs	r1, #35	; 0x23
 80040be:	203c      	movs	r0, #60	; 0x3c
 80040c0:	f7ff fd30 	bl	8003b24 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80040c4:	793b      	ldrb	r3, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	2124      	movs	r1, #36	; 0x24
 80040ca:	203c      	movs	r0, #60	; 0x3c
 80040cc:	f7ff fd2a 	bl	8003b24 <SENSOR_IO_Write>
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80040de:	2300      	movs	r3, #0
 80040e0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80040e2:	2122      	movs	r1, #34	; 0x22
 80040e4:	203c      	movs	r0, #60	; 0x3c
 80040e6:	f7ff fd37 	bl	8003b58 <SENSOR_IO_Read>
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	f023 0303 	bic.w	r3, r3, #3
 80040f4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	f043 0303 	orr.w	r3, r3, #3
 80040fc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	461a      	mov	r2, r3
 8004102:	2122      	movs	r1, #34	; 0x22
 8004104:	203c      	movs	r0, #60	; 0x3c
 8004106:	f7ff fd0d 	bl	8003b24 <SENSOR_IO_Write>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004116:	f7ff fcfb 	bl	8003b10 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800411a:	210f      	movs	r1, #15
 800411c:	203c      	movs	r0, #60	; 0x3c
 800411e:	f7ff fd1b 	bl	8003b58 <SENSOR_IO_Read>
 8004122:	4603      	mov	r3, r0
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}

08004128 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004136:	2122      	movs	r1, #34	; 0x22
 8004138:	203c      	movs	r0, #60	; 0x3c
 800413a:	f7ff fd0d 	bl	8003b58 <SENSOR_IO_Read>
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	f023 0320 	bic.w	r3, r3, #32
 8004148:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	f043 0320 	orr.w	r3, r3, #32
 8004156:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	461a      	mov	r2, r3
 800415c:	2122      	movs	r1, #34	; 0x22
 800415e:	203c      	movs	r0, #60	; 0x3c
 8004160:	f7ff fce0 	bl	8003b24 <SENSOR_IO_Write>
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8004182:	2121      	movs	r1, #33	; 0x21
 8004184:	203c      	movs	r0, #60	; 0x3c
 8004186:	f7ff fce7 	bl	8003b58 <SENSOR_IO_Read>
 800418a:	4603      	mov	r3, r0
 800418c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800418e:	f107 0208 	add.w	r2, r7, #8
 8004192:	2306      	movs	r3, #6
 8004194:	21a8      	movs	r1, #168	; 0xa8
 8004196:	203c      	movs	r0, #60	; 0x3c
 8004198:	f7ff fcfc 	bl	8003b94 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800419c:	2300      	movs	r3, #0
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e01f      	b.n	80041e2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	3301      	adds	r3, #1
 80041a8:	f107 0220 	add.w	r2, r7, #32
 80041ac:	4413      	add	r3, r2
 80041ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	f107 0120 	add.w	r1, r7, #32
 80041c0:	440b      	add	r3, r1
 80041c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
 80041ce:	b212      	sxth	r2, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	f107 0120 	add.w	r1, r7, #32
 80041d6:	440b      	add	r3, r1
 80041d8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
 80041de:	3301      	adds	r3, #1
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d9dc      	bls.n	80041a2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041ee:	2b60      	cmp	r3, #96	; 0x60
 80041f0:	d013      	beq.n	800421a <LIS3MDL_MagReadXYZ+0xae>
 80041f2:	2b60      	cmp	r3, #96	; 0x60
 80041f4:	dc14      	bgt.n	8004220 <LIS3MDL_MagReadXYZ+0xb4>
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d00c      	beq.n	8004214 <LIS3MDL_MagReadXYZ+0xa8>
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	dc10      	bgt.n	8004220 <LIS3MDL_MagReadXYZ+0xb4>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <LIS3MDL_MagReadXYZ+0x9c>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d003      	beq.n	800420e <LIS3MDL_MagReadXYZ+0xa2>
 8004206:	e00b      	b.n	8004220 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <LIS3MDL_MagReadXYZ+0x104>)
 800420a:	61bb      	str	r3, [r7, #24]
    break;
 800420c:	e008      	b.n	8004220 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800420e:	4b19      	ldr	r3, [pc, #100]	; (8004274 <LIS3MDL_MagReadXYZ+0x108>)
 8004210:	61bb      	str	r3, [r7, #24]
    break;
 8004212:	e005      	b.n	8004220 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <LIS3MDL_MagReadXYZ+0x10c>)
 8004216:	61bb      	str	r3, [r7, #24]
    break;
 8004218:	e002      	b.n	8004220 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <LIS3MDL_MagReadXYZ+0x110>)
 800421c:	61bb      	str	r3, [r7, #24]
    break;    
 800421e:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e01b      	b.n	800425e <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004226:	7ffb      	ldrb	r3, [r7, #31]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	f107 0220 	add.w	r2, r7, #32
 800422e:	4413      	add	r3, r2
 8004230:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800423c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004244:	7ffb      	ldrb	r3, [r7, #31]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004250:	ee17 2a90 	vmov	r2, s15
 8004254:	b212      	sxth	r2, r2
 8004256:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004258:	7ffb      	ldrb	r3, [r7, #31]
 800425a:	3301      	adds	r3, #1
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	7ffb      	ldrb	r3, [r7, #31]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d9e0      	bls.n	8004226 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	3e0f5c29 	.word	0x3e0f5c29
 8004274:	3e947ae1 	.word	0x3e947ae1
 8004278:	3edc28f6 	.word	0x3edc28f6
 800427c:	3f147ae1 	.word	0x3f147ae1

08004280 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f87b 	bl	8004388 <LPS22HB_Init>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80042a8:	f7ff fc32 	bl	8003b10 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	210f      	movs	r1, #15
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fc50 	bl	8003b58 <SENSOR_IO_Read>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	74fb      	strb	r3, [r7, #19]
 80042da:	e013      	b.n	8004304 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	3328      	adds	r3, #40	; 0x28
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	7cfc      	ldrb	r4, [r7, #19]
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7ff fc34 	bl	8003b58 <SENSOR_IO_Read>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	f107 0318 	add.w	r3, r7, #24
 80042f8:	4423      	add	r3, r4
 80042fa:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	3301      	adds	r3, #1
 8004302:	74fb      	strb	r3, [r7, #19]
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d9e8      	bls.n	80042dc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800430a:	2300      	movs	r3, #0
 800430c:	74fb      	strb	r3, [r7, #19]
 800430e:	e010      	b.n	8004332 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	f107 0218 	add.w	r2, r7, #24
 8004316:	4413      	add	r3, r2
 8004318:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800431c:	461a      	mov	r2, r3
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800432c:	7cfb      	ldrb	r3, [r7, #19]
 800432e:	3301      	adds	r3, #1
 8004330:	74fb      	strb	r3, [r7, #19]
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d9eb      	bls.n	8004310 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004348:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2264      	movs	r2, #100	; 0x64
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	da01      	bge.n	800435e <LPS22HB_P_ReadPressure+0x96>
 800435a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800435e:	131b      	asrs	r3, r3, #12
 8004360:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800436c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004384 <LPS22HB_P_ReadPressure+0xbc>
 8004370:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004374:	eef0 7a66 	vmov.f32	s15, s13
}
 8004378:	eeb0 0a67 	vmov.f32	s0, s15
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop
 8004384:	42c80000 	.word	0x42c80000

08004388 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	211a      	movs	r1, #26
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fbdd 	bl	8003b58 <SENSOR_IO_Read>
 800439e:	4603      	mov	r3, r0
 80043a0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	211a      	movs	r1, #26
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fbb2 	bl	8003b24 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2110      	movs	r1, #16
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fbc6 	bl	8003b58 <SENSOR_IO_Read>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80043de:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	f023 0302 	bic.w	r3, r3, #2
 80043e6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	2110      	movs	r1, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fb93 	bl	8003b24 <SENSOR_IO_Write>
}  
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004410:	2003      	movs	r0, #3
 8004412:	f000 f902 	bl	800461a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004416:	2000      	movs	r0, #0
 8004418:	f7fe fc2a 	bl	8002c70 <HAL_InitTick>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	71fb      	strb	r3, [r7, #7]
 8004426:	e001      	b.n	800442c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004428:	f7fe fb54 	bl	8002ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800442c:	79fb      	ldrb	r3, [r7, #7]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_IncTick+0x20>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_IncTick+0x24>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4413      	add	r3, r2
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_IncTick+0x24>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	2000006c 	.word	0x2000006c
 800445c:	20002944 	.word	0x20002944

08004460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <HAL_GetTick+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20002944 	.word	0x20002944

08004478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004480:	f7ff ffee 	bl	8004460 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d005      	beq.n	800449e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_Delay+0x44>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449e:	bf00      	nop
 80044a0:	f7ff ffde 	bl	8004460 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d8f7      	bhi.n	80044a0 <HAL_Delay+0x28>
  {
  }
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000006c 	.word	0x2000006c

080044c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <__NVIC_SetPriorityGrouping+0x44>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044dc:	4013      	ands	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f2:	4a04      	ldr	r2, [pc, #16]	; (8004504 <__NVIC_SetPriorityGrouping+0x44>)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	60d3      	str	r3, [r2, #12]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <__NVIC_GetPriorityGrouping+0x18>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	f003 0307 	and.w	r3, r3, #7
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004532:	2b00      	cmp	r3, #0
 8004534:	db0b      	blt.n	800454e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	f003 021f 	and.w	r2, r3, #31
 800453c:	4907      	ldr	r1, [pc, #28]	; (800455c <__NVIC_EnableIRQ+0x38>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2001      	movs	r0, #1
 8004546:	fa00 f202 	lsl.w	r2, r0, r2
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000e100 	.word	0xe000e100

08004560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	db0a      	blt.n	800458a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	490c      	ldr	r1, [pc, #48]	; (80045ac <__NVIC_SetPriority+0x4c>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	0112      	lsls	r2, r2, #4
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	440b      	add	r3, r1
 8004584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004588:	e00a      	b.n	80045a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	4908      	ldr	r1, [pc, #32]	; (80045b0 <__NVIC_SetPriority+0x50>)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	3b04      	subs	r3, #4
 8004598:	0112      	lsls	r2, r2, #4
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	440b      	add	r3, r1
 800459e:	761a      	strb	r2, [r3, #24]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	e000e100 	.word	0xe000e100
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b089      	sub	sp, #36	; 0x24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f1c3 0307 	rsb	r3, r3, #7
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	bf28      	it	cs
 80045d2:	2304      	movcs	r3, #4
 80045d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3304      	adds	r3, #4
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d902      	bls.n	80045e4 <NVIC_EncodePriority+0x30>
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3b03      	subs	r3, #3
 80045e2:	e000      	b.n	80045e6 <NVIC_EncodePriority+0x32>
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43da      	mvns	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	401a      	ands	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	43d9      	mvns	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800460c:	4313      	orrs	r3, r2
         );
}
 800460e:	4618      	mov	r0, r3
 8004610:	3724      	adds	r7, #36	; 0x24
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ff4c 	bl	80044c0 <__NVIC_SetPriorityGrouping>
}
 8004628:	bf00      	nop
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004642:	f7ff ff61 	bl	8004508 <__NVIC_GetPriorityGrouping>
 8004646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	6978      	ldr	r0, [r7, #20]
 800464e:	f7ff ffb1 	bl	80045b4 <NVIC_EncodePriority>
 8004652:	4602      	mov	r2, r0
 8004654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff80 	bl	8004560 <__NVIC_SetPriority>
}
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff54 	bl	8004524 <__NVIC_EnableIRQ>
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004692:	e17f      	b.n	8004994 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2101      	movs	r1, #1
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	4013      	ands	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8171 	beq.w	800498e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d00b      	beq.n	80046cc <HAL_GPIO_Init+0x48>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d007      	beq.n	80046cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046c0:	2b11      	cmp	r3, #17
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b12      	cmp	r3, #18
 80046ca:	d130      	bne.n	800472e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004702:	2201      	movs	r2, #1
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	f003 0201 	and.w	r2, r3, #1
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b03      	cmp	r3, #3
 8004738:	d118      	bne.n	800476c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004740:	2201      	movs	r2, #1
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f003 0201 	and.w	r2, r3, #1
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x128>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b12      	cmp	r3, #18
 80047aa:	d123      	bne.n	80047f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	08da      	lsrs	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3208      	adds	r2, #8
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220f      	movs	r2, #15
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4013      	ands	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	08da      	lsrs	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3208      	adds	r2, #8
 80047ee:	6939      	ldr	r1, [r7, #16]
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80ac 	beq.w	800498e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004836:	4b5f      	ldr	r3, [pc, #380]	; (80049b4 <HAL_GPIO_Init+0x330>)
 8004838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483a:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <HAL_GPIO_Init+0x330>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	6613      	str	r3, [r2, #96]	; 0x60
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <HAL_GPIO_Init+0x330>)
 8004844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800484e:	4a5a      	ldr	r2, [pc, #360]	; (80049b8 <HAL_GPIO_Init+0x334>)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4013      	ands	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004878:	d025      	beq.n	80048c6 <HAL_GPIO_Init+0x242>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4f      	ldr	r2, [pc, #316]	; (80049bc <HAL_GPIO_Init+0x338>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01f      	beq.n	80048c2 <HAL_GPIO_Init+0x23e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4e      	ldr	r2, [pc, #312]	; (80049c0 <HAL_GPIO_Init+0x33c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <HAL_GPIO_Init+0x23a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4d      	ldr	r2, [pc, #308]	; (80049c4 <HAL_GPIO_Init+0x340>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0x236>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4c      	ldr	r2, [pc, #304]	; (80049c8 <HAL_GPIO_Init+0x344>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00d      	beq.n	80048b6 <HAL_GPIO_Init+0x232>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4b      	ldr	r2, [pc, #300]	; (80049cc <HAL_GPIO_Init+0x348>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x22e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4a      	ldr	r2, [pc, #296]	; (80049d0 <HAL_GPIO_Init+0x34c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_GPIO_Init+0x22a>
 80048aa:	2306      	movs	r3, #6
 80048ac:	e00c      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048ae:	2307      	movs	r3, #7
 80048b0:	e00a      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e008      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x244>
 80048c6:	2300      	movs	r3, #0
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	f002 0203 	and.w	r2, r2, #3
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	4093      	lsls	r3, r2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048d8:	4937      	ldr	r1, [pc, #220]	; (80049b8 <HAL_GPIO_Init+0x334>)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_GPIO_Init+0x350>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4013      	ands	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800490a:	4a32      	ldr	r2, [pc, #200]	; (80049d4 <HAL_GPIO_Init+0x350>)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004910:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	43db      	mvns	r3, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <HAL_GPIO_Init+0x350>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800495e:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_GPIO_Init+0x350>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	43db      	mvns	r3, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4013      	ands	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004988:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <HAL_GPIO_Init+0x350>)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3301      	adds	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fa22 f303 	lsr.w	r3, r2, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f47f ae78 	bne.w	8004694 <HAL_GPIO_Init+0x10>
  }
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40010000 	.word	0x40010000
 80049bc:	48000400 	.word	0x48000400
 80049c0:	48000800 	.word	0x48000800
 80049c4:	48000c00 	.word	0x48000c00
 80049c8:	48001000 	.word	0x48001000
 80049cc:	48001400 	.word	0x48001400
 80049d0:	48001800 	.word	0x48001800
 80049d4:	40010400 	.word	0x40010400

080049d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049e6:	e0cd      	b.n	8004b84 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049e8:	2201      	movs	r2, #1
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80c0 	beq.w	8004b7e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049fe:	4a68      	ldr	r2, [pc, #416]	; (8004ba0 <HAL_GPIO_DeInit+0x1c8>)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	3302      	adds	r3, #2
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a26:	d025      	beq.n	8004a74 <HAL_GPIO_DeInit+0x9c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a5e      	ldr	r2, [pc, #376]	; (8004ba4 <HAL_GPIO_DeInit+0x1cc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01f      	beq.n	8004a70 <HAL_GPIO_DeInit+0x98>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a5d      	ldr	r2, [pc, #372]	; (8004ba8 <HAL_GPIO_DeInit+0x1d0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d019      	beq.n	8004a6c <HAL_GPIO_DeInit+0x94>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <HAL_GPIO_DeInit+0x1d4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_GPIO_DeInit+0x90>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a5b      	ldr	r2, [pc, #364]	; (8004bb0 <HAL_GPIO_DeInit+0x1d8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00d      	beq.n	8004a64 <HAL_GPIO_DeInit+0x8c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a5a      	ldr	r2, [pc, #360]	; (8004bb4 <HAL_GPIO_DeInit+0x1dc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d007      	beq.n	8004a60 <HAL_GPIO_DeInit+0x88>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a59      	ldr	r2, [pc, #356]	; (8004bb8 <HAL_GPIO_DeInit+0x1e0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d101      	bne.n	8004a5c <HAL_GPIO_DeInit+0x84>
 8004a58:	2306      	movs	r3, #6
 8004a5a:	e00c      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a5c:	2307      	movs	r3, #7
 8004a5e:	e00a      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a60:	2305      	movs	r3, #5
 8004a62:	e008      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a64:	2304      	movs	r3, #4
 8004a66:	e006      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e004      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e002      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_GPIO_DeInit+0x9e>
 8004a74:	2300      	movs	r3, #0
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	f002 0203 	and.w	r2, r2, #3
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	4093      	lsls	r3, r2
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d132      	bne.n	8004aec <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a86:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	494b      	ldr	r1, [pc, #300]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004a94:	4b49      	ldr	r3, [pc, #292]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	4947      	ldr	r1, [pc, #284]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004aa2:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	4944      	ldr	r1, [pc, #272]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004ab0:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	4940      	ldr	r1, [pc, #256]	; (8004bbc <HAL_GPIO_DeInit+0x1e4>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004ace:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <HAL_GPIO_DeInit+0x1c8>)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43da      	mvns	r2, r3
 8004ade:	4830      	ldr	r0, [pc, #192]	; (8004ba0 <HAL_GPIO_DeInit+0x1c8>)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2103      	movs	r1, #3
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	08da      	lsrs	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3208      	adds	r2, #8
 8004b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	220f      	movs	r2, #15
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	08d2      	lsrs	r2, r2, #3
 8004b20:	4019      	ands	r1, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3208      	adds	r2, #8
 8004b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2103      	movs	r1, #3
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	2101      	movs	r1, #1
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	401a      	ands	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	2103      	movs	r1, #3
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	401a      	ands	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	2101      	movs	r1, #1
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fa01 f303 	lsl.w	r3, r1, r3
 8004b76:	43db      	mvns	r3, r3
 8004b78:	401a      	ands	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f47f af2b 	bne.w	80049e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	48000400 	.word	0x48000400
 8004ba8:	48000800 	.word	0x48000800
 8004bac:	48000c00 	.word	0x48000c00
 8004bb0:	48001000 	.word	0x48001000
 8004bb4:	48001400 	.word	0x48001400
 8004bb8:	48001800 	.word	0x48001800
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	887b      	ldrh	r3, [r7, #2]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	e001      	b.n	8004be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c00:	787b      	ldrb	r3, [r7, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c0c:	e002      	b.n	8004c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4013      	ands	r3, r2
 8004c38:	041a      	lsls	r2, r3, #16
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43d9      	mvns	r1, r3
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	400b      	ands	r3, r1
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	619a      	str	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e081      	b.n	8004d6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8a8 	bl	8004dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2224      	movs	r2, #36	; 0x24
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d107      	bne.n	8004cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	e006      	b.n	8004cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d104      	bne.n	8004cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	ea42 0103 	orr.w	r1, r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	021a      	lsls	r2, r3, #8
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e021      	b.n	8004dc8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	; 0x24
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f821 	bl	8004de4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	817b      	strh	r3, [r7, #10]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	813b      	strh	r3, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	f040 80f9 	bne.w	8005012 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_I2C_Mem_Write+0x34>
 8004e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0ed      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_I2C_Mem_Write+0x4e>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0e6      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e4e:	f7ff fb07 	bl	8004460 <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	2319      	movs	r3, #25
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fac3 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0d1      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2221      	movs	r2, #33	; 0x21
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2240      	movs	r2, #64	; 0x40
 8004e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e98:	88f8      	ldrh	r0, [r7, #6]
 8004e9a:	893a      	ldrh	r2, [r7, #8]
 8004e9c:	8979      	ldrh	r1, [r7, #10]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f9d3 	bl	8005254 <I2C_RequestMemoryWrite>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0a9      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2bff      	cmp	r3, #255	; 0xff
 8004ec8:	d90e      	bls.n	8004ee8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	8979      	ldrh	r1, [r7, #10]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fba5 	bl	8005630 <I2C_TransferConfig>
 8004ee6:	e00f      	b.n	8004f08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	8979      	ldrh	r1, [r7, #10]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fb94 	bl	8005630 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 faad 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e07b      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d034      	beq.n	8004fc0 <HAL_I2C_Mem_Write+0x1c8>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d130      	bne.n	8004fc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	2200      	movs	r2, #0
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fa3f 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e04d      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2bff      	cmp	r3, #255	; 0xff
 8004f80:	d90e      	bls.n	8004fa0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	22ff      	movs	r2, #255	; 0xff
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	8979      	ldrh	r1, [r7, #10]
 8004f90:	2300      	movs	r3, #0
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fb49 	bl	8005630 <I2C_TransferConfig>
 8004f9e:	e00f      	b.n	8004fc0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	8979      	ldrh	r1, [r7, #10]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 fb38 	bl	8005630 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d19e      	bne.n	8004f08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa8c 	bl	80054ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e01a      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <HAL_I2C_Mem_Write+0x224>)
 8004ff2:	400b      	ands	r3, r1
 8004ff4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	e000      	b.n	8005014 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005012:	2302      	movs	r3, #2
  }
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	fe00e800 	.word	0xfe00e800

08005020 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	f040 80fd 	bne.w	8005242 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_I2C_Mem_Read+0x34>
 800504e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0f1      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_I2C_Mem_Read+0x4e>
 800506a:	2302      	movs	r3, #2
 800506c:	e0ea      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005076:	f7ff f9f3 	bl	8004460 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2319      	movs	r3, #25
 8005082:	2201      	movs	r2, #1
 8005084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f9af 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d5      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2222      	movs	r2, #34	; 0x22
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2240      	movs	r2, #64	; 0x40
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050c0:	88f8      	ldrh	r0, [r7, #6]
 80050c2:	893a      	ldrh	r2, [r7, #8]
 80050c4:	8979      	ldrh	r1, [r7, #10]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	4603      	mov	r3, r0
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f913 	bl	80052fc <I2C_RequestMemoryRead>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0ad      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2bff      	cmp	r3, #255	; 0xff
 80050f0:	d90e      	bls.n	8005110 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	8979      	ldrh	r1, [r7, #10]
 8005100:	4b52      	ldr	r3, [pc, #328]	; (800524c <HAL_I2C_Mem_Read+0x22c>)
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fa91 	bl	8005630 <I2C_TransferConfig>
 800510e:	e00f      	b.n	8005130 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	b2da      	uxtb	r2, r3
 8005120:	8979      	ldrh	r1, [r7, #10]
 8005122:	4b4a      	ldr	r3, [pc, #296]	; (800524c <HAL_I2C_Mem_Read+0x22c>)
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fa80 	bl	8005630 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	2200      	movs	r2, #0
 8005138:	2104      	movs	r1, #4
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f956 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e07c      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d034      	beq.n	80051f0 <HAL_I2C_Mem_Read+0x1d0>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d130      	bne.n	80051f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	2200      	movs	r2, #0
 8005196:	2180      	movs	r1, #128	; 0x80
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f927 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04d      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2bff      	cmp	r3, #255	; 0xff
 80051b0:	d90e      	bls.n	80051d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fa31 	bl	8005630 <I2C_TransferConfig>
 80051ce:	e00f      	b.n	80051f0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	8979      	ldrh	r1, [r7, #10]
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa20 	bl	8005630 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d19a      	bne.n	8005130 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f974 	bl	80054ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e01a      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2220      	movs	r2, #32
 8005214:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_I2C_Mem_Read+0x230>)
 8005222:	400b      	ands	r3, r1
 8005224:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	80002400 	.word	0x80002400
 8005250:	fe00e800 	.word	0xfe00e800

08005254 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	8979      	ldrh	r1, [r7, #10]
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <I2C_RequestMemoryWrite+0xa4>)
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f9d7 	bl	8005630 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	69b9      	ldr	r1, [r7, #24]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f8f0 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e02c      	b.n	80052f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800529c:	893b      	ldrh	r3, [r7, #8]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	629a      	str	r2, [r3, #40]	; 0x28
 80052a6:	e015      	b.n	80052d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052a8:	893b      	ldrh	r3, [r7, #8]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	69b9      	ldr	r1, [r7, #24]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8d6 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e012      	b.n	80052f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052ca:	893b      	ldrh	r3, [r7, #8]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2200      	movs	r2, #0
 80052dc:	2180      	movs	r1, #128	; 0x80
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f884 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	80002000 	.word	0x80002000

080052fc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	8979      	ldrh	r1, [r7, #10]
 800531c:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <I2C_RequestMemoryRead+0xa4>)
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	2300      	movs	r3, #0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f984 	bl	8005630 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	69b9      	ldr	r1, [r7, #24]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f89d 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e02c      	b.n	8005396 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d105      	bne.n	800534e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005342:	893b      	ldrh	r3, [r7, #8]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
 800534c:	e015      	b.n	800537a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800534e:	893b      	ldrh	r3, [r7, #8]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	b29b      	uxth	r3, r3
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	69b9      	ldr	r1, [r7, #24]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f883 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e012      	b.n	8005396 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005370:	893b      	ldrh	r3, [r7, #8]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2200      	movs	r2, #0
 8005382:	2140      	movs	r1, #64	; 0x40
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f831 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	80002000 	.word	0x80002000

080053a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d103      	bne.n	80053c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d007      	beq.n	80053e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	619a      	str	r2, [r3, #24]
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fc:	e022      	b.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d01e      	beq.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7ff f82b 	bl	8004460 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d113      	bne.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e00f      	b.n	8005464 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d0cd      	beq.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005478:	e02c      	b.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f870 	bl	8005564 <I2C_IsAcknowledgeFailed>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e02a      	b.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d01e      	beq.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fe ffe3 	bl	8004460 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e007      	b.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d1cb      	bne.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f8:	e028      	b.n	800554c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f830 	bl	8005564 <I2C_IsAcknowledgeFailed>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e026      	b.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fe ffa7 	bl	8004460 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d113      	bne.n	800554c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d1cf      	bne.n	80054fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b10      	cmp	r3, #16
 800557c:	d151      	bne.n	8005622 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800557e:	e022      	b.n	80055c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005586:	d01e      	beq.n	80055c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005588:	f7fe ff6a 	bl	8004460 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <I2C_IsAcknowledgeFailed+0x3a>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d113      	bne.n	80055c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e02e      	b.n	8005624 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d1d5      	bne.n	8005580 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2210      	movs	r2, #16
 80055da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fedd 	bl	80053a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <I2C_IsAcknowledgeFailed+0xc8>)
 80055f6:	400b      	ands	r3, r1
 80055f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	fe00e800 	.word	0xfe00e800

08005630 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	607b      	str	r3, [r7, #4]
 800563a:	460b      	mov	r3, r1
 800563c:	817b      	strh	r3, [r7, #10]
 800563e:	4613      	mov	r3, r2
 8005640:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	0d5b      	lsrs	r3, r3, #21
 800564c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005650:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <I2C_TransferConfig+0x58>)
 8005652:	430b      	orrs	r3, r1
 8005654:	43db      	mvns	r3, r3
 8005656:	ea02 0103 	and.w	r1, r2, r3
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005660:	7a7b      	ldrb	r3, [r7, #9]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	431a      	orrs	r2, r3
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	03ff63ff 	.word	0x03ff63ff

0800568c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d138      	bne.n	8005714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e032      	b.n	8005716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <HAL_PWREx_GetVoltageRange+0x18>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40007000 	.word	0x40007000

08005740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574e:	d130      	bne.n	80057b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005750:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d038      	beq.n	80057d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005766:	4a1e      	ldr	r2, [pc, #120]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800576c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2232      	movs	r2, #50	; 0x32
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	4a1b      	ldr	r2, [pc, #108]	; (80057e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	0c9b      	lsrs	r3, r3, #18
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005784:	e002      	b.n	800578c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3b01      	subs	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d102      	bne.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f2      	bne.n	8005786 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ac:	d110      	bne.n	80057d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e00f      	b.n	80057d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057be:	d007      	beq.n	80057d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057c8:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40007000 	.word	0x40007000
 80057e4:	20000004 	.word	0x20000004
 80057e8:	431bde83 	.word	0x431bde83

080057ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e3d4      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057fe:	4ba1      	ldr	r3, [pc, #644]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005808:	4b9e      	ldr	r3, [pc, #632]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80e4 	beq.w	80059e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_RCC_OscConfig+0x4a>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b0c      	cmp	r3, #12
 800582a:	f040 808b 	bne.w	8005944 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b01      	cmp	r3, #1
 8005832:	f040 8087 	bne.w	8005944 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005836:	4b93      	ldr	r3, [pc, #588]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_RCC_OscConfig+0x62>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e3ac      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1a      	ldr	r2, [r3, #32]
 8005852:	4b8c      	ldr	r3, [pc, #560]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <HAL_RCC_OscConfig+0x7c>
 800585e:	4b89      	ldr	r3, [pc, #548]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005866:	e005      	b.n	8005874 <HAL_RCC_OscConfig+0x88>
 8005868:	4b86      	ldr	r3, [pc, #536]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800586a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005874:	4293      	cmp	r3, r2
 8005876:	d223      	bcs.n	80058c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fd73 	bl	8006368 <RCC_SetFlashLatencyFromMSIRange>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e38d      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588c:	4b7d      	ldr	r3, [pc, #500]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a7c      	ldr	r2, [pc, #496]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005892:	f043 0308 	orr.w	r3, r3, #8
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	4b7a      	ldr	r3, [pc, #488]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	4977      	ldr	r1, [pc, #476]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058aa:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	4972      	ldr	r1, [pc, #456]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
 80058be:	e025      	b.n	800590c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058c0:	4b70      	ldr	r3, [pc, #448]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a6f      	ldr	r2, [pc, #444]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058c6:	f043 0308 	orr.w	r3, r3, #8
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	4b6d      	ldr	r3, [pc, #436]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	496a      	ldr	r1, [pc, #424]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058de:	4b69      	ldr	r3, [pc, #420]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	4965      	ldr	r1, [pc, #404]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fd33 	bl	8006368 <RCC_SetFlashLatencyFromMSIRange>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e34d      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800590c:	f000 fc36 	bl	800617c <HAL_RCC_GetSysClockFreq>
 8005910:	4602      	mov	r2, r0
 8005912:	4b5c      	ldr	r3, [pc, #368]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	091b      	lsrs	r3, r3, #4
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	495a      	ldr	r1, [pc, #360]	; (8005a88 <HAL_RCC_OscConfig+0x29c>)
 800591e:	5ccb      	ldrb	r3, [r1, r3]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
 8005928:	4a58      	ldr	r2, [pc, #352]	; (8005a8c <HAL_RCC_OscConfig+0x2a0>)
 800592a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800592c:	4b58      	ldr	r3, [pc, #352]	; (8005a90 <HAL_RCC_OscConfig+0x2a4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fd f99d 	bl	8002c70 <HAL_InitTick>
 8005936:	4603      	mov	r3, r0
 8005938:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d052      	beq.n	80059e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	e331      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d032      	beq.n	80059b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800594c:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a4c      	ldr	r2, [pc, #304]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005958:	f7fe fd82 	bl	8004460 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005960:	f7fe fd7e 	bl	8004460 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e31a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005972:	4b44      	ldr	r3, [pc, #272]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800597e:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005984:	f043 0308 	orr.w	r3, r3, #8
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	493b      	ldr	r1, [pc, #236]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800599c:	4b39      	ldr	r3, [pc, #228]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	4936      	ldr	r1, [pc, #216]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]
 80059b0:	e01a      	b.n	80059e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059b2:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059be:	f7fe fd4f 	bl	8004460 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059c6:	f7fe fd4b 	bl	8004460 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e2e7      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059d8:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0x1da>
 80059e4:	e000      	b.n	80059e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d074      	beq.n	8005ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d005      	beq.n	8005a06 <HAL_RCC_OscConfig+0x21a>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d10e      	bne.n	8005a1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d10b      	bne.n	8005a1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a06:	4b1f      	ldr	r3, [pc, #124]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d064      	beq.n	8005adc <HAL_RCC_OscConfig+0x2f0>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d160      	bne.n	8005adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e2c4      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x24a>
 8005a28:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e01d      	b.n	8005a72 <HAL_RCC_OscConfig+0x286>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a3e:	d10c      	bne.n	8005a5a <HAL_RCC_OscConfig+0x26e>
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a0f      	ldr	r2, [pc, #60]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	e00b      	b.n	8005a72 <HAL_RCC_OscConfig+0x286>
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a06      	ldr	r2, [pc, #24]	; (8005a84 <HAL_RCC_OscConfig+0x298>)
 8005a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01c      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7a:	f7fe fcf1 	bl	8004460 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a80:	e011      	b.n	8005aa6 <HAL_RCC_OscConfig+0x2ba>
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800cab4 	.word	0x0800cab4
 8005a8c:	20000004 	.word	0x20000004
 8005a90:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a94:	f7fe fce4 	bl	8004460 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	; 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e280      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa6:	4baf      	ldr	r3, [pc, #700]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x2a8>
 8005ab2:	e014      	b.n	8005ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fe fcd4 	bl	8004460 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fe fcd0 	bl	8004460 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e26c      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ace:	4ba5      	ldr	r3, [pc, #660]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1f0      	bne.n	8005abc <HAL_RCC_OscConfig+0x2d0>
 8005ada:	e000      	b.n	8005ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d060      	beq.n	8005bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_OscConfig+0x310>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d119      	bne.n	8005b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d116      	bne.n	8005b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005afc:	4b99      	ldr	r3, [pc, #612]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_OscConfig+0x328>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e249      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b93      	ldr	r3, [pc, #588]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	4990      	ldr	r1, [pc, #576]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b28:	e040      	b.n	8005bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d023      	beq.n	8005b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b32:	4b8c      	ldr	r3, [pc, #560]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a8b      	ldr	r2, [pc, #556]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fe fc8f 	bl	8004460 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b46:	f7fe fc8b 	bl	8004460 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e227      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b58:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b7f      	ldr	r3, [pc, #508]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	497c      	ldr	r1, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]
 8005b78:	e018      	b.n	8005bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b86:	f7fe fc6b 	bl	8004460 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8e:	f7fe fc67 	bl	8004460 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e203      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ba0:	4b70      	ldr	r3, [pc, #448]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f0      	bne.n	8005b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d03c      	beq.n	8005c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01c      	beq.n	8005bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc0:	4b68      	ldr	r3, [pc, #416]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc6:	4a67      	ldr	r2, [pc, #412]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fe fc46 	bl	8004460 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fe fc42 	bl	8004460 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e1de      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ef      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x3ec>
 8005bf8:	e01b      	b.n	8005c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfa:	4b5a      	ldr	r3, [pc, #360]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c00:	4a58      	ldr	r2, [pc, #352]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fe fc29 	bl	8004460 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c12:	f7fe fc25 	bl	8004460 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e1c1      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c24:	4b4f      	ldr	r3, [pc, #316]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ef      	bne.n	8005c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80a6 	beq.w	8005d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c44:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10d      	bne.n	8005c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c50:	4b44      	ldr	r3, [pc, #272]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	4a43      	ldr	r2, [pc, #268]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c5c:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c6c:	4b3e      	ldr	r3, [pc, #248]	; (8005d68 <HAL_RCC_OscConfig+0x57c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d118      	bne.n	8005caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c78:	4b3b      	ldr	r3, [pc, #236]	; (8005d68 <HAL_RCC_OscConfig+0x57c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a3a      	ldr	r2, [pc, #232]	; (8005d68 <HAL_RCC_OscConfig+0x57c>)
 8005c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c84:	f7fe fbec 	bl	8004460 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8c:	f7fe fbe8 	bl	8004460 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e184      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9e:	4b32      	ldr	r3, [pc, #200]	; (8005d68 <HAL_RCC_OscConfig+0x57c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d108      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x4d8>
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc2:	e024      	b.n	8005d0e <HAL_RCC_OscConfig+0x522>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d110      	bne.n	8005cee <HAL_RCC_OscConfig+0x502>
 8005ccc:	4b25      	ldr	r3, [pc, #148]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	4a24      	ldr	r2, [pc, #144]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cd4:	f043 0304 	orr.w	r3, r3, #4
 8005cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cec:	e00f      	b.n	8005d0e <HAL_RCC_OscConfig+0x522>
 8005cee:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cfe:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005d06:	f023 0304 	bic.w	r3, r3, #4
 8005d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d016      	beq.n	8005d44 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d16:	f7fe fba3 	bl	8004460 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1c:	e00a      	b.n	8005d34 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1e:	f7fe fb9f 	bl	8004460 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e139      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCC_OscConfig+0x578>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ed      	beq.n	8005d1e <HAL_RCC_OscConfig+0x532>
 8005d42:	e01a      	b.n	8005d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d44:	f7fe fb8c 	bl	8004460 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d4a:	e00f      	b.n	8005d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d4c:	f7fe fb88 	bl	8004460 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d906      	bls.n	8005d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e122      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d6c:	4b90      	ldr	r3, [pc, #576]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e8      	bne.n	8005d4c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d80:	4b8b      	ldr	r3, [pc, #556]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d84:	4a8a      	ldr	r2, [pc, #552]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8108 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	f040 80d0 	bne.w	8005f40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005da0:	4b83      	ldr	r3, [pc, #524]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f003 0203 	and.w	r2, r3, #3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d130      	bne.n	8005e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d127      	bne.n	8005e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d11f      	bne.n	8005e16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005de0:	2a07      	cmp	r2, #7
 8005de2:	bf14      	ite	ne
 8005de4:	2201      	movne	r2, #1
 8005de6:	2200      	moveq	r2, #0
 8005de8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d113      	bne.n	8005e16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d109      	bne.n	8005e16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d06e      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	d069      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e1c:	4b64      	ldr	r3, [pc, #400]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e28:	4b61      	ldr	r3, [pc, #388]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0b7      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e38:	4b5d      	ldr	r3, [pc, #372]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5c      	ldr	r2, [pc, #368]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e44:	f7fe fb0c 	bl	8004460 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4c:	f7fe fb08 	bl	8004460 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e0a4      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5e:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e6a:	4b51      	ldr	r3, [pc, #324]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <HAL_RCC_OscConfig+0x7c8>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e7a:	3a01      	subs	r2, #1
 8005e7c:	0112      	lsls	r2, r2, #4
 8005e7e:	4311      	orrs	r1, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e84:	0212      	lsls	r2, r2, #8
 8005e86:	4311      	orrs	r1, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e8c:	0852      	lsrs	r2, r2, #1
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	0552      	lsls	r2, r2, #21
 8005e92:	4311      	orrs	r1, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e98:	0852      	lsrs	r2, r2, #1
 8005e9a:	3a01      	subs	r2, #1
 8005e9c:	0652      	lsls	r2, r2, #25
 8005e9e:	4311      	orrs	r1, r2
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ea4:	0912      	lsrs	r2, r2, #4
 8005ea6:	0452      	lsls	r2, r2, #17
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	4941      	ldr	r1, [pc, #260]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005eb0:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3e      	ldr	r2, [pc, #248]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a3b      	ldr	r2, [pc, #236]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ec8:	f7fe faca 	bl	8004460 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed0:	f7fe fac6 	bl	8004460 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e062      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ee2:	4b33      	ldr	r3, [pc, #204]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005eee:	e05a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e059      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef4:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d152      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f00:	4b2b      	ldr	r3, [pc, #172]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f0c:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a27      	ldr	r2, [pc, #156]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f18:	f7fe faa2 	bl	8004460 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f20:	f7fe fa9e 	bl	8004460 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e03a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	4b1f      	ldr	r3, [pc, #124]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0x734>
 8005f3e:	e032      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d02d      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d105      	bne.n	8005f6a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f5e:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f64:	f023 0303 	bic.w	r3, r3, #3
 8005f68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fe fa71 	bl	8004460 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f82:	f7fe fa6d 	bl	8004460 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e009      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <HAL_RCC_OscConfig+0x7c4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f0      	bne.n	8005f82 <HAL_RCC_OscConfig+0x796>
 8005fa0:	e001      	b.n	8005fa6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	f99d808c 	.word	0xf99d808c

08005fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0c8      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fcc:	4b66      	ldr	r3, [pc, #408]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d910      	bls.n	8005ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fda:	4b63      	ldr	r3, [pc, #396]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 0207 	bic.w	r2, r3, #7
 8005fe2:	4961      	ldr	r1, [pc, #388]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b5f      	ldr	r3, [pc, #380]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0b0      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d04c      	beq.n	80060a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b03      	cmp	r3, #3
 800600e:	d107      	bne.n	8006020 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006010:	4b56      	ldr	r3, [pc, #344]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d121      	bne.n	8006060 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e09e      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d107      	bne.n	8006038 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006028:	4b50      	ldr	r3, [pc, #320]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d115      	bne.n	8006060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e092      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006040:	4b4a      	ldr	r3, [pc, #296]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e086      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006050:	4b46      	ldr	r3, [pc, #280]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e07e      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006060:	4b42      	ldr	r3, [pc, #264]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 0203 	bic.w	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	493f      	ldr	r1, [pc, #252]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006072:	f7fe f9f5 	bl	8004460 <HAL_GetTick>
 8006076:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006078:	e00a      	b.n	8006090 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800607a:	f7fe f9f1 	bl	8004460 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e066      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006090:	4b36      	ldr	r3, [pc, #216]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 020c 	and.w	r2, r3, #12
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	429a      	cmp	r2, r3
 80060a0:	d1eb      	bne.n	800607a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ae:	4b2f      	ldr	r3, [pc, #188]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	492c      	ldr	r1, [pc, #176]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c0:	4b29      	ldr	r3, [pc, #164]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d210      	bcs.n	80060f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 0207 	bic.w	r2, r3, #7
 80060d6:	4924      	ldr	r1, [pc, #144]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b22      	ldr	r3, [pc, #136]	; (8006168 <HAL_RCC_ClockConfig+0x1b0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e036      	b.n	800615e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060fc:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4918      	ldr	r1, [pc, #96]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d009      	beq.n	800612e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4910      	ldr	r1, [pc, #64]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800612e:	f000 f825 	bl	800617c <HAL_RCC_GetSysClockFreq>
 8006132:	4602      	mov	r2, r0
 8006134:	4b0d      	ldr	r3, [pc, #52]	; (800616c <HAL_RCC_ClockConfig+0x1b4>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	490c      	ldr	r1, [pc, #48]	; (8006170 <HAL_RCC_ClockConfig+0x1b8>)
 8006140:	5ccb      	ldrb	r3, [r1, r3]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	fa22 f303 	lsr.w	r3, r2, r3
 800614a:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800614e:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <HAL_RCC_ClockConfig+0x1c0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fc fd8c 	bl	8002c70 <HAL_InitTick>
 8006158:	4603      	mov	r3, r0
 800615a:	72fb      	strb	r3, [r7, #11]

  return status;
 800615c:	7afb      	ldrb	r3, [r7, #11]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40022000 	.word	0x40022000
 800616c:	40021000 	.word	0x40021000
 8006170:	0800cab4 	.word	0x0800cab4
 8006174:	20000004 	.word	0x20000004
 8006178:	20000068 	.word	0x20000068

0800617c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800617c:	b480      	push	{r7}
 800617e:	b089      	sub	sp, #36	; 0x24
 8006180:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800618a:	4b3e      	ldr	r3, [pc, #248]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 030c 	and.w	r3, r3, #12
 8006192:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006194:	4b3b      	ldr	r3, [pc, #236]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x34>
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b0c      	cmp	r3, #12
 80061a8:	d121      	bne.n	80061ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d11e      	bne.n	80061ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061b0:	4b34      	ldr	r3, [pc, #208]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061bc:	4b31      	ldr	r3, [pc, #196]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 80061be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e005      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10d      	bne.n	8006204 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ec:	e00a      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d102      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <HAL_RCC_GetSysClockFreq+0x110>)
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e004      	b.n	8006204 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006200:	4b23      	ldr	r3, [pc, #140]	; (8006290 <HAL_RCC_GetSysClockFreq+0x114>)
 8006202:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d134      	bne.n	8006274 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800620a:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d003      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0xa6>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d003      	beq.n	8006228 <HAL_RCC_GetSysClockFreq+0xac>
 8006220:	e005      	b.n	800622e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006222:	4b1a      	ldr	r3, [pc, #104]	; (800628c <HAL_RCC_GetSysClockFreq+0x110>)
 8006224:	617b      	str	r3, [r7, #20]
      break;
 8006226:	e005      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006228:	4b19      	ldr	r3, [pc, #100]	; (8006290 <HAL_RCC_GetSysClockFreq+0x114>)
 800622a:	617b      	str	r3, [r7, #20]
      break;
 800622c:	e002      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	617b      	str	r3, [r7, #20]
      break;
 8006232:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	091b      	lsrs	r3, r3, #4
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	3301      	adds	r3, #1
 8006240:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	fb02 f203 	mul.w	r2, r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <HAL_RCC_GetSysClockFreq+0x108>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	0e5b      	lsrs	r3, r3, #25
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	3301      	adds	r3, #1
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006274:	69bb      	ldr	r3, [r7, #24]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3724      	adds	r7, #36	; 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40021000 	.word	0x40021000
 8006288:	0800cacc 	.word	0x0800cacc
 800628c:	00f42400 	.word	0x00f42400
 8006290:	007a1200 	.word	0x007a1200

08006294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006298:	4b03      	ldr	r3, [pc, #12]	; (80062a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800629a:	681b      	ldr	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000004 	.word	0x20000004

080062ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062b0:	f7ff fff0 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	4904      	ldr	r1, [pc, #16]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40021000 	.word	0x40021000
 80062d4:	0800cac4 	.word	0x0800cac4

080062d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062dc:	f7ff ffda 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 80062e0:	4602      	mov	r2, r0
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	0adb      	lsrs	r3, r3, #11
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	4904      	ldr	r1, [pc, #16]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062ee:	5ccb      	ldrb	r3, [r1, r3]
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800cac4 	.word	0x0800cac4

08006304 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	220f      	movs	r2, #15
 8006312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006314:	4b12      	ldr	r3, [pc, #72]	; (8006360 <HAL_RCC_GetClockConfig+0x5c>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0203 	and.w	r2, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <HAL_RCC_GetClockConfig+0x5c>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <HAL_RCC_GetClockConfig+0x5c>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006338:	4b09      	ldr	r3, [pc, #36]	; (8006360 <HAL_RCC_GetClockConfig+0x5c>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <HAL_RCC_GetClockConfig+0x60>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0207 	and.w	r2, r3, #7
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	601a      	str	r2, [r3, #0]
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40021000 	.word	0x40021000
 8006364:	40022000 	.word	0x40022000

08006368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006374:	4b2a      	ldr	r3, [pc, #168]	; (8006420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006380:	f7ff f9d0 	bl	8005724 <HAL_PWREx_GetVoltageRange>
 8006384:	6178      	str	r0, [r7, #20]
 8006386:	e014      	b.n	80063b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006388:	4b25      	ldr	r3, [pc, #148]	; (8006420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	4a24      	ldr	r2, [pc, #144]	; (8006420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800638e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006392:	6593      	str	r3, [r2, #88]	; 0x58
 8006394:	4b22      	ldr	r3, [pc, #136]	; (8006420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063a0:	f7ff f9c0 	bl	8005724 <HAL_PWREx_GetVoltageRange>
 80063a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80063a6:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d10b      	bne.n	80063d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b80      	cmp	r3, #128	; 0x80
 80063be:	d919      	bls.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2ba0      	cmp	r3, #160	; 0xa0
 80063c4:	d902      	bls.n	80063cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063c6:	2302      	movs	r3, #2
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	e013      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063cc:	2301      	movs	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e010      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d902      	bls.n	80063de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80063d8:	2303      	movs	r3, #3
 80063da:	613b      	str	r3, [r7, #16]
 80063dc:	e00a      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d102      	bne.n	80063ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063e4:	2302      	movs	r3, #2
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	e004      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b70      	cmp	r3, #112	; 0x70
 80063ee:	d101      	bne.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063f0:	2301      	movs	r3, #1
 80063f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f023 0207 	bic.w	r2, r3, #7
 80063fc:	4909      	ldr	r1, [pc, #36]	; (8006424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	d001      	beq.n	8006416 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40021000 	.word	0x40021000
 8006424:	40022000 	.word	0x40022000

08006428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006430:	2300      	movs	r3, #0
 8006432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006434:	2300      	movs	r3, #0
 8006436:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006440:	2b00      	cmp	r3, #0
 8006442:	d041      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800644c:	d02a      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800644e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006452:	d824      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006458:	d008      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800645a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800645e:	d81e      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006468:	d010      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800646a:	e018      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800646c:	4b86      	ldr	r3, [pc, #536]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4a85      	ldr	r2, [pc, #532]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006476:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006478:	e015      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3304      	adds	r3, #4
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fabb 	bl	80069fc <RCCEx_PLLSAI1_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800648a:	e00c      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3320      	adds	r3, #32
 8006490:	2100      	movs	r1, #0
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fba6 	bl	8006be4 <RCCEx_PLLSAI2_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800649c:	e003      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	74fb      	strb	r3, [r7, #19]
      break;
 80064a2:	e000      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a6:	7cfb      	ldrb	r3, [r7, #19]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064ac:	4b76      	ldr	r3, [pc, #472]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ba:	4973      	ldr	r1, [pc, #460]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064c2:	e001      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d041      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064dc:	d02a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80064de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064e2:	d824      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064e8:	d008      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ee:	d81e      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80064f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064f8:	d010      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064fa:	e018      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064fc:	4b62      	ldr	r3, [pc, #392]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4a61      	ldr	r2, [pc, #388]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006506:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006508:	e015      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fa73 	bl	80069fc <RCCEx_PLLSAI1_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800651a:	e00c      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3320      	adds	r3, #32
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fb5e 	bl	8006be4 <RCCEx_PLLSAI2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	74fb      	strb	r3, [r7, #19]
      break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800653c:	4b52      	ldr	r3, [pc, #328]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654a:	494f      	ldr	r1, [pc, #316]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006552:	e001      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	7cfb      	ldrb	r3, [r7, #19]
 8006556:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80a0 	beq.w	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006580:	4b41      	ldr	r3, [pc, #260]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006584:	4a40      	ldr	r2, [pc, #256]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658a:	6593      	str	r3, [r2, #88]	; 0x58
 800658c:	4b3e      	ldr	r3, [pc, #248]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006598:	2301      	movs	r3, #1
 800659a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800659c:	4b3b      	ldr	r3, [pc, #236]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a3a      	ldr	r2, [pc, #232]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065a8:	f7fd ff5a 	bl	8004460 <HAL_GetTick>
 80065ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065ae:	e009      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b0:	f7fd ff56 	bl	8004460 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d902      	bls.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	74fb      	strb	r3, [r7, #19]
        break;
 80065c2:	e005      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065c4:	4b31      	ldr	r3, [pc, #196]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ef      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80065d0:	7cfb      	ldrb	r3, [r7, #19]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d15c      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065d6:	4b2c      	ldr	r3, [pc, #176]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01f      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d019      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006600:	4b21      	ldr	r3, [pc, #132]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006606:	4a20      	ldr	r2, [pc, #128]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006620:	4a19      	ldr	r2, [pc, #100]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d016      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fd ff15 	bl	8004460 <HAL_GetTick>
 8006636:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006638:	e00b      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663a:	f7fd ff11 	bl	8004460 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	; 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d902      	bls.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	74fb      	strb	r3, [r7, #19]
            break;
 8006650:	e006      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ec      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006660:	7cfb      	ldrb	r3, [r7, #19]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006676:	4904      	ldr	r1, [pc, #16]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800667e:	e009      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	74bb      	strb	r3, [r7, #18]
 8006684:	e006      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006686:	bf00      	nop
 8006688:	40021000 	.word	0x40021000
 800668c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006694:	7c7b      	ldrb	r3, [r7, #17]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669a:	4b9e      	ldr	r3, [pc, #632]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669e:	4a9d      	ldr	r2, [pc, #628]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066b2:	4b98      	ldr	r3, [pc, #608]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f023 0203 	bic.w	r2, r3, #3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	4994      	ldr	r1, [pc, #592]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066d4:	4b8f      	ldr	r3, [pc, #572]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066da:	f023 020c 	bic.w	r2, r3, #12
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	498c      	ldr	r1, [pc, #560]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066f6:	4b87      	ldr	r3, [pc, #540]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	4983      	ldr	r1, [pc, #524]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006718:	4b7e      	ldr	r3, [pc, #504]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	497b      	ldr	r1, [pc, #492]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800673a:	4b76      	ldr	r3, [pc, #472]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006748:	4972      	ldr	r1, [pc, #456]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800675c:	4b6d      	ldr	r3, [pc, #436]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	496a      	ldr	r1, [pc, #424]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800677e:	4b65      	ldr	r3, [pc, #404]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678c:	4961      	ldr	r1, [pc, #388]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067a0:	4b5c      	ldr	r3, [pc, #368]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ae:	4959      	ldr	r1, [pc, #356]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067c2:	4b54      	ldr	r3, [pc, #336]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	4950      	ldr	r1, [pc, #320]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067e4:	4b4b      	ldr	r3, [pc, #300]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	4948      	ldr	r1, [pc, #288]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006806:	4b43      	ldr	r3, [pc, #268]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	493f      	ldr	r1, [pc, #252]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d028      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006828:	4b3a      	ldr	r3, [pc, #232]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006836:	4937      	ldr	r1, [pc, #220]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006846:	d106      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006848:	4b32      	ldr	r3, [pc, #200]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	4a31      	ldr	r2, [pc, #196]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006852:	60d3      	str	r3, [r2, #12]
 8006854:	e011      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800685e:	d10c      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	2101      	movs	r1, #1
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f8c8 	bl	80069fc <RCCEx_PLLSAI1_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006876:	7cfb      	ldrb	r3, [r7, #19]
 8006878:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d028      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006886:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	491f      	ldr	r1, [pc, #124]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a4:	d106      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b0:	60d3      	str	r3, [r2, #12]
 80068b2:	e011      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2101      	movs	r1, #1
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 f899 	bl	80069fc <RCCEx_PLLSAI1_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068ce:	7cfb      	ldrb	r3, [r7, #19]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80068d4:	7cfb      	ldrb	r3, [r7, #19]
 80068d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d02b      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f2:	4908      	ldr	r1, [pc, #32]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006902:	d109      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4a02      	ldr	r2, [pc, #8]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800690a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800690e:	60d3      	str	r3, [r2, #12]
 8006910:	e014      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006920:	d10c      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3304      	adds	r3, #4
 8006926:	2101      	movs	r1, #1
 8006928:	4618      	mov	r0, r3
 800692a:	f000 f867 	bl	80069fc <RCCEx_PLLSAI1_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02f      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006948:	4b2b      	ldr	r3, [pc, #172]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800694a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006956:	4928      	ldr	r1, [pc, #160]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006966:	d10d      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	2102      	movs	r1, #2
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f844 	bl	80069fc <RCCEx_PLLSAI1_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d014      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800697e:	7cfb      	ldrb	r3, [r7, #19]
 8006980:	74bb      	strb	r3, [r7, #18]
 8006982:	e011      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800698c:	d10c      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3320      	adds	r3, #32
 8006992:	2102      	movs	r1, #2
 8006994:	4618      	mov	r0, r3
 8006996:	f000 f925 	bl	8006be4 <RCCEx_PLLSAI2_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800699e:	7cfb      	ldrb	r3, [r7, #19]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c2:	490d      	ldr	r1, [pc, #52]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e6:	4904      	ldr	r1, [pc, #16]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40021000 	.word	0x40021000

080069fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a0a:	4b75      	ldr	r3, [pc, #468]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d018      	beq.n	8006a48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a16:	4b72      	ldr	r3, [pc, #456]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0203 	and.w	r2, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d10d      	bne.n	8006a42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
       ||
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d009      	beq.n	8006a42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a2e:	4b6c      	ldr	r3, [pc, #432]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d047      	beq.n	8006ad2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
 8006a46:	e044      	b.n	8006ad2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d018      	beq.n	8006a82 <RCCEx_PLLSAI1_Config+0x86>
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d825      	bhi.n	8006aa0 <RCCEx_PLLSAI1_Config+0xa4>
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d002      	beq.n	8006a5e <RCCEx_PLLSAI1_Config+0x62>
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d009      	beq.n	8006a70 <RCCEx_PLLSAI1_Config+0x74>
 8006a5c:	e020      	b.n	8006aa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a5e:	4b60      	ldr	r3, [pc, #384]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d11d      	bne.n	8006aa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a6e:	e01a      	b.n	8006aa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a70:	4b5b      	ldr	r3, [pc, #364]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d116      	bne.n	8006aaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a80:	e013      	b.n	8006aaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a82:	4b57      	ldr	r3, [pc, #348]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a8e:	4b54      	ldr	r3, [pc, #336]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a9e:	e006      	b.n	8006aae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa4:	e004      	b.n	8006ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e002      	b.n	8006ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ab6:	4b4a      	ldr	r3, [pc, #296]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	430b      	orrs	r3, r1
 8006acc:	4944      	ldr	r1, [pc, #272]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d17d      	bne.n	8006bd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ad8:	4b41      	ldr	r3, [pc, #260]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a40      	ldr	r2, [pc, #256]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae4:	f7fd fcbc 	bl	8004460 <HAL_GetTick>
 8006ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006aea:	e009      	b.n	8006b00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aec:	f7fd fcb8 	bl	8004460 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d902      	bls.n	8006b00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	73fb      	strb	r3, [r7, #15]
        break;
 8006afe:	e005      	b.n	8006b0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b00:	4b37      	ldr	r3, [pc, #220]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1ef      	bne.n	8006aec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d160      	bne.n	8006bd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d111      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b18:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6892      	ldr	r2, [r2, #8]
 8006b28:	0211      	lsls	r1, r2, #8
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68d2      	ldr	r2, [r2, #12]
 8006b2e:	0912      	lsrs	r2, r2, #4
 8006b30:	0452      	lsls	r2, r2, #17
 8006b32:	430a      	orrs	r2, r1
 8006b34:	492a      	ldr	r1, [pc, #168]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	610b      	str	r3, [r1, #16]
 8006b3a:	e027      	b.n	8006b8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d112      	bne.n	8006b68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b42:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6892      	ldr	r2, [r2, #8]
 8006b52:	0211      	lsls	r1, r2, #8
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6912      	ldr	r2, [r2, #16]
 8006b58:	0852      	lsrs	r2, r2, #1
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	0552      	lsls	r2, r2, #21
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	491f      	ldr	r1, [pc, #124]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]
 8006b66:	e011      	b.n	8006b8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6892      	ldr	r2, [r2, #8]
 8006b78:	0211      	lsls	r1, r2, #8
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6952      	ldr	r2, [r2, #20]
 8006b7e:	0852      	lsrs	r2, r2, #1
 8006b80:	3a01      	subs	r2, #1
 8006b82:	0652      	lsls	r2, r2, #25
 8006b84:	430a      	orrs	r2, r1
 8006b86:	4916      	ldr	r1, [pc, #88]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b98:	f7fd fc62 	bl	8004460 <HAL_GetTick>
 8006b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b9e:	e009      	b.n	8006bb4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ba0:	f7fd fc5e 	bl	8004460 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d902      	bls.n	8006bb4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8006bb2:	e005      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bb4:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0ef      	beq.n	8006ba0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bc6:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	4904      	ldr	r1, [pc, #16]	; (8006be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40021000 	.word	0x40021000

08006be4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bf2:	4b6a      	ldr	r3, [pc, #424]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d018      	beq.n	8006c30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006bfe:	4b67      	ldr	r3, [pc, #412]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0203 	and.w	r2, r3, #3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d10d      	bne.n	8006c2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
       ||
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006c16:	4b61      	ldr	r3, [pc, #388]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	091b      	lsrs	r3, r3, #4
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
       ||
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d047      	beq.n	8006cba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
 8006c2e:	e044      	b.n	8006cba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d018      	beq.n	8006c6a <RCCEx_PLLSAI2_Config+0x86>
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d825      	bhi.n	8006c88 <RCCEx_PLLSAI2_Config+0xa4>
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d002      	beq.n	8006c46 <RCCEx_PLLSAI2_Config+0x62>
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d009      	beq.n	8006c58 <RCCEx_PLLSAI2_Config+0x74>
 8006c44:	e020      	b.n	8006c88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c46:	4b55      	ldr	r3, [pc, #340]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d11d      	bne.n	8006c8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c56:	e01a      	b.n	8006c8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c58:	4b50      	ldr	r3, [pc, #320]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d116      	bne.n	8006c92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c68:	e013      	b.n	8006c92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c6a:	4b4c      	ldr	r3, [pc, #304]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10f      	bne.n	8006c96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c76:	4b49      	ldr	r3, [pc, #292]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c86:	e006      	b.n	8006c96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8c:	e004      	b.n	8006c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c9e:	4b3f      	ldr	r3, [pc, #252]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	4939      	ldr	r1, [pc, #228]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d167      	bne.n	8006d90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006cc0:	4b36      	ldr	r3, [pc, #216]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a35      	ldr	r2, [pc, #212]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ccc:	f7fd fbc8 	bl	8004460 <HAL_GetTick>
 8006cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006cd2:	e009      	b.n	8006ce8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cd4:	f7fd fbc4 	bl	8004460 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d902      	bls.n	8006ce8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ce6:	e005      	b.n	8006cf4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ce8:	4b2c      	ldr	r3, [pc, #176]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ef      	bne.n	8006cd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d14a      	bne.n	8006d90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d111      	bne.n	8006d24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d00:	4b26      	ldr	r3, [pc, #152]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6892      	ldr	r2, [r2, #8]
 8006d10:	0211      	lsls	r1, r2, #8
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68d2      	ldr	r2, [r2, #12]
 8006d16:	0912      	lsrs	r2, r2, #4
 8006d18:	0452      	lsls	r2, r2, #17
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	491f      	ldr	r1, [pc, #124]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	614b      	str	r3, [r1, #20]
 8006d22:	e011      	b.n	8006d48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d24:	4b1d      	ldr	r3, [pc, #116]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6892      	ldr	r2, [r2, #8]
 8006d34:	0211      	lsls	r1, r2, #8
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6912      	ldr	r2, [r2, #16]
 8006d3a:	0852      	lsrs	r2, r2, #1
 8006d3c:	3a01      	subs	r2, #1
 8006d3e:	0652      	lsls	r2, r2, #25
 8006d40:	430a      	orrs	r2, r1
 8006d42:	4916      	ldr	r1, [pc, #88]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fd fb84 	bl	8004460 <HAL_GetTick>
 8006d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d5a:	e009      	b.n	8006d70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d5c:	f7fd fb80 	bl	8004460 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d902      	bls.n	8006d70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8006d6e:	e005      	b.n	8006d7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0ef      	beq.n	8006d5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d82:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	4904      	ldr	r1, [pc, #16]	; (8006d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40021000 	.word	0x40021000

08006da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e095      	b.n	8006ede <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d108      	bne.n	8006dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc2:	d009      	beq.n	8006dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	61da      	str	r2, [r3, #28]
 8006dca:	e005      	b.n	8006dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fb fe96 	bl	8002b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e18:	d902      	bls.n	8006e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
 8006e1e:	e002      	b.n	8006e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e2e:	d007      	beq.n	8006e40 <HAL_SPI_Init+0xa0>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e38:	d002      	beq.n	8006e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	ea42 0103 	orr.w	r1, r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	0c1b      	lsrs	r3, r3, #16
 8006e9c:	f003 0204 	and.w	r2, r3, #4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ebc:	ea42 0103 	orr.w	r1, r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e01a      	b.n	8006f2e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7fb fe4b 	bl	8002bac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b088      	sub	sp, #32
 8006f3a:	af02      	add	r7, sp, #8
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	603b      	str	r3, [r7, #0]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f52:	d112      	bne.n	8006f7a <HAL_SPI_Receive+0x44>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10e      	bne.n	8006f7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f64:	88fa      	ldrh	r2, [r7, #6]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	68b9      	ldr	r1, [r7, #8]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f910 	bl	8007196 <HAL_SPI_TransmitReceive>
 8006f76:	4603      	mov	r3, r0
 8006f78:	e109      	b.n	800718e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_SPI_Receive+0x52>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e102      	b.n	800718e <HAL_SPI_Receive+0x258>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f90:	f7fd fa66 	bl	8004460 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fa6:	e0e9      	b.n	800717c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_SPI_Receive+0x7e>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fb8:	e0e0      	b.n	800717c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	88fa      	ldrh	r2, [r7, #6]
 8006fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007004:	d908      	bls.n	8007018 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	e007      	b.n	8007028 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007026:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007030:	d10f      	bne.n	8007052 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007050:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d007      	beq.n	8007070 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007078:	d867      	bhi.n	800714a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800707a:	e030      	b.n	80070de <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d117      	bne.n	80070ba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f103 020c 	add.w	r2, r3, #12
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070b8:	e011      	b.n	80070de <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ba:	f7fd f9d1 	bl	8004460 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d803      	bhi.n	80070d2 <HAL_SPI_Receive+0x19c>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d102      	bne.n	80070d8 <HAL_SPI_Receive+0x1a2>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070dc:	e04e      	b.n	800717c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1c8      	bne.n	800707c <HAL_SPI_Receive+0x146>
 80070ea:	e034      	b.n	8007156 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d115      	bne.n	8007126 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	b292      	uxth	r2, r2
 8007106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	1c9a      	adds	r2, r3, #2
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007124:	e011      	b.n	800714a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007126:	f7fd f99b 	bl	8004460 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d803      	bhi.n	800713e <HAL_SPI_Receive+0x208>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Receive+0x20e>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007148:	e018      	b.n	800717c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1ca      	bne.n	80070ec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fee8 	bl	8007f30 <SPI_EndRxTransaction>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]
 8007178:	e000      	b.n	800717c <HAL_SPI_Receive+0x246>
  }

error :
 800717a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800718c:	7dfb      	ldrb	r3, [r7, #23]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b08a      	sub	sp, #40	; 0x28
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
 80071a2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071a4:	2301      	movs	r3, #1
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_SPI_TransmitReceive+0x26>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e1fb      	b.n	80075b4 <HAL_SPI_TransmitReceive+0x41e>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c4:	f7fd f94c 	bl	8004460 <HAL_GetTick>
 80071c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071d8:	887b      	ldrh	r3, [r7, #2]
 80071da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e0:	7efb      	ldrb	r3, [r7, #27]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d00e      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x6e>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ec:	d106      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x66>
 80071f6:	7efb      	ldrb	r3, [r7, #27]
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d003      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007202:	e1cd      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x80>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x80>
 8007210:	887b      	ldrh	r3, [r7, #2]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800721c:	e1c0      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b04      	cmp	r3, #4
 8007228:	d003      	beq.n	8007232 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2205      	movs	r2, #5
 800722e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	887a      	ldrh	r2, [r7, #2]
 8007242:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	887a      	ldrh	r2, [r7, #2]
 800724a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	887a      	ldrh	r2, [r7, #2]
 8007258:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	887a      	ldrh	r2, [r7, #2]
 800725e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007274:	d802      	bhi.n	800727c <HAL_SPI_TransmitReceive+0xe6>
 8007276:	8a3b      	ldrh	r3, [r7, #16]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d908      	bls.n	800728e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800728a:	605a      	str	r2, [r3, #4]
 800728c:	e007      	b.n	800729e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800729c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d007      	beq.n	80072bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072c4:	d97c      	bls.n	80073c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_SPI_TransmitReceive+0x13e>
 80072ce:	8a7b      	ldrh	r3, [r7, #18]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d169      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072f8:	e056      	b.n	80073a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b02      	cmp	r3, #2
 8007306:	d11b      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x1aa>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x1aa>
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	2b01      	cmp	r3, #1
 8007316:	d113      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	881a      	ldrh	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	1c9a      	adds	r2, r3, #2
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b01      	cmp	r3, #1
 800734c:	d11c      	bne.n	8007388 <HAL_SPI_TransmitReceive+0x1f2>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	b292      	uxth	r2, r2
 8007366:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	1c9a      	adds	r2, r3, #2
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007384:	2301      	movs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007388:	f7fd f86a 	bl	8004460 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007394:	429a      	cmp	r2, r3
 8007396:	d807      	bhi.n	80073a8 <HAL_SPI_TransmitReceive+0x212>
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d003      	beq.n	80073a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073a6:	e0fb      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1a3      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x164>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d19d      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x164>
 80073be:	e0df      	b.n	8007580 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_SPI_TransmitReceive+0x23a>
 80073c8:	8a7b      	ldrh	r3, [r7, #18]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	f040 80cb 	bne.w	8007566 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d912      	bls.n	8007400 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	881a      	ldrh	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	1c9a      	adds	r2, r3, #2
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b02      	subs	r3, #2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073fe:	e0b2      	b.n	8007566 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007426:	e09e      	b.n	8007566 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b02      	cmp	r3, #2
 8007434:	d134      	bne.n	80074a0 <HAL_SPI_TransmitReceive+0x30a>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d02f      	beq.n	80074a0 <HAL_SPI_TransmitReceive+0x30a>
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	2b01      	cmp	r3, #1
 8007444:	d12c      	bne.n	80074a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d912      	bls.n	8007476 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	881a      	ldrh	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	1c9a      	adds	r2, r3, #2
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b02      	subs	r3, #2
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007474:	e012      	b.n	800749c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	7812      	ldrb	r2, [r2, #0]
 8007482:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d148      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x3aa>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d042      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d923      	bls.n	800750e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	b292      	uxth	r2, r2
 80074d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	1c9a      	adds	r2, r3, #2
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b02      	subs	r3, #2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d81f      	bhi.n	800753c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	e016      	b.n	800753c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f103 020c 	add.w	r2, r3, #12
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800753c:	2301      	movs	r3, #1
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007540:	f7fc ff8e 	bl	8004460 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754c:	429a      	cmp	r2, r3
 800754e:	d803      	bhi.n	8007558 <HAL_SPI_TransmitReceive+0x3c2>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007556:	d102      	bne.n	800755e <HAL_SPI_TransmitReceive+0x3c8>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007564:	e01c      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	f47f af5b 	bne.w	8007428 <HAL_SPI_TransmitReceive+0x292>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	f47f af54 	bne.w	8007428 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fd2b 	bl	8007fe0 <SPI_EndRxTxTransaction>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d006      	beq.n	800759e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	661a      	str	r2, [r3, #96]	; 0x60
 800759c:	e000      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800759e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3728      	adds	r7, #40	; 0x28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_SPI_Transmit_IT+0x20>
 80075d8:	2302      	movs	r3, #2
 80075da:	e072      	b.n	80076c2 <HAL_SPI_Transmit_IT+0x106>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_SPI_Transmit_IT+0x34>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075f4:	e060      	b.n	80076b8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d002      	beq.n	8007608 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007602:	2302      	movs	r3, #2
 8007604:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007606:	e057      	b.n	80076b8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2203      	movs	r2, #3
 800760c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	88fa      	ldrh	r2, [r7, #6]
 8007620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	88fa      	ldrh	r2, [r7, #6]
 8007626:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800764c:	d903      	bls.n	8007656 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <HAL_SPI_Transmit_IT+0x114>)
 8007652:	651a      	str	r2, [r3, #80]	; 0x50
 8007654:	e002      	b.n	800765c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <HAL_SPI_Transmit_IT+0x118>)
 800765a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007664:	d10f      	bne.n	8007686 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007674:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007684:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007694:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d008      	beq.n	80076b6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e000      	b.n	80076b8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80076b6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	08007cb9 	.word	0x08007cb9
 80076d4:	08007c73 	.word	0x08007c73

080076d8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d110      	bne.n	8007714 <HAL_SPI_Receive_IT+0x3c>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fa:	d10b      	bne.n	8007714 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2204      	movs	r2, #4
 8007700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007704:	88fb      	ldrh	r3, [r7, #6]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f894 	bl	8007838 <HAL_SPI_TransmitReceive_IT>
 8007710:	4603      	mov	r3, r0
 8007712:	e089      	b.n	8007828 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_SPI_Receive_IT+0x4a>
 800771e:	2302      	movs	r3, #2
 8007720:	e082      	b.n	8007828 <HAL_SPI_Receive_IT+0x150>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b01      	cmp	r3, #1
 8007734:	d002      	beq.n	800773c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007736:	2302      	movs	r3, #2
 8007738:	75fb      	strb	r3, [r7, #23]
    goto error;
 800773a:	e070      	b.n	800781e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SPI_Receive_IT+0x70>
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800774c:	e067      	b.n	800781e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2204      	movs	r2, #4
 8007752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	88fa      	ldrh	r2, [r7, #6]
 800776e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007792:	d90b      	bls.n	80077ac <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077a2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4a22      	ldr	r2, [pc, #136]	; (8007830 <HAL_SPI_Receive_IT+0x158>)
 80077a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80077aa:	e00a      	b.n	80077c2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077ba:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <HAL_SPI_Receive_IT+0x15c>)
 80077c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ca:	d10f      	bne.n	80077ec <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077ea:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80077fa:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b40      	cmp	r3, #64	; 0x40
 8007808:	d008      	beq.n	800781c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e000      	b.n	800781e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800781c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	08007c27 	.word	0x08007c27
 8007834:	08007bd7 	.word	0x08007bd7

08007838 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_SPI_TransmitReceive_IT+0x20>
 8007854:	2302      	movs	r3, #2
 8007856:	e091      	b.n	800797c <HAL_SPI_TransmitReceive_IT+0x144>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007866:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800786e:	7dbb      	ldrb	r3, [r7, #22]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d00d      	beq.n	8007890 <HAL_SPI_TransmitReceive_IT+0x58>
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800787a:	d106      	bne.n	800788a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <HAL_SPI_TransmitReceive_IT+0x52>
 8007884:	7dbb      	ldrb	r3, [r7, #22]
 8007886:	2b04      	cmp	r3, #4
 8007888:	d002      	beq.n	8007890 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800788a:	2302      	movs	r3, #2
 800788c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800788e:	e070      	b.n	8007972 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800789c:	887b      	ldrh	r3, [r7, #2]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d102      	bne.n	80078a8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078a6:	e064      	b.n	8007972 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d003      	beq.n	80078bc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2205      	movs	r2, #5
 80078b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	887a      	ldrh	r2, [r7, #2]
 80078cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	887a      	ldrh	r2, [r7, #2]
 80078d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	887a      	ldrh	r2, [r7, #2]
 80078de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	887a      	ldrh	r2, [r7, #2]
 80078e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078f2:	d906      	bls.n	8007902 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4a24      	ldr	r2, [pc, #144]	; (8007988 <HAL_SPI_TransmitReceive_IT+0x150>)
 80078f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4a23      	ldr	r2, [pc, #140]	; (800798c <HAL_SPI_TransmitReceive_IT+0x154>)
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50
 8007900:	e005      	b.n	800790e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a22      	ldr	r2, [pc, #136]	; (8007990 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007906:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a22      	ldr	r2, [pc, #136]	; (8007994 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800790c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007916:	d802      	bhi.n	800791e <HAL_SPI_TransmitReceive_IT+0xe6>
 8007918:	887b      	ldrh	r3, [r7, #2]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d908      	bls.n	8007930 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800792c:	605a      	str	r2, [r3, #4]
 800792e:	e007      	b.n	8007940 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800794e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d008      	beq.n	8007970 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e000      	b.n	8007972 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007970:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	08007b11 	.word	0x08007b11
 800798c:	08007b77 	.word	0x08007b77
 8007990:	080079c1 	.word	0x080079c1
 8007994:	08007a7f 	.word	0x08007a7f

08007998 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d923      	bls.n	8007a1c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	b292      	uxth	r2, r2
 80079e0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	1c9a      	adds	r2, r3, #2
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b02      	subs	r3, #2
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d11f      	bne.n	8007a4a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	e016      	b.n	8007a4a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f103 020c 	add.w	r2, r3, #12
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	7812      	ldrb	r2, [r2, #0]
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10f      	bne.n	8007a76 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a64:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d102      	bne.n	8007a76 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fafb 	bl	800806c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d912      	bls.n	8007ab6 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	881a      	ldrh	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	1c9a      	adds	r2, r3, #2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b02      	subs	r3, #2
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ab4:	e012      	b.n	8007adc <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d110      	bne.n	8007b08 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007af4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fab2 	bl	800806c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	b292      	uxth	r2, r2
 8007b24:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10f      	bne.n	8007b6e <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b5c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d102      	bne.n	8007b6e <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fa7f 	bl	800806c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	881a      	ldrh	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	1c9a      	adds	r2, r3, #2
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d110      	bne.n	8007bce <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa4f 	bl	800806c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f103 020c 	add.w	r2, r3, #12
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa69 	bl	80080f0 <SPI_CloseRx_ISR>
  }
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	b292      	uxth	r2, r2
 8007c3a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	1c9a      	adds	r2, r3, #2
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa43 	bl	80080f0 <SPI_CloseRx_ISR>
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	330c      	adds	r3, #12
 8007c84:	7812      	ldrb	r2, [r2, #0]
 8007c86:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa50 	bl	8008150 <SPI_CloseTx_ISR>
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	881a      	ldrh	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	1c9a      	adds	r2, r3, #2
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d102      	bne.n	8007cf4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa2e 	bl	8008150 <SPI_CloseTx_ISR>
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d0c:	f7fc fba8 	bl	8004460 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4413      	add	r3, r2
 8007d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d1c:	f7fc fba0 	bl	8004460 <HAL_GetTick>
 8007d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d22:	4b39      	ldr	r3, [pc, #228]	; (8007e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	015b      	lsls	r3, r3, #5
 8007d28:	0d1b      	lsrs	r3, r3, #20
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	fb02 f303 	mul.w	r3, r2, r3
 8007d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d32:	e054      	b.n	8007dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d050      	beq.n	8007dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d3c:	f7fc fb90 	bl	8004460 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d902      	bls.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d13d      	bne.n	8007dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d6a:	d111      	bne.n	8007d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d74:	d004      	beq.n	8007d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7e:	d107      	bne.n	8007d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d10f      	bne.n	8007dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e017      	b.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4013      	ands	r3, r2
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	bf0c      	ite	eq
 8007dee:	2301      	moveq	r3, #1
 8007df0:	2300      	movne	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d19b      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3720      	adds	r7, #32
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000004 	.word	0x20000004

08007e0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e1a:	f7fc fb21 	bl	8004460 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	4413      	add	r3, r2
 8007e28:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e2a:	f7fc fb19 	bl	8004460 <HAL_GetTick>
 8007e2e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e30:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4613      	mov	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	00da      	lsls	r2, r3, #3
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	0d1b      	lsrs	r3, r3, #20
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	fb02 f303 	mul.w	r3, r2, r3
 8007e46:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e48:	e062      	b.n	8007f10 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e50:	d109      	bne.n	8007e66 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007e64:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d050      	beq.n	8007f10 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e6e:	f7fc faf7 	bl	8004460 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d902      	bls.n	8007e84 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d13d      	bne.n	8007f00 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e9c:	d111      	bne.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea6:	d004      	beq.n	8007eb2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb0:	d107      	bne.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eca:	d10f      	bne.n	8007eec <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e010      	b.n	8007f22 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d194      	bne.n	8007e4a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000004 	.word	0x20000004

08007f30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f44:	d111      	bne.n	8007f6a <SPI_EndRxTransaction+0x3a>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4e:	d004      	beq.n	8007f5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f58:	d107      	bne.n	8007f6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	2180      	movs	r1, #128	; 0x80
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f7ff fec1 	bl	8007cfc <SPI_WaitFlagStateUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f84:	f043 0220 	orr.w	r2, r3, #32
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e023      	b.n	8007fd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f98:	d11d      	bne.n	8007fd6 <SPI_EndRxTransaction+0xa6>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa2:	d004      	beq.n	8007fae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fac:	d113      	bne.n	8007fd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff ff26 	bl	8007e0c <SPI_WaitFifoStateUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fca:	f043 0220 	orr.w	r2, r3, #32
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e000      	b.n	8007fd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff ff07 	bl	8007e0c <SPI_WaitFifoStateUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008008:	f043 0220 	orr.w	r2, r3, #32
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e027      	b.n	8008064 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2200      	movs	r2, #0
 800801c:	2180      	movs	r1, #128	; 0x80
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fe6c 	bl	8007cfc <SPI_WaitFlagStateUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802e:	f043 0220 	orr.w	r2, r3, #32
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e014      	b.n	8008064 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff fee0 	bl	8007e0c <SPI_WaitFifoStateUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	f043 0220 	orr.w	r2, r3, #32
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e000      	b.n	8008064 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008074:	f7fc f9f4 	bl	8004460 <HAL_GetTick>
 8008078:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0220 	bic.w	r2, r2, #32
 8008088:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	2164      	movs	r1, #100	; 0x64
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff ffa6 	bl	8007fe0 <SPI_EndRxTxTransaction>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809e:	f043 0220 	orr.w	r2, r3, #32
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d115      	bne.n	80080da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d107      	bne.n	80080ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fa f8a0 	bl	8002208 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80080c8:	e00e      	b.n	80080e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff fc60 	bl	8007998 <HAL_SPI_TxRxCpltCallback>
}
 80080d8:	e006      	b.n	80080e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fc62 	bl	80079ac <HAL_SPI_ErrorCallback>
}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008106:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008108:	f7fc f9aa 	bl	8004460 <HAL_GetTick>
 800810c:	4603      	mov	r3, r0
 800810e:	461a      	mov	r2, r3
 8008110:	2164      	movs	r1, #100	; 0x64
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ff0c 	bl	8007f30 <SPI_EndRxTransaction>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008122:	f043 0220 	orr.w	r2, r3, #32
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fa f864 	bl	8002208 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008140:	e002      	b.n	8008148 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff fc32 	bl	80079ac <HAL_SPI_ErrorCallback>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008158:	f7fc f982 	bl	8004460 <HAL_GetTick>
 800815c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800816c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	2164      	movs	r1, #100	; 0x64
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff ff34 	bl	8007fe0 <SPI_EndRxTxTransaction>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008192:	2300      	movs	r3, #0
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fbf7 	bl	80079ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80081be:	e002      	b.n	80081c6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fa f835 	bl	8002230 <HAL_SPI_TxCpltCallback>
}
 80081c6:	bf00      	nop
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e049      	b.n	8008274 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d106      	bne.n	80081fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f841 	bl	800827c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3304      	adds	r3, #4
 800820a:	4619      	mov	r1, r3
 800820c:	4610      	mov	r0, r2
 800820e:	f000 f9f7 	bl	8008600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d001      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e04f      	b.n	8008348 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a23      	ldr	r2, [pc, #140]	; (8008354 <HAL_TIM_Base_Start_IT+0xc4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01d      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0x76>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d2:	d018      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0x76>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <HAL_TIM_Base_Start_IT+0xc8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0x76>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1e      	ldr	r2, [pc, #120]	; (800835c <HAL_TIM_Base_Start_IT+0xcc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00e      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0x76>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_TIM_Base_Start_IT+0xd0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d009      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0x76>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <HAL_TIM_Base_Start_IT+0xd4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <HAL_TIM_Base_Start_IT+0x76>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_TIM_Base_Start_IT+0xd8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d115      	bne.n	8008332 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	4b17      	ldr	r3, [pc, #92]	; (800836c <HAL_TIM_Base_Start_IT+0xdc>)
 800830e:	4013      	ands	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b06      	cmp	r3, #6
 8008316:	d015      	beq.n	8008344 <HAL_TIM_Base_Start_IT+0xb4>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831e:	d011      	beq.n	8008344 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0201 	orr.w	r2, r2, #1
 800832e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008330:	e008      	b.n	8008344 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f042 0201 	orr.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e000      	b.n	8008346 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008344:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40013400 	.word	0x40013400
 8008368:	40014000 	.word	0x40014000
 800836c:	00010007 	.word	0x00010007

08008370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b02      	cmp	r3, #2
 8008384:	d122      	bne.n	80083cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b02      	cmp	r3, #2
 8008392:	d11b      	bne.n	80083cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f06f 0202 	mvn.w	r2, #2
 800839c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	f003 0303 	and.w	r3, r3, #3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f905 	bl	80085c2 <HAL_TIM_IC_CaptureCallback>
 80083b8:	e005      	b.n	80083c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8f7 	bl	80085ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f908 	bl	80085d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d122      	bne.n	8008420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d11b      	bne.n	8008420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0204 	mvn.w	r2, #4
 80083f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2202      	movs	r2, #2
 80083f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f8db 	bl	80085c2 <HAL_TIM_IC_CaptureCallback>
 800840c:	e005      	b.n	800841a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8cd 	bl	80085ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f8de 	bl	80085d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b08      	cmp	r3, #8
 800842c:	d122      	bne.n	8008474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b08      	cmp	r3, #8
 800843a:	d11b      	bne.n	8008474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0208 	mvn.w	r2, #8
 8008444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2204      	movs	r2, #4
 800844a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8b1 	bl	80085c2 <HAL_TIM_IC_CaptureCallback>
 8008460:	e005      	b.n	800846e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f8a3 	bl	80085ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f8b4 	bl	80085d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b10      	cmp	r3, #16
 8008480:	d122      	bne.n	80084c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b10      	cmp	r3, #16
 800848e:	d11b      	bne.n	80084c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f06f 0210 	mvn.w	r2, #16
 8008498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2208      	movs	r2, #8
 800849e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f887 	bl	80085c2 <HAL_TIM_IC_CaptureCallback>
 80084b4:	e005      	b.n	80084c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f879 	bl	80085ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f88a 	bl	80085d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d10e      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d107      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0201 	mvn.w	r2, #1
 80084ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7fa fad8 	bl	8002aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fe:	2b80      	cmp	r3, #128	; 0x80
 8008500:	d10e      	bne.n	8008520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850c:	2b80      	cmp	r3, #128	; 0x80
 800850e:	d107      	bne.n	8008520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f914 	bl	8008748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852e:	d10e      	bne.n	800854e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853a:	2b80      	cmp	r3, #128	; 0x80
 800853c:	d107      	bne.n	800854e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f907 	bl	800875c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d10e      	bne.n	800857a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	d107      	bne.n	800857a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f838 	bl	80085ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b20      	cmp	r3, #32
 8008586:	d10e      	bne.n	80085a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b20      	cmp	r3, #32
 8008594:	d107      	bne.n	80085a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f06f 0220 	mvn.w	r2, #32
 800859e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f8c7 	bl	8008734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a40      	ldr	r2, [pc, #256]	; (8008714 <TIM_Base_SetConfig+0x114>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d013      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861e:	d00f      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a3d      	ldr	r2, [pc, #244]	; (8008718 <TIM_Base_SetConfig+0x118>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a3c      	ldr	r2, [pc, #240]	; (800871c <TIM_Base_SetConfig+0x11c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a3b      	ldr	r2, [pc, #236]	; (8008720 <TIM_Base_SetConfig+0x120>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0x40>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a3a      	ldr	r2, [pc, #232]	; (8008724 <TIM_Base_SetConfig+0x124>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a2f      	ldr	r2, [pc, #188]	; (8008714 <TIM_Base_SetConfig+0x114>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d01f      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d01b      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a2c      	ldr	r2, [pc, #176]	; (8008718 <TIM_Base_SetConfig+0x118>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d017      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2b      	ldr	r2, [pc, #172]	; (800871c <TIM_Base_SetConfig+0x11c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d013      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a2a      	ldr	r2, [pc, #168]	; (8008720 <TIM_Base_SetConfig+0x120>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00f      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a29      	ldr	r2, [pc, #164]	; (8008724 <TIM_Base_SetConfig+0x124>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00b      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a28      	ldr	r2, [pc, #160]	; (8008728 <TIM_Base_SetConfig+0x128>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d007      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a27      	ldr	r2, [pc, #156]	; (800872c <TIM_Base_SetConfig+0x12c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d003      	beq.n	800869a <TIM_Base_SetConfig+0x9a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a26      	ldr	r2, [pc, #152]	; (8008730 <TIM_Base_SetConfig+0x130>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d108      	bne.n	80086ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a10      	ldr	r2, [pc, #64]	; (8008714 <TIM_Base_SetConfig+0x114>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00f      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a12      	ldr	r2, [pc, #72]	; (8008724 <TIM_Base_SetConfig+0x124>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00b      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a11      	ldr	r2, [pc, #68]	; (8008728 <TIM_Base_SetConfig+0x128>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d007      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a10      	ldr	r2, [pc, #64]	; (800872c <TIM_Base_SetConfig+0x12c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d003      	beq.n	80086f8 <TIM_Base_SetConfig+0xf8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a0f      	ldr	r2, [pc, #60]	; (8008730 <TIM_Base_SetConfig+0x130>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d103      	bne.n	8008700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	615a      	str	r2, [r3, #20]
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40012c00 	.word	0x40012c00
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40013400 	.word	0x40013400
 8008728:	40014000 	.word	0x40014000
 800872c:	40014400 	.word	0x40014400
 8008730:	40014800 	.word	0x40014800

08008734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e040      	b.n	8008804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fa fa28 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2224      	movs	r2, #36	; 0x24
 800879c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0201 	bic.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f8c0 	bl	8008934 <UART_SetConfig>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e022      	b.n	8008804 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb3e 	bl	8008e48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fbc5 	bl	8008f8c <UART_CheckIdleState>
 8008802:	4603      	mov	r3, r0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	4613      	mov	r3, r2
 800881a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008820:	2b20      	cmp	r3, #32
 8008822:	f040 8082 	bne.w	800892a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <HAL_UART_Transmit+0x26>
 800882c:	88fb      	ldrh	r3, [r7, #6]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e07a      	b.n	800892c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_UART_Transmit+0x38>
 8008840:	2302      	movs	r3, #2
 8008842:	e073      	b.n	800892c <HAL_UART_Transmit+0x120>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2221      	movs	r2, #33	; 0x21
 8008858:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800885a:	f7fb fe01 	bl	8004460 <HAL_GetTick>
 800885e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	88fa      	ldrh	r2, [r7, #6]
 800886c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008878:	d108      	bne.n	800888c <HAL_UART_Transmit+0x80>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d104      	bne.n	800888c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	e003      	b.n	8008894 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008890:	2300      	movs	r3, #0
 8008892:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800889c:	e02d      	b.n	80088fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2200      	movs	r2, #0
 80088a6:	2180      	movs	r1, #128	; 0x80
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 fbb8 	bl	800901e <UART_WaitOnFlagUntilTimeout>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e039      	b.n	800892c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10b      	bne.n	80088d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	881a      	ldrh	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088ca:	b292      	uxth	r2, r2
 80088cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	3302      	adds	r3, #2
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	e008      	b.n	80088e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	b292      	uxth	r2, r2
 80088e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	3301      	adds	r3, #1
 80088e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1cb      	bne.n	800889e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2200      	movs	r2, #0
 800890e:	2140      	movs	r1, #64	; 0x40
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fb84 	bl	800901e <UART_WaitOnFlagUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e005      	b.n	800892c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	e000      	b.n	800892c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800892a:	2302      	movs	r3, #2
  }
}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008934:	b5b0      	push	{r4, r5, r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	4313      	orrs	r3, r2
 8008956:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4bad      	ldr	r3, [pc, #692]	; (8008c14 <UART_SetConfig+0x2e0>)
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	69f9      	ldr	r1, [r7, #28]
 8008968:	430b      	orrs	r3, r1
 800896a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4aa2      	ldr	r2, [pc, #648]	; (8008c18 <UART_SetConfig+0x2e4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d004      	beq.n	800899c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	69fa      	ldr	r2, [r7, #28]
 8008998:	4313      	orrs	r3, r2
 800899a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a99      	ldr	r2, [pc, #612]	; (8008c1c <UART_SetConfig+0x2e8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d121      	bne.n	80089fe <UART_SetConfig+0xca>
 80089ba:	4b99      	ldr	r3, [pc, #612]	; (8008c20 <UART_SetConfig+0x2ec>)
 80089bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d817      	bhi.n	80089f8 <UART_SetConfig+0xc4>
 80089c8:	a201      	add	r2, pc, #4	; (adr r2, 80089d0 <UART_SetConfig+0x9c>)
 80089ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ce:	bf00      	nop
 80089d0:	080089e1 	.word	0x080089e1
 80089d4:	080089ed 	.word	0x080089ed
 80089d8:	080089e7 	.word	0x080089e7
 80089dc:	080089f3 	.word	0x080089f3
 80089e0:	2301      	movs	r3, #1
 80089e2:	76fb      	strb	r3, [r7, #27]
 80089e4:	e0e7      	b.n	8008bb6 <UART_SetConfig+0x282>
 80089e6:	2302      	movs	r3, #2
 80089e8:	76fb      	strb	r3, [r7, #27]
 80089ea:	e0e4      	b.n	8008bb6 <UART_SetConfig+0x282>
 80089ec:	2304      	movs	r3, #4
 80089ee:	76fb      	strb	r3, [r7, #27]
 80089f0:	e0e1      	b.n	8008bb6 <UART_SetConfig+0x282>
 80089f2:	2308      	movs	r3, #8
 80089f4:	76fb      	strb	r3, [r7, #27]
 80089f6:	e0de      	b.n	8008bb6 <UART_SetConfig+0x282>
 80089f8:	2310      	movs	r3, #16
 80089fa:	76fb      	strb	r3, [r7, #27]
 80089fc:	e0db      	b.n	8008bb6 <UART_SetConfig+0x282>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a88      	ldr	r2, [pc, #544]	; (8008c24 <UART_SetConfig+0x2f0>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d132      	bne.n	8008a6e <UART_SetConfig+0x13a>
 8008a08:	4b85      	ldr	r3, [pc, #532]	; (8008c20 <UART_SetConfig+0x2ec>)
 8008a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a0e:	f003 030c 	and.w	r3, r3, #12
 8008a12:	2b0c      	cmp	r3, #12
 8008a14:	d828      	bhi.n	8008a68 <UART_SetConfig+0x134>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <UART_SetConfig+0xe8>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a51 	.word	0x08008a51
 8008a20:	08008a69 	.word	0x08008a69
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a69 	.word	0x08008a69
 8008a2c:	08008a5d 	.word	0x08008a5d
 8008a30:	08008a69 	.word	0x08008a69
 8008a34:	08008a69 	.word	0x08008a69
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008a57 	.word	0x08008a57
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a69 	.word	0x08008a69
 8008a4c:	08008a63 	.word	0x08008a63
 8008a50:	2300      	movs	r3, #0
 8008a52:	76fb      	strb	r3, [r7, #27]
 8008a54:	e0af      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008a56:	2302      	movs	r3, #2
 8008a58:	76fb      	strb	r3, [r7, #27]
 8008a5a:	e0ac      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	76fb      	strb	r3, [r7, #27]
 8008a60:	e0a9      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008a62:	2308      	movs	r3, #8
 8008a64:	76fb      	strb	r3, [r7, #27]
 8008a66:	e0a6      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008a68:	2310      	movs	r3, #16
 8008a6a:	76fb      	strb	r3, [r7, #27]
 8008a6c:	e0a3      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a6d      	ldr	r2, [pc, #436]	; (8008c28 <UART_SetConfig+0x2f4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d120      	bne.n	8008aba <UART_SetConfig+0x186>
 8008a78:	4b69      	ldr	r3, [pc, #420]	; (8008c20 <UART_SetConfig+0x2ec>)
 8008a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a82:	2b30      	cmp	r3, #48	; 0x30
 8008a84:	d013      	beq.n	8008aae <UART_SetConfig+0x17a>
 8008a86:	2b30      	cmp	r3, #48	; 0x30
 8008a88:	d814      	bhi.n	8008ab4 <UART_SetConfig+0x180>
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d009      	beq.n	8008aa2 <UART_SetConfig+0x16e>
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d810      	bhi.n	8008ab4 <UART_SetConfig+0x180>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <UART_SetConfig+0x168>
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d006      	beq.n	8008aa8 <UART_SetConfig+0x174>
 8008a9a:	e00b      	b.n	8008ab4 <UART_SetConfig+0x180>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	76fb      	strb	r3, [r7, #27]
 8008aa0:	e089      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	76fb      	strb	r3, [r7, #27]
 8008aa6:	e086      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	76fb      	strb	r3, [r7, #27]
 8008aac:	e083      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008aae:	2308      	movs	r3, #8
 8008ab0:	76fb      	strb	r3, [r7, #27]
 8008ab2:	e080      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	76fb      	strb	r3, [r7, #27]
 8008ab8:	e07d      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a5b      	ldr	r2, [pc, #364]	; (8008c2c <UART_SetConfig+0x2f8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d120      	bne.n	8008b06 <UART_SetConfig+0x1d2>
 8008ac4:	4b56      	ldr	r3, [pc, #344]	; (8008c20 <UART_SetConfig+0x2ec>)
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ace:	2bc0      	cmp	r3, #192	; 0xc0
 8008ad0:	d013      	beq.n	8008afa <UART_SetConfig+0x1c6>
 8008ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8008ad4:	d814      	bhi.n	8008b00 <UART_SetConfig+0x1cc>
 8008ad6:	2b80      	cmp	r3, #128	; 0x80
 8008ad8:	d009      	beq.n	8008aee <UART_SetConfig+0x1ba>
 8008ada:	2b80      	cmp	r3, #128	; 0x80
 8008adc:	d810      	bhi.n	8008b00 <UART_SetConfig+0x1cc>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <UART_SetConfig+0x1b4>
 8008ae2:	2b40      	cmp	r3, #64	; 0x40
 8008ae4:	d006      	beq.n	8008af4 <UART_SetConfig+0x1c0>
 8008ae6:	e00b      	b.n	8008b00 <UART_SetConfig+0x1cc>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	76fb      	strb	r3, [r7, #27]
 8008aec:	e063      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008aee:	2302      	movs	r3, #2
 8008af0:	76fb      	strb	r3, [r7, #27]
 8008af2:	e060      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008af4:	2304      	movs	r3, #4
 8008af6:	76fb      	strb	r3, [r7, #27]
 8008af8:	e05d      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008afa:	2308      	movs	r3, #8
 8008afc:	76fb      	strb	r3, [r7, #27]
 8008afe:	e05a      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b00:	2310      	movs	r3, #16
 8008b02:	76fb      	strb	r3, [r7, #27]
 8008b04:	e057      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a49      	ldr	r2, [pc, #292]	; (8008c30 <UART_SetConfig+0x2fc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d125      	bne.n	8008b5c <UART_SetConfig+0x228>
 8008b10:	4b43      	ldr	r3, [pc, #268]	; (8008c20 <UART_SetConfig+0x2ec>)
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b1e:	d017      	beq.n	8008b50 <UART_SetConfig+0x21c>
 8008b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b24:	d817      	bhi.n	8008b56 <UART_SetConfig+0x222>
 8008b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2a:	d00b      	beq.n	8008b44 <UART_SetConfig+0x210>
 8008b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b30:	d811      	bhi.n	8008b56 <UART_SetConfig+0x222>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <UART_SetConfig+0x20a>
 8008b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b3a:	d006      	beq.n	8008b4a <UART_SetConfig+0x216>
 8008b3c:	e00b      	b.n	8008b56 <UART_SetConfig+0x222>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	76fb      	strb	r3, [r7, #27]
 8008b42:	e038      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b44:	2302      	movs	r3, #2
 8008b46:	76fb      	strb	r3, [r7, #27]
 8008b48:	e035      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	76fb      	strb	r3, [r7, #27]
 8008b4e:	e032      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b50:	2308      	movs	r3, #8
 8008b52:	76fb      	strb	r3, [r7, #27]
 8008b54:	e02f      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b56:	2310      	movs	r3, #16
 8008b58:	76fb      	strb	r3, [r7, #27]
 8008b5a:	e02c      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2d      	ldr	r2, [pc, #180]	; (8008c18 <UART_SetConfig+0x2e4>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d125      	bne.n	8008bb2 <UART_SetConfig+0x27e>
 8008b66:	4b2e      	ldr	r3, [pc, #184]	; (8008c20 <UART_SetConfig+0x2ec>)
 8008b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b74:	d017      	beq.n	8008ba6 <UART_SetConfig+0x272>
 8008b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b7a:	d817      	bhi.n	8008bac <UART_SetConfig+0x278>
 8008b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b80:	d00b      	beq.n	8008b9a <UART_SetConfig+0x266>
 8008b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b86:	d811      	bhi.n	8008bac <UART_SetConfig+0x278>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <UART_SetConfig+0x260>
 8008b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b90:	d006      	beq.n	8008ba0 <UART_SetConfig+0x26c>
 8008b92:	e00b      	b.n	8008bac <UART_SetConfig+0x278>
 8008b94:	2300      	movs	r3, #0
 8008b96:	76fb      	strb	r3, [r7, #27]
 8008b98:	e00d      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	76fb      	strb	r3, [r7, #27]
 8008b9e:	e00a      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	76fb      	strb	r3, [r7, #27]
 8008ba4:	e007      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	76fb      	strb	r3, [r7, #27]
 8008baa:	e004      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008bac:	2310      	movs	r3, #16
 8008bae:	76fb      	strb	r3, [r7, #27]
 8008bb0:	e001      	b.n	8008bb6 <UART_SetConfig+0x282>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <UART_SetConfig+0x2e4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	f040 8087 	bne.w	8008cd0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bc2:	7efb      	ldrb	r3, [r7, #27]
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	d837      	bhi.n	8008c38 <UART_SetConfig+0x304>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <UART_SetConfig+0x29c>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008c39 	.word	0x08008c39
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008c39 	.word	0x08008c39
 8008be0:	08008c03 	.word	0x08008c03
 8008be4:	08008c39 	.word	0x08008c39
 8008be8:	08008c39 	.word	0x08008c39
 8008bec:	08008c39 	.word	0x08008c39
 8008bf0:	08008c0b 	.word	0x08008c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf4:	f7fd fb5a 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8008bf8:	6178      	str	r0, [r7, #20]
        break;
 8008bfa:	e022      	b.n	8008c42 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <UART_SetConfig+0x300>)
 8008bfe:	617b      	str	r3, [r7, #20]
        break;
 8008c00:	e01f      	b.n	8008c42 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c02:	f7fd fabb 	bl	800617c <HAL_RCC_GetSysClockFreq>
 8008c06:	6178      	str	r0, [r7, #20]
        break;
 8008c08:	e01b      	b.n	8008c42 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0e:	617b      	str	r3, [r7, #20]
        break;
 8008c10:	e017      	b.n	8008c42 <UART_SetConfig+0x30e>
 8008c12:	bf00      	nop
 8008c14:	efff69f3 	.word	0xefff69f3
 8008c18:	40008000 	.word	0x40008000
 8008c1c:	40013800 	.word	0x40013800
 8008c20:	40021000 	.word	0x40021000
 8008c24:	40004400 	.word	0x40004400
 8008c28:	40004800 	.word	0x40004800
 8008c2c:	40004c00 	.word	0x40004c00
 8008c30:	40005000 	.word	0x40005000
 8008c34:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	76bb      	strb	r3, [r7, #26]
        break;
 8008c40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80f1 	beq.w	8008e2c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	4413      	add	r3, r2
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d305      	bcc.n	8008c66 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d902      	bls.n	8008c6c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	76bb      	strb	r3, [r7, #26]
 8008c6a:	e0df      	b.n	8008e2c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f04f 0100 	mov.w	r1, #0
 8008c74:	f04f 0200 	mov.w	r2, #0
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	020b      	lsls	r3, r1, #8
 8008c7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c82:	0202      	lsls	r2, r0, #8
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	6849      	ldr	r1, [r1, #4]
 8008c88:	0849      	lsrs	r1, r1, #1
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	f04f 0100 	mov.w	r1, #0
 8008c90:	1814      	adds	r4, r2, r0
 8008c92:	eb43 0501 	adc.w	r5, r3, r1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	f7f7 ff6a 	bl	8000b7c <__aeabi_uldivmod>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4613      	mov	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cb6:	d308      	bcc.n	8008cca <UART_SetConfig+0x396>
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cbe:	d204      	bcs.n	8008cca <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	60da      	str	r2, [r3, #12]
 8008cc8:	e0b0      	b.n	8008e2c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	76bb      	strb	r3, [r7, #26]
 8008cce:	e0ad      	b.n	8008e2c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd8:	d15c      	bne.n	8008d94 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008cda:	7efb      	ldrb	r3, [r7, #27]
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d828      	bhi.n	8008d32 <UART_SetConfig+0x3fe>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <UART_SetConfig+0x3b4>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d15 	.word	0x08008d15
 8008cf0:	08008d1d 	.word	0x08008d1d
 8008cf4:	08008d33 	.word	0x08008d33
 8008cf8:	08008d23 	.word	0x08008d23
 8008cfc:	08008d33 	.word	0x08008d33
 8008d00:	08008d33 	.word	0x08008d33
 8008d04:	08008d33 	.word	0x08008d33
 8008d08:	08008d2b 	.word	0x08008d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d0c:	f7fd face 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8008d10:	6178      	str	r0, [r7, #20]
        break;
 8008d12:	e013      	b.n	8008d3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d14:	f7fd fae0 	bl	80062d8 <HAL_RCC_GetPCLK2Freq>
 8008d18:	6178      	str	r0, [r7, #20]
        break;
 8008d1a:	e00f      	b.n	8008d3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d1c:	4b49      	ldr	r3, [pc, #292]	; (8008e44 <UART_SetConfig+0x510>)
 8008d1e:	617b      	str	r3, [r7, #20]
        break;
 8008d20:	e00c      	b.n	8008d3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d22:	f7fd fa2b 	bl	800617c <HAL_RCC_GetSysClockFreq>
 8008d26:	6178      	str	r0, [r7, #20]
        break;
 8008d28:	e008      	b.n	8008d3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2e:	617b      	str	r3, [r7, #20]
        break;
 8008d30:	e004      	b.n	8008d3c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	76bb      	strb	r3, [r7, #26]
        break;
 8008d3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d074      	beq.n	8008e2c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	005a      	lsls	r2, r3, #1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	085b      	lsrs	r3, r3, #1
 8008d4c:	441a      	add	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b0f      	cmp	r3, #15
 8008d5e:	d916      	bls.n	8008d8e <UART_SetConfig+0x45a>
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d66:	d212      	bcs.n	8008d8e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f023 030f 	bic.w	r3, r3, #15
 8008d70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	085b      	lsrs	r3, r3, #1
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	89fb      	ldrh	r3, [r7, #14]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	89fa      	ldrh	r2, [r7, #14]
 8008d8a:	60da      	str	r2, [r3, #12]
 8008d8c:	e04e      	b.n	8008e2c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	76bb      	strb	r3, [r7, #26]
 8008d92:	e04b      	b.n	8008e2c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d94:	7efb      	ldrb	r3, [r7, #27]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d827      	bhi.n	8008dea <UART_SetConfig+0x4b6>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <UART_SetConfig+0x46c>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008dc5 	.word	0x08008dc5
 8008da4:	08008dcd 	.word	0x08008dcd
 8008da8:	08008dd5 	.word	0x08008dd5
 8008dac:	08008deb 	.word	0x08008deb
 8008db0:	08008ddb 	.word	0x08008ddb
 8008db4:	08008deb 	.word	0x08008deb
 8008db8:	08008deb 	.word	0x08008deb
 8008dbc:	08008deb 	.word	0x08008deb
 8008dc0:	08008de3 	.word	0x08008de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc4:	f7fd fa72 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8008dc8:	6178      	str	r0, [r7, #20]
        break;
 8008dca:	e013      	b.n	8008df4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dcc:	f7fd fa84 	bl	80062d8 <HAL_RCC_GetPCLK2Freq>
 8008dd0:	6178      	str	r0, [r7, #20]
        break;
 8008dd2:	e00f      	b.n	8008df4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <UART_SetConfig+0x510>)
 8008dd6:	617b      	str	r3, [r7, #20]
        break;
 8008dd8:	e00c      	b.n	8008df4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dda:	f7fd f9cf 	bl	800617c <HAL_RCC_GetSysClockFreq>
 8008dde:	6178      	str	r0, [r7, #20]
        break;
 8008de0:	e008      	b.n	8008df4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008de6:	617b      	str	r3, [r7, #20]
        break;
 8008de8:	e004      	b.n	8008df4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	76bb      	strb	r3, [r7, #26]
        break;
 8008df2:	bf00      	nop
    }

    if (pclk != 0U)
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d018      	beq.n	8008e2c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	085a      	lsrs	r2, r3, #1
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	441a      	add	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	d908      	bls.n	8008e28 <UART_SetConfig+0x4f4>
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e1c:	d204      	bcs.n	8008e28 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	60da      	str	r2, [r3, #12]
 8008e26:	e001      	b.n	8008e2c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e38:	7ebb      	ldrb	r3, [r7, #26]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3720      	adds	r7, #32
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bdb0      	pop	{r4, r5, r7, pc}
 8008e42:	bf00      	nop
 8008e44:	00f42400 	.word	0x00f42400

08008e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	f003 0320 	and.w	r3, r3, #32
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01a      	beq.n	8008f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f46:	d10a      	bne.n	8008f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	605a      	str	r2, [r3, #4]
  }
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f9c:	f7fb fa60 	bl	8004460 <HAL_GetTick>
 8008fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d10e      	bne.n	8008fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f82d 	bl	800901e <UART_WaitOnFlagUntilTimeout>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e023      	b.n	8009016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d10e      	bne.n	8008ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f817 	bl	800901e <UART_WaitOnFlagUntilTimeout>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e00d      	b.n	8009016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800902e:	e05e      	b.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d05a      	beq.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009038:	f7fb fa12 	bl	8004460 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	429a      	cmp	r2, r3
 8009046:	d302      	bcc.n	800904e <UART_WaitOnFlagUntilTimeout+0x30>
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d11b      	bne.n	8009086 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800905c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0201 	bic.w	r2, r2, #1
 800906c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2220      	movs	r2, #32
 8009072:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2220      	movs	r2, #32
 8009078:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e043      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d02c      	beq.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800909e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090a2:	d124      	bne.n	80090ee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090ac:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090bc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0201 	bic.w	r2, r2, #1
 80090cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e00f      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69da      	ldr	r2, [r3, #28]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4013      	ands	r3, r2
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	bf0c      	ite	eq
 80090fe:	2301      	moveq	r3, #1
 8009100:	2300      	movne	r3, #0
 8009102:	b2db      	uxtb	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	429a      	cmp	r2, r3
 800910a:	d091      	beq.n	8009030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	4603      	mov	r3, r0
 800911e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009128:	2b84      	cmp	r3, #132	; 0x84
 800912a:	d005      	beq.n	8009138 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800912c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	3303      	adds	r3, #3
 8009136:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800914a:	f000 fadf 	bl	800970c <vTaskStartScheduler>
  
  return osOK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	bd80      	pop	{r7, pc}

08009154 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af04      	add	r7, sp, #16
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d020      	beq.n	80091a8 <osThreadCreate+0x54>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01c      	beq.n	80091a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685c      	ldr	r4, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681d      	ldr	r5, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691e      	ldr	r6, [r3, #16]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff ffc8 	bl	8009116 <makeFreeRtosPriority>
 8009186:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	9100      	str	r1, [sp, #0]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	4632      	mov	r2, r6
 800919a:	4629      	mov	r1, r5
 800919c:	4620      	mov	r0, r4
 800919e:	f000 f8ed 	bl	800937c <xTaskCreateStatic>
 80091a2:	4603      	mov	r3, r0
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e01c      	b.n	80091e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685c      	ldr	r4, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091b4:	b29e      	uxth	r6, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff ffaa 	bl	8009116 <makeFreeRtosPriority>
 80091c2:	4602      	mov	r2, r0
 80091c4:	f107 030c 	add.w	r3, r7, #12
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	9200      	str	r2, [sp, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	4632      	mov	r2, r6
 80091d0:	4629      	mov	r1, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 f92f 	bl	8009436 <xTaskCreate>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d001      	beq.n	80091e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	e000      	b.n	80091e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091e2:	68fb      	ldr	r3, [r7, #12]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <osDelay+0x16>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	e000      	b.n	8009204 <osDelay+0x18>
 8009202:	2301      	movs	r3, #1
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fa4d 	bl	80096a4 <vTaskDelay>
  
  return osOK;
 800920a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f103 0208 	add.w	r2, r3, #8
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f04f 32ff 	mov.w	r2, #4294967295
 800922c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f103 0208 	add.w	r2, r3, #8
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f103 0208 	add.w	r2, r3, #8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009262:	bf00      	nop
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	601a      	str	r2, [r3, #0]
}
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092cc:	d103      	bne.n	80092d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e00c      	b.n	80092f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3308      	adds	r3, #8
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e002      	b.n	80092e4 <vListInsert+0x2e>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d2f6      	bcs.n	80092de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	601a      	str	r2, [r3, #0]
}
 800931c:	bf00      	nop
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6892      	ldr	r2, [r2, #8]
 800933e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6852      	ldr	r2, [r2, #4]
 8009348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d103      	bne.n	800935c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08e      	sub	sp, #56	; 0x38
 8009380:	af04      	add	r7, sp, #16
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800938a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	61fb      	str	r3, [r7, #28]
}
 80093be:	bf00      	nop
 80093c0:	e7fe      	b.n	80093c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093c2:	2354      	movs	r3, #84	; 0x54
 80093c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b54      	cmp	r3, #84	; 0x54
 80093ca:	d00a      	beq.n	80093e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	61bb      	str	r3, [r7, #24]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01e      	beq.n	8009428 <xTaskCreateStatic+0xac>
 80093ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01b      	beq.n	8009428 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009402:	2300      	movs	r3, #0
 8009404:	9303      	str	r3, [sp, #12]
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	9302      	str	r3, [sp, #8]
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f850 	bl	80094c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009422:	f000 f8d5 	bl	80095d0 <prvAddNewTaskToReadyList>
 8009426:	e001      	b.n	800942c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800942c:	697b      	ldr	r3, [r7, #20]
	}
 800942e:	4618      	mov	r0, r3
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009436:	b580      	push	{r7, lr}
 8009438:	b08c      	sub	sp, #48	; 0x30
 800943a:	af04      	add	r7, sp, #16
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009446:	88fb      	ldrh	r3, [r7, #6]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fec4 	bl	800a1d8 <pvPortMalloc>
 8009450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00e      	beq.n	8009476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009458:	2054      	movs	r0, #84	; 0x54
 800945a:	f000 febd 	bl	800a1d8 <pvPortMalloc>
 800945e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	631a      	str	r2, [r3, #48]	; 0x30
 800946c:	e005      	b.n	800947a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f000 ff7e 	bl	800a370 <vPortFree>
 8009474:	e001      	b.n	800947a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d017      	beq.n	80094b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009488:	88fa      	ldrh	r2, [r7, #6]
 800948a:	2300      	movs	r3, #0
 800948c:	9303      	str	r3, [sp, #12]
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	9302      	str	r3, [sp, #8]
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f000 f80e 	bl	80094c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094a4:	69f8      	ldr	r0, [r7, #28]
 80094a6:	f000 f893 	bl	80095d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094aa:	2301      	movs	r3, #1
 80094ac:	61bb      	str	r3, [r7, #24]
 80094ae:	e002      	b.n	80094b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094b6:	69bb      	ldr	r3, [r7, #24]
	}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094d8:	3b01      	subs	r3, #1
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f023 0307 	bic.w	r3, r3, #7
 80094e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <prvInitialiseNewTask+0x48>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	617b      	str	r3, [r7, #20]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d01f      	beq.n	800954e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800950e:	2300      	movs	r3, #0
 8009510:	61fb      	str	r3, [r7, #28]
 8009512:	e012      	b.n	800953a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	4413      	add	r3, r2
 800951a:	7819      	ldrb	r1, [r3, #0]
 800951c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	4413      	add	r3, r2
 8009522:	3334      	adds	r3, #52	; 0x34
 8009524:	460a      	mov	r2, r1
 8009526:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d006      	beq.n	8009542 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3301      	adds	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b0f      	cmp	r3, #15
 800953e:	d9e9      	bls.n	8009514 <prvInitialiseNewTask+0x54>
 8009540:	e000      	b.n	8009544 <prvInitialiseNewTask+0x84>
			{
				break;
 8009542:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	2200      	movs	r2, #0
 8009548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800954c:	e003      	b.n	8009556 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	2b06      	cmp	r3, #6
 800955a:	d901      	bls.n	8009560 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800955c:	2306      	movs	r3, #6
 800955e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009564:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800956a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	2200      	movs	r2, #0
 8009570:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	3304      	adds	r3, #4
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fe6c 	bl	8009254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	3318      	adds	r3, #24
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff fe67 	bl	8009254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	f1c3 0207 	rsb	r2, r3, #7
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800959a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800959c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959e:	2200      	movs	r2, #0
 80095a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	68f9      	ldr	r1, [r7, #12]
 80095ae:	69b8      	ldr	r0, [r7, #24]
 80095b0:	f000 fc06 	bl	8009dc0 <pxPortInitialiseStack>
 80095b4:	4602      	mov	r2, r0
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095c6:	bf00      	nop
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095d8:	f000 fd1c 	bl	800a014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095dc:	4b2a      	ldr	r3, [pc, #168]	; (8009688 <prvAddNewTaskToReadyList+0xb8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	4a29      	ldr	r2, [pc, #164]	; (8009688 <prvAddNewTaskToReadyList+0xb8>)
 80095e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095e6:	4b29      	ldr	r3, [pc, #164]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095ee:	4a27      	ldr	r2, [pc, #156]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095f4:	4b24      	ldr	r3, [pc, #144]	; (8009688 <prvAddNewTaskToReadyList+0xb8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d110      	bne.n	800961e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095fc:	f000 fabc 	bl	8009b78 <prvInitialiseTaskLists>
 8009600:	e00d      	b.n	800961e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009602:	4b23      	ldr	r3, [pc, #140]	; (8009690 <prvAddNewTaskToReadyList+0xc0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800960a:	4b20      	ldr	r3, [pc, #128]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	429a      	cmp	r2, r3
 8009616:	d802      	bhi.n	800961e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009618:	4a1c      	ldr	r2, [pc, #112]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800961e:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <prvAddNewTaskToReadyList+0xc4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	4a1b      	ldr	r2, [pc, #108]	; (8009694 <prvAddNewTaskToReadyList+0xc4>)
 8009626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	2201      	movs	r2, #1
 800962e:	409a      	lsls	r2, r3
 8009630:	4b19      	ldr	r3, [pc, #100]	; (8009698 <prvAddNewTaskToReadyList+0xc8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4313      	orrs	r3, r2
 8009636:	4a18      	ldr	r2, [pc, #96]	; (8009698 <prvAddNewTaskToReadyList+0xc8>)
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963e:	4613      	mov	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4a15      	ldr	r2, [pc, #84]	; (800969c <prvAddNewTaskToReadyList+0xcc>)
 8009648:	441a      	add	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3304      	adds	r3, #4
 800964e:	4619      	mov	r1, r3
 8009650:	4610      	mov	r0, r2
 8009652:	f7ff fe0c 	bl	800926e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009656:	f000 fd0d 	bl	800a074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <prvAddNewTaskToReadyList+0xc0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00e      	beq.n	8009680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009662:	4b0a      	ldr	r3, [pc, #40]	; (800968c <prvAddNewTaskToReadyList+0xbc>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	429a      	cmp	r2, r3
 800966e:	d207      	bcs.n	8009680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009670:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <prvAddNewTaskToReadyList+0xd0>)
 8009672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000c70 	.word	0x20000c70
 800968c:	20000b70 	.word	0x20000b70
 8009690:	20000c7c 	.word	0x20000c7c
 8009694:	20000c8c 	.word	0x20000c8c
 8009698:	20000c78 	.word	0x20000c78
 800969c:	20000b74 	.word	0x20000b74
 80096a0:	e000ed04 	.word	0xe000ed04

080096a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d017      	beq.n	80096e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096b6:	4b13      	ldr	r3, [pc, #76]	; (8009704 <vTaskDelay+0x60>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <vTaskDelay+0x30>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	60bb      	str	r3, [r7, #8]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096d4:	f000 f87a 	bl	80097cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fb0a 	bl	8009cf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096e0:	f000 f882 	bl	80097e8 <xTaskResumeAll>
 80096e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <vTaskDelay+0x64>)
 80096ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20000c98 	.word	0x20000c98
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	; 0x28
 8009710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800971a:	463a      	mov	r2, r7
 800971c:	1d39      	adds	r1, r7, #4
 800971e:	f107 0308 	add.w	r3, r7, #8
 8009722:	4618      	mov	r0, r3
 8009724:	f7f8 fd98 	bl	8002258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	9202      	str	r2, [sp, #8]
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	2300      	movs	r3, #0
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	2300      	movs	r3, #0
 8009738:	460a      	mov	r2, r1
 800973a:	491e      	ldr	r1, [pc, #120]	; (80097b4 <vTaskStartScheduler+0xa8>)
 800973c:	481e      	ldr	r0, [pc, #120]	; (80097b8 <vTaskStartScheduler+0xac>)
 800973e:	f7ff fe1d 	bl	800937c <xTaskCreateStatic>
 8009742:	4603      	mov	r3, r0
 8009744:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <vTaskStartScheduler+0xb0>)
 8009746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009748:	4b1c      	ldr	r3, [pc, #112]	; (80097bc <vTaskStartScheduler+0xb0>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009750:	2301      	movs	r3, #1
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	e001      	b.n	800975a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d116      	bne.n	800978e <vTaskStartScheduler+0x82>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009774:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <vTaskStartScheduler+0xb4>)
 8009776:	f04f 32ff 	mov.w	r2, #4294967295
 800977a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800977c:	4b11      	ldr	r3, [pc, #68]	; (80097c4 <vTaskStartScheduler+0xb8>)
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009782:	4b11      	ldr	r3, [pc, #68]	; (80097c8 <vTaskStartScheduler+0xbc>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009788:	f000 fba2 	bl	8009ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800978c:	e00e      	b.n	80097ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d10a      	bne.n	80097ac <vTaskStartScheduler+0xa0>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	60fb      	str	r3, [r7, #12]
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <vTaskStartScheduler+0x9e>
}
 80097ac:	bf00      	nop
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	0800caac 	.word	0x0800caac
 80097b8:	08009b49 	.word	0x08009b49
 80097bc:	20000c94 	.word	0x20000c94
 80097c0:	20000c90 	.word	0x20000c90
 80097c4:	20000c7c 	.word	0x20000c7c
 80097c8:	20000c74 	.word	0x20000c74

080097cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097d0:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <vTaskSuspendAll+0x18>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	4a03      	ldr	r2, [pc, #12]	; (80097e4 <vTaskSuspendAll+0x18>)
 80097d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097da:	bf00      	nop
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20000c98 	.word	0x20000c98

080097e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097f6:	4b41      	ldr	r3, [pc, #260]	; (80098fc <xTaskResumeAll+0x114>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10a      	bne.n	8009814 <xTaskResumeAll+0x2c>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	603b      	str	r3, [r7, #0]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009814:	f000 fbfe 	bl	800a014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009818:	4b38      	ldr	r3, [pc, #224]	; (80098fc <xTaskResumeAll+0x114>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3b01      	subs	r3, #1
 800981e:	4a37      	ldr	r2, [pc, #220]	; (80098fc <xTaskResumeAll+0x114>)
 8009820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009822:	4b36      	ldr	r3, [pc, #216]	; (80098fc <xTaskResumeAll+0x114>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d161      	bne.n	80098ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800982a:	4b35      	ldr	r3, [pc, #212]	; (8009900 <xTaskResumeAll+0x118>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d05d      	beq.n	80098ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009832:	e02e      	b.n	8009892 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009834:	4b33      	ldr	r3, [pc, #204]	; (8009904 <xTaskResumeAll+0x11c>)
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3318      	adds	r3, #24
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff fd71 	bl	8009328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3304      	adds	r3, #4
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fd6c 	bl	8009328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	2201      	movs	r2, #1
 8009856:	409a      	lsls	r2, r3
 8009858:	4b2b      	ldr	r3, [pc, #172]	; (8009908 <xTaskResumeAll+0x120>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4313      	orrs	r3, r2
 800985e:	4a2a      	ldr	r2, [pc, #168]	; (8009908 <xTaskResumeAll+0x120>)
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4a27      	ldr	r2, [pc, #156]	; (800990c <xTaskResumeAll+0x124>)
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7ff fcf8 	bl	800926e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009882:	4b23      	ldr	r3, [pc, #140]	; (8009910 <xTaskResumeAll+0x128>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d302      	bcc.n	8009892 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800988c:	4b21      	ldr	r3, [pc, #132]	; (8009914 <xTaskResumeAll+0x12c>)
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009892:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <xTaskResumeAll+0x11c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1cc      	bne.n	8009834 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098a0:	f000 fa08 	bl	8009cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <xTaskResumeAll+0x130>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d010      	beq.n	80098d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098b0:	f000 f836 	bl	8009920 <xTaskIncrementTick>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80098ba:	4b16      	ldr	r3, [pc, #88]	; (8009914 <xTaskResumeAll+0x12c>)
 80098bc:	2201      	movs	r2, #1
 80098be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1f1      	bne.n	80098b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80098cc:	4b12      	ldr	r3, [pc, #72]	; (8009918 <xTaskResumeAll+0x130>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <xTaskResumeAll+0x12c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098da:	2301      	movs	r3, #1
 80098dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098de:	4b0f      	ldr	r3, [pc, #60]	; (800991c <xTaskResumeAll+0x134>)
 80098e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098ee:	f000 fbc1 	bl	800a074 <vPortExitCritical>

	return xAlreadyYielded;
 80098f2:	68bb      	ldr	r3, [r7, #8]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20000c98 	.word	0x20000c98
 8009900:	20000c70 	.word	0x20000c70
 8009904:	20000c30 	.word	0x20000c30
 8009908:	20000c78 	.word	0x20000c78
 800990c:	20000b74 	.word	0x20000b74
 8009910:	20000b70 	.word	0x20000b70
 8009914:	20000c84 	.word	0x20000c84
 8009918:	20000c80 	.word	0x20000c80
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800992a:	4b4e      	ldr	r3, [pc, #312]	; (8009a64 <xTaskIncrementTick+0x144>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	f040 808e 	bne.w	8009a50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009934:	4b4c      	ldr	r3, [pc, #304]	; (8009a68 <xTaskIncrementTick+0x148>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3301      	adds	r3, #1
 800993a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800993c:	4a4a      	ldr	r2, [pc, #296]	; (8009a68 <xTaskIncrementTick+0x148>)
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d120      	bne.n	800998a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009948:	4b48      	ldr	r3, [pc, #288]	; (8009a6c <xTaskIncrementTick+0x14c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <xTaskIncrementTick+0x48>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	603b      	str	r3, [r7, #0]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <xTaskIncrementTick+0x46>
 8009968:	4b40      	ldr	r3, [pc, #256]	; (8009a6c <xTaskIncrementTick+0x14c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]
 800996e:	4b40      	ldr	r3, [pc, #256]	; (8009a70 <xTaskIncrementTick+0x150>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a3e      	ldr	r2, [pc, #248]	; (8009a6c <xTaskIncrementTick+0x14c>)
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	4a3e      	ldr	r2, [pc, #248]	; (8009a70 <xTaskIncrementTick+0x150>)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	4b3d      	ldr	r3, [pc, #244]	; (8009a74 <xTaskIncrementTick+0x154>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3301      	adds	r3, #1
 8009982:	4a3c      	ldr	r2, [pc, #240]	; (8009a74 <xTaskIncrementTick+0x154>)
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	f000 f995 	bl	8009cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800998a:	4b3b      	ldr	r3, [pc, #236]	; (8009a78 <xTaskIncrementTick+0x158>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	429a      	cmp	r2, r3
 8009992:	d348      	bcc.n	8009a26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009994:	4b35      	ldr	r3, [pc, #212]	; (8009a6c <xTaskIncrementTick+0x14c>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800999e:	4b36      	ldr	r3, [pc, #216]	; (8009a78 <xTaskIncrementTick+0x158>)
 80099a0:	f04f 32ff 	mov.w	r2, #4294967295
 80099a4:	601a      	str	r2, [r3, #0]
					break;
 80099a6:	e03e      	b.n	8009a26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a8:	4b30      	ldr	r3, [pc, #192]	; (8009a6c <xTaskIncrementTick+0x14c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d203      	bcs.n	80099c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099c0:	4a2d      	ldr	r2, [pc, #180]	; (8009a78 <xTaskIncrementTick+0x158>)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099c6:	e02e      	b.n	8009a26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fcab 	bl	8009328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	3318      	adds	r3, #24
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff fca2 	bl	8009328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	2201      	movs	r2, #1
 80099ea:	409a      	lsls	r2, r3
 80099ec:	4b23      	ldr	r3, [pc, #140]	; (8009a7c <xTaskIncrementTick+0x15c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <xTaskIncrementTick+0x15c>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a1f      	ldr	r2, [pc, #124]	; (8009a80 <xTaskIncrementTick+0x160>)
 8009a04:	441a      	add	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7ff fc2e 	bl	800926e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a16:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <xTaskIncrementTick+0x164>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d3b9      	bcc.n	8009994 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a24:	e7b6      	b.n	8009994 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a26:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <xTaskIncrementTick+0x164>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2c:	4914      	ldr	r1, [pc, #80]	; (8009a80 <xTaskIncrementTick+0x160>)
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d901      	bls.n	8009a42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a42:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <xTaskIncrementTick+0x168>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	617b      	str	r3, [r7, #20]
 8009a4e:	e004      	b.n	8009a5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a50:	4b0e      	ldr	r3, [pc, #56]	; (8009a8c <xTaskIncrementTick+0x16c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	4a0d      	ldr	r2, [pc, #52]	; (8009a8c <xTaskIncrementTick+0x16c>)
 8009a58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a5a:	697b      	ldr	r3, [r7, #20]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20000c98 	.word	0x20000c98
 8009a68:	20000c74 	.word	0x20000c74
 8009a6c:	20000c28 	.word	0x20000c28
 8009a70:	20000c2c 	.word	0x20000c2c
 8009a74:	20000c88 	.word	0x20000c88
 8009a78:	20000c90 	.word	0x20000c90
 8009a7c:	20000c78 	.word	0x20000c78
 8009a80:	20000b74 	.word	0x20000b74
 8009a84:	20000b70 	.word	0x20000b70
 8009a88:	20000c84 	.word	0x20000c84
 8009a8c:	20000c80 	.word	0x20000c80

08009a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b087      	sub	sp, #28
 8009a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <vTaskSwitchContext+0xa4>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a9e:	4b26      	ldr	r3, [pc, #152]	; (8009b38 <vTaskSwitchContext+0xa8>)
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009aa4:	e03f      	b.n	8009b26 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009aa6:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <vTaskSwitchContext+0xa8>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aac:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <vTaskSwitchContext+0xac>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	fab3 f383 	clz	r3, r3
 8009ab8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	f1c3 031f 	rsb	r3, r3, #31
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	491f      	ldr	r1, [pc, #124]	; (8009b40 <vTaskSwitchContext+0xb0>)
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10a      	bne.n	8009aec <vTaskSwitchContext+0x5c>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	607b      	str	r3, [r7, #4]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <vTaskSwitchContext+0x5a>
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4a12      	ldr	r2, [pc, #72]	; (8009b40 <vTaskSwitchContext+0xb0>)
 8009af8:	4413      	add	r3, r2
 8009afa:	613b      	str	r3, [r7, #16]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	605a      	str	r2, [r3, #4]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d104      	bne.n	8009b1c <vTaskSwitchContext+0x8c>
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	605a      	str	r2, [r3, #4]
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	4a08      	ldr	r2, [pc, #32]	; (8009b44 <vTaskSwitchContext+0xb4>)
 8009b24:	6013      	str	r3, [r2, #0]
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000c98 	.word	0x20000c98
 8009b38:	20000c84 	.word	0x20000c84
 8009b3c:	20000c78 	.word	0x20000c78
 8009b40:	20000b74 	.word	0x20000b74
 8009b44:	20000b70 	.word	0x20000b70

08009b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b50:	f000 f852 	bl	8009bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b54:	4b06      	ldr	r3, [pc, #24]	; (8009b70 <prvIdleTask+0x28>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d9f9      	bls.n	8009b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <prvIdleTask+0x2c>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b6c:	e7f0      	b.n	8009b50 <prvIdleTask+0x8>
 8009b6e:	bf00      	nop
 8009b70:	20000b74 	.word	0x20000b74
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b7e:	2300      	movs	r3, #0
 8009b80:	607b      	str	r3, [r7, #4]
 8009b82:	e00c      	b.n	8009b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <prvInitialiseTaskLists+0x60>)
 8009b90:	4413      	add	r3, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff fb3e 	bl	8009214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	607b      	str	r3, [r7, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b06      	cmp	r3, #6
 8009ba2:	d9ef      	bls.n	8009b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ba4:	480d      	ldr	r0, [pc, #52]	; (8009bdc <prvInitialiseTaskLists+0x64>)
 8009ba6:	f7ff fb35 	bl	8009214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009baa:	480d      	ldr	r0, [pc, #52]	; (8009be0 <prvInitialiseTaskLists+0x68>)
 8009bac:	f7ff fb32 	bl	8009214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009bb0:	480c      	ldr	r0, [pc, #48]	; (8009be4 <prvInitialiseTaskLists+0x6c>)
 8009bb2:	f7ff fb2f 	bl	8009214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bb6:	480c      	ldr	r0, [pc, #48]	; (8009be8 <prvInitialiseTaskLists+0x70>)
 8009bb8:	f7ff fb2c 	bl	8009214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009bbc:	480b      	ldr	r0, [pc, #44]	; (8009bec <prvInitialiseTaskLists+0x74>)
 8009bbe:	f7ff fb29 	bl	8009214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009bc2:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <prvInitialiseTaskLists+0x78>)
 8009bc4:	4a05      	ldr	r2, [pc, #20]	; (8009bdc <prvInitialiseTaskLists+0x64>)
 8009bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <prvInitialiseTaskLists+0x7c>)
 8009bca:	4a05      	ldr	r2, [pc, #20]	; (8009be0 <prvInitialiseTaskLists+0x68>)
 8009bcc:	601a      	str	r2, [r3, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20000b74 	.word	0x20000b74
 8009bdc:	20000c00 	.word	0x20000c00
 8009be0:	20000c14 	.word	0x20000c14
 8009be4:	20000c30 	.word	0x20000c30
 8009be8:	20000c44 	.word	0x20000c44
 8009bec:	20000c5c 	.word	0x20000c5c
 8009bf0:	20000c28 	.word	0x20000c28
 8009bf4:	20000c2c 	.word	0x20000c2c

08009bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bfe:	e019      	b.n	8009c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c00:	f000 fa08 	bl	800a014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c04:	4b10      	ldr	r3, [pc, #64]	; (8009c48 <prvCheckTasksWaitingTermination+0x50>)
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff fb89 	bl	8009328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c16:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <prvCheckTasksWaitingTermination+0x54>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	4a0b      	ldr	r2, [pc, #44]	; (8009c4c <prvCheckTasksWaitingTermination+0x54>)
 8009c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c20:	4b0b      	ldr	r3, [pc, #44]	; (8009c50 <prvCheckTasksWaitingTermination+0x58>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	4a0a      	ldr	r2, [pc, #40]	; (8009c50 <prvCheckTasksWaitingTermination+0x58>)
 8009c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c2a:	f000 fa23 	bl	800a074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f810 	bl	8009c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c34:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <prvCheckTasksWaitingTermination+0x58>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e1      	bne.n	8009c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000c44 	.word	0x20000c44
 8009c4c:	20000c70 	.word	0x20000c70
 8009c50:	20000c58 	.word	0x20000c58

08009c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d108      	bne.n	8009c78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 fb80 	bl	800a370 <vPortFree>
				vPortFree( pxTCB );
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fb7d 	bl	800a370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c76:	e018      	b.n	8009caa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d103      	bne.n	8009c8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fb74 	bl	800a370 <vPortFree>
	}
 8009c88:	e00f      	b.n	8009caa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d00a      	beq.n	8009caa <prvDeleteTCB+0x56>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	60fb      	str	r3, [r7, #12]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <prvDeleteTCB+0x54>
	}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cba:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <prvResetNextTaskUnblockTime+0x38>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ccc:	e008      	b.n	8009ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cce:	4b07      	ldr	r3, [pc, #28]	; (8009cec <prvResetNextTaskUnblockTime+0x38>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4a04      	ldr	r2, [pc, #16]	; (8009cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8009cde:	6013      	str	r3, [r2, #0]
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000c28 	.word	0x20000c28
 8009cf0:	20000c90 	.word	0x20000c90

08009cf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cfe:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d04:	4b28      	ldr	r3, [pc, #160]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff fb0c 	bl	8009328 <uxListRemove>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10b      	bne.n	8009d2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009d16:	4b24      	ldr	r3, [pc, #144]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d22:	43da      	mvns	r2, r3
 8009d24:	4b21      	ldr	r3, [pc, #132]	; (8009dac <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	4a20      	ldr	r2, [pc, #128]	; (8009dac <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d10a      	bne.n	8009d4c <prvAddCurrentTaskToDelayedList+0x58>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d007      	beq.n	8009d4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	3304      	adds	r3, #4
 8009d42:	4619      	mov	r1, r3
 8009d44:	481a      	ldr	r0, [pc, #104]	; (8009db0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d46:	f7ff fa92 	bl	800926e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d4a:	e026      	b.n	8009d9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4413      	add	r3, r2
 8009d52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d54:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d209      	bcs.n	8009d78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d64:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f7ff faa0 	bl	80092b6 <vListInsert>
}
 8009d76:	e010      	b.n	8009d9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d78:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3304      	adds	r3, #4
 8009d82:	4619      	mov	r1, r3
 8009d84:	4610      	mov	r0, r2
 8009d86:	f7ff fa96 	bl	80092b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d8a:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d202      	bcs.n	8009d9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d94:	4a09      	ldr	r2, [pc, #36]	; (8009dbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	6013      	str	r3, [r2, #0]
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000c74 	.word	0x20000c74
 8009da8:	20000b70 	.word	0x20000b70
 8009dac:	20000c78 	.word	0x20000c78
 8009db0:	20000c5c 	.word	0x20000c5c
 8009db4:	20000c2c 	.word	0x20000c2c
 8009db8:	20000c28 	.word	0x20000c28
 8009dbc:	20000c90 	.word	0x20000c90

08009dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3b04      	subs	r3, #4
 8009dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3b04      	subs	r3, #4
 8009dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f023 0201 	bic.w	r2, r3, #1
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3b04      	subs	r3, #4
 8009dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009df0:	4a0c      	ldr	r2, [pc, #48]	; (8009e24 <pxPortInitialiseStack+0x64>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3b14      	subs	r3, #20
 8009dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3b04      	subs	r3, #4
 8009e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f06f 0202 	mvn.w	r2, #2
 8009e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3b20      	subs	r3, #32
 8009e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e16:	68fb      	ldr	r3, [r7, #12]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	08009e29 	.word	0x08009e29

08009e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e32:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <prvTaskExitError+0x54>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3a:	d00a      	beq.n	8009e52 <prvTaskExitError+0x2a>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60fb      	str	r3, [r7, #12]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <prvTaskExitError+0x28>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60bb      	str	r3, [r7, #8]
}
 8009e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e66:	bf00      	nop
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0fc      	beq.n	8009e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000070 	.word	0x20000070

08009e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e80:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <pxCurrentTCBConst2>)
 8009e82:	6819      	ldr	r1, [r3, #0]
 8009e84:	6808      	ldr	r0, [r1, #0]
 8009e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	f380 8809 	msr	PSP, r0
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f380 8811 	msr	BASEPRI, r0
 8009e9a:	4770      	bx	lr
 8009e9c:	f3af 8000 	nop.w

08009ea0 <pxCurrentTCBConst2>:
 8009ea0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop

08009ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ea8:	4808      	ldr	r0, [pc, #32]	; (8009ecc <prvPortStartFirstTask+0x24>)
 8009eaa:	6800      	ldr	r0, [r0, #0]
 8009eac:	6800      	ldr	r0, [r0, #0]
 8009eae:	f380 8808 	msr	MSP, r0
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8814 	msr	CONTROL, r0
 8009eba:	b662      	cpsie	i
 8009ebc:	b661      	cpsie	f
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	df00      	svc	0
 8009ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eca:	bf00      	nop
 8009ecc:	e000ed08 	.word	0xe000ed08

08009ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ed6:	4b46      	ldr	r3, [pc, #280]	; (8009ff0 <xPortStartScheduler+0x120>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a46      	ldr	r2, [pc, #280]	; (8009ff4 <xPortStartScheduler+0x124>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10a      	bne.n	8009ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	613b      	str	r3, [r7, #16]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ef6:	4b3e      	ldr	r3, [pc, #248]	; (8009ff0 <xPortStartScheduler+0x120>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a3f      	ldr	r2, [pc, #252]	; (8009ff8 <xPortStartScheduler+0x128>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d10a      	bne.n	8009f16 <xPortStartScheduler+0x46>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	60fb      	str	r3, [r7, #12]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f16:	4b39      	ldr	r3, [pc, #228]	; (8009ffc <xPortStartScheduler+0x12c>)
 8009f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	22ff      	movs	r2, #255	; 0xff
 8009f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	4b31      	ldr	r3, [pc, #196]	; (800a000 <xPortStartScheduler+0x130>)
 8009f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f3e:	4b31      	ldr	r3, [pc, #196]	; (800a004 <xPortStartScheduler+0x134>)
 8009f40:	2207      	movs	r2, #7
 8009f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f44:	e009      	b.n	8009f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009f46:	4b2f      	ldr	r3, [pc, #188]	; (800a004 <xPortStartScheduler+0x134>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	4a2d      	ldr	r2, [pc, #180]	; (800a004 <xPortStartScheduler+0x134>)
 8009f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f62:	2b80      	cmp	r3, #128	; 0x80
 8009f64:	d0ef      	beq.n	8009f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f66:	4b27      	ldr	r3, [pc, #156]	; (800a004 <xPortStartScheduler+0x134>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f1c3 0307 	rsb	r3, r3, #7
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d00a      	beq.n	8009f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	60bb      	str	r3, [r7, #8]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f88:	4b1e      	ldr	r3, [pc, #120]	; (800a004 <xPortStartScheduler+0x134>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	021b      	lsls	r3, r3, #8
 8009f8e:	4a1d      	ldr	r2, [pc, #116]	; (800a004 <xPortStartScheduler+0x134>)
 8009f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f92:	4b1c      	ldr	r3, [pc, #112]	; (800a004 <xPortStartScheduler+0x134>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f9a:	4a1a      	ldr	r2, [pc, #104]	; (800a004 <xPortStartScheduler+0x134>)
 8009f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fa6:	4b18      	ldr	r3, [pc, #96]	; (800a008 <xPortStartScheduler+0x138>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a17      	ldr	r2, [pc, #92]	; (800a008 <xPortStartScheduler+0x138>)
 8009fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <xPortStartScheduler+0x138>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a14      	ldr	r2, [pc, #80]	; (800a008 <xPortStartScheduler+0x138>)
 8009fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fbe:	f000 f8dd 	bl	800a17c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fc2:	4b12      	ldr	r3, [pc, #72]	; (800a00c <xPortStartScheduler+0x13c>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fc8:	f000 f8fc 	bl	800a1c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fcc:	4b10      	ldr	r3, [pc, #64]	; (800a010 <xPortStartScheduler+0x140>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a0f      	ldr	r2, [pc, #60]	; (800a010 <xPortStartScheduler+0x140>)
 8009fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fd8:	f7ff ff66 	bl	8009ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fdc:	f7ff fd58 	bl	8009a90 <vTaskSwitchContext>
	prvTaskExitError();
 8009fe0:	f7ff ff22 	bl	8009e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	e000ed00 	.word	0xe000ed00
 8009ff4:	410fc271 	.word	0x410fc271
 8009ff8:	410fc270 	.word	0x410fc270
 8009ffc:	e000e400 	.word	0xe000e400
 800a000:	20000c9c 	.word	0x20000c9c
 800a004:	20000ca0 	.word	0x20000ca0
 800a008:	e000ed20 	.word	0xe000ed20
 800a00c:	20000070 	.word	0x20000070
 800a010:	e000ef34 	.word	0xe000ef34

0800a014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	607b      	str	r3, [r7, #4]
}
 800a02c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a02e:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <vPortEnterCritical+0x58>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3301      	adds	r3, #1
 800a034:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <vPortEnterCritical+0x58>)
 800a036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <vPortEnterCritical+0x58>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d10f      	bne.n	800a060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortEnterCritical+0x5c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <vPortEnterCritical+0x4c>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	603b      	str	r3, [r7, #0]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <vPortEnterCritical+0x4a>
	}
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20000070 	.word	0x20000070
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a07a:	4b12      	ldr	r3, [pc, #72]	; (800a0c4 <vPortExitCritical+0x50>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10a      	bne.n	800a098 <vPortExitCritical+0x24>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	607b      	str	r3, [r7, #4]
}
 800a094:	bf00      	nop
 800a096:	e7fe      	b.n	800a096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a098:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <vPortExitCritical+0x50>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	4a09      	ldr	r2, [pc, #36]	; (800a0c4 <vPortExitCritical+0x50>)
 800a0a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0a2:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <vPortExitCritical+0x50>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d105      	bne.n	800a0b6 <vPortExitCritical+0x42>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0b6:	bf00      	nop
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000070 	.word	0x20000070
	...

0800a0d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0d0:	f3ef 8009 	mrs	r0, PSP
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4b15      	ldr	r3, [pc, #84]	; (800a130 <pxCurrentTCBConst>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	f01e 0f10 	tst.w	lr, #16
 800a0e0:	bf08      	it	eq
 800a0e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ea:	6010      	str	r0, [r2, #0]
 800a0ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0f4:	f380 8811 	msr	BASEPRI, r0
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f7ff fcc6 	bl	8009a90 <vTaskSwitchContext>
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f380 8811 	msr	BASEPRI, r0
 800a10c:	bc09      	pop	{r0, r3}
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	6808      	ldr	r0, [r1, #0]
 800a112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a116:	f01e 0f10 	tst.w	lr, #16
 800a11a:	bf08      	it	eq
 800a11c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a120:	f380 8809 	msr	PSP, r0
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w

0800a130 <pxCurrentTCBConst>:
 800a130:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop

0800a138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a152:	f7ff fbe5 	bl	8009920 <xTaskIncrementTick>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <SysTick_Handler+0x40>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	2300      	movs	r3, #0
 800a166:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f383 8811 	msr	BASEPRI, r3
}
 800a16e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a180:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a186:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <vPortSetupTimerInterrupt+0x38>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a18c:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <vPortSetupTimerInterrupt+0x3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0a      	ldr	r2, [pc, #40]	; (800a1bc <vPortSetupTimerInterrupt+0x40>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	099b      	lsrs	r3, r3, #6
 800a198:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <vPortSetupTimerInterrupt+0x44>)
 800a19a:	3b01      	subs	r3, #1
 800a19c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <vPortSetupTimerInterrupt+0x34>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	e000e010 	.word	0xe000e010
 800a1b4:	e000e018 	.word	0xe000e018
 800a1b8:	20000004 	.word	0x20000004
 800a1bc:	10624dd3 	.word	0x10624dd3
 800a1c0:	e000e014 	.word	0xe000e014

0800a1c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a1d4 <vPortEnableVFP+0x10>
 800a1c8:	6801      	ldr	r1, [r0, #0]
 800a1ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a1ce:	6001      	str	r1, [r0, #0]
 800a1d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed88 	.word	0xe000ed88

0800a1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	; 0x28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1e4:	f7ff faf2 	bl	80097cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1e8:	4b5b      	ldr	r3, [pc, #364]	; (800a358 <pvPortMalloc+0x180>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1f0:	f000 f920 	bl	800a434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1f4:	4b59      	ldr	r3, [pc, #356]	; (800a35c <pvPortMalloc+0x184>)
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 8093 	bne.w	800a328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01d      	beq.n	800a244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a208:	2208      	movs	r2, #8
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4413      	add	r3, r2
 800a20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	2b00      	cmp	r3, #0
 800a218:	d014      	beq.n	800a244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f023 0307 	bic.w	r3, r3, #7
 800a220:	3308      	adds	r3, #8
 800a222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <pvPortMalloc+0x6c>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	617b      	str	r3, [r7, #20]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d06e      	beq.n	800a328 <pvPortMalloc+0x150>
 800a24a:	4b45      	ldr	r3, [pc, #276]	; (800a360 <pvPortMalloc+0x188>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d869      	bhi.n	800a328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a254:	4b43      	ldr	r3, [pc, #268]	; (800a364 <pvPortMalloc+0x18c>)
 800a256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a258:	4b42      	ldr	r3, [pc, #264]	; (800a364 <pvPortMalloc+0x18c>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a25e:	e004      	b.n	800a26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d903      	bls.n	800a27c <pvPortMalloc+0xa4>
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1f1      	bne.n	800a260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a27c:	4b36      	ldr	r3, [pc, #216]	; (800a358 <pvPortMalloc+0x180>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a282:	429a      	cmp	r2, r3
 800a284:	d050      	beq.n	800a328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2208      	movs	r2, #8
 800a28c:	4413      	add	r3, r2
 800a28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	1ad2      	subs	r2, r2, r3
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	005b      	lsls	r3, r3, #1
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d91f      	bls.n	800a2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	613b      	str	r3, [r7, #16]
}
 800a2cc:	bf00      	nop
 800a2ce:	e7fe      	b.n	800a2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	1ad2      	subs	r2, r2, r3
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2e2:	69b8      	ldr	r0, [r7, #24]
 800a2e4:	f000 f908 	bl	800a4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2e8:	4b1d      	ldr	r3, [pc, #116]	; (800a360 <pvPortMalloc+0x188>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	4a1b      	ldr	r2, [pc, #108]	; (800a360 <pvPortMalloc+0x188>)
 800a2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2f6:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <pvPortMalloc+0x188>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <pvPortMalloc+0x190>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d203      	bcs.n	800a30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a302:	4b17      	ldr	r3, [pc, #92]	; (800a360 <pvPortMalloc+0x188>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a18      	ldr	r2, [pc, #96]	; (800a368 <pvPortMalloc+0x190>)
 800a308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <pvPortMalloc+0x184>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	431a      	orrs	r2, r3
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	2200      	movs	r2, #0
 800a31c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <pvPortMalloc+0x194>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3301      	adds	r3, #1
 800a324:	4a11      	ldr	r2, [pc, #68]	; (800a36c <pvPortMalloc+0x194>)
 800a326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a328:	f7ff fa5e 	bl	80097e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f003 0307 	and.w	r3, r3, #7
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00a      	beq.n	800a34c <pvPortMalloc+0x174>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	60fb      	str	r3, [r7, #12]
}
 800a348:	bf00      	nop
 800a34a:	e7fe      	b.n	800a34a <pvPortMalloc+0x172>
	return pvReturn;
 800a34c:	69fb      	ldr	r3, [r7, #28]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3728      	adds	r7, #40	; 0x28
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20002034 	.word	0x20002034
 800a35c:	20002048 	.word	0x20002048
 800a360:	20002038 	.word	0x20002038
 800a364:	2000202c 	.word	0x2000202c
 800a368:	2000203c 	.word	0x2000203c
 800a36c:	20002040 	.word	0x20002040

0800a370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d04d      	beq.n	800a41e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a382:	2308      	movs	r3, #8
 800a384:	425b      	negs	r3, r3
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4413      	add	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	4b24      	ldr	r3, [pc, #144]	; (800a428 <vPortFree+0xb8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4013      	ands	r3, r2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <vPortFree+0x44>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60fb      	str	r3, [r7, #12]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <vPortFree+0x62>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	60bb      	str	r3, [r7, #8]
}
 800a3ce:	bf00      	nop
 800a3d0:	e7fe      	b.n	800a3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <vPortFree+0xb8>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01e      	beq.n	800a41e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11a      	bne.n	800a41e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <vPortFree+0xb8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	401a      	ands	r2, r3
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3f8:	f7ff f9e8 	bl	80097cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <vPortFree+0xbc>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4413      	add	r3, r2
 800a406:	4a09      	ldr	r2, [pc, #36]	; (800a42c <vPortFree+0xbc>)
 800a408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a40a:	6938      	ldr	r0, [r7, #16]
 800a40c:	f000 f874 	bl	800a4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <vPortFree+0xc0>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3301      	adds	r3, #1
 800a416:	4a06      	ldr	r2, [pc, #24]	; (800a430 <vPortFree+0xc0>)
 800a418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a41a:	f7ff f9e5 	bl	80097e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a41e:	bf00      	nop
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20002048 	.word	0x20002048
 800a42c:	20002038 	.word	0x20002038
 800a430:	20002044 	.word	0x20002044

0800a434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a43a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a440:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <prvHeapInit+0xac>)
 800a442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00c      	beq.n	800a468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3307      	adds	r3, #7
 800a452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 0307 	bic.w	r3, r3, #7
 800a45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <prvHeapInit+0xac>)
 800a464:	4413      	add	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a46c:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <prvHeapInit+0xb0>)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a472:	4b1c      	ldr	r3, [pc, #112]	; (800a4e4 <prvHeapInit+0xb0>)
 800a474:	2200      	movs	r2, #0
 800a476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a480:	2208      	movs	r2, #8
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 0307 	bic.w	r3, r3, #7
 800a48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4a15      	ldr	r2, [pc, #84]	; (800a4e8 <prvHeapInit+0xb4>)
 800a494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a496:	4b14      	ldr	r3, [pc, #80]	; (800a4e8 <prvHeapInit+0xb4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2200      	movs	r2, #0
 800a49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a49e:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <prvHeapInit+0xb4>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <prvHeapInit+0xb4>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	4a0a      	ldr	r2, [pc, #40]	; (800a4ec <prvHeapInit+0xb8>)
 800a4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	4a09      	ldr	r2, [pc, #36]	; (800a4f0 <prvHeapInit+0xbc>)
 800a4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4cc:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <prvHeapInit+0xc0>)
 800a4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4d2:	601a      	str	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000ca4 	.word	0x20000ca4
 800a4e4:	2000202c 	.word	0x2000202c
 800a4e8:	20002034 	.word	0x20002034
 800a4ec:	2000203c 	.word	0x2000203c
 800a4f0:	20002038 	.word	0x20002038
 800a4f4:	20002048 	.word	0x20002048

0800a4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a500:	4b28      	ldr	r3, [pc, #160]	; (800a5a4 <prvInsertBlockIntoFreeList+0xac>)
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e002      	b.n	800a50c <prvInsertBlockIntoFreeList+0x14>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	429a      	cmp	r2, r3
 800a514:	d8f7      	bhi.n	800a506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	429a      	cmp	r2, r3
 800a526:	d108      	bne.n	800a53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	441a      	add	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	68ba      	ldr	r2, [r7, #8]
 800a544:	441a      	add	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d118      	bne.n	800a580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d00d      	beq.n	800a576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	441a      	add	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	e008      	b.n	800a588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a576:	4b0c      	ldr	r3, [pc, #48]	; (800a5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	e003      	b.n	800a588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d002      	beq.n	800a596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	2000202c 	.word	0x2000202c
 800a5a8:	20002034 	.word	0x20002034

0800a5ac <__errno>:
 800a5ac:	4b01      	ldr	r3, [pc, #4]	; (800a5b4 <__errno+0x8>)
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	20000074 	.word	0x20000074

0800a5b8 <__libc_init_array>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4d0d      	ldr	r5, [pc, #52]	; (800a5f0 <__libc_init_array+0x38>)
 800a5bc:	4c0d      	ldr	r4, [pc, #52]	; (800a5f4 <__libc_init_array+0x3c>)
 800a5be:	1b64      	subs	r4, r4, r5
 800a5c0:	10a4      	asrs	r4, r4, #2
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d109      	bne.n	800a5dc <__libc_init_array+0x24>
 800a5c8:	4d0b      	ldr	r5, [pc, #44]	; (800a5f8 <__libc_init_array+0x40>)
 800a5ca:	4c0c      	ldr	r4, [pc, #48]	; (800a5fc <__libc_init_array+0x44>)
 800a5cc:	f001 fd32 	bl	800c034 <_init>
 800a5d0:	1b64      	subs	r4, r4, r5
 800a5d2:	10a4      	asrs	r4, r4, #2
 800a5d4:	2600      	movs	r6, #0
 800a5d6:	42a6      	cmp	r6, r4
 800a5d8:	d105      	bne.n	800a5e6 <__libc_init_array+0x2e>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e0:	4798      	blx	r3
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__libc_init_array+0xc>
 800a5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ea:	4798      	blx	r3
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	e7f2      	b.n	800a5d6 <__libc_init_array+0x1e>
 800a5f0:	0800cc90 	.word	0x0800cc90
 800a5f4:	0800cc90 	.word	0x0800cc90
 800a5f8:	0800cc90 	.word	0x0800cc90
 800a5fc:	0800cc94 	.word	0x0800cc94

0800a600 <memcmp>:
 800a600:	b530      	push	{r4, r5, lr}
 800a602:	3901      	subs	r1, #1
 800a604:	2400      	movs	r4, #0
 800a606:	42a2      	cmp	r2, r4
 800a608:	d101      	bne.n	800a60e <memcmp+0xe>
 800a60a:	2000      	movs	r0, #0
 800a60c:	e005      	b.n	800a61a <memcmp+0x1a>
 800a60e:	5d03      	ldrb	r3, [r0, r4]
 800a610:	3401      	adds	r4, #1
 800a612:	5d0d      	ldrb	r5, [r1, r4]
 800a614:	42ab      	cmp	r3, r5
 800a616:	d0f6      	beq.n	800a606 <memcmp+0x6>
 800a618:	1b58      	subs	r0, r3, r5
 800a61a:	bd30      	pop	{r4, r5, pc}

0800a61c <memcpy>:
 800a61c:	440a      	add	r2, r1
 800a61e:	4291      	cmp	r1, r2
 800a620:	f100 33ff 	add.w	r3, r0, #4294967295
 800a624:	d100      	bne.n	800a628 <memcpy+0xc>
 800a626:	4770      	bx	lr
 800a628:	b510      	push	{r4, lr}
 800a62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a632:	4291      	cmp	r1, r2
 800a634:	d1f9      	bne.n	800a62a <memcpy+0xe>
 800a636:	bd10      	pop	{r4, pc}

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <iprintf>:
 800a648:	b40f      	push	{r0, r1, r2, r3}
 800a64a:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <iprintf+0x2c>)
 800a64c:	b513      	push	{r0, r1, r4, lr}
 800a64e:	681c      	ldr	r4, [r3, #0]
 800a650:	b124      	cbz	r4, 800a65c <iprintf+0x14>
 800a652:	69a3      	ldr	r3, [r4, #24]
 800a654:	b913      	cbnz	r3, 800a65c <iprintf+0x14>
 800a656:	4620      	mov	r0, r4
 800a658:	f000 fb66 	bl	800ad28 <__sinit>
 800a65c:	ab05      	add	r3, sp, #20
 800a65e:	9a04      	ldr	r2, [sp, #16]
 800a660:	68a1      	ldr	r1, [r4, #8]
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	4620      	mov	r0, r4
 800a666:	f000 fead 	bl	800b3c4 <_vfiprintf_r>
 800a66a:	b002      	add	sp, #8
 800a66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a670:	b004      	add	sp, #16
 800a672:	4770      	bx	lr
 800a674:	20000074 	.word	0x20000074

0800a678 <_puts_r>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	460e      	mov	r6, r1
 800a67c:	4605      	mov	r5, r0
 800a67e:	b118      	cbz	r0, 800a688 <_puts_r+0x10>
 800a680:	6983      	ldr	r3, [r0, #24]
 800a682:	b90b      	cbnz	r3, 800a688 <_puts_r+0x10>
 800a684:	f000 fb50 	bl	800ad28 <__sinit>
 800a688:	69ab      	ldr	r3, [r5, #24]
 800a68a:	68ac      	ldr	r4, [r5, #8]
 800a68c:	b913      	cbnz	r3, 800a694 <_puts_r+0x1c>
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 fb4a 	bl	800ad28 <__sinit>
 800a694:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <_puts_r+0xd0>)
 800a696:	429c      	cmp	r4, r3
 800a698:	d120      	bne.n	800a6dc <_puts_r+0x64>
 800a69a:	686c      	ldr	r4, [r5, #4]
 800a69c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a69e:	07db      	lsls	r3, r3, #31
 800a6a0:	d405      	bmi.n	800a6ae <_puts_r+0x36>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	0598      	lsls	r0, r3, #22
 800a6a6:	d402      	bmi.n	800a6ae <_puts_r+0x36>
 800a6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6aa:	f000 fbed 	bl	800ae88 <__retarget_lock_acquire_recursive>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	0719      	lsls	r1, r3, #28
 800a6b2:	d51d      	bpl.n	800a6f0 <_puts_r+0x78>
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	b1db      	cbz	r3, 800a6f0 <_puts_r+0x78>
 800a6b8:	3e01      	subs	r6, #1
 800a6ba:	68a3      	ldr	r3, [r4, #8]
 800a6bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	60a3      	str	r3, [r4, #8]
 800a6c4:	bb39      	cbnz	r1, 800a716 <_puts_r+0x9e>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	da38      	bge.n	800a73c <_puts_r+0xc4>
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	210a      	movs	r1, #10
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 f932 	bl	800a938 <__swbuf_r>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d011      	beq.n	800a6fc <_puts_r+0x84>
 800a6d8:	250a      	movs	r5, #10
 800a6da:	e011      	b.n	800a700 <_puts_r+0x88>
 800a6dc:	4b1b      	ldr	r3, [pc, #108]	; (800a74c <_puts_r+0xd4>)
 800a6de:	429c      	cmp	r4, r3
 800a6e0:	d101      	bne.n	800a6e6 <_puts_r+0x6e>
 800a6e2:	68ac      	ldr	r4, [r5, #8]
 800a6e4:	e7da      	b.n	800a69c <_puts_r+0x24>
 800a6e6:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <_puts_r+0xd8>)
 800a6e8:	429c      	cmp	r4, r3
 800a6ea:	bf08      	it	eq
 800a6ec:	68ec      	ldreq	r4, [r5, #12]
 800a6ee:	e7d5      	b.n	800a69c <_puts_r+0x24>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f972 	bl	800a9dc <__swsetup_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0dd      	beq.n	800a6b8 <_puts_r+0x40>
 800a6fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a702:	07da      	lsls	r2, r3, #31
 800a704:	d405      	bmi.n	800a712 <_puts_r+0x9a>
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	059b      	lsls	r3, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_puts_r+0x9a>
 800a70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a70e:	f000 fbbc 	bl	800ae8a <__retarget_lock_release_recursive>
 800a712:	4628      	mov	r0, r5
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	2b00      	cmp	r3, #0
 800a718:	da04      	bge.n	800a724 <_puts_r+0xac>
 800a71a:	69a2      	ldr	r2, [r4, #24]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	dc06      	bgt.n	800a72e <_puts_r+0xb6>
 800a720:	290a      	cmp	r1, #10
 800a722:	d004      	beq.n	800a72e <_puts_r+0xb6>
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	6022      	str	r2, [r4, #0]
 800a72a:	7019      	strb	r1, [r3, #0]
 800a72c:	e7c5      	b.n	800a6ba <_puts_r+0x42>
 800a72e:	4622      	mov	r2, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f901 	bl	800a938 <__swbuf_r>
 800a736:	3001      	adds	r0, #1
 800a738:	d1bf      	bne.n	800a6ba <_puts_r+0x42>
 800a73a:	e7df      	b.n	800a6fc <_puts_r+0x84>
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	250a      	movs	r5, #10
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	6022      	str	r2, [r4, #0]
 800a744:	701d      	strb	r5, [r3, #0]
 800a746:	e7db      	b.n	800a700 <_puts_r+0x88>
 800a748:	0800cbd4 	.word	0x0800cbd4
 800a74c:	0800cbf4 	.word	0x0800cbf4
 800a750:	0800cbb4 	.word	0x0800cbb4

0800a754 <puts>:
 800a754:	4b02      	ldr	r3, [pc, #8]	; (800a760 <puts+0xc>)
 800a756:	4601      	mov	r1, r0
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f7ff bf8d 	b.w	800a678 <_puts_r>
 800a75e:	bf00      	nop
 800a760:	20000074 	.word	0x20000074

0800a764 <sniprintf>:
 800a764:	b40c      	push	{r2, r3}
 800a766:	b530      	push	{r4, r5, lr}
 800a768:	4b17      	ldr	r3, [pc, #92]	; (800a7c8 <sniprintf+0x64>)
 800a76a:	1e0c      	subs	r4, r1, #0
 800a76c:	681d      	ldr	r5, [r3, #0]
 800a76e:	b09d      	sub	sp, #116	; 0x74
 800a770:	da08      	bge.n	800a784 <sniprintf+0x20>
 800a772:	238b      	movs	r3, #139	; 0x8b
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	b01d      	add	sp, #116	; 0x74
 800a77c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a780:	b002      	add	sp, #8
 800a782:	4770      	bx	lr
 800a784:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a788:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a78c:	bf14      	ite	ne
 800a78e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a792:	4623      	moveq	r3, r4
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	9307      	str	r3, [sp, #28]
 800a798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a79c:	9002      	str	r0, [sp, #8]
 800a79e:	9006      	str	r0, [sp, #24]
 800a7a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7a6:	ab21      	add	r3, sp, #132	; 0x84
 800a7a8:	a902      	add	r1, sp, #8
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	f000 fcdf 	bl	800b170 <_svfiprintf_r>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	bfbc      	itt	lt
 800a7b6:	238b      	movlt	r3, #139	; 0x8b
 800a7b8:	602b      	strlt	r3, [r5, #0]
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	d0dd      	beq.n	800a77a <sniprintf+0x16>
 800a7be:	9b02      	ldr	r3, [sp, #8]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	e7d9      	b.n	800a77a <sniprintf+0x16>
 800a7c6:	bf00      	nop
 800a7c8:	20000074 	.word	0x20000074

0800a7cc <siprintf>:
 800a7cc:	b40e      	push	{r1, r2, r3}
 800a7ce:	b500      	push	{lr}
 800a7d0:	b09c      	sub	sp, #112	; 0x70
 800a7d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a7d4:	9002      	str	r0, [sp, #8]
 800a7d6:	9006      	str	r0, [sp, #24]
 800a7d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7dc:	4809      	ldr	r0, [pc, #36]	; (800a804 <siprintf+0x38>)
 800a7de:	9107      	str	r1, [sp, #28]
 800a7e0:	9104      	str	r1, [sp, #16]
 800a7e2:	4909      	ldr	r1, [pc, #36]	; (800a808 <siprintf+0x3c>)
 800a7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e8:	9105      	str	r1, [sp, #20]
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	a902      	add	r1, sp, #8
 800a7f0:	f000 fcbe 	bl	800b170 <_svfiprintf_r>
 800a7f4:	9b02      	ldr	r3, [sp, #8]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	b01c      	add	sp, #112	; 0x70
 800a7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a800:	b003      	add	sp, #12
 800a802:	4770      	bx	lr
 800a804:	20000074 	.word	0x20000074
 800a808:	ffff0208 	.word	0xffff0208

0800a80c <strcat>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4602      	mov	r2, r0
 800a810:	7814      	ldrb	r4, [r2, #0]
 800a812:	4613      	mov	r3, r2
 800a814:	3201      	adds	r2, #1
 800a816:	2c00      	cmp	r4, #0
 800a818:	d1fa      	bne.n	800a810 <strcat+0x4>
 800a81a:	3b01      	subs	r3, #1
 800a81c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a820:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a824:	2a00      	cmp	r2, #0
 800a826:	d1f9      	bne.n	800a81c <strcat+0x10>
 800a828:	bd10      	pop	{r4, pc}

0800a82a <strncpy>:
 800a82a:	b510      	push	{r4, lr}
 800a82c:	3901      	subs	r1, #1
 800a82e:	4603      	mov	r3, r0
 800a830:	b132      	cbz	r2, 800a840 <strncpy+0x16>
 800a832:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a836:	f803 4b01 	strb.w	r4, [r3], #1
 800a83a:	3a01      	subs	r2, #1
 800a83c:	2c00      	cmp	r4, #0
 800a83e:	d1f7      	bne.n	800a830 <strncpy+0x6>
 800a840:	441a      	add	r2, r3
 800a842:	2100      	movs	r1, #0
 800a844:	4293      	cmp	r3, r2
 800a846:	d100      	bne.n	800a84a <strncpy+0x20>
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	f803 1b01 	strb.w	r1, [r3], #1
 800a84e:	e7f9      	b.n	800a844 <strncpy+0x1a>

0800a850 <strstr>:
 800a850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a852:	780c      	ldrb	r4, [r1, #0]
 800a854:	b164      	cbz	r4, 800a870 <strstr+0x20>
 800a856:	4603      	mov	r3, r0
 800a858:	781a      	ldrb	r2, [r3, #0]
 800a85a:	4618      	mov	r0, r3
 800a85c:	1c5e      	adds	r6, r3, #1
 800a85e:	b90a      	cbnz	r2, 800a864 <strstr+0x14>
 800a860:	4610      	mov	r0, r2
 800a862:	e005      	b.n	800a870 <strstr+0x20>
 800a864:	4294      	cmp	r4, r2
 800a866:	d108      	bne.n	800a87a <strstr+0x2a>
 800a868:	460d      	mov	r5, r1
 800a86a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a86e:	b902      	cbnz	r2, 800a872 <strstr+0x22>
 800a870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a872:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a876:	4297      	cmp	r7, r2
 800a878:	d0f7      	beq.n	800a86a <strstr+0x1a>
 800a87a:	4633      	mov	r3, r6
 800a87c:	e7ec      	b.n	800a858 <strstr+0x8>
	...

0800a880 <strtok>:
 800a880:	4b16      	ldr	r3, [pc, #88]	; (800a8dc <strtok+0x5c>)
 800a882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a884:	681e      	ldr	r6, [r3, #0]
 800a886:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a888:	4605      	mov	r5, r0
 800a88a:	b9fc      	cbnz	r4, 800a8cc <strtok+0x4c>
 800a88c:	2050      	movs	r0, #80	; 0x50
 800a88e:	9101      	str	r1, [sp, #4]
 800a890:	f000 fb60 	bl	800af54 <malloc>
 800a894:	9901      	ldr	r1, [sp, #4]
 800a896:	65b0      	str	r0, [r6, #88]	; 0x58
 800a898:	4602      	mov	r2, r0
 800a89a:	b920      	cbnz	r0, 800a8a6 <strtok+0x26>
 800a89c:	4b10      	ldr	r3, [pc, #64]	; (800a8e0 <strtok+0x60>)
 800a89e:	4811      	ldr	r0, [pc, #68]	; (800a8e4 <strtok+0x64>)
 800a8a0:	2157      	movs	r1, #87	; 0x57
 800a8a2:	f000 f909 	bl	800aab8 <__assert_func>
 800a8a6:	e9c0 4400 	strd	r4, r4, [r0]
 800a8aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a8ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a8b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a8b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a8ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a8be:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a8c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a8c6:	6184      	str	r4, [r0, #24]
 800a8c8:	7704      	strb	r4, [r0, #28]
 800a8ca:	6244      	str	r4, [r0, #36]	; 0x24
 800a8cc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	b002      	add	sp, #8
 800a8d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8d8:	f000 b806 	b.w	800a8e8 <__strtok_r>
 800a8dc:	20000074 	.word	0x20000074
 800a8e0:	0800cb00 	.word	0x0800cb00
 800a8e4:	0800cb17 	.word	0x0800cb17

0800a8e8 <__strtok_r>:
 800a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ea:	b908      	cbnz	r0, 800a8f0 <__strtok_r+0x8>
 800a8ec:	6810      	ldr	r0, [r2, #0]
 800a8ee:	b188      	cbz	r0, 800a914 <__strtok_r+0x2c>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a8fe:	b91e      	cbnz	r6, 800a908 <__strtok_r+0x20>
 800a900:	b965      	cbnz	r5, 800a91c <__strtok_r+0x34>
 800a902:	6015      	str	r5, [r2, #0]
 800a904:	4628      	mov	r0, r5
 800a906:	e005      	b.n	800a914 <__strtok_r+0x2c>
 800a908:	42b5      	cmp	r5, r6
 800a90a:	d1f6      	bne.n	800a8fa <__strtok_r+0x12>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1f0      	bne.n	800a8f2 <__strtok_r+0xa>
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	7003      	strb	r3, [r0, #0]
 800a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a916:	461c      	mov	r4, r3
 800a918:	e00c      	b.n	800a934 <__strtok_r+0x4c>
 800a91a:	b915      	cbnz	r5, 800a922 <__strtok_r+0x3a>
 800a91c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a920:	460e      	mov	r6, r1
 800a922:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a926:	42ab      	cmp	r3, r5
 800a928:	d1f7      	bne.n	800a91a <__strtok_r+0x32>
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0f3      	beq.n	800a916 <__strtok_r+0x2e>
 800a92e:	2300      	movs	r3, #0
 800a930:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a934:	6014      	str	r4, [r2, #0]
 800a936:	e7ed      	b.n	800a914 <__strtok_r+0x2c>

0800a938 <__swbuf_r>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	460e      	mov	r6, r1
 800a93c:	4614      	mov	r4, r2
 800a93e:	4605      	mov	r5, r0
 800a940:	b118      	cbz	r0, 800a94a <__swbuf_r+0x12>
 800a942:	6983      	ldr	r3, [r0, #24]
 800a944:	b90b      	cbnz	r3, 800a94a <__swbuf_r+0x12>
 800a946:	f000 f9ef 	bl	800ad28 <__sinit>
 800a94a:	4b21      	ldr	r3, [pc, #132]	; (800a9d0 <__swbuf_r+0x98>)
 800a94c:	429c      	cmp	r4, r3
 800a94e:	d12b      	bne.n	800a9a8 <__swbuf_r+0x70>
 800a950:	686c      	ldr	r4, [r5, #4]
 800a952:	69a3      	ldr	r3, [r4, #24]
 800a954:	60a3      	str	r3, [r4, #8]
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	071a      	lsls	r2, r3, #28
 800a95a:	d52f      	bpl.n	800a9bc <__swbuf_r+0x84>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	b36b      	cbz	r3, 800a9bc <__swbuf_r+0x84>
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	1ac0      	subs	r0, r0, r3
 800a966:	6963      	ldr	r3, [r4, #20]
 800a968:	b2f6      	uxtb	r6, r6
 800a96a:	4283      	cmp	r3, r0
 800a96c:	4637      	mov	r7, r6
 800a96e:	dc04      	bgt.n	800a97a <__swbuf_r+0x42>
 800a970:	4621      	mov	r1, r4
 800a972:	4628      	mov	r0, r5
 800a974:	f000 f944 	bl	800ac00 <_fflush_r>
 800a978:	bb30      	cbnz	r0, 800a9c8 <__swbuf_r+0x90>
 800a97a:	68a3      	ldr	r3, [r4, #8]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	60a3      	str	r3, [r4, #8]
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	6022      	str	r2, [r4, #0]
 800a986:	701e      	strb	r6, [r3, #0]
 800a988:	6963      	ldr	r3, [r4, #20]
 800a98a:	3001      	adds	r0, #1
 800a98c:	4283      	cmp	r3, r0
 800a98e:	d004      	beq.n	800a99a <__swbuf_r+0x62>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	07db      	lsls	r3, r3, #31
 800a994:	d506      	bpl.n	800a9a4 <__swbuf_r+0x6c>
 800a996:	2e0a      	cmp	r6, #10
 800a998:	d104      	bne.n	800a9a4 <__swbuf_r+0x6c>
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	f000 f92f 	bl	800ac00 <_fflush_r>
 800a9a2:	b988      	cbnz	r0, 800a9c8 <__swbuf_r+0x90>
 800a9a4:	4638      	mov	r0, r7
 800a9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <__swbuf_r+0x9c>)
 800a9aa:	429c      	cmp	r4, r3
 800a9ac:	d101      	bne.n	800a9b2 <__swbuf_r+0x7a>
 800a9ae:	68ac      	ldr	r4, [r5, #8]
 800a9b0:	e7cf      	b.n	800a952 <__swbuf_r+0x1a>
 800a9b2:	4b09      	ldr	r3, [pc, #36]	; (800a9d8 <__swbuf_r+0xa0>)
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	bf08      	it	eq
 800a9b8:	68ec      	ldreq	r4, [r5, #12]
 800a9ba:	e7ca      	b.n	800a952 <__swbuf_r+0x1a>
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f000 f80c 	bl	800a9dc <__swsetup_r>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d0cb      	beq.n	800a960 <__swbuf_r+0x28>
 800a9c8:	f04f 37ff 	mov.w	r7, #4294967295
 800a9cc:	e7ea      	b.n	800a9a4 <__swbuf_r+0x6c>
 800a9ce:	bf00      	nop
 800a9d0:	0800cbd4 	.word	0x0800cbd4
 800a9d4:	0800cbf4 	.word	0x0800cbf4
 800a9d8:	0800cbb4 	.word	0x0800cbb4

0800a9dc <__swsetup_r>:
 800a9dc:	4b32      	ldr	r3, [pc, #200]	; (800aaa8 <__swsetup_r+0xcc>)
 800a9de:	b570      	push	{r4, r5, r6, lr}
 800a9e0:	681d      	ldr	r5, [r3, #0]
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	b125      	cbz	r5, 800a9f2 <__swsetup_r+0x16>
 800a9e8:	69ab      	ldr	r3, [r5, #24]
 800a9ea:	b913      	cbnz	r3, 800a9f2 <__swsetup_r+0x16>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 f99b 	bl	800ad28 <__sinit>
 800a9f2:	4b2e      	ldr	r3, [pc, #184]	; (800aaac <__swsetup_r+0xd0>)
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d10f      	bne.n	800aa18 <__swsetup_r+0x3c>
 800a9f8:	686c      	ldr	r4, [r5, #4]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa00:	0719      	lsls	r1, r3, #28
 800aa02:	d42c      	bmi.n	800aa5e <__swsetup_r+0x82>
 800aa04:	06dd      	lsls	r5, r3, #27
 800aa06:	d411      	bmi.n	800aa2c <__swsetup_r+0x50>
 800aa08:	2309      	movs	r3, #9
 800aa0a:	6033      	str	r3, [r6, #0]
 800aa0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	f04f 30ff 	mov.w	r0, #4294967295
 800aa16:	e03e      	b.n	800aa96 <__swsetup_r+0xba>
 800aa18:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <__swsetup_r+0xd4>)
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	d101      	bne.n	800aa22 <__swsetup_r+0x46>
 800aa1e:	68ac      	ldr	r4, [r5, #8]
 800aa20:	e7eb      	b.n	800a9fa <__swsetup_r+0x1e>
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <__swsetup_r+0xd8>)
 800aa24:	429c      	cmp	r4, r3
 800aa26:	bf08      	it	eq
 800aa28:	68ec      	ldreq	r4, [r5, #12]
 800aa2a:	e7e6      	b.n	800a9fa <__swsetup_r+0x1e>
 800aa2c:	0758      	lsls	r0, r3, #29
 800aa2e:	d512      	bpl.n	800aa56 <__swsetup_r+0x7a>
 800aa30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa32:	b141      	cbz	r1, 800aa46 <__swsetup_r+0x6a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__swsetup_r+0x66>
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f000 fa91 	bl	800af64 <_free_r>
 800aa42:	2300      	movs	r3, #0
 800aa44:	6363      	str	r3, [r4, #52]	; 0x34
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f043 0308 	orr.w	r3, r3, #8
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	b94b      	cbnz	r3, 800aa76 <__swsetup_r+0x9a>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa6c:	d003      	beq.n	800aa76 <__swsetup_r+0x9a>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 fa2f 	bl	800aed4 <__smakebuf_r>
 800aa76:	89a0      	ldrh	r0, [r4, #12]
 800aa78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa7c:	f010 0301 	ands.w	r3, r0, #1
 800aa80:	d00a      	beq.n	800aa98 <__swsetup_r+0xbc>
 800aa82:	2300      	movs	r3, #0
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	6963      	ldr	r3, [r4, #20]
 800aa88:	425b      	negs	r3, r3
 800aa8a:	61a3      	str	r3, [r4, #24]
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	b943      	cbnz	r3, 800aaa2 <__swsetup_r+0xc6>
 800aa90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa94:	d1ba      	bne.n	800aa0c <__swsetup_r+0x30>
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	0781      	lsls	r1, r0, #30
 800aa9a:	bf58      	it	pl
 800aa9c:	6963      	ldrpl	r3, [r4, #20]
 800aa9e:	60a3      	str	r3, [r4, #8]
 800aaa0:	e7f4      	b.n	800aa8c <__swsetup_r+0xb0>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e7f7      	b.n	800aa96 <__swsetup_r+0xba>
 800aaa6:	bf00      	nop
 800aaa8:	20000074 	.word	0x20000074
 800aaac:	0800cbd4 	.word	0x0800cbd4
 800aab0:	0800cbf4 	.word	0x0800cbf4
 800aab4:	0800cbb4 	.word	0x0800cbb4

0800aab8 <__assert_func>:
 800aab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaba:	4614      	mov	r4, r2
 800aabc:	461a      	mov	r2, r3
 800aabe:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <__assert_func+0x2c>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4605      	mov	r5, r0
 800aac4:	68d8      	ldr	r0, [r3, #12]
 800aac6:	b14c      	cbz	r4, 800aadc <__assert_func+0x24>
 800aac8:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <__assert_func+0x30>)
 800aaca:	9100      	str	r1, [sp, #0]
 800aacc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aad0:	4906      	ldr	r1, [pc, #24]	; (800aaec <__assert_func+0x34>)
 800aad2:	462b      	mov	r3, r5
 800aad4:	f000 f9a6 	bl	800ae24 <fiprintf>
 800aad8:	f000 ff9e 	bl	800ba18 <abort>
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <__assert_func+0x38>)
 800aade:	461c      	mov	r4, r3
 800aae0:	e7f3      	b.n	800aaca <__assert_func+0x12>
 800aae2:	bf00      	nop
 800aae4:	20000074 	.word	0x20000074
 800aae8:	0800cb78 	.word	0x0800cb78
 800aaec:	0800cb85 	.word	0x0800cb85
 800aaf0:	0800cbb3 	.word	0x0800cbb3

0800aaf4 <__sflush_r>:
 800aaf4:	898a      	ldrh	r2, [r1, #12]
 800aaf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aafa:	4605      	mov	r5, r0
 800aafc:	0710      	lsls	r0, r2, #28
 800aafe:	460c      	mov	r4, r1
 800ab00:	d458      	bmi.n	800abb4 <__sflush_r+0xc0>
 800ab02:	684b      	ldr	r3, [r1, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dc05      	bgt.n	800ab14 <__sflush_r+0x20>
 800ab08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	dc02      	bgt.n	800ab14 <__sflush_r+0x20>
 800ab0e:	2000      	movs	r0, #0
 800ab10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	d0f9      	beq.n	800ab0e <__sflush_r+0x1a>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab20:	682f      	ldr	r7, [r5, #0]
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	d032      	beq.n	800ab8c <__sflush_r+0x98>
 800ab26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	075a      	lsls	r2, r3, #29
 800ab2c:	d505      	bpl.n	800ab3a <__sflush_r+0x46>
 800ab2e:	6863      	ldr	r3, [r4, #4]
 800ab30:	1ac0      	subs	r0, r0, r3
 800ab32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab34:	b10b      	cbz	r3, 800ab3a <__sflush_r+0x46>
 800ab36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab38:	1ac0      	subs	r0, r0, r3
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab40:	6a21      	ldr	r1, [r4, #32]
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b0      	blx	r6
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	d106      	bne.n	800ab5a <__sflush_r+0x66>
 800ab4c:	6829      	ldr	r1, [r5, #0]
 800ab4e:	291d      	cmp	r1, #29
 800ab50:	d82c      	bhi.n	800abac <__sflush_r+0xb8>
 800ab52:	4a2a      	ldr	r2, [pc, #168]	; (800abfc <__sflush_r+0x108>)
 800ab54:	40ca      	lsrs	r2, r1
 800ab56:	07d6      	lsls	r6, r2, #31
 800ab58:	d528      	bpl.n	800abac <__sflush_r+0xb8>
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	6062      	str	r2, [r4, #4]
 800ab5e:	04d9      	lsls	r1, r3, #19
 800ab60:	6922      	ldr	r2, [r4, #16]
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	d504      	bpl.n	800ab70 <__sflush_r+0x7c>
 800ab66:	1c42      	adds	r2, r0, #1
 800ab68:	d101      	bne.n	800ab6e <__sflush_r+0x7a>
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	b903      	cbnz	r3, 800ab70 <__sflush_r+0x7c>
 800ab6e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab72:	602f      	str	r7, [r5, #0]
 800ab74:	2900      	cmp	r1, #0
 800ab76:	d0ca      	beq.n	800ab0e <__sflush_r+0x1a>
 800ab78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7c:	4299      	cmp	r1, r3
 800ab7e:	d002      	beq.n	800ab86 <__sflush_r+0x92>
 800ab80:	4628      	mov	r0, r5
 800ab82:	f000 f9ef 	bl	800af64 <_free_r>
 800ab86:	2000      	movs	r0, #0
 800ab88:	6360      	str	r0, [r4, #52]	; 0x34
 800ab8a:	e7c1      	b.n	800ab10 <__sflush_r+0x1c>
 800ab8c:	6a21      	ldr	r1, [r4, #32]
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b0      	blx	r6
 800ab94:	1c41      	adds	r1, r0, #1
 800ab96:	d1c7      	bne.n	800ab28 <__sflush_r+0x34>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0c4      	beq.n	800ab28 <__sflush_r+0x34>
 800ab9e:	2b1d      	cmp	r3, #29
 800aba0:	d001      	beq.n	800aba6 <__sflush_r+0xb2>
 800aba2:	2b16      	cmp	r3, #22
 800aba4:	d101      	bne.n	800abaa <__sflush_r+0xb6>
 800aba6:	602f      	str	r7, [r5, #0]
 800aba8:	e7b1      	b.n	800ab0e <__sflush_r+0x1a>
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	e7ad      	b.n	800ab10 <__sflush_r+0x1c>
 800abb4:	690f      	ldr	r7, [r1, #16]
 800abb6:	2f00      	cmp	r7, #0
 800abb8:	d0a9      	beq.n	800ab0e <__sflush_r+0x1a>
 800abba:	0793      	lsls	r3, r2, #30
 800abbc:	680e      	ldr	r6, [r1, #0]
 800abbe:	bf08      	it	eq
 800abc0:	694b      	ldreq	r3, [r1, #20]
 800abc2:	600f      	str	r7, [r1, #0]
 800abc4:	bf18      	it	ne
 800abc6:	2300      	movne	r3, #0
 800abc8:	eba6 0807 	sub.w	r8, r6, r7
 800abcc:	608b      	str	r3, [r1, #8]
 800abce:	f1b8 0f00 	cmp.w	r8, #0
 800abd2:	dd9c      	ble.n	800ab0e <__sflush_r+0x1a>
 800abd4:	6a21      	ldr	r1, [r4, #32]
 800abd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abd8:	4643      	mov	r3, r8
 800abda:	463a      	mov	r2, r7
 800abdc:	4628      	mov	r0, r5
 800abde:	47b0      	blx	r6
 800abe0:	2800      	cmp	r0, #0
 800abe2:	dc06      	bgt.n	800abf2 <__sflush_r+0xfe>
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	e78e      	b.n	800ab10 <__sflush_r+0x1c>
 800abf2:	4407      	add	r7, r0
 800abf4:	eba8 0800 	sub.w	r8, r8, r0
 800abf8:	e7e9      	b.n	800abce <__sflush_r+0xda>
 800abfa:	bf00      	nop
 800abfc:	20400001 	.word	0x20400001

0800ac00 <_fflush_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	690b      	ldr	r3, [r1, #16]
 800ac04:	4605      	mov	r5, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	b913      	cbnz	r3, 800ac10 <_fflush_r+0x10>
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	b118      	cbz	r0, 800ac1a <_fflush_r+0x1a>
 800ac12:	6983      	ldr	r3, [r0, #24]
 800ac14:	b90b      	cbnz	r3, 800ac1a <_fflush_r+0x1a>
 800ac16:	f000 f887 	bl	800ad28 <__sinit>
 800ac1a:	4b14      	ldr	r3, [pc, #80]	; (800ac6c <_fflush_r+0x6c>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	d11b      	bne.n	800ac58 <_fflush_r+0x58>
 800ac20:	686c      	ldr	r4, [r5, #4]
 800ac22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0ef      	beq.n	800ac0a <_fflush_r+0xa>
 800ac2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac2c:	07d0      	lsls	r0, r2, #31
 800ac2e:	d404      	bmi.n	800ac3a <_fflush_r+0x3a>
 800ac30:	0599      	lsls	r1, r3, #22
 800ac32:	d402      	bmi.n	800ac3a <_fflush_r+0x3a>
 800ac34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac36:	f000 f927 	bl	800ae88 <__retarget_lock_acquire_recursive>
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	f7ff ff59 	bl	800aaf4 <__sflush_r>
 800ac42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac44:	07da      	lsls	r2, r3, #31
 800ac46:	4605      	mov	r5, r0
 800ac48:	d4e0      	bmi.n	800ac0c <_fflush_r+0xc>
 800ac4a:	89a3      	ldrh	r3, [r4, #12]
 800ac4c:	059b      	lsls	r3, r3, #22
 800ac4e:	d4dd      	bmi.n	800ac0c <_fflush_r+0xc>
 800ac50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac52:	f000 f91a 	bl	800ae8a <__retarget_lock_release_recursive>
 800ac56:	e7d9      	b.n	800ac0c <_fflush_r+0xc>
 800ac58:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <_fflush_r+0x70>)
 800ac5a:	429c      	cmp	r4, r3
 800ac5c:	d101      	bne.n	800ac62 <_fflush_r+0x62>
 800ac5e:	68ac      	ldr	r4, [r5, #8]
 800ac60:	e7df      	b.n	800ac22 <_fflush_r+0x22>
 800ac62:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <_fflush_r+0x74>)
 800ac64:	429c      	cmp	r4, r3
 800ac66:	bf08      	it	eq
 800ac68:	68ec      	ldreq	r4, [r5, #12]
 800ac6a:	e7da      	b.n	800ac22 <_fflush_r+0x22>
 800ac6c:	0800cbd4 	.word	0x0800cbd4
 800ac70:	0800cbf4 	.word	0x0800cbf4
 800ac74:	0800cbb4 	.word	0x0800cbb4

0800ac78 <std>:
 800ac78:	2300      	movs	r3, #0
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac86:	6083      	str	r3, [r0, #8]
 800ac88:	8181      	strh	r1, [r0, #12]
 800ac8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac8c:	81c2      	strh	r2, [r0, #14]
 800ac8e:	6183      	str	r3, [r0, #24]
 800ac90:	4619      	mov	r1, r3
 800ac92:	2208      	movs	r2, #8
 800ac94:	305c      	adds	r0, #92	; 0x5c
 800ac96:	f7ff fccf 	bl	800a638 <memset>
 800ac9a:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <std+0x38>)
 800ac9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac9e:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <std+0x3c>)
 800aca0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aca2:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <std+0x40>)
 800aca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <std+0x44>)
 800aca8:	6224      	str	r4, [r4, #32]
 800acaa:	6323      	str	r3, [r4, #48]	; 0x30
 800acac:	bd10      	pop	{r4, pc}
 800acae:	bf00      	nop
 800acb0:	0800b96d 	.word	0x0800b96d
 800acb4:	0800b98f 	.word	0x0800b98f
 800acb8:	0800b9c7 	.word	0x0800b9c7
 800acbc:	0800b9eb 	.word	0x0800b9eb

0800acc0 <_cleanup_r>:
 800acc0:	4901      	ldr	r1, [pc, #4]	; (800acc8 <_cleanup_r+0x8>)
 800acc2:	f000 b8c1 	b.w	800ae48 <_fwalk_reent>
 800acc6:	bf00      	nop
 800acc8:	0800ac01 	.word	0x0800ac01

0800accc <__sfmoreglue>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	1e4a      	subs	r2, r1, #1
 800acd0:	2568      	movs	r5, #104	; 0x68
 800acd2:	4355      	muls	r5, r2
 800acd4:	460e      	mov	r6, r1
 800acd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acda:	f000 f993 	bl	800b004 <_malloc_r>
 800acde:	4604      	mov	r4, r0
 800ace0:	b140      	cbz	r0, 800acf4 <__sfmoreglue+0x28>
 800ace2:	2100      	movs	r1, #0
 800ace4:	e9c0 1600 	strd	r1, r6, [r0]
 800ace8:	300c      	adds	r0, #12
 800acea:	60a0      	str	r0, [r4, #8]
 800acec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acf0:	f7ff fca2 	bl	800a638 <memset>
 800acf4:	4620      	mov	r0, r4
 800acf6:	bd70      	pop	{r4, r5, r6, pc}

0800acf8 <__sfp_lock_acquire>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__sfp_lock_acquire+0x8>)
 800acfa:	f000 b8c5 	b.w	800ae88 <__retarget_lock_acquire_recursive>
 800acfe:	bf00      	nop
 800ad00:	20002950 	.word	0x20002950

0800ad04 <__sfp_lock_release>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__sfp_lock_release+0x8>)
 800ad06:	f000 b8c0 	b.w	800ae8a <__retarget_lock_release_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20002950 	.word	0x20002950

0800ad10 <__sinit_lock_acquire>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__sinit_lock_acquire+0x8>)
 800ad12:	f000 b8b9 	b.w	800ae88 <__retarget_lock_acquire_recursive>
 800ad16:	bf00      	nop
 800ad18:	2000294b 	.word	0x2000294b

0800ad1c <__sinit_lock_release>:
 800ad1c:	4801      	ldr	r0, [pc, #4]	; (800ad24 <__sinit_lock_release+0x8>)
 800ad1e:	f000 b8b4 	b.w	800ae8a <__retarget_lock_release_recursive>
 800ad22:	bf00      	nop
 800ad24:	2000294b 	.word	0x2000294b

0800ad28 <__sinit>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	f7ff fff0 	bl	800ad10 <__sinit_lock_acquire>
 800ad30:	69a3      	ldr	r3, [r4, #24]
 800ad32:	b11b      	cbz	r3, 800ad3c <__sinit+0x14>
 800ad34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad38:	f7ff bff0 	b.w	800ad1c <__sinit_lock_release>
 800ad3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad40:	6523      	str	r3, [r4, #80]	; 0x50
 800ad42:	4b13      	ldr	r3, [pc, #76]	; (800ad90 <__sinit+0x68>)
 800ad44:	4a13      	ldr	r2, [pc, #76]	; (800ad94 <__sinit+0x6c>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	bf04      	itt	eq
 800ad4e:	2301      	moveq	r3, #1
 800ad50:	61a3      	streq	r3, [r4, #24]
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f820 	bl	800ad98 <__sfp>
 800ad58:	6060      	str	r0, [r4, #4]
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 f81c 	bl	800ad98 <__sfp>
 800ad60:	60a0      	str	r0, [r4, #8]
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 f818 	bl	800ad98 <__sfp>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	60e0      	str	r0, [r4, #12]
 800ad6c:	2104      	movs	r1, #4
 800ad6e:	6860      	ldr	r0, [r4, #4]
 800ad70:	f7ff ff82 	bl	800ac78 <std>
 800ad74:	68a0      	ldr	r0, [r4, #8]
 800ad76:	2201      	movs	r2, #1
 800ad78:	2109      	movs	r1, #9
 800ad7a:	f7ff ff7d 	bl	800ac78 <std>
 800ad7e:	68e0      	ldr	r0, [r4, #12]
 800ad80:	2202      	movs	r2, #2
 800ad82:	2112      	movs	r1, #18
 800ad84:	f7ff ff78 	bl	800ac78 <std>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	61a3      	str	r3, [r4, #24]
 800ad8c:	e7d2      	b.n	800ad34 <__sinit+0xc>
 800ad8e:	bf00      	nop
 800ad90:	0800cafc 	.word	0x0800cafc
 800ad94:	0800acc1 	.word	0x0800acc1

0800ad98 <__sfp>:
 800ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	f7ff ffac 	bl	800acf8 <__sfp_lock_acquire>
 800ada0:	4b1e      	ldr	r3, [pc, #120]	; (800ae1c <__sfp+0x84>)
 800ada2:	681e      	ldr	r6, [r3, #0]
 800ada4:	69b3      	ldr	r3, [r6, #24]
 800ada6:	b913      	cbnz	r3, 800adae <__sfp+0x16>
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ffbd 	bl	800ad28 <__sinit>
 800adae:	3648      	adds	r6, #72	; 0x48
 800adb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	d503      	bpl.n	800adc0 <__sfp+0x28>
 800adb8:	6833      	ldr	r3, [r6, #0]
 800adba:	b30b      	cbz	r3, 800ae00 <__sfp+0x68>
 800adbc:	6836      	ldr	r6, [r6, #0]
 800adbe:	e7f7      	b.n	800adb0 <__sfp+0x18>
 800adc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adc4:	b9d5      	cbnz	r5, 800adfc <__sfp+0x64>
 800adc6:	4b16      	ldr	r3, [pc, #88]	; (800ae20 <__sfp+0x88>)
 800adc8:	60e3      	str	r3, [r4, #12]
 800adca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adce:	6665      	str	r5, [r4, #100]	; 0x64
 800add0:	f000 f859 	bl	800ae86 <__retarget_lock_init_recursive>
 800add4:	f7ff ff96 	bl	800ad04 <__sfp_lock_release>
 800add8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800addc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ade0:	6025      	str	r5, [r4, #0]
 800ade2:	61a5      	str	r5, [r4, #24]
 800ade4:	2208      	movs	r2, #8
 800ade6:	4629      	mov	r1, r5
 800ade8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adec:	f7ff fc24 	bl	800a638 <memset>
 800adf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adf8:	4620      	mov	r0, r4
 800adfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adfc:	3468      	adds	r4, #104	; 0x68
 800adfe:	e7d9      	b.n	800adb4 <__sfp+0x1c>
 800ae00:	2104      	movs	r1, #4
 800ae02:	4638      	mov	r0, r7
 800ae04:	f7ff ff62 	bl	800accc <__sfmoreglue>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	6030      	str	r0, [r6, #0]
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d1d5      	bne.n	800adbc <__sfp+0x24>
 800ae10:	f7ff ff78 	bl	800ad04 <__sfp_lock_release>
 800ae14:	230c      	movs	r3, #12
 800ae16:	603b      	str	r3, [r7, #0]
 800ae18:	e7ee      	b.n	800adf8 <__sfp+0x60>
 800ae1a:	bf00      	nop
 800ae1c:	0800cafc 	.word	0x0800cafc
 800ae20:	ffff0001 	.word	0xffff0001

0800ae24 <fiprintf>:
 800ae24:	b40e      	push	{r1, r2, r3}
 800ae26:	b503      	push	{r0, r1, lr}
 800ae28:	4601      	mov	r1, r0
 800ae2a:	ab03      	add	r3, sp, #12
 800ae2c:	4805      	ldr	r0, [pc, #20]	; (800ae44 <fiprintf+0x20>)
 800ae2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae32:	6800      	ldr	r0, [r0, #0]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	f000 fac5 	bl	800b3c4 <_vfiprintf_r>
 800ae3a:	b002      	add	sp, #8
 800ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae40:	b003      	add	sp, #12
 800ae42:	4770      	bx	lr
 800ae44:	20000074 	.word	0x20000074

0800ae48 <_fwalk_reent>:
 800ae48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	4688      	mov	r8, r1
 800ae50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae54:	2700      	movs	r7, #0
 800ae56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae5e:	d505      	bpl.n	800ae6c <_fwalk_reent+0x24>
 800ae60:	6824      	ldr	r4, [r4, #0]
 800ae62:	2c00      	cmp	r4, #0
 800ae64:	d1f7      	bne.n	800ae56 <_fwalk_reent+0xe>
 800ae66:	4638      	mov	r0, r7
 800ae68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6c:	89ab      	ldrh	r3, [r5, #12]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d907      	bls.n	800ae82 <_fwalk_reent+0x3a>
 800ae72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae76:	3301      	adds	r3, #1
 800ae78:	d003      	beq.n	800ae82 <_fwalk_reent+0x3a>
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	47c0      	blx	r8
 800ae80:	4307      	orrs	r7, r0
 800ae82:	3568      	adds	r5, #104	; 0x68
 800ae84:	e7e9      	b.n	800ae5a <_fwalk_reent+0x12>

0800ae86 <__retarget_lock_init_recursive>:
 800ae86:	4770      	bx	lr

0800ae88 <__retarget_lock_acquire_recursive>:
 800ae88:	4770      	bx	lr

0800ae8a <__retarget_lock_release_recursive>:
 800ae8a:	4770      	bx	lr

0800ae8c <__swhatbuf_r>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	460e      	mov	r6, r1
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	2900      	cmp	r1, #0
 800ae96:	b096      	sub	sp, #88	; 0x58
 800ae98:	4614      	mov	r4, r2
 800ae9a:	461d      	mov	r5, r3
 800ae9c:	da07      	bge.n	800aeae <__swhatbuf_r+0x22>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	89b3      	ldrh	r3, [r6, #12]
 800aea4:	061a      	lsls	r2, r3, #24
 800aea6:	d410      	bmi.n	800aeca <__swhatbuf_r+0x3e>
 800aea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeac:	e00e      	b.n	800aecc <__swhatbuf_r+0x40>
 800aeae:	466a      	mov	r2, sp
 800aeb0:	f000 fdca 	bl	800ba48 <_fstat_r>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	dbf2      	blt.n	800ae9e <__swhatbuf_r+0x12>
 800aeb8:	9a01      	ldr	r2, [sp, #4]
 800aeba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aec2:	425a      	negs	r2, r3
 800aec4:	415a      	adcs	r2, r3
 800aec6:	602a      	str	r2, [r5, #0]
 800aec8:	e7ee      	b.n	800aea8 <__swhatbuf_r+0x1c>
 800aeca:	2340      	movs	r3, #64	; 0x40
 800aecc:	2000      	movs	r0, #0
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	b016      	add	sp, #88	; 0x58
 800aed2:	bd70      	pop	{r4, r5, r6, pc}

0800aed4 <__smakebuf_r>:
 800aed4:	898b      	ldrh	r3, [r1, #12]
 800aed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aed8:	079d      	lsls	r5, r3, #30
 800aeda:	4606      	mov	r6, r0
 800aedc:	460c      	mov	r4, r1
 800aede:	d507      	bpl.n	800aef0 <__smakebuf_r+0x1c>
 800aee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	6123      	str	r3, [r4, #16]
 800aee8:	2301      	movs	r3, #1
 800aeea:	6163      	str	r3, [r4, #20]
 800aeec:	b002      	add	sp, #8
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	ab01      	add	r3, sp, #4
 800aef2:	466a      	mov	r2, sp
 800aef4:	f7ff ffca 	bl	800ae8c <__swhatbuf_r>
 800aef8:	9900      	ldr	r1, [sp, #0]
 800aefa:	4605      	mov	r5, r0
 800aefc:	4630      	mov	r0, r6
 800aefe:	f000 f881 	bl	800b004 <_malloc_r>
 800af02:	b948      	cbnz	r0, 800af18 <__smakebuf_r+0x44>
 800af04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af08:	059a      	lsls	r2, r3, #22
 800af0a:	d4ef      	bmi.n	800aeec <__smakebuf_r+0x18>
 800af0c:	f023 0303 	bic.w	r3, r3, #3
 800af10:	f043 0302 	orr.w	r3, r3, #2
 800af14:	81a3      	strh	r3, [r4, #12]
 800af16:	e7e3      	b.n	800aee0 <__smakebuf_r+0xc>
 800af18:	4b0d      	ldr	r3, [pc, #52]	; (800af50 <__smakebuf_r+0x7c>)
 800af1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	6020      	str	r0, [r4, #0]
 800af20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af24:	81a3      	strh	r3, [r4, #12]
 800af26:	9b00      	ldr	r3, [sp, #0]
 800af28:	6163      	str	r3, [r4, #20]
 800af2a:	9b01      	ldr	r3, [sp, #4]
 800af2c:	6120      	str	r0, [r4, #16]
 800af2e:	b15b      	cbz	r3, 800af48 <__smakebuf_r+0x74>
 800af30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af34:	4630      	mov	r0, r6
 800af36:	f000 fd99 	bl	800ba6c <_isatty_r>
 800af3a:	b128      	cbz	r0, 800af48 <__smakebuf_r+0x74>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f023 0303 	bic.w	r3, r3, #3
 800af42:	f043 0301 	orr.w	r3, r3, #1
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	89a0      	ldrh	r0, [r4, #12]
 800af4a:	4305      	orrs	r5, r0
 800af4c:	81a5      	strh	r5, [r4, #12]
 800af4e:	e7cd      	b.n	800aeec <__smakebuf_r+0x18>
 800af50:	0800acc1 	.word	0x0800acc1

0800af54 <malloc>:
 800af54:	4b02      	ldr	r3, [pc, #8]	; (800af60 <malloc+0xc>)
 800af56:	4601      	mov	r1, r0
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f000 b853 	b.w	800b004 <_malloc_r>
 800af5e:	bf00      	nop
 800af60:	20000074 	.word	0x20000074

0800af64 <_free_r>:
 800af64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af66:	2900      	cmp	r1, #0
 800af68:	d048      	beq.n	800affc <_free_r+0x98>
 800af6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af6e:	9001      	str	r0, [sp, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f1a1 0404 	sub.w	r4, r1, #4
 800af76:	bfb8      	it	lt
 800af78:	18e4      	addlt	r4, r4, r3
 800af7a:	f000 fdb3 	bl	800bae4 <__malloc_lock>
 800af7e:	4a20      	ldr	r2, [pc, #128]	; (800b000 <_free_r+0x9c>)
 800af80:	9801      	ldr	r0, [sp, #4]
 800af82:	6813      	ldr	r3, [r2, #0]
 800af84:	4615      	mov	r5, r2
 800af86:	b933      	cbnz	r3, 800af96 <_free_r+0x32>
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	6014      	str	r4, [r2, #0]
 800af8c:	b003      	add	sp, #12
 800af8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af92:	f000 bdad 	b.w	800baf0 <__malloc_unlock>
 800af96:	42a3      	cmp	r3, r4
 800af98:	d90b      	bls.n	800afb2 <_free_r+0x4e>
 800af9a:	6821      	ldr	r1, [r4, #0]
 800af9c:	1862      	adds	r2, r4, r1
 800af9e:	4293      	cmp	r3, r2
 800afa0:	bf04      	itt	eq
 800afa2:	681a      	ldreq	r2, [r3, #0]
 800afa4:	685b      	ldreq	r3, [r3, #4]
 800afa6:	6063      	str	r3, [r4, #4]
 800afa8:	bf04      	itt	eq
 800afaa:	1852      	addeq	r2, r2, r1
 800afac:	6022      	streq	r2, [r4, #0]
 800afae:	602c      	str	r4, [r5, #0]
 800afb0:	e7ec      	b.n	800af8c <_free_r+0x28>
 800afb2:	461a      	mov	r2, r3
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	b10b      	cbz	r3, 800afbc <_free_r+0x58>
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d9fa      	bls.n	800afb2 <_free_r+0x4e>
 800afbc:	6811      	ldr	r1, [r2, #0]
 800afbe:	1855      	adds	r5, r2, r1
 800afc0:	42a5      	cmp	r5, r4
 800afc2:	d10b      	bne.n	800afdc <_free_r+0x78>
 800afc4:	6824      	ldr	r4, [r4, #0]
 800afc6:	4421      	add	r1, r4
 800afc8:	1854      	adds	r4, r2, r1
 800afca:	42a3      	cmp	r3, r4
 800afcc:	6011      	str	r1, [r2, #0]
 800afce:	d1dd      	bne.n	800af8c <_free_r+0x28>
 800afd0:	681c      	ldr	r4, [r3, #0]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	6053      	str	r3, [r2, #4]
 800afd6:	4421      	add	r1, r4
 800afd8:	6011      	str	r1, [r2, #0]
 800afda:	e7d7      	b.n	800af8c <_free_r+0x28>
 800afdc:	d902      	bls.n	800afe4 <_free_r+0x80>
 800afde:	230c      	movs	r3, #12
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	e7d3      	b.n	800af8c <_free_r+0x28>
 800afe4:	6825      	ldr	r5, [r4, #0]
 800afe6:	1961      	adds	r1, r4, r5
 800afe8:	428b      	cmp	r3, r1
 800afea:	bf04      	itt	eq
 800afec:	6819      	ldreq	r1, [r3, #0]
 800afee:	685b      	ldreq	r3, [r3, #4]
 800aff0:	6063      	str	r3, [r4, #4]
 800aff2:	bf04      	itt	eq
 800aff4:	1949      	addeq	r1, r1, r5
 800aff6:	6021      	streq	r1, [r4, #0]
 800aff8:	6054      	str	r4, [r2, #4]
 800affa:	e7c7      	b.n	800af8c <_free_r+0x28>
 800affc:	b003      	add	sp, #12
 800affe:	bd30      	pop	{r4, r5, pc}
 800b000:	2000204c 	.word	0x2000204c

0800b004 <_malloc_r>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	1ccd      	adds	r5, r1, #3
 800b008:	f025 0503 	bic.w	r5, r5, #3
 800b00c:	3508      	adds	r5, #8
 800b00e:	2d0c      	cmp	r5, #12
 800b010:	bf38      	it	cc
 800b012:	250c      	movcc	r5, #12
 800b014:	2d00      	cmp	r5, #0
 800b016:	4606      	mov	r6, r0
 800b018:	db01      	blt.n	800b01e <_malloc_r+0x1a>
 800b01a:	42a9      	cmp	r1, r5
 800b01c:	d903      	bls.n	800b026 <_malloc_r+0x22>
 800b01e:	230c      	movs	r3, #12
 800b020:	6033      	str	r3, [r6, #0]
 800b022:	2000      	movs	r0, #0
 800b024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b026:	f000 fd5d 	bl	800bae4 <__malloc_lock>
 800b02a:	4921      	ldr	r1, [pc, #132]	; (800b0b0 <_malloc_r+0xac>)
 800b02c:	680a      	ldr	r2, [r1, #0]
 800b02e:	4614      	mov	r4, r2
 800b030:	b99c      	cbnz	r4, 800b05a <_malloc_r+0x56>
 800b032:	4f20      	ldr	r7, [pc, #128]	; (800b0b4 <_malloc_r+0xb0>)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	b923      	cbnz	r3, 800b042 <_malloc_r+0x3e>
 800b038:	4621      	mov	r1, r4
 800b03a:	4630      	mov	r0, r6
 800b03c:	f000 fc86 	bl	800b94c <_sbrk_r>
 800b040:	6038      	str	r0, [r7, #0]
 800b042:	4629      	mov	r1, r5
 800b044:	4630      	mov	r0, r6
 800b046:	f000 fc81 	bl	800b94c <_sbrk_r>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	d123      	bne.n	800b096 <_malloc_r+0x92>
 800b04e:	230c      	movs	r3, #12
 800b050:	6033      	str	r3, [r6, #0]
 800b052:	4630      	mov	r0, r6
 800b054:	f000 fd4c 	bl	800baf0 <__malloc_unlock>
 800b058:	e7e3      	b.n	800b022 <_malloc_r+0x1e>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	1b5b      	subs	r3, r3, r5
 800b05e:	d417      	bmi.n	800b090 <_malloc_r+0x8c>
 800b060:	2b0b      	cmp	r3, #11
 800b062:	d903      	bls.n	800b06c <_malloc_r+0x68>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	441c      	add	r4, r3
 800b068:	6025      	str	r5, [r4, #0]
 800b06a:	e004      	b.n	800b076 <_malloc_r+0x72>
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	42a2      	cmp	r2, r4
 800b070:	bf0c      	ite	eq
 800b072:	600b      	streq	r3, [r1, #0]
 800b074:	6053      	strne	r3, [r2, #4]
 800b076:	4630      	mov	r0, r6
 800b078:	f000 fd3a 	bl	800baf0 <__malloc_unlock>
 800b07c:	f104 000b 	add.w	r0, r4, #11
 800b080:	1d23      	adds	r3, r4, #4
 800b082:	f020 0007 	bic.w	r0, r0, #7
 800b086:	1ac2      	subs	r2, r0, r3
 800b088:	d0cc      	beq.n	800b024 <_malloc_r+0x20>
 800b08a:	1a1b      	subs	r3, r3, r0
 800b08c:	50a3      	str	r3, [r4, r2]
 800b08e:	e7c9      	b.n	800b024 <_malloc_r+0x20>
 800b090:	4622      	mov	r2, r4
 800b092:	6864      	ldr	r4, [r4, #4]
 800b094:	e7cc      	b.n	800b030 <_malloc_r+0x2c>
 800b096:	1cc4      	adds	r4, r0, #3
 800b098:	f024 0403 	bic.w	r4, r4, #3
 800b09c:	42a0      	cmp	r0, r4
 800b09e:	d0e3      	beq.n	800b068 <_malloc_r+0x64>
 800b0a0:	1a21      	subs	r1, r4, r0
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f000 fc52 	bl	800b94c <_sbrk_r>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d1dd      	bne.n	800b068 <_malloc_r+0x64>
 800b0ac:	e7cf      	b.n	800b04e <_malloc_r+0x4a>
 800b0ae:	bf00      	nop
 800b0b0:	2000204c 	.word	0x2000204c
 800b0b4:	20002050 	.word	0x20002050

0800b0b8 <__ssputs_r>:
 800b0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0bc:	688e      	ldr	r6, [r1, #8]
 800b0be:	429e      	cmp	r6, r3
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	4690      	mov	r8, r2
 800b0c6:	461f      	mov	r7, r3
 800b0c8:	d838      	bhi.n	800b13c <__ssputs_r+0x84>
 800b0ca:	898a      	ldrh	r2, [r1, #12]
 800b0cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0d0:	d032      	beq.n	800b138 <__ssputs_r+0x80>
 800b0d2:	6825      	ldr	r5, [r4, #0]
 800b0d4:	6909      	ldr	r1, [r1, #16]
 800b0d6:	eba5 0901 	sub.w	r9, r5, r1
 800b0da:	6965      	ldr	r5, [r4, #20]
 800b0dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	444b      	add	r3, r9
 800b0e8:	106d      	asrs	r5, r5, #1
 800b0ea:	429d      	cmp	r5, r3
 800b0ec:	bf38      	it	cc
 800b0ee:	461d      	movcc	r5, r3
 800b0f0:	0553      	lsls	r3, r2, #21
 800b0f2:	d531      	bpl.n	800b158 <__ssputs_r+0xa0>
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7ff ff85 	bl	800b004 <_malloc_r>
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	b950      	cbnz	r0, 800b114 <__ssputs_r+0x5c>
 800b0fe:	230c      	movs	r3, #12
 800b100:	f8ca 3000 	str.w	r3, [sl]
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b114:	6921      	ldr	r1, [r4, #16]
 800b116:	464a      	mov	r2, r9
 800b118:	f7ff fa80 	bl	800a61c <memcpy>
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b126:	81a3      	strh	r3, [r4, #12]
 800b128:	6126      	str	r6, [r4, #16]
 800b12a:	6165      	str	r5, [r4, #20]
 800b12c:	444e      	add	r6, r9
 800b12e:	eba5 0509 	sub.w	r5, r5, r9
 800b132:	6026      	str	r6, [r4, #0]
 800b134:	60a5      	str	r5, [r4, #8]
 800b136:	463e      	mov	r6, r7
 800b138:	42be      	cmp	r6, r7
 800b13a:	d900      	bls.n	800b13e <__ssputs_r+0x86>
 800b13c:	463e      	mov	r6, r7
 800b13e:	4632      	mov	r2, r6
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	4641      	mov	r1, r8
 800b144:	f000 fcb4 	bl	800bab0 <memmove>
 800b148:	68a3      	ldr	r3, [r4, #8]
 800b14a:	6822      	ldr	r2, [r4, #0]
 800b14c:	1b9b      	subs	r3, r3, r6
 800b14e:	4432      	add	r2, r6
 800b150:	60a3      	str	r3, [r4, #8]
 800b152:	6022      	str	r2, [r4, #0]
 800b154:	2000      	movs	r0, #0
 800b156:	e7db      	b.n	800b110 <__ssputs_r+0x58>
 800b158:	462a      	mov	r2, r5
 800b15a:	f000 fccf 	bl	800bafc <_realloc_r>
 800b15e:	4606      	mov	r6, r0
 800b160:	2800      	cmp	r0, #0
 800b162:	d1e1      	bne.n	800b128 <__ssputs_r+0x70>
 800b164:	6921      	ldr	r1, [r4, #16]
 800b166:	4650      	mov	r0, sl
 800b168:	f7ff fefc 	bl	800af64 <_free_r>
 800b16c:	e7c7      	b.n	800b0fe <__ssputs_r+0x46>
	...

0800b170 <_svfiprintf_r>:
 800b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	4698      	mov	r8, r3
 800b176:	898b      	ldrh	r3, [r1, #12]
 800b178:	061b      	lsls	r3, r3, #24
 800b17a:	b09d      	sub	sp, #116	; 0x74
 800b17c:	4607      	mov	r7, r0
 800b17e:	460d      	mov	r5, r1
 800b180:	4614      	mov	r4, r2
 800b182:	d50e      	bpl.n	800b1a2 <_svfiprintf_r+0x32>
 800b184:	690b      	ldr	r3, [r1, #16]
 800b186:	b963      	cbnz	r3, 800b1a2 <_svfiprintf_r+0x32>
 800b188:	2140      	movs	r1, #64	; 0x40
 800b18a:	f7ff ff3b 	bl	800b004 <_malloc_r>
 800b18e:	6028      	str	r0, [r5, #0]
 800b190:	6128      	str	r0, [r5, #16]
 800b192:	b920      	cbnz	r0, 800b19e <_svfiprintf_r+0x2e>
 800b194:	230c      	movs	r3, #12
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	f04f 30ff 	mov.w	r0, #4294967295
 800b19c:	e0d1      	b.n	800b342 <_svfiprintf_r+0x1d2>
 800b19e:	2340      	movs	r3, #64	; 0x40
 800b1a0:	616b      	str	r3, [r5, #20]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1b0:	2330      	movs	r3, #48	; 0x30
 800b1b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b35c <_svfiprintf_r+0x1ec>
 800b1b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1ba:	f04f 0901 	mov.w	r9, #1
 800b1be:	4623      	mov	r3, r4
 800b1c0:	469a      	mov	sl, r3
 800b1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c6:	b10a      	cbz	r2, 800b1cc <_svfiprintf_r+0x5c>
 800b1c8:	2a25      	cmp	r2, #37	; 0x25
 800b1ca:	d1f9      	bne.n	800b1c0 <_svfiprintf_r+0x50>
 800b1cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b1d0:	d00b      	beq.n	800b1ea <_svfiprintf_r+0x7a>
 800b1d2:	465b      	mov	r3, fp
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4638      	mov	r0, r7
 800b1da:	f7ff ff6d 	bl	800b0b8 <__ssputs_r>
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f000 80aa 	beq.w	800b338 <_svfiprintf_r+0x1c8>
 800b1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e6:	445a      	add	r2, fp
 800b1e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 80a2 	beq.w	800b338 <_svfiprintf_r+0x1c8>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1fe:	f10a 0a01 	add.w	sl, sl, #1
 800b202:	9304      	str	r3, [sp, #16]
 800b204:	9307      	str	r3, [sp, #28]
 800b206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b20a:	931a      	str	r3, [sp, #104]	; 0x68
 800b20c:	4654      	mov	r4, sl
 800b20e:	2205      	movs	r2, #5
 800b210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b214:	4851      	ldr	r0, [pc, #324]	; (800b35c <_svfiprintf_r+0x1ec>)
 800b216:	f7f4 ffe3 	bl	80001e0 <memchr>
 800b21a:	9a04      	ldr	r2, [sp, #16]
 800b21c:	b9d8      	cbnz	r0, 800b256 <_svfiprintf_r+0xe6>
 800b21e:	06d0      	lsls	r0, r2, #27
 800b220:	bf44      	itt	mi
 800b222:	2320      	movmi	r3, #32
 800b224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b228:	0711      	lsls	r1, r2, #28
 800b22a:	bf44      	itt	mi
 800b22c:	232b      	movmi	r3, #43	; 0x2b
 800b22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b232:	f89a 3000 	ldrb.w	r3, [sl]
 800b236:	2b2a      	cmp	r3, #42	; 0x2a
 800b238:	d015      	beq.n	800b266 <_svfiprintf_r+0xf6>
 800b23a:	9a07      	ldr	r2, [sp, #28]
 800b23c:	4654      	mov	r4, sl
 800b23e:	2000      	movs	r0, #0
 800b240:	f04f 0c0a 	mov.w	ip, #10
 800b244:	4621      	mov	r1, r4
 800b246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b24a:	3b30      	subs	r3, #48	; 0x30
 800b24c:	2b09      	cmp	r3, #9
 800b24e:	d94e      	bls.n	800b2ee <_svfiprintf_r+0x17e>
 800b250:	b1b0      	cbz	r0, 800b280 <_svfiprintf_r+0x110>
 800b252:	9207      	str	r2, [sp, #28]
 800b254:	e014      	b.n	800b280 <_svfiprintf_r+0x110>
 800b256:	eba0 0308 	sub.w	r3, r0, r8
 800b25a:	fa09 f303 	lsl.w	r3, r9, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	46a2      	mov	sl, r4
 800b264:	e7d2      	b.n	800b20c <_svfiprintf_r+0x9c>
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	1d19      	adds	r1, r3, #4
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	9103      	str	r1, [sp, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bfbb      	ittet	lt
 800b272:	425b      	neglt	r3, r3
 800b274:	f042 0202 	orrlt.w	r2, r2, #2
 800b278:	9307      	strge	r3, [sp, #28]
 800b27a:	9307      	strlt	r3, [sp, #28]
 800b27c:	bfb8      	it	lt
 800b27e:	9204      	strlt	r2, [sp, #16]
 800b280:	7823      	ldrb	r3, [r4, #0]
 800b282:	2b2e      	cmp	r3, #46	; 0x2e
 800b284:	d10c      	bne.n	800b2a0 <_svfiprintf_r+0x130>
 800b286:	7863      	ldrb	r3, [r4, #1]
 800b288:	2b2a      	cmp	r3, #42	; 0x2a
 800b28a:	d135      	bne.n	800b2f8 <_svfiprintf_r+0x188>
 800b28c:	9b03      	ldr	r3, [sp, #12]
 800b28e:	1d1a      	adds	r2, r3, #4
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	9203      	str	r2, [sp, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	bfb8      	it	lt
 800b298:	f04f 33ff 	movlt.w	r3, #4294967295
 800b29c:	3402      	adds	r4, #2
 800b29e:	9305      	str	r3, [sp, #20]
 800b2a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b36c <_svfiprintf_r+0x1fc>
 800b2a4:	7821      	ldrb	r1, [r4, #0]
 800b2a6:	2203      	movs	r2, #3
 800b2a8:	4650      	mov	r0, sl
 800b2aa:	f7f4 ff99 	bl	80001e0 <memchr>
 800b2ae:	b140      	cbz	r0, 800b2c2 <_svfiprintf_r+0x152>
 800b2b0:	2340      	movs	r3, #64	; 0x40
 800b2b2:	eba0 000a 	sub.w	r0, r0, sl
 800b2b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	4303      	orrs	r3, r0
 800b2be:	3401      	adds	r4, #1
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c6:	4826      	ldr	r0, [pc, #152]	; (800b360 <_svfiprintf_r+0x1f0>)
 800b2c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2cc:	2206      	movs	r2, #6
 800b2ce:	f7f4 ff87 	bl	80001e0 <memchr>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d038      	beq.n	800b348 <_svfiprintf_r+0x1d8>
 800b2d6:	4b23      	ldr	r3, [pc, #140]	; (800b364 <_svfiprintf_r+0x1f4>)
 800b2d8:	bb1b      	cbnz	r3, 800b322 <_svfiprintf_r+0x1b2>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	3307      	adds	r3, #7
 800b2de:	f023 0307 	bic.w	r3, r3, #7
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e8:	4433      	add	r3, r6
 800b2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ec:	e767      	b.n	800b1be <_svfiprintf_r+0x4e>
 800b2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	e7a5      	b.n	800b244 <_svfiprintf_r+0xd4>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9305      	str	r3, [sp, #20]
 800b2fe:	4619      	mov	r1, r3
 800b300:	f04f 0c0a 	mov.w	ip, #10
 800b304:	4620      	mov	r0, r4
 800b306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b30a:	3a30      	subs	r2, #48	; 0x30
 800b30c:	2a09      	cmp	r2, #9
 800b30e:	d903      	bls.n	800b318 <_svfiprintf_r+0x1a8>
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0c5      	beq.n	800b2a0 <_svfiprintf_r+0x130>
 800b314:	9105      	str	r1, [sp, #20]
 800b316:	e7c3      	b.n	800b2a0 <_svfiprintf_r+0x130>
 800b318:	fb0c 2101 	mla	r1, ip, r1, r2
 800b31c:	4604      	mov	r4, r0
 800b31e:	2301      	movs	r3, #1
 800b320:	e7f0      	b.n	800b304 <_svfiprintf_r+0x194>
 800b322:	ab03      	add	r3, sp, #12
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	462a      	mov	r2, r5
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <_svfiprintf_r+0x1f8>)
 800b32a:	a904      	add	r1, sp, #16
 800b32c:	4638      	mov	r0, r7
 800b32e:	f3af 8000 	nop.w
 800b332:	1c42      	adds	r2, r0, #1
 800b334:	4606      	mov	r6, r0
 800b336:	d1d6      	bne.n	800b2e6 <_svfiprintf_r+0x176>
 800b338:	89ab      	ldrh	r3, [r5, #12]
 800b33a:	065b      	lsls	r3, r3, #25
 800b33c:	f53f af2c 	bmi.w	800b198 <_svfiprintf_r+0x28>
 800b340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b342:	b01d      	add	sp, #116	; 0x74
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b348:	ab03      	add	r3, sp, #12
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	462a      	mov	r2, r5
 800b34e:	4b06      	ldr	r3, [pc, #24]	; (800b368 <_svfiprintf_r+0x1f8>)
 800b350:	a904      	add	r1, sp, #16
 800b352:	4638      	mov	r0, r7
 800b354:	f000 f9d4 	bl	800b700 <_printf_i>
 800b358:	e7eb      	b.n	800b332 <_svfiprintf_r+0x1c2>
 800b35a:	bf00      	nop
 800b35c:	0800cc14 	.word	0x0800cc14
 800b360:	0800cc1e 	.word	0x0800cc1e
 800b364:	00000000 	.word	0x00000000
 800b368:	0800b0b9 	.word	0x0800b0b9
 800b36c:	0800cc1a 	.word	0x0800cc1a

0800b370 <__sfputc_r>:
 800b370:	6893      	ldr	r3, [r2, #8]
 800b372:	3b01      	subs	r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	b410      	push	{r4}
 800b378:	6093      	str	r3, [r2, #8]
 800b37a:	da08      	bge.n	800b38e <__sfputc_r+0x1e>
 800b37c:	6994      	ldr	r4, [r2, #24]
 800b37e:	42a3      	cmp	r3, r4
 800b380:	db01      	blt.n	800b386 <__sfputc_r+0x16>
 800b382:	290a      	cmp	r1, #10
 800b384:	d103      	bne.n	800b38e <__sfputc_r+0x1e>
 800b386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38a:	f7ff bad5 	b.w	800a938 <__swbuf_r>
 800b38e:	6813      	ldr	r3, [r2, #0]
 800b390:	1c58      	adds	r0, r3, #1
 800b392:	6010      	str	r0, [r2, #0]
 800b394:	7019      	strb	r1, [r3, #0]
 800b396:	4608      	mov	r0, r1
 800b398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <__sfputs_r>:
 800b39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	18d5      	adds	r5, r2, r3
 800b3a8:	42ac      	cmp	r4, r5
 800b3aa:	d101      	bne.n	800b3b0 <__sfputs_r+0x12>
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	e007      	b.n	800b3c0 <__sfputs_r+0x22>
 800b3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b4:	463a      	mov	r2, r7
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f7ff ffda 	bl	800b370 <__sfputc_r>
 800b3bc:	1c43      	adds	r3, r0, #1
 800b3be:	d1f3      	bne.n	800b3a8 <__sfputs_r+0xa>
 800b3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3c4 <_vfiprintf_r>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	b09d      	sub	sp, #116	; 0x74
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4698      	mov	r8, r3
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	b118      	cbz	r0, 800b3dc <_vfiprintf_r+0x18>
 800b3d4:	6983      	ldr	r3, [r0, #24]
 800b3d6:	b90b      	cbnz	r3, 800b3dc <_vfiprintf_r+0x18>
 800b3d8:	f7ff fca6 	bl	800ad28 <__sinit>
 800b3dc:	4b89      	ldr	r3, [pc, #548]	; (800b604 <_vfiprintf_r+0x240>)
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	d11b      	bne.n	800b41a <_vfiprintf_r+0x56>
 800b3e2:	6875      	ldr	r5, [r6, #4]
 800b3e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e6:	07d9      	lsls	r1, r3, #31
 800b3e8:	d405      	bmi.n	800b3f6 <_vfiprintf_r+0x32>
 800b3ea:	89ab      	ldrh	r3, [r5, #12]
 800b3ec:	059a      	lsls	r2, r3, #22
 800b3ee:	d402      	bmi.n	800b3f6 <_vfiprintf_r+0x32>
 800b3f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f2:	f7ff fd49 	bl	800ae88 <__retarget_lock_acquire_recursive>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	071b      	lsls	r3, r3, #28
 800b3fa:	d501      	bpl.n	800b400 <_vfiprintf_r+0x3c>
 800b3fc:	692b      	ldr	r3, [r5, #16]
 800b3fe:	b9eb      	cbnz	r3, 800b43c <_vfiprintf_r+0x78>
 800b400:	4629      	mov	r1, r5
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff faea 	bl	800a9dc <__swsetup_r>
 800b408:	b1c0      	cbz	r0, 800b43c <_vfiprintf_r+0x78>
 800b40a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b40c:	07dc      	lsls	r4, r3, #31
 800b40e:	d50e      	bpl.n	800b42e <_vfiprintf_r+0x6a>
 800b410:	f04f 30ff 	mov.w	r0, #4294967295
 800b414:	b01d      	add	sp, #116	; 0x74
 800b416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b41a:	4b7b      	ldr	r3, [pc, #492]	; (800b608 <_vfiprintf_r+0x244>)
 800b41c:	429d      	cmp	r5, r3
 800b41e:	d101      	bne.n	800b424 <_vfiprintf_r+0x60>
 800b420:	68b5      	ldr	r5, [r6, #8]
 800b422:	e7df      	b.n	800b3e4 <_vfiprintf_r+0x20>
 800b424:	4b79      	ldr	r3, [pc, #484]	; (800b60c <_vfiprintf_r+0x248>)
 800b426:	429d      	cmp	r5, r3
 800b428:	bf08      	it	eq
 800b42a:	68f5      	ldreq	r5, [r6, #12]
 800b42c:	e7da      	b.n	800b3e4 <_vfiprintf_r+0x20>
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	0598      	lsls	r0, r3, #22
 800b432:	d4ed      	bmi.n	800b410 <_vfiprintf_r+0x4c>
 800b434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b436:	f7ff fd28 	bl	800ae8a <__retarget_lock_release_recursive>
 800b43a:	e7e9      	b.n	800b410 <_vfiprintf_r+0x4c>
 800b43c:	2300      	movs	r3, #0
 800b43e:	9309      	str	r3, [sp, #36]	; 0x24
 800b440:	2320      	movs	r3, #32
 800b442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b446:	f8cd 800c 	str.w	r8, [sp, #12]
 800b44a:	2330      	movs	r3, #48	; 0x30
 800b44c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b610 <_vfiprintf_r+0x24c>
 800b450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b454:	f04f 0901 	mov.w	r9, #1
 800b458:	4623      	mov	r3, r4
 800b45a:	469a      	mov	sl, r3
 800b45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b460:	b10a      	cbz	r2, 800b466 <_vfiprintf_r+0xa2>
 800b462:	2a25      	cmp	r2, #37	; 0x25
 800b464:	d1f9      	bne.n	800b45a <_vfiprintf_r+0x96>
 800b466:	ebba 0b04 	subs.w	fp, sl, r4
 800b46a:	d00b      	beq.n	800b484 <_vfiprintf_r+0xc0>
 800b46c:	465b      	mov	r3, fp
 800b46e:	4622      	mov	r2, r4
 800b470:	4629      	mov	r1, r5
 800b472:	4630      	mov	r0, r6
 800b474:	f7ff ff93 	bl	800b39e <__sfputs_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	f000 80aa 	beq.w	800b5d2 <_vfiprintf_r+0x20e>
 800b47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b480:	445a      	add	r2, fp
 800b482:	9209      	str	r2, [sp, #36]	; 0x24
 800b484:	f89a 3000 	ldrb.w	r3, [sl]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 80a2 	beq.w	800b5d2 <_vfiprintf_r+0x20e>
 800b48e:	2300      	movs	r3, #0
 800b490:	f04f 32ff 	mov.w	r2, #4294967295
 800b494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b498:	f10a 0a01 	add.w	sl, sl, #1
 800b49c:	9304      	str	r3, [sp, #16]
 800b49e:	9307      	str	r3, [sp, #28]
 800b4a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b4a6:	4654      	mov	r4, sl
 800b4a8:	2205      	movs	r2, #5
 800b4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ae:	4858      	ldr	r0, [pc, #352]	; (800b610 <_vfiprintf_r+0x24c>)
 800b4b0:	f7f4 fe96 	bl	80001e0 <memchr>
 800b4b4:	9a04      	ldr	r2, [sp, #16]
 800b4b6:	b9d8      	cbnz	r0, 800b4f0 <_vfiprintf_r+0x12c>
 800b4b8:	06d1      	lsls	r1, r2, #27
 800b4ba:	bf44      	itt	mi
 800b4bc:	2320      	movmi	r3, #32
 800b4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c2:	0713      	lsls	r3, r2, #28
 800b4c4:	bf44      	itt	mi
 800b4c6:	232b      	movmi	r3, #43	; 0x2b
 800b4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d2:	d015      	beq.n	800b500 <_vfiprintf_r+0x13c>
 800b4d4:	9a07      	ldr	r2, [sp, #28]
 800b4d6:	4654      	mov	r4, sl
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f04f 0c0a 	mov.w	ip, #10
 800b4de:	4621      	mov	r1, r4
 800b4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e4:	3b30      	subs	r3, #48	; 0x30
 800b4e6:	2b09      	cmp	r3, #9
 800b4e8:	d94e      	bls.n	800b588 <_vfiprintf_r+0x1c4>
 800b4ea:	b1b0      	cbz	r0, 800b51a <_vfiprintf_r+0x156>
 800b4ec:	9207      	str	r2, [sp, #28]
 800b4ee:	e014      	b.n	800b51a <_vfiprintf_r+0x156>
 800b4f0:	eba0 0308 	sub.w	r3, r0, r8
 800b4f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	9304      	str	r3, [sp, #16]
 800b4fc:	46a2      	mov	sl, r4
 800b4fe:	e7d2      	b.n	800b4a6 <_vfiprintf_r+0xe2>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	1d19      	adds	r1, r3, #4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	9103      	str	r1, [sp, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfbb      	ittet	lt
 800b50c:	425b      	neglt	r3, r3
 800b50e:	f042 0202 	orrlt.w	r2, r2, #2
 800b512:	9307      	strge	r3, [sp, #28]
 800b514:	9307      	strlt	r3, [sp, #28]
 800b516:	bfb8      	it	lt
 800b518:	9204      	strlt	r2, [sp, #16]
 800b51a:	7823      	ldrb	r3, [r4, #0]
 800b51c:	2b2e      	cmp	r3, #46	; 0x2e
 800b51e:	d10c      	bne.n	800b53a <_vfiprintf_r+0x176>
 800b520:	7863      	ldrb	r3, [r4, #1]
 800b522:	2b2a      	cmp	r3, #42	; 0x2a
 800b524:	d135      	bne.n	800b592 <_vfiprintf_r+0x1ce>
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	1d1a      	adds	r2, r3, #4
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	9203      	str	r2, [sp, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfb8      	it	lt
 800b532:	f04f 33ff 	movlt.w	r3, #4294967295
 800b536:	3402      	adds	r4, #2
 800b538:	9305      	str	r3, [sp, #20]
 800b53a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b620 <_vfiprintf_r+0x25c>
 800b53e:	7821      	ldrb	r1, [r4, #0]
 800b540:	2203      	movs	r2, #3
 800b542:	4650      	mov	r0, sl
 800b544:	f7f4 fe4c 	bl	80001e0 <memchr>
 800b548:	b140      	cbz	r0, 800b55c <_vfiprintf_r+0x198>
 800b54a:	2340      	movs	r3, #64	; 0x40
 800b54c:	eba0 000a 	sub.w	r0, r0, sl
 800b550:	fa03 f000 	lsl.w	r0, r3, r0
 800b554:	9b04      	ldr	r3, [sp, #16]
 800b556:	4303      	orrs	r3, r0
 800b558:	3401      	adds	r4, #1
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b560:	482c      	ldr	r0, [pc, #176]	; (800b614 <_vfiprintf_r+0x250>)
 800b562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b566:	2206      	movs	r2, #6
 800b568:	f7f4 fe3a 	bl	80001e0 <memchr>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d03f      	beq.n	800b5f0 <_vfiprintf_r+0x22c>
 800b570:	4b29      	ldr	r3, [pc, #164]	; (800b618 <_vfiprintf_r+0x254>)
 800b572:	bb1b      	cbnz	r3, 800b5bc <_vfiprintf_r+0x1f8>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	3307      	adds	r3, #7
 800b578:	f023 0307 	bic.w	r3, r3, #7
 800b57c:	3308      	adds	r3, #8
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b582:	443b      	add	r3, r7
 800b584:	9309      	str	r3, [sp, #36]	; 0x24
 800b586:	e767      	b.n	800b458 <_vfiprintf_r+0x94>
 800b588:	fb0c 3202 	mla	r2, ip, r2, r3
 800b58c:	460c      	mov	r4, r1
 800b58e:	2001      	movs	r0, #1
 800b590:	e7a5      	b.n	800b4de <_vfiprintf_r+0x11a>
 800b592:	2300      	movs	r3, #0
 800b594:	3401      	adds	r4, #1
 800b596:	9305      	str	r3, [sp, #20]
 800b598:	4619      	mov	r1, r3
 800b59a:	f04f 0c0a 	mov.w	ip, #10
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a4:	3a30      	subs	r2, #48	; 0x30
 800b5a6:	2a09      	cmp	r2, #9
 800b5a8:	d903      	bls.n	800b5b2 <_vfiprintf_r+0x1ee>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d0c5      	beq.n	800b53a <_vfiprintf_r+0x176>
 800b5ae:	9105      	str	r1, [sp, #20]
 800b5b0:	e7c3      	b.n	800b53a <_vfiprintf_r+0x176>
 800b5b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e7f0      	b.n	800b59e <_vfiprintf_r+0x1da>
 800b5bc:	ab03      	add	r3, sp, #12
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	462a      	mov	r2, r5
 800b5c2:	4b16      	ldr	r3, [pc, #88]	; (800b61c <_vfiprintf_r+0x258>)
 800b5c4:	a904      	add	r1, sp, #16
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f3af 8000 	nop.w
 800b5cc:	4607      	mov	r7, r0
 800b5ce:	1c78      	adds	r0, r7, #1
 800b5d0:	d1d6      	bne.n	800b580 <_vfiprintf_r+0x1bc>
 800b5d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5d4:	07d9      	lsls	r1, r3, #31
 800b5d6:	d405      	bmi.n	800b5e4 <_vfiprintf_r+0x220>
 800b5d8:	89ab      	ldrh	r3, [r5, #12]
 800b5da:	059a      	lsls	r2, r3, #22
 800b5dc:	d402      	bmi.n	800b5e4 <_vfiprintf_r+0x220>
 800b5de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e0:	f7ff fc53 	bl	800ae8a <__retarget_lock_release_recursive>
 800b5e4:	89ab      	ldrh	r3, [r5, #12]
 800b5e6:	065b      	lsls	r3, r3, #25
 800b5e8:	f53f af12 	bmi.w	800b410 <_vfiprintf_r+0x4c>
 800b5ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ee:	e711      	b.n	800b414 <_vfiprintf_r+0x50>
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4b09      	ldr	r3, [pc, #36]	; (800b61c <_vfiprintf_r+0x258>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f000 f880 	bl	800b700 <_printf_i>
 800b600:	e7e4      	b.n	800b5cc <_vfiprintf_r+0x208>
 800b602:	bf00      	nop
 800b604:	0800cbd4 	.word	0x0800cbd4
 800b608:	0800cbf4 	.word	0x0800cbf4
 800b60c:	0800cbb4 	.word	0x0800cbb4
 800b610:	0800cc14 	.word	0x0800cc14
 800b614:	0800cc1e 	.word	0x0800cc1e
 800b618:	00000000 	.word	0x00000000
 800b61c:	0800b39f 	.word	0x0800b39f
 800b620:	0800cc1a 	.word	0x0800cc1a

0800b624 <_printf_common>:
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	4616      	mov	r6, r2
 800b62a:	4699      	mov	r9, r3
 800b62c:	688a      	ldr	r2, [r1, #8]
 800b62e:	690b      	ldr	r3, [r1, #16]
 800b630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b634:	4293      	cmp	r3, r2
 800b636:	bfb8      	it	lt
 800b638:	4613      	movlt	r3, r2
 800b63a:	6033      	str	r3, [r6, #0]
 800b63c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b640:	4607      	mov	r7, r0
 800b642:	460c      	mov	r4, r1
 800b644:	b10a      	cbz	r2, 800b64a <_printf_common+0x26>
 800b646:	3301      	adds	r3, #1
 800b648:	6033      	str	r3, [r6, #0]
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	0699      	lsls	r1, r3, #26
 800b64e:	bf42      	ittt	mi
 800b650:	6833      	ldrmi	r3, [r6, #0]
 800b652:	3302      	addmi	r3, #2
 800b654:	6033      	strmi	r3, [r6, #0]
 800b656:	6825      	ldr	r5, [r4, #0]
 800b658:	f015 0506 	ands.w	r5, r5, #6
 800b65c:	d106      	bne.n	800b66c <_printf_common+0x48>
 800b65e:	f104 0a19 	add.w	sl, r4, #25
 800b662:	68e3      	ldr	r3, [r4, #12]
 800b664:	6832      	ldr	r2, [r6, #0]
 800b666:	1a9b      	subs	r3, r3, r2
 800b668:	42ab      	cmp	r3, r5
 800b66a:	dc26      	bgt.n	800b6ba <_printf_common+0x96>
 800b66c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b670:	1e13      	subs	r3, r2, #0
 800b672:	6822      	ldr	r2, [r4, #0]
 800b674:	bf18      	it	ne
 800b676:	2301      	movne	r3, #1
 800b678:	0692      	lsls	r2, r2, #26
 800b67a:	d42b      	bmi.n	800b6d4 <_printf_common+0xb0>
 800b67c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b680:	4649      	mov	r1, r9
 800b682:	4638      	mov	r0, r7
 800b684:	47c0      	blx	r8
 800b686:	3001      	adds	r0, #1
 800b688:	d01e      	beq.n	800b6c8 <_printf_common+0xa4>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	68e5      	ldr	r5, [r4, #12]
 800b68e:	6832      	ldr	r2, [r6, #0]
 800b690:	f003 0306 	and.w	r3, r3, #6
 800b694:	2b04      	cmp	r3, #4
 800b696:	bf08      	it	eq
 800b698:	1aad      	subeq	r5, r5, r2
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	6922      	ldr	r2, [r4, #16]
 800b69e:	bf0c      	ite	eq
 800b6a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6a4:	2500      	movne	r5, #0
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	bfc4      	itt	gt
 800b6aa:	1a9b      	subgt	r3, r3, r2
 800b6ac:	18ed      	addgt	r5, r5, r3
 800b6ae:	2600      	movs	r6, #0
 800b6b0:	341a      	adds	r4, #26
 800b6b2:	42b5      	cmp	r5, r6
 800b6b4:	d11a      	bne.n	800b6ec <_printf_common+0xc8>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e008      	b.n	800b6cc <_printf_common+0xa8>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	4652      	mov	r2, sl
 800b6be:	4649      	mov	r1, r9
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	47c0      	blx	r8
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	d103      	bne.n	800b6d0 <_printf_common+0xac>
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	e7c6      	b.n	800b662 <_printf_common+0x3e>
 800b6d4:	18e1      	adds	r1, r4, r3
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	2030      	movs	r0, #48	; 0x30
 800b6da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6de:	4422      	add	r2, r4
 800b6e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6e8:	3302      	adds	r3, #2
 800b6ea:	e7c7      	b.n	800b67c <_printf_common+0x58>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	47c0      	blx	r8
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d0e6      	beq.n	800b6c8 <_printf_common+0xa4>
 800b6fa:	3601      	adds	r6, #1
 800b6fc:	e7d9      	b.n	800b6b2 <_printf_common+0x8e>
	...

0800b700 <_printf_i>:
 800b700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	4691      	mov	r9, r2
 800b708:	7e27      	ldrb	r7, [r4, #24]
 800b70a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b70c:	2f78      	cmp	r7, #120	; 0x78
 800b70e:	4680      	mov	r8, r0
 800b710:	469a      	mov	sl, r3
 800b712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b716:	d807      	bhi.n	800b728 <_printf_i+0x28>
 800b718:	2f62      	cmp	r7, #98	; 0x62
 800b71a:	d80a      	bhi.n	800b732 <_printf_i+0x32>
 800b71c:	2f00      	cmp	r7, #0
 800b71e:	f000 80d8 	beq.w	800b8d2 <_printf_i+0x1d2>
 800b722:	2f58      	cmp	r7, #88	; 0x58
 800b724:	f000 80a3 	beq.w	800b86e <_printf_i+0x16e>
 800b728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b72c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b730:	e03a      	b.n	800b7a8 <_printf_i+0xa8>
 800b732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b736:	2b15      	cmp	r3, #21
 800b738:	d8f6      	bhi.n	800b728 <_printf_i+0x28>
 800b73a:	a001      	add	r0, pc, #4	; (adr r0, 800b740 <_printf_i+0x40>)
 800b73c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b740:	0800b799 	.word	0x0800b799
 800b744:	0800b7ad 	.word	0x0800b7ad
 800b748:	0800b729 	.word	0x0800b729
 800b74c:	0800b729 	.word	0x0800b729
 800b750:	0800b729 	.word	0x0800b729
 800b754:	0800b729 	.word	0x0800b729
 800b758:	0800b7ad 	.word	0x0800b7ad
 800b75c:	0800b729 	.word	0x0800b729
 800b760:	0800b729 	.word	0x0800b729
 800b764:	0800b729 	.word	0x0800b729
 800b768:	0800b729 	.word	0x0800b729
 800b76c:	0800b8b9 	.word	0x0800b8b9
 800b770:	0800b7dd 	.word	0x0800b7dd
 800b774:	0800b89b 	.word	0x0800b89b
 800b778:	0800b729 	.word	0x0800b729
 800b77c:	0800b729 	.word	0x0800b729
 800b780:	0800b8db 	.word	0x0800b8db
 800b784:	0800b729 	.word	0x0800b729
 800b788:	0800b7dd 	.word	0x0800b7dd
 800b78c:	0800b729 	.word	0x0800b729
 800b790:	0800b729 	.word	0x0800b729
 800b794:	0800b8a3 	.word	0x0800b8a3
 800b798:	680b      	ldr	r3, [r1, #0]
 800b79a:	1d1a      	adds	r2, r3, #4
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	600a      	str	r2, [r1, #0]
 800b7a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e0a3      	b.n	800b8f4 <_printf_i+0x1f4>
 800b7ac:	6825      	ldr	r5, [r4, #0]
 800b7ae:	6808      	ldr	r0, [r1, #0]
 800b7b0:	062e      	lsls	r6, r5, #24
 800b7b2:	f100 0304 	add.w	r3, r0, #4
 800b7b6:	d50a      	bpl.n	800b7ce <_printf_i+0xce>
 800b7b8:	6805      	ldr	r5, [r0, #0]
 800b7ba:	600b      	str	r3, [r1, #0]
 800b7bc:	2d00      	cmp	r5, #0
 800b7be:	da03      	bge.n	800b7c8 <_printf_i+0xc8>
 800b7c0:	232d      	movs	r3, #45	; 0x2d
 800b7c2:	426d      	negs	r5, r5
 800b7c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7c8:	485e      	ldr	r0, [pc, #376]	; (800b944 <_printf_i+0x244>)
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	e019      	b.n	800b802 <_printf_i+0x102>
 800b7ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7d2:	6805      	ldr	r5, [r0, #0]
 800b7d4:	600b      	str	r3, [r1, #0]
 800b7d6:	bf18      	it	ne
 800b7d8:	b22d      	sxthne	r5, r5
 800b7da:	e7ef      	b.n	800b7bc <_printf_i+0xbc>
 800b7dc:	680b      	ldr	r3, [r1, #0]
 800b7de:	6825      	ldr	r5, [r4, #0]
 800b7e0:	1d18      	adds	r0, r3, #4
 800b7e2:	6008      	str	r0, [r1, #0]
 800b7e4:	0628      	lsls	r0, r5, #24
 800b7e6:	d501      	bpl.n	800b7ec <_printf_i+0xec>
 800b7e8:	681d      	ldr	r5, [r3, #0]
 800b7ea:	e002      	b.n	800b7f2 <_printf_i+0xf2>
 800b7ec:	0669      	lsls	r1, r5, #25
 800b7ee:	d5fb      	bpl.n	800b7e8 <_printf_i+0xe8>
 800b7f0:	881d      	ldrh	r5, [r3, #0]
 800b7f2:	4854      	ldr	r0, [pc, #336]	; (800b944 <_printf_i+0x244>)
 800b7f4:	2f6f      	cmp	r7, #111	; 0x6f
 800b7f6:	bf0c      	ite	eq
 800b7f8:	2308      	moveq	r3, #8
 800b7fa:	230a      	movne	r3, #10
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b802:	6866      	ldr	r6, [r4, #4]
 800b804:	60a6      	str	r6, [r4, #8]
 800b806:	2e00      	cmp	r6, #0
 800b808:	bfa2      	ittt	ge
 800b80a:	6821      	ldrge	r1, [r4, #0]
 800b80c:	f021 0104 	bicge.w	r1, r1, #4
 800b810:	6021      	strge	r1, [r4, #0]
 800b812:	b90d      	cbnz	r5, 800b818 <_printf_i+0x118>
 800b814:	2e00      	cmp	r6, #0
 800b816:	d04d      	beq.n	800b8b4 <_printf_i+0x1b4>
 800b818:	4616      	mov	r6, r2
 800b81a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b81e:	fb03 5711 	mls	r7, r3, r1, r5
 800b822:	5dc7      	ldrb	r7, [r0, r7]
 800b824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b828:	462f      	mov	r7, r5
 800b82a:	42bb      	cmp	r3, r7
 800b82c:	460d      	mov	r5, r1
 800b82e:	d9f4      	bls.n	800b81a <_printf_i+0x11a>
 800b830:	2b08      	cmp	r3, #8
 800b832:	d10b      	bne.n	800b84c <_printf_i+0x14c>
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	07df      	lsls	r7, r3, #31
 800b838:	d508      	bpl.n	800b84c <_printf_i+0x14c>
 800b83a:	6923      	ldr	r3, [r4, #16]
 800b83c:	6861      	ldr	r1, [r4, #4]
 800b83e:	4299      	cmp	r1, r3
 800b840:	bfde      	ittt	le
 800b842:	2330      	movle	r3, #48	; 0x30
 800b844:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b84c:	1b92      	subs	r2, r2, r6
 800b84e:	6122      	str	r2, [r4, #16]
 800b850:	f8cd a000 	str.w	sl, [sp]
 800b854:	464b      	mov	r3, r9
 800b856:	aa03      	add	r2, sp, #12
 800b858:	4621      	mov	r1, r4
 800b85a:	4640      	mov	r0, r8
 800b85c:	f7ff fee2 	bl	800b624 <_printf_common>
 800b860:	3001      	adds	r0, #1
 800b862:	d14c      	bne.n	800b8fe <_printf_i+0x1fe>
 800b864:	f04f 30ff 	mov.w	r0, #4294967295
 800b868:	b004      	add	sp, #16
 800b86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86e:	4835      	ldr	r0, [pc, #212]	; (800b944 <_printf_i+0x244>)
 800b870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	680e      	ldr	r6, [r1, #0]
 800b878:	061f      	lsls	r7, r3, #24
 800b87a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b87e:	600e      	str	r6, [r1, #0]
 800b880:	d514      	bpl.n	800b8ac <_printf_i+0x1ac>
 800b882:	07d9      	lsls	r1, r3, #31
 800b884:	bf44      	itt	mi
 800b886:	f043 0320 	orrmi.w	r3, r3, #32
 800b88a:	6023      	strmi	r3, [r4, #0]
 800b88c:	b91d      	cbnz	r5, 800b896 <_printf_i+0x196>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	f023 0320 	bic.w	r3, r3, #32
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	2310      	movs	r3, #16
 800b898:	e7b0      	b.n	800b7fc <_printf_i+0xfc>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	f043 0320 	orr.w	r3, r3, #32
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	2378      	movs	r3, #120	; 0x78
 800b8a4:	4828      	ldr	r0, [pc, #160]	; (800b948 <_printf_i+0x248>)
 800b8a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8aa:	e7e3      	b.n	800b874 <_printf_i+0x174>
 800b8ac:	065e      	lsls	r6, r3, #25
 800b8ae:	bf48      	it	mi
 800b8b0:	b2ad      	uxthmi	r5, r5
 800b8b2:	e7e6      	b.n	800b882 <_printf_i+0x182>
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	e7bb      	b.n	800b830 <_printf_i+0x130>
 800b8b8:	680b      	ldr	r3, [r1, #0]
 800b8ba:	6826      	ldr	r6, [r4, #0]
 800b8bc:	6960      	ldr	r0, [r4, #20]
 800b8be:	1d1d      	adds	r5, r3, #4
 800b8c0:	600d      	str	r5, [r1, #0]
 800b8c2:	0635      	lsls	r5, r6, #24
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	d501      	bpl.n	800b8cc <_printf_i+0x1cc>
 800b8c8:	6018      	str	r0, [r3, #0]
 800b8ca:	e002      	b.n	800b8d2 <_printf_i+0x1d2>
 800b8cc:	0671      	lsls	r1, r6, #25
 800b8ce:	d5fb      	bpl.n	800b8c8 <_printf_i+0x1c8>
 800b8d0:	8018      	strh	r0, [r3, #0]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6123      	str	r3, [r4, #16]
 800b8d6:	4616      	mov	r6, r2
 800b8d8:	e7ba      	b.n	800b850 <_printf_i+0x150>
 800b8da:	680b      	ldr	r3, [r1, #0]
 800b8dc:	1d1a      	adds	r2, r3, #4
 800b8de:	600a      	str	r2, [r1, #0]
 800b8e0:	681e      	ldr	r6, [r3, #0]
 800b8e2:	6862      	ldr	r2, [r4, #4]
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7f4 fc7a 	bl	80001e0 <memchr>
 800b8ec:	b108      	cbz	r0, 800b8f2 <_printf_i+0x1f2>
 800b8ee:	1b80      	subs	r0, r0, r6
 800b8f0:	6060      	str	r0, [r4, #4]
 800b8f2:	6863      	ldr	r3, [r4, #4]
 800b8f4:	6123      	str	r3, [r4, #16]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8fc:	e7a8      	b.n	800b850 <_printf_i+0x150>
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	4632      	mov	r2, r6
 800b902:	4649      	mov	r1, r9
 800b904:	4640      	mov	r0, r8
 800b906:	47d0      	blx	sl
 800b908:	3001      	adds	r0, #1
 800b90a:	d0ab      	beq.n	800b864 <_printf_i+0x164>
 800b90c:	6823      	ldr	r3, [r4, #0]
 800b90e:	079b      	lsls	r3, r3, #30
 800b910:	d413      	bmi.n	800b93a <_printf_i+0x23a>
 800b912:	68e0      	ldr	r0, [r4, #12]
 800b914:	9b03      	ldr	r3, [sp, #12]
 800b916:	4298      	cmp	r0, r3
 800b918:	bfb8      	it	lt
 800b91a:	4618      	movlt	r0, r3
 800b91c:	e7a4      	b.n	800b868 <_printf_i+0x168>
 800b91e:	2301      	movs	r3, #1
 800b920:	4632      	mov	r2, r6
 800b922:	4649      	mov	r1, r9
 800b924:	4640      	mov	r0, r8
 800b926:	47d0      	blx	sl
 800b928:	3001      	adds	r0, #1
 800b92a:	d09b      	beq.n	800b864 <_printf_i+0x164>
 800b92c:	3501      	adds	r5, #1
 800b92e:	68e3      	ldr	r3, [r4, #12]
 800b930:	9903      	ldr	r1, [sp, #12]
 800b932:	1a5b      	subs	r3, r3, r1
 800b934:	42ab      	cmp	r3, r5
 800b936:	dcf2      	bgt.n	800b91e <_printf_i+0x21e>
 800b938:	e7eb      	b.n	800b912 <_printf_i+0x212>
 800b93a:	2500      	movs	r5, #0
 800b93c:	f104 0619 	add.w	r6, r4, #25
 800b940:	e7f5      	b.n	800b92e <_printf_i+0x22e>
 800b942:	bf00      	nop
 800b944:	0800cc25 	.word	0x0800cc25
 800b948:	0800cc36 	.word	0x0800cc36

0800b94c <_sbrk_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d06      	ldr	r5, [pc, #24]	; (800b968 <_sbrk_r+0x1c>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	f7f7 fa2a 	bl	8002db0 <_sbrk>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_sbrk_r+0x1a>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_sbrk_r+0x1a>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	20002954 	.word	0x20002954

0800b96c <__sread>:
 800b96c:	b510      	push	{r4, lr}
 800b96e:	460c      	mov	r4, r1
 800b970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b974:	f000 f8e8 	bl	800bb48 <_read_r>
 800b978:	2800      	cmp	r0, #0
 800b97a:	bfab      	itete	ge
 800b97c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b97e:	89a3      	ldrhlt	r3, [r4, #12]
 800b980:	181b      	addge	r3, r3, r0
 800b982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b986:	bfac      	ite	ge
 800b988:	6563      	strge	r3, [r4, #84]	; 0x54
 800b98a:	81a3      	strhlt	r3, [r4, #12]
 800b98c:	bd10      	pop	{r4, pc}

0800b98e <__swrite>:
 800b98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b992:	461f      	mov	r7, r3
 800b994:	898b      	ldrh	r3, [r1, #12]
 800b996:	05db      	lsls	r3, r3, #23
 800b998:	4605      	mov	r5, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	4616      	mov	r6, r2
 800b99e:	d505      	bpl.n	800b9ac <__swrite+0x1e>
 800b9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f000 f870 	bl	800ba8c <_lseek_r>
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b6:	81a3      	strh	r3, [r4, #12]
 800b9b8:	4632      	mov	r2, r6
 800b9ba:	463b      	mov	r3, r7
 800b9bc:	4628      	mov	r0, r5
 800b9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	f000 b817 	b.w	800b9f4 <_write_r>

0800b9c6 <__sseek>:
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ce:	f000 f85d 	bl	800ba8c <_lseek_r>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	bf15      	itete	ne
 800b9d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9e2:	81a3      	strheq	r3, [r4, #12]
 800b9e4:	bf18      	it	ne
 800b9e6:	81a3      	strhne	r3, [r4, #12]
 800b9e8:	bd10      	pop	{r4, pc}

0800b9ea <__sclose>:
 800b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ee:	f000 b81b 	b.w	800ba28 <_close_r>
	...

0800b9f4 <_write_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d07      	ldr	r5, [pc, #28]	; (800ba14 <_write_r+0x20>)
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	4608      	mov	r0, r1
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	2200      	movs	r2, #0
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	f7f6 fc42 	bl	800228c <_write>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_write_r+0x1e>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_write_r+0x1e>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20002954 	.word	0x20002954

0800ba18 <abort>:
 800ba18:	b508      	push	{r3, lr}
 800ba1a:	2006      	movs	r0, #6
 800ba1c:	f000 f8ce 	bl	800bbbc <raise>
 800ba20:	2001      	movs	r0, #1
 800ba22:	f000 fb05 	bl	800c030 <_exit>
	...

0800ba28 <_close_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d06      	ldr	r5, [pc, #24]	; (800ba44 <_close_r+0x1c>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	f000 fac4 	bl	800bfc0 <_close>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_close_r+0x1a>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_close_r+0x1a>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	20002954 	.word	0x20002954

0800ba48 <_fstat_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d07      	ldr	r5, [pc, #28]	; (800ba68 <_fstat_r+0x20>)
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	f000 fabb 	bl	800bfd0 <_fstat>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	d102      	bne.n	800ba64 <_fstat_r+0x1c>
 800ba5e:	682b      	ldr	r3, [r5, #0]
 800ba60:	b103      	cbz	r3, 800ba64 <_fstat_r+0x1c>
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	bd38      	pop	{r3, r4, r5, pc}
 800ba66:	bf00      	nop
 800ba68:	20002954 	.word	0x20002954

0800ba6c <_isatty_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d06      	ldr	r5, [pc, #24]	; (800ba88 <_isatty_r+0x1c>)
 800ba70:	2300      	movs	r3, #0
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	f000 faba 	bl	800bff0 <_isatty>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_isatty_r+0x1a>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_isatty_r+0x1a>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	20002954 	.word	0x20002954

0800ba8c <_lseek_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4d07      	ldr	r5, [pc, #28]	; (800baac <_lseek_r+0x20>)
 800ba90:	4604      	mov	r4, r0
 800ba92:	4608      	mov	r0, r1
 800ba94:	4611      	mov	r1, r2
 800ba96:	2200      	movs	r2, #0
 800ba98:	602a      	str	r2, [r5, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f000 fab8 	bl	800c010 <_lseek>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_lseek_r+0x1e>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_lseek_r+0x1e>
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	20002954 	.word	0x20002954

0800bab0 <memmove>:
 800bab0:	4288      	cmp	r0, r1
 800bab2:	b510      	push	{r4, lr}
 800bab4:	eb01 0402 	add.w	r4, r1, r2
 800bab8:	d902      	bls.n	800bac0 <memmove+0x10>
 800baba:	4284      	cmp	r4, r0
 800babc:	4623      	mov	r3, r4
 800babe:	d807      	bhi.n	800bad0 <memmove+0x20>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	42a1      	cmp	r1, r4
 800bac4:	d008      	beq.n	800bad8 <memmove+0x28>
 800bac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bace:	e7f8      	b.n	800bac2 <memmove+0x12>
 800bad0:	4402      	add	r2, r0
 800bad2:	4601      	mov	r1, r0
 800bad4:	428a      	cmp	r2, r1
 800bad6:	d100      	bne.n	800bada <memmove+0x2a>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae2:	e7f7      	b.n	800bad4 <memmove+0x24>

0800bae4 <__malloc_lock>:
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <__malloc_lock+0x8>)
 800bae6:	f7ff b9cf 	b.w	800ae88 <__retarget_lock_acquire_recursive>
 800baea:	bf00      	nop
 800baec:	2000294c 	.word	0x2000294c

0800baf0 <__malloc_unlock>:
 800baf0:	4801      	ldr	r0, [pc, #4]	; (800baf8 <__malloc_unlock+0x8>)
 800baf2:	f7ff b9ca 	b.w	800ae8a <__retarget_lock_release_recursive>
 800baf6:	bf00      	nop
 800baf8:	2000294c 	.word	0x2000294c

0800bafc <_realloc_r>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	4607      	mov	r7, r0
 800bb00:	4614      	mov	r4, r2
 800bb02:	460e      	mov	r6, r1
 800bb04:	b921      	cbnz	r1, 800bb10 <_realloc_r+0x14>
 800bb06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	f7ff ba7a 	b.w	800b004 <_malloc_r>
 800bb10:	b922      	cbnz	r2, 800bb1c <_realloc_r+0x20>
 800bb12:	f7ff fa27 	bl	800af64 <_free_r>
 800bb16:	4625      	mov	r5, r4
 800bb18:	4628      	mov	r0, r5
 800bb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1c:	f000 f86a 	bl	800bbf4 <_malloc_usable_size_r>
 800bb20:	42a0      	cmp	r0, r4
 800bb22:	d20f      	bcs.n	800bb44 <_realloc_r+0x48>
 800bb24:	4621      	mov	r1, r4
 800bb26:	4638      	mov	r0, r7
 800bb28:	f7ff fa6c 	bl	800b004 <_malloc_r>
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d0f2      	beq.n	800bb18 <_realloc_r+0x1c>
 800bb32:	4631      	mov	r1, r6
 800bb34:	4622      	mov	r2, r4
 800bb36:	f7fe fd71 	bl	800a61c <memcpy>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff fa11 	bl	800af64 <_free_r>
 800bb42:	e7e9      	b.n	800bb18 <_realloc_r+0x1c>
 800bb44:	4635      	mov	r5, r6
 800bb46:	e7e7      	b.n	800bb18 <_realloc_r+0x1c>

0800bb48 <_read_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4d07      	ldr	r5, [pc, #28]	; (800bb68 <_read_r+0x20>)
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	4608      	mov	r0, r1
 800bb50:	4611      	mov	r1, r2
 800bb52:	2200      	movs	r2, #0
 800bb54:	602a      	str	r2, [r5, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	f000 fa62 	bl	800c020 <_read>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d102      	bne.n	800bb66 <_read_r+0x1e>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	b103      	cbz	r3, 800bb66 <_read_r+0x1e>
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	20002954 	.word	0x20002954

0800bb6c <_raise_r>:
 800bb6c:	291f      	cmp	r1, #31
 800bb6e:	b538      	push	{r3, r4, r5, lr}
 800bb70:	4604      	mov	r4, r0
 800bb72:	460d      	mov	r5, r1
 800bb74:	d904      	bls.n	800bb80 <_raise_r+0x14>
 800bb76:	2316      	movs	r3, #22
 800bb78:	6003      	str	r3, [r0, #0]
 800bb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}
 800bb80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb82:	b112      	cbz	r2, 800bb8a <_raise_r+0x1e>
 800bb84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb88:	b94b      	cbnz	r3, 800bb9e <_raise_r+0x32>
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f000 f830 	bl	800bbf0 <_getpid_r>
 800bb90:	462a      	mov	r2, r5
 800bb92:	4601      	mov	r1, r0
 800bb94:	4620      	mov	r0, r4
 800bb96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb9a:	f000 b817 	b.w	800bbcc <_kill_r>
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d00a      	beq.n	800bbb8 <_raise_r+0x4c>
 800bba2:	1c59      	adds	r1, r3, #1
 800bba4:	d103      	bne.n	800bbae <_raise_r+0x42>
 800bba6:	2316      	movs	r3, #22
 800bba8:	6003      	str	r3, [r0, #0]
 800bbaa:	2001      	movs	r0, #1
 800bbac:	e7e7      	b.n	800bb7e <_raise_r+0x12>
 800bbae:	2400      	movs	r4, #0
 800bbb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	4798      	blx	r3
 800bbb8:	2000      	movs	r0, #0
 800bbba:	e7e0      	b.n	800bb7e <_raise_r+0x12>

0800bbbc <raise>:
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <raise+0xc>)
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	6818      	ldr	r0, [r3, #0]
 800bbc2:	f7ff bfd3 	b.w	800bb6c <_raise_r>
 800bbc6:	bf00      	nop
 800bbc8:	20000074 	.word	0x20000074

0800bbcc <_kill_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4d07      	ldr	r5, [pc, #28]	; (800bbec <_kill_r+0x20>)
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	602b      	str	r3, [r5, #0]
 800bbda:	f000 fa11 	bl	800c000 <_kill>
 800bbde:	1c43      	adds	r3, r0, #1
 800bbe0:	d102      	bne.n	800bbe8 <_kill_r+0x1c>
 800bbe2:	682b      	ldr	r3, [r5, #0]
 800bbe4:	b103      	cbz	r3, 800bbe8 <_kill_r+0x1c>
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	bd38      	pop	{r3, r4, r5, pc}
 800bbea:	bf00      	nop
 800bbec:	20002954 	.word	0x20002954

0800bbf0 <_getpid_r>:
 800bbf0:	f000 b9f6 	b.w	800bfe0 <_getpid>

0800bbf4 <_malloc_usable_size_r>:
 800bbf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf8:	1f18      	subs	r0, r3, #4
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	bfbc      	itt	lt
 800bbfe:	580b      	ldrlt	r3, [r1, r0]
 800bc00:	18c0      	addlt	r0, r0, r3
 800bc02:	4770      	bx	lr
 800bc04:	0000      	movs	r0, r0
	...

0800bc08 <atan>:
 800bc08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ec55 4b10 	vmov	r4, r5, d0
 800bc10:	4bc3      	ldr	r3, [pc, #780]	; (800bf20 <atan+0x318>)
 800bc12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc16:	429e      	cmp	r6, r3
 800bc18:	46ab      	mov	fp, r5
 800bc1a:	dd18      	ble.n	800bc4e <atan+0x46>
 800bc1c:	4bc1      	ldr	r3, [pc, #772]	; (800bf24 <atan+0x31c>)
 800bc1e:	429e      	cmp	r6, r3
 800bc20:	dc01      	bgt.n	800bc26 <atan+0x1e>
 800bc22:	d109      	bne.n	800bc38 <atan+0x30>
 800bc24:	b144      	cbz	r4, 800bc38 <atan+0x30>
 800bc26:	4622      	mov	r2, r4
 800bc28:	462b      	mov	r3, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 fb2d 	bl	800028c <__adddf3>
 800bc32:	4604      	mov	r4, r0
 800bc34:	460d      	mov	r5, r1
 800bc36:	e006      	b.n	800bc46 <atan+0x3e>
 800bc38:	f1bb 0f00 	cmp.w	fp, #0
 800bc3c:	f300 8131 	bgt.w	800bea2 <atan+0x29a>
 800bc40:	a59b      	add	r5, pc, #620	; (adr r5, 800beb0 <atan+0x2a8>)
 800bc42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc46:	ec45 4b10 	vmov	d0, r4, r5
 800bc4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4e:	4bb6      	ldr	r3, [pc, #728]	; (800bf28 <atan+0x320>)
 800bc50:	429e      	cmp	r6, r3
 800bc52:	dc14      	bgt.n	800bc7e <atan+0x76>
 800bc54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	dc0d      	bgt.n	800bc78 <atan+0x70>
 800bc5c:	a396      	add	r3, pc, #600	; (adr r3, 800beb8 <atan+0x2b0>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	ee10 0a10 	vmov	r0, s0
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 fb10 	bl	800028c <__adddf3>
 800bc6c:	4baf      	ldr	r3, [pc, #700]	; (800bf2c <atan+0x324>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7f4 ff52 	bl	8000b18 <__aeabi_dcmpgt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d1e6      	bne.n	800bc46 <atan+0x3e>
 800bc78:	f04f 3aff 	mov.w	sl, #4294967295
 800bc7c:	e02b      	b.n	800bcd6 <atan+0xce>
 800bc7e:	f000 f963 	bl	800bf48 <fabs>
 800bc82:	4bab      	ldr	r3, [pc, #684]	; (800bf30 <atan+0x328>)
 800bc84:	429e      	cmp	r6, r3
 800bc86:	ec55 4b10 	vmov	r4, r5, d0
 800bc8a:	f300 80bf 	bgt.w	800be0c <atan+0x204>
 800bc8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc92:	429e      	cmp	r6, r3
 800bc94:	f300 80a0 	bgt.w	800bdd8 <atan+0x1d0>
 800bc98:	ee10 2a10 	vmov	r2, s0
 800bc9c:	ee10 0a10 	vmov	r0, s0
 800bca0:	462b      	mov	r3, r5
 800bca2:	4629      	mov	r1, r5
 800bca4:	f7f4 faf2 	bl	800028c <__adddf3>
 800bca8:	4ba0      	ldr	r3, [pc, #640]	; (800bf2c <atan+0x324>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 faec 	bl	8000288 <__aeabi_dsub>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460f      	mov	r7, r1
 800bcb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 fae5 	bl	800028c <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 fdbf 	bl	800084c <__aeabi_ddiv>
 800bcce:	f04f 0a00 	mov.w	sl, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	462b      	mov	r3, r5
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	f7f4 fc8b 	bl	80005f8 <__aeabi_dmul>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	f7f4 fc85 	bl	80005f8 <__aeabi_dmul>
 800bcee:	a374      	add	r3, pc, #464	; (adr r3, 800bec0 <atan+0x2b8>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	460f      	mov	r7, r1
 800bcf8:	f7f4 fc7e 	bl	80005f8 <__aeabi_dmul>
 800bcfc:	a372      	add	r3, pc, #456	; (adr r3, 800bec8 <atan+0x2c0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fac3 	bl	800028c <__adddf3>
 800bd06:	4632      	mov	r2, r6
 800bd08:	463b      	mov	r3, r7
 800bd0a:	f7f4 fc75 	bl	80005f8 <__aeabi_dmul>
 800bd0e:	a370      	add	r3, pc, #448	; (adr r3, 800bed0 <atan+0x2c8>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 faba 	bl	800028c <__adddf3>
 800bd18:	4632      	mov	r2, r6
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	f7f4 fc6c 	bl	80005f8 <__aeabi_dmul>
 800bd20:	a36d      	add	r3, pc, #436	; (adr r3, 800bed8 <atan+0x2d0>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fab1 	bl	800028c <__adddf3>
 800bd2a:	4632      	mov	r2, r6
 800bd2c:	463b      	mov	r3, r7
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	a36b      	add	r3, pc, #428	; (adr r3, 800bee0 <atan+0x2d8>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 faa8 	bl	800028c <__adddf3>
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	463b      	mov	r3, r7
 800bd40:	f7f4 fc5a 	bl	80005f8 <__aeabi_dmul>
 800bd44:	a368      	add	r3, pc, #416	; (adr r3, 800bee8 <atan+0x2e0>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 fa9f 	bl	800028c <__adddf3>
 800bd4e:	4642      	mov	r2, r8
 800bd50:	464b      	mov	r3, r9
 800bd52:	f7f4 fc51 	bl	80005f8 <__aeabi_dmul>
 800bd56:	a366      	add	r3, pc, #408	; (adr r3, 800bef0 <atan+0x2e8>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fc48 	bl	80005f8 <__aeabi_dmul>
 800bd68:	a363      	add	r3, pc, #396	; (adr r3, 800bef8 <atan+0x2f0>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fa8b 	bl	8000288 <__aeabi_dsub>
 800bd72:	4632      	mov	r2, r6
 800bd74:	463b      	mov	r3, r7
 800bd76:	f7f4 fc3f 	bl	80005f8 <__aeabi_dmul>
 800bd7a:	a361      	add	r3, pc, #388	; (adr r3, 800bf00 <atan+0x2f8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa82 	bl	8000288 <__aeabi_dsub>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fc36 	bl	80005f8 <__aeabi_dmul>
 800bd8c:	a35e      	add	r3, pc, #376	; (adr r3, 800bf08 <atan+0x300>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa79 	bl	8000288 <__aeabi_dsub>
 800bd96:	4632      	mov	r2, r6
 800bd98:	463b      	mov	r3, r7
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	a35c      	add	r3, pc, #368	; (adr r3, 800bf10 <atan+0x308>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa70 	bl	8000288 <__aeabi_dsub>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fc24 	bl	80005f8 <__aeabi_dmul>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fc1a 	bl	80005f8 <__aeabi_dmul>
 800bdc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	d14b      	bne.n	800be66 <atan+0x25e>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	f7f4 fa59 	bl	8000288 <__aeabi_dsub>
 800bdd6:	e72c      	b.n	800bc32 <atan+0x2a>
 800bdd8:	ee10 0a10 	vmov	r0, s0
 800bddc:	4b53      	ldr	r3, [pc, #332]	; (800bf2c <atan+0x324>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	4629      	mov	r1, r5
 800bde2:	f7f4 fa51 	bl	8000288 <__aeabi_dsub>
 800bde6:	4b51      	ldr	r3, [pc, #324]	; (800bf2c <atan+0x324>)
 800bde8:	4606      	mov	r6, r0
 800bdea:	460f      	mov	r7, r1
 800bdec:	2200      	movs	r2, #0
 800bdee:	4620      	mov	r0, r4
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	f7f4 fa4b 	bl	800028c <__adddf3>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	f7f4 fd25 	bl	800084c <__aeabi_ddiv>
 800be02:	f04f 0a01 	mov.w	sl, #1
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	e764      	b.n	800bcd6 <atan+0xce>
 800be0c:	4b49      	ldr	r3, [pc, #292]	; (800bf34 <atan+0x32c>)
 800be0e:	429e      	cmp	r6, r3
 800be10:	da1d      	bge.n	800be4e <atan+0x246>
 800be12:	ee10 0a10 	vmov	r0, s0
 800be16:	4b48      	ldr	r3, [pc, #288]	; (800bf38 <atan+0x330>)
 800be18:	2200      	movs	r2, #0
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 fa34 	bl	8000288 <__aeabi_dsub>
 800be20:	4b45      	ldr	r3, [pc, #276]	; (800bf38 <atan+0x330>)
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	2200      	movs	r2, #0
 800be28:	4620      	mov	r0, r4
 800be2a:	4629      	mov	r1, r5
 800be2c:	f7f4 fbe4 	bl	80005f8 <__aeabi_dmul>
 800be30:	4b3e      	ldr	r3, [pc, #248]	; (800bf2c <atan+0x324>)
 800be32:	2200      	movs	r2, #0
 800be34:	f7f4 fa2a 	bl	800028c <__adddf3>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4630      	mov	r0, r6
 800be3e:	4639      	mov	r1, r7
 800be40:	f7f4 fd04 	bl	800084c <__aeabi_ddiv>
 800be44:	f04f 0a02 	mov.w	sl, #2
 800be48:	4604      	mov	r4, r0
 800be4a:	460d      	mov	r5, r1
 800be4c:	e743      	b.n	800bcd6 <atan+0xce>
 800be4e:	462b      	mov	r3, r5
 800be50:	ee10 2a10 	vmov	r2, s0
 800be54:	4939      	ldr	r1, [pc, #228]	; (800bf3c <atan+0x334>)
 800be56:	2000      	movs	r0, #0
 800be58:	f7f4 fcf8 	bl	800084c <__aeabi_ddiv>
 800be5c:	f04f 0a03 	mov.w	sl, #3
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	e737      	b.n	800bcd6 <atan+0xce>
 800be66:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <atan+0x338>)
 800be68:	4e36      	ldr	r6, [pc, #216]	; (800bf44 <atan+0x33c>)
 800be6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800be6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800be72:	e9da 2300 	ldrd	r2, r3, [sl]
 800be76:	f7f4 fa07 	bl	8000288 <__aeabi_dsub>
 800be7a:	4622      	mov	r2, r4
 800be7c:	462b      	mov	r3, r5
 800be7e:	f7f4 fa03 	bl	8000288 <__aeabi_dsub>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800be8a:	f7f4 f9fd 	bl	8000288 <__aeabi_dsub>
 800be8e:	f1bb 0f00 	cmp.w	fp, #0
 800be92:	4604      	mov	r4, r0
 800be94:	460d      	mov	r5, r1
 800be96:	f6bf aed6 	bge.w	800bc46 <atan+0x3e>
 800be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be9e:	461d      	mov	r5, r3
 800bea0:	e6d1      	b.n	800bc46 <atan+0x3e>
 800bea2:	a51d      	add	r5, pc, #116	; (adr r5, 800bf18 <atan+0x310>)
 800bea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bea8:	e6cd      	b.n	800bc46 <atan+0x3e>
 800beaa:	bf00      	nop
 800beac:	f3af 8000 	nop.w
 800beb0:	54442d18 	.word	0x54442d18
 800beb4:	bff921fb 	.word	0xbff921fb
 800beb8:	8800759c 	.word	0x8800759c
 800bebc:	7e37e43c 	.word	0x7e37e43c
 800bec0:	e322da11 	.word	0xe322da11
 800bec4:	3f90ad3a 	.word	0x3f90ad3a
 800bec8:	24760deb 	.word	0x24760deb
 800becc:	3fa97b4b 	.word	0x3fa97b4b
 800bed0:	a0d03d51 	.word	0xa0d03d51
 800bed4:	3fb10d66 	.word	0x3fb10d66
 800bed8:	c54c206e 	.word	0xc54c206e
 800bedc:	3fb745cd 	.word	0x3fb745cd
 800bee0:	920083ff 	.word	0x920083ff
 800bee4:	3fc24924 	.word	0x3fc24924
 800bee8:	5555550d 	.word	0x5555550d
 800beec:	3fd55555 	.word	0x3fd55555
 800bef0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bef4:	bfa2b444 	.word	0xbfa2b444
 800bef8:	52defd9a 	.word	0x52defd9a
 800befc:	3fadde2d 	.word	0x3fadde2d
 800bf00:	af749a6d 	.word	0xaf749a6d
 800bf04:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf08:	fe231671 	.word	0xfe231671
 800bf0c:	3fbc71c6 	.word	0x3fbc71c6
 800bf10:	9998ebc4 	.word	0x9998ebc4
 800bf14:	3fc99999 	.word	0x3fc99999
 800bf18:	54442d18 	.word	0x54442d18
 800bf1c:	3ff921fb 	.word	0x3ff921fb
 800bf20:	440fffff 	.word	0x440fffff
 800bf24:	7ff00000 	.word	0x7ff00000
 800bf28:	3fdbffff 	.word	0x3fdbffff
 800bf2c:	3ff00000 	.word	0x3ff00000
 800bf30:	3ff2ffff 	.word	0x3ff2ffff
 800bf34:	40038000 	.word	0x40038000
 800bf38:	3ff80000 	.word	0x3ff80000
 800bf3c:	bff00000 	.word	0xbff00000
 800bf40:	0800cc68 	.word	0x0800cc68
 800bf44:	0800cc48 	.word	0x0800cc48

0800bf48 <fabs>:
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	ee10 2a10 	vmov	r2, s0
 800bf50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf54:	ec43 2b10 	vmov	d0, r2, r3
 800bf58:	4770      	bx	lr
	...

0800bf5c <trunc>:
 800bf5c:	ec51 0b10 	vmov	r0, r1, d0
 800bf60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf64:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800bf68:	2b13      	cmp	r3, #19
 800bf6a:	b5d0      	push	{r4, r6, r7, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	dc10      	bgt.n	800bf92 <trunc+0x36>
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfa5      	ittet	ge
 800bf74:	4a11      	ldrge	r2, [pc, #68]	; (800bfbc <trunc+0x60>)
 800bf76:	fa42 f303 	asrge.w	r3, r2, r3
 800bf7a:	2100      	movlt	r1, #0
 800bf7c:	2100      	movge	r1, #0
 800bf7e:	bfb9      	ittee	lt
 800bf80:	2000      	movlt	r0, #0
 800bf82:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800bf86:	2000      	movge	r0, #0
 800bf88:	ea24 0103 	bicge.w	r1, r4, r3
 800bf8c:	ec41 0b10 	vmov	d0, r0, r1
 800bf90:	bdd0      	pop	{r4, r6, r7, pc}
 800bf92:	2b33      	cmp	r3, #51	; 0x33
 800bf94:	dd08      	ble.n	800bfa8 <trunc+0x4c>
 800bf96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf9a:	d1f7      	bne.n	800bf8c <trunc+0x30>
 800bf9c:	ee10 2a10 	vmov	r2, s0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	f7f4 f973 	bl	800028c <__adddf3>
 800bfa6:	e7f1      	b.n	800bf8c <trunc+0x30>
 800bfa8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800bfac:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb0:	fa23 f202 	lsr.w	r2, r3, r2
 800bfb4:	ea20 0602 	bic.w	r6, r0, r2
 800bfb8:	4630      	mov	r0, r6
 800bfba:	e7e7      	b.n	800bf8c <trunc+0x30>
 800bfbc:	000fffff 	.word	0x000fffff

0800bfc0 <_close>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	; (800bfcc <_close+0xc>)
 800bfc2:	2258      	movs	r2, #88	; 0x58
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfca:	4770      	bx	lr
 800bfcc:	20002954 	.word	0x20002954

0800bfd0 <_fstat>:
 800bfd0:	4b02      	ldr	r3, [pc, #8]	; (800bfdc <_fstat+0xc>)
 800bfd2:	2258      	movs	r2, #88	; 0x58
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfda:	4770      	bx	lr
 800bfdc:	20002954 	.word	0x20002954

0800bfe0 <_getpid>:
 800bfe0:	4b02      	ldr	r3, [pc, #8]	; (800bfec <_getpid+0xc>)
 800bfe2:	2258      	movs	r2, #88	; 0x58
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfea:	4770      	bx	lr
 800bfec:	20002954 	.word	0x20002954

0800bff0 <_isatty>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	; (800bffc <_isatty+0xc>)
 800bff2:	2258      	movs	r2, #88	; 0x58
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	2000      	movs	r0, #0
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	20002954 	.word	0x20002954

0800c000 <_kill>:
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <_kill+0xc>)
 800c002:	2258      	movs	r2, #88	; 0x58
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	f04f 30ff 	mov.w	r0, #4294967295
 800c00a:	4770      	bx	lr
 800c00c:	20002954 	.word	0x20002954

0800c010 <_lseek>:
 800c010:	4b02      	ldr	r3, [pc, #8]	; (800c01c <_lseek+0xc>)
 800c012:	2258      	movs	r2, #88	; 0x58
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	4770      	bx	lr
 800c01c:	20002954 	.word	0x20002954

0800c020 <_read>:
 800c020:	4b02      	ldr	r3, [pc, #8]	; (800c02c <_read+0xc>)
 800c022:	2258      	movs	r2, #88	; 0x58
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295
 800c02a:	4770      	bx	lr
 800c02c:	20002954 	.word	0x20002954

0800c030 <_exit>:
 800c030:	e7fe      	b.n	800c030 <_exit>
	...

0800c034 <_init>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	bf00      	nop
 800c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03a:	bc08      	pop	{r3}
 800c03c:	469e      	mov	lr, r3
 800c03e:	4770      	bx	lr

0800c040 <_fini>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	bf00      	nop
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr
