
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08007de8  08007de8  00017de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008078  08008078  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008078  08008078  00018078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008080  08008080  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08008088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001998  200000d0  08008158  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a68  08008158  00021a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202b8  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424b  00000000  00000000  000403b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00044608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  000460b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000633b  00000000  00000000  00047980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2e1  00000000  00000000  0004dcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010389b  00000000  00000000  0006bf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075ec  00000000  00000000  0016f88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      00000183  00000000  00000000  00176e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dd0 	.word	0x08007dd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08007dd0 	.word	0x08007dd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <vApplicationGetIdleTaskMemory+0x30>)
 8000e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200000ec 	.word	0x200000ec
 8000e94:	20000140 	.word	0x20000140

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b0aa      	sub	sp, #168	; 0xa8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f001 fb10 	bl	80024c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f891 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f973 	bl	8001190 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000eaa:	f000 f903 	bl	80010b4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000eae:	f000 f93f 	bl	8001130 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <main+0x100>)
 8000eb4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000eb8:	461d      	mov	r5, r3
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ec6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fefb 	bl	8005cc8 <osThreadCreate>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <main+0x104>)
 8000ed6:	6013      	str	r3, [r2, #0]

  /* definition and creation of readTemp */
  osThreadDef(readTemp, StartReadTemp, osPriorityNormal, 0, 128);
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <main+0x108>)
 8000eda:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempHandle = osThreadCreate(osThread(readTemp), NULL);
 8000eec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fee8 	bl	8005cc8 <osThreadCreate>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <main+0x10c>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* definition and creation of readHumidity */
  osThreadDef(readHumidity, StartReadHum, osPriorityNormal, 0, 128);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <main+0x110>)
 8000f00:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f04:	461d      	mov	r5, r3
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readHumidityHandle = osThreadCreate(osThread(readHumidity), NULL);
 8000f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fed5 	bl	8005cc8 <osThreadCreate>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a22      	ldr	r2, [pc, #136]	; (8000fac <main+0x114>)
 8000f22:	6013      	str	r3, [r2, #0]

  /* definition and creation of readPressure */
  osThreadDef(readPressure, StartReadPressure, osPriorityNormal, 0, 128);
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <main+0x118>)
 8000f26:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readPressureHandle = osThreadCreate(osThread(readPressure), NULL);
 8000f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fec2 	bl	8005cc8 <osThreadCreate>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <main+0x11c>)
 8000f48:	6013      	str	r3, [r2, #0]

  /* definition and creation of readMagneto */
  osThreadDef(readMagneto, StartReadMagnetometer, osPriorityNormal, 0, 128);
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <main+0x120>)
 8000f4c:	f107 041c 	add.w	r4, r7, #28
 8000f50:	461d      	mov	r5, r3
 8000f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readMagnetoHandle = osThreadCreate(osThread(readMagneto), NULL);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 feaf 	bl	8005cc8 <osThreadCreate>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <main+0x124>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of WebServer */
  osThreadDef(WebServer, StartWebServer, osPriorityNormal, 0, 128);
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <main+0x128>)
 8000f72:	463c      	mov	r4, r7
 8000f74:	461d      	mov	r5, r3
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerHandle = osThreadCreate(osThread(WebServer), NULL);
 8000f82:	463b      	mov	r3, r7
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fe9e 	bl	8005cc8 <osThreadCreate>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <main+0x12c>)
 8000f90:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f92:	f004 fe92 	bl	8005cba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <main+0xfe>
 8000f98:	08007e38 	.word	0x08007e38
 8000f9c:	20001838 	.word	0x20001838
 8000fa0:	08007e54 	.word	0x08007e54
 8000fa4:	20001840 	.word	0x20001840
 8000fa8:	08007e70 	.word	0x08007e70
 8000fac:	20001934 	.word	0x20001934
 8000fb0:	08007e8c 	.word	0x08007e8c
 8000fb4:	2000183c 	.word	0x2000183c
 8000fb8:	08007ea8 	.word	0x08007ea8
 8000fbc:	2000192c 	.word	0x2000192c
 8000fc0:	08007ec4 	.word	0x08007ec4
 8000fc4:	20001930 	.word	0x20001930

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0b8      	sub	sp, #224	; 0xe0
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd2:	2244      	movs	r2, #68	; 0x44
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 f8e0 	bl	800719c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2288      	movs	r2, #136	; 0x88
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f006 f8d2 	bl	800719c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2310      	movs	r3, #16
 8001008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800101e:	230a      	movs	r3, #10
 8001020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fb04 	bl	8003648 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001046:	f000 fb13 	bl	8001670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001068:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800106c:	2104      	movs	r1, #4
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fed0 	bl	8003e14 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800107a:	f000 faf9 	bl	8001670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800107e:	2301      	movs	r3, #1
 8001080:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f8fb 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001094:	f000 faec 	bl	8001670 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001098:	f44f 7000 	mov.w	r0, #512	; 0x200
 800109c:	f002 fa7e 	bl	800359c <HAL_PWREx_ControlVoltageScaling>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80010a6:	f000 fae3 	bl	8001670 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	37e0      	adds	r7, #224	; 0xe0
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_SPI3_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_SPI3_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_SPI3_Init+0x74>)
 80010c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_SPI3_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_SPI3_Init+0x74>)
 80010ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_SPI3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_SPI3_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_SPI3_Init+0x74>)
 80010e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_SPI3_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI3_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SPI3_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_SPI3_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SPI3_Init+0x74>)
 8001102:	2207      	movs	r2, #7
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_SPI3_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SPI3_Init+0x74>)
 800110e:	2208      	movs	r2, #8
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_SPI3_Init+0x74>)
 8001114:	f003 fd72 	bl	8004bfc <HAL_SPI_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 faa7 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20001844 	.word	0x20001844
 800112c:	40003c00 	.word	0x40003c00

08001130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001136:	4a15      	ldr	r2, [pc, #84]	; (800118c <MX_USART1_UART_Init+0x5c>)
 8001138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_USART1_UART_Init+0x58>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_USART1_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USART1_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USART1_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USART1_UART_Init+0x58>)
 8001174:	f004 f8b6 	bl	80052e4 <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 fa77 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200018a8 	.word	0x200018a8
 800118c:	40013800 	.word	0x40013800

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_GPIO_Init+0x90>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <MX_GPIO_Init+0x90>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_GPIO_Init+0x90>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_GPIO_Init+0x90>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_GPIO_Init+0x90>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_GPIO_Init+0x90>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_GPIO_Init+0x90>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <MX_GPIO_Init+0x90>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_GPIO_Init+0x90>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <MX_GPIO_Init+0x94>)
 80011f6:	f001 fc29 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80011fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_GPIO_Init+0x94>)
 8001214:	f001 fa70 	bl	80026f8 <HAL_GPIO_Init>

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	48000400 	.word	0x48000400

08001228 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001230:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <StartDefaultTask+0x1c>)
 8001236:	f001 fc21 	bl	8002a7c <HAL_GPIO_TogglePin>
	 osDelay(1000);
 800123a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123e:	f004 fd8f 	bl	8005d60 <osDelay>
	 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001242:	e7f5      	b.n	8001230 <StartDefaultTask+0x8>
 8001244:	48000400 	.word	0x48000400

08001248 <StartReadTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTemp */
void StartReadTemp(void const * argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTemp */
	float temp_value = 0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
	char *str_tmp = "Temperatura = %d.%02d°C\n\r";
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <StartReadTemp+0xa0>)
 8001258:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_tmp)];
	int tmpInt1, tmpInt2;
	float tmpFrac;

	BSP_TSENSOR_Init();
 800125a:	f000 fdb7 	bl	8001dcc <BSP_TSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		temp_value = BSP_TSENSOR_ReadTemp();
 800125e:	f000 fdd1 	bl	8001e04 <BSP_TSENSOR_ReadTemp>
 8001262:	ed87 0a07 	vstr	s0, [r7, #28]
		tmpInt1 = temp_value;
 8001266:	edd7 7a07 	vldr	s15, [r7, #28]
 800126a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126e:	ee17 3a90 	vmov	r3, s15
 8001272:	617b      	str	r3, [r7, #20]
		tmpFrac = temp_value - tmpInt1;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001286:	edc7 7a04 	vstr	s15, [r7, #16]
		tmpInt2 = trunc(tmpFrac * 100);
 800128a:	edd7 7a04 	vldr	s15, [r7, #16]
 800128e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80012ec <StartReadTemp+0xa4>
 8001292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001296:	ee17 0a90 	vmov	r0, s15
 800129a:	f7ff f94d 	bl	8000538 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	ec43 2b10 	vmov	d0, r2, r3
 80012a6:	f006 fd61 	bl	8007d6c <trunc>
 80012aa:	ec53 2b10 	vmov	r2, r3, d0
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc33 	bl	8000b1c <__aeabi_d2iz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_tmp, tmpInt1, tmpInt2);
 80012ba:	f107 0008 	add.w	r0, r7, #8
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	2104      	movs	r1, #4
 80012c8:	f005 ff70 	bl	80071ac <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
 80012cc:	f107 0108 	add.w	r1, r7, #8
 80012d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d4:	2204      	movs	r2, #4
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <StartReadTemp+0xa8>)
 80012d8:	f004 f852 	bl	8005380 <HAL_UART_Transmit>
		osDelay(1000);
 80012dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e0:	f004 fd3e 	bl	8005d60 <osDelay>
		temp_value = BSP_TSENSOR_ReadTemp();
 80012e4:	e7bb      	b.n	800125e <StartReadTemp+0x16>
 80012e6:	bf00      	nop
 80012e8:	08007ee0 	.word	0x08007ee0
 80012ec:	42c80000 	.word	0x42c80000
 80012f0:	200018a8 	.word	0x200018a8

080012f4 <StartReadHum>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadHum */
void StartReadHum(void const * argument)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadHum */
  /* Infinite loop */
	float hum_value = 0;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
	char *str_hum = "Umidita' = %d\%\n\r";
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <StartReadHum+0xa0>)
 8001304:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_hum)];
	int humInt1, humInt2;
	float humFrac;

	BSP_HSENSOR_Init();
 8001306:	f000 fcc1 	bl	8001c8c <BSP_HSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		hum_value = BSP_HSENSOR_ReadHumidity();
 800130a:	f000 fcdf 	bl	8001ccc <BSP_HSENSOR_ReadHumidity>
 800130e:	ed87 0a07 	vstr	s0, [r7, #28]
		humInt1 = hum_value;
 8001312:	edd7 7a07 	vldr	s15, [r7, #28]
 8001316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131a:	ee17 3a90 	vmov	r3, s15
 800131e:	617b      	str	r3, [r7, #20]
		humFrac = hum_value - humInt1;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed97 7a07 	vldr	s14, [r7, #28]
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	edc7 7a04 	vstr	s15, [r7, #16]
		humInt2 = trunc(humFrac * 100);
 8001336:	edd7 7a04 	vldr	s15, [r7, #16]
 800133a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001398 <StartReadHum+0xa4>
 800133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f8f7 	bl	8000538 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	ec43 2b10 	vmov	d0, r2, r3
 8001352:	f006 fd0b 	bl	8007d6c <trunc>
 8001356:	ec53 2b10 	vmov	r2, r3, d0
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fbdd 	bl	8000b1c <__aeabi_d2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_hum, humInt1, humInt2);
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	2104      	movs	r1, #4
 8001374:	f005 ff1a 	bl	80071ac <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_hum), 1000);
 8001378:	f107 0108 	add.w	r1, r7, #8
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	2204      	movs	r2, #4
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <StartReadHum+0xa8>)
 8001384:	f003 fffc 	bl	8005380 <HAL_UART_Transmit>
		osDelay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f004 fce8 	bl	8005d60 <osDelay>
		hum_value = BSP_HSENSOR_ReadHumidity();
 8001390:	e7bb      	b.n	800130a <StartReadHum+0x16>
 8001392:	bf00      	nop
 8001394:	08007efc 	.word	0x08007efc
 8001398:	42c80000 	.word	0x42c80000
 800139c:	200018a8 	.word	0x200018a8

080013a0 <StartReadPressure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadPressure */
void StartReadPressure(void const * argument)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadPressure */
	float pres_value = 0;
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
	char *str_pres = "Pressione = %d.%02d hPa\n\r";
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <StartReadPressure+0xa0>)
 80013b0:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_pres)];
	int presInt1, presInt2;
	float presFrac;

	BSP_PSENSOR_Init();
 80013b2:	f000 fcdd 	bl	8001d70 <BSP_PSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		pres_value = BSP_PSENSOR_ReadPressure();
 80013b6:	f000 fcfb 	bl	8001db0 <BSP_PSENSOR_ReadPressure>
 80013ba:	ed87 0a07 	vstr	s0, [r7, #28]
		presInt1 = pres_value;
 80013be:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c6:	ee17 3a90 	vmov	r3, s15
 80013ca:	617b      	str	r3, [r7, #20]
		presFrac = pres_value - presInt1;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	edc7 7a04 	vstr	s15, [r7, #16]
		presInt2 = trunc(presFrac * 100);
 80013e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001444 <StartReadPressure+0xa4>
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	ee17 0a90 	vmov	r0, s15
 80013f2:	f7ff f8a1 	bl	8000538 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	ec43 2b10 	vmov	d0, r2, r3
 80013fe:	f006 fcb5 	bl	8007d6c <trunc>
 8001402:	ec53 2b10 	vmov	r2, r3, d0
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb87 	bl	8000b1c <__aeabi_d2iz>
 800140e:	4603      	mov	r3, r0
 8001410:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_pres, presInt1, presInt2);
 8001412:	f107 0008 	add.w	r0, r7, #8
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	2104      	movs	r1, #4
 8001420:	f005 fec4 	bl	80071ac <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_pres), 1000);
 8001424:	f107 0108 	add.w	r1, r7, #8
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	2204      	movs	r2, #4
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <StartReadPressure+0xa8>)
 8001430:	f003 ffa6 	bl	8005380 <HAL_UART_Transmit>
		osDelay(1000);
 8001434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001438:	f004 fc92 	bl	8005d60 <osDelay>
		pres_value = BSP_PSENSOR_ReadPressure();
 800143c:	e7bb      	b.n	80013b6 <StartReadPressure+0x16>
 800143e:	bf00      	nop
 8001440:	08007f10 	.word	0x08007f10
 8001444:	42c80000 	.word	0x42c80000
 8001448:	200018a8 	.word	0x200018a8
 800144c:	00000000 	.word	0x00000000

08001450 <StartReadMagnetometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadMagnetometer */
void StartReadMagnetometer(void const * argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af02      	add	r7, sp, #8
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadMagnetometer */
	int16_t xyz[3];
	int16_t x, y;
	char *str_tmp = "Direzione del nord = %d.%02d°\n\r";
 8001458:	4b71      	ldr	r3, [pc, #452]	; (8001620 <StartReadMagnetometer+0x1d0>)
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char output_str[sizeof(str_tmp)];
	double direction, magnFrac;
	int magnInt1, magnInt2;


	BSP_MAGNETO_Init();
 800145c:	f000 fc44 	bl	8001ce8 <BSP_MAGNETO_Init>
	/* Infinite loop */
	for(;;)
	{
		BSP_MAGNETO_GetXYZ(xyz);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fc6b 	bl	8001d40 <BSP_MAGNETO_GetXYZ>
		x = xyz[0];
 800146a:	89bb      	ldrh	r3, [r7, #12]
 800146c:	857b      	strh	r3, [r7, #42]	; 0x2a
		y = xyz[1];
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	853b      	strh	r3, [r7, #40]	; 0x28

		if(y > 0)
 8001472:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001476:	2b00      	cmp	r3, #0
 8001478:	dd2a      	ble.n	80014d0 <StartReadMagnetometer+0x80>
			direction = 90 - (atan(x/y) * 180/M_PI);
 800147a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800147e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001482:	fb92 f3f3 	sdiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f844 	bl	8000514 <__aeabi_i2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	ec43 2b10 	vmov	d0, r2, r3
 8001494:	f006 fac0 	bl	8007a18 <atan>
 8001498:	ec51 0b10 	vmov	r0, r1, d0
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b60      	ldr	r3, [pc, #384]	; (8001624 <StartReadMagnetometer+0x1d4>)
 80014a2:	f7ff f8a1 	bl	80005e8 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	a358      	add	r3, pc, #352	; (adr r3, 8001610 <StartReadMagnetometer+0x1c0>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f9c2 	bl	800083c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	f04f 0000 	mov.w	r0, #0
 80014c0:	4959      	ldr	r1, [pc, #356]	; (8001628 <StartReadMagnetometer+0x1d8>)
 80014c2:	f7fe fed9 	bl	8000278 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80014ce:	e050      	b.n	8001572 <StartReadMagnetometer+0x122>
		else if(y < 0)
 80014d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da2a      	bge.n	800152e <StartReadMagnetometer+0xde>
			direction = 270 - (atan(x/y) * 180/M_PI);
 80014d8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80014dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f815 	bl	8000514 <__aeabi_i2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	ec43 2b10 	vmov	d0, r2, r3
 80014f2:	f006 fa91 	bl	8007a18 <atan>
 80014f6:	ec51 0b10 	vmov	r0, r1, d0
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b49      	ldr	r3, [pc, #292]	; (8001624 <StartReadMagnetometer+0x1d4>)
 8001500:	f7ff f872 	bl	80005e8 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	a340      	add	r3, pc, #256	; (adr r3, 8001610 <StartReadMagnetometer+0x1c0>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f993 	bl	800083c <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	a13f      	add	r1, pc, #252	; (adr r1, 8001618 <StartReadMagnetometer+0x1c8>)
 800151c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001520:	f7fe feaa 	bl	8000278 <__aeabi_dsub>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800152c:	e021      	b.n	8001572 <StartReadMagnetometer+0x122>
		else if(y == 0 && x < 0)
 800152e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <StartReadMagnetometer+0xfa>
 8001536:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800153a:	2b00      	cmp	r3, #0
 800153c:	da05      	bge.n	800154a <StartReadMagnetometer+0xfa>
			direction = 180.0;
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <StartReadMagnetometer+0x1d4>)
 8001544:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001548:	e013      	b.n	8001572 <StartReadMagnetometer+0x122>
		else if(y == 0 && x > 0)
 800154a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <StartReadMagnetometer+0x118>
 8001552:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001556:	2b00      	cmp	r3, #0
 8001558:	dd06      	ble.n	8001568 <StartReadMagnetometer+0x118>
			direction = 0.0;
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001566:	e004      	b.n	8001572 <StartReadMagnetometer+0x122>
		else
			direction = -1.0;
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <StartReadMagnetometer+0x1dc>)
 800156e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if(direction != -1.0){
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <StartReadMagnetometer+0x1dc>)
 8001578:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800157c:	f7ff fa9c 	bl	8000ab8 <__aeabi_dcmpeq>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d13c      	bne.n	8001600 <StartReadMagnetometer+0x1b0>
			magnInt1 = direction;
 8001586:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800158a:	f7ff fac7 	bl	8000b1c <__aeabi_d2iz>
 800158e:	4603      	mov	r3, r0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
			magnFrac = direction - magnInt1;
 8001592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001594:	f7fe ffbe 	bl	8000514 <__aeabi_i2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015a0:	f7fe fe6a 	bl	8000278 <__aeabi_dsub>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
			magnInt2 = trunc(magnFrac * 100);
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <StartReadMagnetometer+0x1e0>)
 80015b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015b6:	f7ff f817 	bl	80005e8 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b17 	vmov	d7, r2, r3
 80015c2:	eeb0 0a47 	vmov.f32	s0, s14
 80015c6:	eef0 0a67 	vmov.f32	s1, s15
 80015ca:	f006 fbcf 	bl	8007d6c <trunc>
 80015ce:	ec53 2b10 	vmov	r2, r3, d0
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff faa1 	bl	8000b1c <__aeabi_d2iz>
 80015da:	4603      	mov	r3, r0
 80015dc:	617b      	str	r3, [r7, #20]
			snprintf(output_str, sizeof(output_str), str_tmp, magnInt1, magnInt2);
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ea:	2104      	movs	r1, #4
 80015ec:	f005 fdde 	bl	80071ac <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
 80015f0:	f107 0108 	add.w	r1, r7, #8
 80015f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f8:	2204      	movs	r2, #4
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <StartReadMagnetometer+0x1e4>)
 80015fc:	f003 fec0 	bl	8005380 <HAL_UART_Transmit>
		}

		osDelay(1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001604:	f004 fbac 	bl	8005d60 <osDelay>
		BSP_MAGNETO_GetXYZ(xyz);
 8001608:	e72a      	b.n	8001460 <StartReadMagnetometer+0x10>
 800160a:	bf00      	nop
 800160c:	f3af 8000 	nop.w
 8001610:	54442d18 	.word	0x54442d18
 8001614:	400921fb 	.word	0x400921fb
 8001618:	00000000 	.word	0x00000000
 800161c:	4070e000 	.word	0x4070e000
 8001620:	08007f2c 	.word	0x08007f2c
 8001624:	40668000 	.word	0x40668000
 8001628:	40568000 	.word	0x40568000
 800162c:	bff00000 	.word	0xbff00000
 8001630:	40590000 	.word	0x40590000
 8001634:	200018a8 	.word	0x200018a8

08001638 <StartWebServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebServer */
void StartWebServer(void const * argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWebServer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001644:	f004 fb8c 	bl	8005d60 <osDelay>
 8001648:	e7fa      	b.n	8001640 <StartWebServer+0x8>
	...

0800164c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800165e:	f000 ff49 	bl	80024f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40001000 	.word	0x40001000

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_MspInit+0x4c>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_MspInit+0x4c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	; 0x60
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_MspInit+0x4c>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_MspInit+0x4c>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	210f      	movs	r1, #15
 80016b6:	f06f 0001 	mvn.w	r0, #1
 80016ba:	f000 fff3 	bl	80026a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_SPI_MspInit+0x7c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d128      	bne.n	8001740 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_SPI_MspInit+0x80>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <HAL_SPI_MspInit+0x80>)
 80016f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_SPI_MspInit+0x80>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_SPI_MspInit+0x80>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_SPI_MspInit+0x80>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_SPI_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800171e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001730:	2306      	movs	r3, #6
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_SPI_MspInit+0x84>)
 800173c:	f000 ffdc 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40003c00 	.word	0x40003c00
 800174c:	40021000 	.word	0x40021000
 8001750:	48000800 	.word	0x48000800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_UART_MspInit+0x80>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d129      	bne.n	80017ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x84>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6613      	str	r3, [r2, #96]	; 0x60
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_UART_MspInit+0x84>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b8:	2307      	movs	r3, #7
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f000 ff97 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40021000 	.word	0x40021000

080017dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	2036      	movs	r0, #54	; 0x36
 80017f2:	f000 ff57 	bl	80026a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f6:	2036      	movs	r0, #54	; 0x36
 80017f8:	f000 ff70 	bl	80026dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_InitTick+0x9c>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_InitTick+0x9c>)
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_InitTick+0x9c>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001814:	f107 0210 	add.w	r2, r7, #16
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fc9e 	bl	8004160 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001824:	f002 fc70 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8001828:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <HAL_InitTick+0xa0>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	3b01      	subs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_InitTick+0xa4>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <HAL_InitTick+0xa8>)
 800183c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_InitTick+0xa4>)
 8001840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001844:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_InitTick+0xa4>)
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_InitTick+0xa4>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_InitTick+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001858:	4809      	ldr	r0, [pc, #36]	; (8001880 <HAL_InitTick+0xa4>)
 800185a:	f003 fa72 	bl	8004d42 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001864:	4806      	ldr	r0, [pc, #24]	; (8001880 <HAL_InitTick+0xa4>)
 8001866:	f003 facd 	bl	8004e04 <HAL_TIM_Base_Start_IT>
 800186a:	4603      	mov	r3, r0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3730      	adds	r7, #48	; 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	431bde83 	.word	0x431bde83
 8001880:	20001938 	.word	0x20001938
 8001884:	40001000 	.word	0x40001000

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <TIM6_DAC_IRQHandler+0x10>)
 80018ba:	f003 fb13 	bl	8004ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20001938 	.word	0x20001938

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f005 fc18 	bl	800712c <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20018000 	.word	0x20018000
 8001928:	00000400 	.word	0x00000400
 800192c:	20000340 	.word	0x20000340
 8001930:	20001a68 	.word	0x20001a68

08001934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <SystemInit+0x5c>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <SystemInit+0x5c>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <SystemInit+0x60>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a11      	ldr	r2, [pc, #68]	; (8001994 <SystemInit+0x60>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <SystemInit+0x60>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <SystemInit+0x60>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <SystemInit+0x60>)
 8001960:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001964:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <SystemInit+0x60>)
 800196c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001970:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <SystemInit+0x60>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <SystemInit+0x60>)
 8001978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SystemInit+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	40021000 	.word	0x40021000

08001998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff ffca 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019a2:	e003      	b.n	80019ac <LoopCopyDataInit>

080019a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019aa:	3104      	adds	r1, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80019b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019b4:	d3f6      	bcc.n	80019a4 <CopyDataInit>
	ldr	r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019b8:	e002      	b.n	80019c0 <LoopFillZerobss>

080019ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019bc:	f842 3b04 	str.w	r3, [r2], #4

080019c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LoopForever+0x16>)
	cmp	r2, r3
 80019c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019c4:	d3f9      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c6:	f005 fbb7 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ca:	f7ff fa65 	bl	8000e98 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019d4:	08008088 	.word	0x08008088
	ldr	r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019dc:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 80019e0:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 80019e4:	20001a68 	.word	0x20001a68

080019e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_2_IRQHandler>
	...

080019ec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <I2Cx_MspInit+0xa8>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <I2Cx_MspInit+0xa8>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001a0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	481b      	ldr	r0, [pc, #108]	; (8001a98 <I2Cx_MspInit+0xac>)
 8001a2a:	f000 fe65 	bl	80026f8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <I2Cx_MspInit+0xac>)
 8001a36:	f000 fe5f 	bl	80026f8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a62:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <I2Cx_MspInit+0xa8>)
 8001a64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a68:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	2021      	movs	r0, #33	; 0x21
 8001a70:	f000 fe18 	bl	80026a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001a74:	2021      	movs	r0, #33	; 0x21
 8001a76:	f000 fe31 	bl	80026dc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	2022      	movs	r0, #34	; 0x22
 8001a80:	f000 fe10 	bl	80026a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001a84:	2022      	movs	r0, #34	; 0x22
 8001a86:	f000 fe29 	bl	80026dc <HAL_NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400

08001a9c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <I2Cx_Init+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <I2Cx_Init+0x58>)
 8001aae:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff89 	bl	80019ec <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 ffe8 	bl	8002ab0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f001 fd00 	bl	80034e8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40005800 	.word	0x40005800
 8001af4:	00702681 	.word	0x00702681

08001af8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	72fb      	strb	r3, [r7, #11]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	88f8      	ldrh	r0, [r7, #6]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f001 f9a4 	bl	8002e7c <HAL_I2C_Mem_Read>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	4619      	mov	r1, r3
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f832 	bl	8001bac <I2Cx_Error>
  }
  return status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af04      	add	r7, sp, #16
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4603      	mov	r3, r0
 8001b62:	72fb      	strb	r3, [r7, #11]
 8001b64:	460b      	mov	r3, r1
 8001b66:	813b      	strh	r3, [r7, #8]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	b299      	uxth	r1, r3
 8001b74:	88f8      	ldrh	r0, [r7, #6]
 8001b76:	893a      	ldrh	r2, [r7, #8]
 8001b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f001 f863 	bl	8002c54 <HAL_I2C_Mem_Write>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f805 	bl	8001bac <I2Cx_Error>
  }
  return status;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f001 f808 	bl	8002bce <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff6c 	bl	8001a9c <I2Cx_Init>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <SENSOR_IO_Init+0x10>)
 8001bd2:	f7ff ff63 	bl	8001a9c <I2Cx_Init>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20001a08 	.word	0x20001a08

08001be0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	460b      	mov	r3, r1
 8001bec:	71bb      	strb	r3, [r7, #6]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	79f9      	ldrb	r1, [r7, #7]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	1d7b      	adds	r3, r7, #5
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2301      	movs	r3, #1
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <SENSOR_IO_Write+0x30>)
 8001c04:	f7ff ffa5 	bl	8001b52 <I2Cx_WriteMultiple>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20001a08 	.word	0x20001a08

08001c14 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	79f9      	ldrb	r1, [r7, #7]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f107 030f 	add.w	r3, r7, #15
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <SENSOR_IO_Read+0x38>)
 8001c3c:	f7ff ff5c 	bl	8001af8 <I2Cx_ReadMultiple>

  return read_value;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20001a08 	.word	0x20001a08

08001c50 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	603a      	str	r2, [r7, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	71bb      	strb	r3, [r7, #6]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	79f9      	ldrb	r1, [r7, #7]
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2301      	movs	r3, #1
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <SENSOR_IO_ReadMultiple+0x38>)
 8001c78:	f7ff ff3e 	bl	8001af8 <I2Cx_ReadMultiple>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b29b      	uxth	r3, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20001a08 	.word	0x20001a08

08001c8c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <BSP_HSENSOR_Init+0x38>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	20be      	movs	r0, #190	; 0xbe
 8001c98:	4798      	blx	r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2bbc      	cmp	r3, #188	; 0xbc
 8001c9e:	d002      	beq.n	8001ca6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	e009      	b.n	8001cba <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <BSP_HSENSOR_Init+0x3c>)
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <BSP_HSENSOR_Init+0x38>)
 8001caa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <BSP_HSENSOR_Init+0x3c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	20be      	movs	r0, #190	; 0xbe
 8001cb4:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	20000344 	.word	0x20000344

08001ccc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	20be      	movs	r0, #190	; 0xbe
 8001cd8:	4798      	blx	r3
 8001cda:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000344 	.word	0x20000344

08001ce8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <BSP_MAGNETO_Init+0x50>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4798      	blx	r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b3d      	cmp	r3, #61	; 0x3d
 8001cfc:	d002      	beq.n	8001d04 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	e013      	b.n	8001d2c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <BSP_MAGNETO_Init+0x54>)
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <BSP_MAGNETO_Init+0x50>)
 8001d08:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001d0a:	2358      	movs	r3, #88	; 0x58
 8001d0c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001d16:	2308      	movs	r3, #8
 8001d18:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001d1a:	2340      	movs	r3, #64	; 0x40
 8001d1c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <BSP_MAGNETO_Init+0x54>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	463a      	mov	r2, r7
 8001d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d2a:	4798      	blx	r3
  } 

  return ret;  
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000020 	.word	0x20000020
 8001d3c:	20000348 	.word	0x20000348

08001d40 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <BSP_MAGNETO_GetXYZ+0x2c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000348 	.word	0x20000348

08001d70 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <BSP_PSENSOR_Init+0x38>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	20ba      	movs	r0, #186	; 0xba
 8001d7c:	4798      	blx	r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2bb1      	cmp	r3, #177	; 0xb1
 8001d82:	d002      	beq.n	8001d8a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	e009      	b.n	8001d9e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <BSP_PSENSOR_Init+0x3c>)
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <BSP_PSENSOR_Init+0x38>)
 8001d8e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <BSP_PSENSOR_Init+0x3c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	20ba      	movs	r0, #186	; 0xba
 8001d98:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000054 	.word	0x20000054
 8001dac:	2000034c 	.word	0x2000034c

08001db0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <BSP_PSENSOR_ReadPressure+0x18>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	20ba      	movs	r0, #186	; 0xba
 8001dbc:	4798      	blx	r3
 8001dbe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000034c 	.word	0x2000034c

08001dcc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <BSP_TSENSOR_Init+0x30>)
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <BSP_TSENSOR_Init+0x34>)
 8001dda:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001ddc:	f7ff fef6 	bl	8001bcc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <BSP_TSENSOR_Init+0x30>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2100      	movs	r1, #0
 8001de8:	20be      	movs	r0, #190	; 0xbe
 8001dea:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000350 	.word	0x20000350
 8001e00:	20000010 	.word	0x20000010

08001e04 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <BSP_TSENSOR_ReadTemp+0x18>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	20be      	movs	r0, #190	; 0xbe
 8001e10:	4798      	blx	r3
 8001e12:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000350 	.word	0x20000350

08001e20 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2120      	movs	r1, #32
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff feef 	bl	8001c14 <SENSOR_IO_Read>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	f023 0303 	bic.w	r3, r3, #3
 8001e50:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e60:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	2120      	movs	r1, #32
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff feb8 	bl	8001be0 <SENSOR_IO_Write>
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001e86:	f7ff fea1 	bl	8001bcc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	210f      	movs	r1, #15
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff febf 	bl	8001c14 <SENSOR_IO_Read>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	b2d8      	uxtb	r0, r3
 8001eb2:	f107 020c 	add.w	r2, r7, #12
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	21b0      	movs	r1, #176	; 0xb0
 8001eba:	f7ff fec9 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001ebe:	7b3b      	ldrb	r3, [r7, #12]
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001ec6:	7b7b      	ldrb	r3, [r7, #13]
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	b2d8      	uxtb	r0, r3
 8001ed2:	f107 020c 	add.w	r2, r7, #12
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	21b6      	movs	r1, #182	; 0xb6
 8001eda:	f7ff feb9 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ede:	7b7b      	ldrb	r3, [r7, #13]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	7b3b      	ldrb	r3, [r7, #12]
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	b2d8      	uxtb	r0, r3
 8001ef0:	f107 020c 	add.w	r2, r7, #12
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	21ba      	movs	r1, #186	; 0xba
 8001ef8:	f7ff feaa 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001efc:	7b7b      	ldrb	r3, [r7, #13]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	7b3b      	ldrb	r3, [r7, #12]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	b2d8      	uxtb	r0, r3
 8001f0e:	f107 020c 	add.w	r2, r7, #12
 8001f12:	2302      	movs	r3, #2
 8001f14:	21a8      	movs	r1, #168	; 0xa8
 8001f16:	f7ff fe9b 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	7b3b      	ldrb	r3, [r7, #12]
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001f3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001f50:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001f54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f86:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f8e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001fd4 <HTS221_H_ReadHumidity+0x130>
 8001f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	dd01      	ble.n	8001fa0 <HTS221_H_ReadHumidity+0xfc>
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HTS221_H_ReadHumidity+0x134>)
 8001f9e:	e00a      	b.n	8001fb6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d502      	bpl.n	8001fb4 <HTS221_H_ReadHumidity+0x110>
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HTS221_H_ReadHumidity+0x112>
 8001fb4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001fb6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001fb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fbc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fc4:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	447a0000 	.word	0x447a0000
 8001fd8:	447a0000 	.word	0x447a0000

08001fdc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2120      	movs	r1, #32
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe10 	bl	8001c14 <SENSOR_IO_Read>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	f023 0304 	bic.w	r3, r3, #4
 8001ffe:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	2120      	movs	r1, #32
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdd9 	bl	8001be0 <SENSOR_IO_Write>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b088      	sub	sp, #32
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	b2d8      	uxtb	r0, r3
 8002044:	f107 0208 	add.w	r2, r7, #8
 8002048:	2302      	movs	r3, #2
 800204a:	21b2      	movs	r1, #178	; 0xb2
 800204c:	f7ff fe00 	bl	8001c50 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2135      	movs	r1, #53	; 0x35
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fddc 	bl	8001c14 <SENSOR_IO_Read>
 800205c:	4603      	mov	r3, r0
 800205e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002060:	7ffb      	ldrb	r3, [r7, #31]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b21b      	sxth	r3, r3
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	b21a      	sxth	r2, r3
 800206c:	7a3b      	ldrb	r3, [r7, #8]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002074:	7ffb      	ldrb	r3, [r7, #31]
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	b21b      	sxth	r3, r3
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	b21a      	sxth	r2, r3
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002088:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800208c:	10db      	asrs	r3, r3, #3
 800208e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002090:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002094:	10db      	asrs	r3, r3, #3
 8002096:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	b2d8      	uxtb	r0, r3
 800209c:	f107 0208 	add.w	r2, r7, #8
 80020a0:	2304      	movs	r3, #4
 80020a2:	21bc      	movs	r1, #188	; 0xbc
 80020a4:	f7ff fdd4 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80020a8:	7a7b      	ldrb	r3, [r7, #9]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b21a      	sxth	r2, r3
 80020ae:	7a3b      	ldrb	r3, [r7, #8]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	7abb      	ldrb	r3, [r7, #10]
 80020be:	b21b      	sxth	r3, r3
 80020c0:	4313      	orrs	r3, r2
 80020c2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	b2d8      	uxtb	r0, r3
 80020c8:	f107 0208 	add.w	r2, r7, #8
 80020cc:	2302      	movs	r3, #2
 80020ce:	21aa      	movs	r1, #170	; 0xaa
 80020d0:	f7ff fdbe 	bl	8001c50 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80020d4:	7a7b      	ldrb	r3, [r7, #9]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	7a3b      	ldrb	r3, [r7, #8]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80020e2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80020e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee67 6a27 	vmul.f32	s13, s14, s15
 800210a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800210e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002120:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	ee07 3a90 	vmov	s15, r3
}
 800213a:	eeb0 0a67 	vmov.f32	s0, s15
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	463b      	mov	r3, r7
 800214c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002150:	783b      	ldrb	r3, [r7, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	2120      	movs	r1, #32
 8002156:	203c      	movs	r0, #60	; 0x3c
 8002158:	f7ff fd42 	bl	8001be0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	461a      	mov	r2, r3
 8002160:	2121      	movs	r1, #33	; 0x21
 8002162:	203c      	movs	r0, #60	; 0x3c
 8002164:	f7ff fd3c 	bl	8001be0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002168:	78bb      	ldrb	r3, [r7, #2]
 800216a:	461a      	mov	r2, r3
 800216c:	2122      	movs	r1, #34	; 0x22
 800216e:	203c      	movs	r0, #60	; 0x3c
 8002170:	f7ff fd36 	bl	8001be0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	461a      	mov	r2, r3
 8002178:	2123      	movs	r1, #35	; 0x23
 800217a:	203c      	movs	r0, #60	; 0x3c
 800217c:	f7ff fd30 	bl	8001be0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002180:	793b      	ldrb	r3, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	2124      	movs	r1, #36	; 0x24
 8002186:	203c      	movs	r0, #60	; 0x3c
 8002188:	f7ff fd2a 	bl	8001be0 <SENSOR_IO_Write>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800219a:	2300      	movs	r3, #0
 800219c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800219e:	2122      	movs	r1, #34	; 0x22
 80021a0:	203c      	movs	r0, #60	; 0x3c
 80021a2:	f7ff fd37 	bl	8001c14 <SENSOR_IO_Read>
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f023 0303 	bic.w	r3, r3, #3
 80021b0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f043 0303 	orr.w	r3, r3, #3
 80021b8:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	461a      	mov	r2, r3
 80021be:	2122      	movs	r1, #34	; 0x22
 80021c0:	203c      	movs	r0, #60	; 0x3c
 80021c2:	f7ff fd0d 	bl	8001be0 <SENSOR_IO_Write>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80021d2:	f7ff fcfb 	bl	8001bcc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80021d6:	210f      	movs	r1, #15
 80021d8:	203c      	movs	r0, #60	; 0x3c
 80021da:	f7ff fd1b 	bl	8001c14 <SENSOR_IO_Read>
 80021de:	4603      	mov	r3, r0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80021f2:	2122      	movs	r1, #34	; 0x22
 80021f4:	203c      	movs	r0, #60	; 0x3c
 80021f6:	f7ff fd0d 	bl	8001c14 <SENSOR_IO_Read>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f023 0320 	bic.w	r3, r3, #32
 8002204:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	f043 0320 	orr.w	r3, r3, #32
 8002212:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	461a      	mov	r2, r3
 8002218:	2122      	movs	r1, #34	; 0x22
 800221a:	203c      	movs	r0, #60	; 0x3c
 800221c:	f7ff fce0 	bl	8001be0 <SENSOR_IO_Write>
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800223e:	2121      	movs	r1, #33	; 0x21
 8002240:	203c      	movs	r0, #60	; 0x3c
 8002242:	f7ff fce7 	bl	8001c14 <SENSOR_IO_Read>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800224a:	f107 0208 	add.w	r2, r7, #8
 800224e:	2306      	movs	r3, #6
 8002250:	21a8      	movs	r1, #168	; 0xa8
 8002252:	203c      	movs	r0, #60	; 0x3c
 8002254:	f7ff fcfc 	bl	8001c50 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	e01f      	b.n	800229e <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	3301      	adds	r3, #1
 8002264:	f107 0220 	add.w	r2, r7, #32
 8002268:	4413      	add	r3, r2
 800226a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800226e:	b29b      	uxth	r3, r3
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b29a      	uxth	r2, r3
 8002274:	7ffb      	ldrb	r3, [r7, #31]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	f107 0120 	add.w	r1, r7, #32
 800227c:	440b      	add	r3, r1
 800227e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b29a      	uxth	r2, r3
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	b212      	sxth	r2, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	f107 0120 	add.w	r1, r7, #32
 8002292:	440b      	add	r3, r1
 8002294:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002298:	7ffb      	ldrb	r3, [r7, #31]
 800229a:	3301      	adds	r3, #1
 800229c:	77fb      	strb	r3, [r7, #31]
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d9dc      	bls.n	800225e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80022aa:	2b60      	cmp	r3, #96	; 0x60
 80022ac:	d013      	beq.n	80022d6 <LIS3MDL_MagReadXYZ+0xae>
 80022ae:	2b60      	cmp	r3, #96	; 0x60
 80022b0:	dc14      	bgt.n	80022dc <LIS3MDL_MagReadXYZ+0xb4>
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d00c      	beq.n	80022d0 <LIS3MDL_MagReadXYZ+0xa8>
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	dc10      	bgt.n	80022dc <LIS3MDL_MagReadXYZ+0xb4>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <LIS3MDL_MagReadXYZ+0x9c>
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d003      	beq.n	80022ca <LIS3MDL_MagReadXYZ+0xa2>
 80022c2:	e00b      	b.n	80022dc <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <LIS3MDL_MagReadXYZ+0x104>)
 80022c6:	61bb      	str	r3, [r7, #24]
    break;
 80022c8:	e008      	b.n	80022dc <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <LIS3MDL_MagReadXYZ+0x108>)
 80022cc:	61bb      	str	r3, [r7, #24]
    break;
 80022ce:	e005      	b.n	80022dc <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <LIS3MDL_MagReadXYZ+0x10c>)
 80022d2:	61bb      	str	r3, [r7, #24]
    break;
 80022d4:	e002      	b.n	80022dc <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <LIS3MDL_MagReadXYZ+0x110>)
 80022d8:	61bb      	str	r3, [r7, #24]
    break;    
 80022da:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
 80022e0:	e01b      	b.n	800231a <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	f107 0220 	add.w	r2, r7, #32
 80022ea:	4413      	add	r3, r2
 80022ec:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	7ffb      	ldrb	r3, [r7, #31]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230c:	ee17 2a90 	vmov	r2, s15
 8002310:	b212      	sxth	r2, r2
 8002312:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002314:	7ffb      	ldrb	r3, [r7, #31]
 8002316:	3301      	adds	r3, #1
 8002318:	77fb      	strb	r3, [r7, #31]
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d9e0      	bls.n	80022e2 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	3e0f5c29 	.word	0x3e0f5c29
 8002330:	3e947ae1 	.word	0x3e947ae1
 8002334:	3edc28f6 	.word	0x3edc28f6
 8002338:	3f147ae1 	.word	0x3f147ae1

0800233c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f87b 	bl	8002444 <LPS22HB_Init>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002364:	f7ff fc32 	bl	8001bcc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	210f      	movs	r1, #15
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fc50 	bl	8001c14 <SENSOR_IO_Read>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	74fb      	strb	r3, [r7, #19]
 8002396:	e013      	b.n	80023c0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	3328      	adds	r3, #40	; 0x28
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	7cfc      	ldrb	r4, [r7, #19]
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f7ff fc34 	bl	8001c14 <SENSOR_IO_Read>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4423      	add	r3, r4
 80023b6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	3301      	adds	r3, #1
 80023be:	74fb      	strb	r3, [r7, #19]
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d9e8      	bls.n	8002398 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	74fb      	strb	r3, [r7, #19]
 80023ca:	e010      	b.n	80023ee <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	f107 0218 	add.w	r2, r7, #24
 80023d2:	4413      	add	r3, r2
 80023d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023d8:	461a      	mov	r2, r3
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	3301      	adds	r3, #1
 80023ec:	74fb      	strb	r3, [r7, #19]
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d9eb      	bls.n	80023cc <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002404:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2264      	movs	r2, #100	; 0x64
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	da01      	bge.n	800241a <LPS22HB_P_ReadPressure+0x96>
 8002416:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800241a:	131b      	asrs	r3, r3, #12
 800241c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002440 <LPS22HB_P_ReadPressure+0xbc>
 800242c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002430:	eef0 7a66 	vmov.f32	s15, s13
}
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	42c80000 	.word	0x42c80000

08002444 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	211a      	movs	r1, #26
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fbdd 	bl	8001c14 <SENSOR_IO_Read>
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	211a      	movs	r1, #26
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fbb2 	bl	8001be0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2110      	movs	r1, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fbc6 	bl	8001c14 <SENSOR_IO_Read>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800249a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	f023 0302 	bic.w	r3, r3, #2
 80024a2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	2110      	movs	r1, #16
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fb93 	bl	8001be0 <SENSOR_IO_Write>
}  
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f8de 	bl	800268e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff f982 	bl	80017dc <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	e001      	b.n	80024e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e4:	f7ff f8ca 	bl	800167c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024e8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x20>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x24>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_IncTick+0x24>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000064 	.word	0x20000064
 8002518:	20001a54 	.word	0x20001a54

0800251c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_GetTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20001a54 	.word	0x20001a54

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff4c 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b6:	f7ff ff61 	bl	800257c <__NVIC_GetPriorityGrouping>
 80026ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7ff ffb1 	bl	8002628 <NVIC_EncodePriority>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff80 	bl	80025d4 <__NVIC_SetPriority>
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff54 	bl	8002598 <__NVIC_EnableIRQ>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002706:	e17f      	b.n	8002a08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8171 	beq.w	8002a02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d00b      	beq.n	8002740 <HAL_GPIO_Init+0x48>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d007      	beq.n	8002740 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002734:	2b11      	cmp	r3, #17
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b12      	cmp	r3, #18
 800273e:	d130      	bne.n	80027a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002776:	2201      	movs	r2, #1
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 0201 	and.w	r2, r3, #1
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d118      	bne.n	80027e0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027b4:	2201      	movs	r2, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	f003 0201 	and.w	r2, r3, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x128>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b12      	cmp	r3, #18
 800281e:	d123      	bne.n	8002868 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	6939      	ldr	r1, [r7, #16]
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80ac 	beq.w	8002a02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <HAL_GPIO_Init+0x330>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	4a5e      	ldr	r2, [pc, #376]	; (8002a28 <HAL_GPIO_Init+0x330>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6613      	str	r3, [r2, #96]	; 0x60
 80028b6:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <HAL_GPIO_Init+0x330>)
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028c2:	4a5a      	ldr	r2, [pc, #360]	; (8002a2c <HAL_GPIO_Init+0x334>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x242>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x338>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x23e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <HAL_GPIO_Init+0x33c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x23a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_GPIO_Init+0x340>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x236>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_GPIO_Init+0x344>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x232>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_GPIO_Init+0x348>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x22e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_GPIO_Init+0x34c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x22a>
 800291e:	2306      	movs	r3, #6
 8002920:	e00c      	b.n	800293c <HAL_GPIO_Init+0x244>
 8002922:	2307      	movs	r3, #7
 8002924:	e00a      	b.n	800293c <HAL_GPIO_Init+0x244>
 8002926:	2305      	movs	r3, #5
 8002928:	e008      	b.n	800293c <HAL_GPIO_Init+0x244>
 800292a:	2304      	movs	r3, #4
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x244>
 800292e:	2303      	movs	r3, #3
 8002930:	e004      	b.n	800293c <HAL_GPIO_Init+0x244>
 8002932:	2302      	movs	r3, #2
 8002934:	e002      	b.n	800293c <HAL_GPIO_Init+0x244>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x244>
 800293a:	2300      	movs	r3, #0
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	f002 0203 	and.w	r2, r2, #3
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	4093      	lsls	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800294c:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_GPIO_Init+0x334>)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_GPIO_Init+0x350>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800297e:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <HAL_GPIO_Init+0x350>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_GPIO_Init+0x350>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_GPIO_Init+0x350>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_GPIO_Init+0x350>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_GPIO_Init+0x350>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_GPIO_Init+0x350>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029fc:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_GPIO_Init+0x350>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f47f ae78 	bne.w	8002708 <HAL_GPIO_Init+0x10>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000800 	.word	0x48000800
 8002a38:	48000c00 	.word	0x48000c00
 8002a3c:	48001000 	.word	0x48001000
 8002a40:	48001400 	.word	0x48001400
 8002a44:	48001800 	.word	0x48001800
 8002a48:	40010400 	.word	0x40010400

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	041a      	lsls	r2, r3, #16
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	43d9      	mvns	r1, r3
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e081      	b.n	8002bc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8a8 	bl	8002c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	; 0x24
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	e006      	b.n	8002b38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d104      	bne.n	8002b4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	021a      	lsls	r2, r3, #8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69d9      	ldr	r1, [r3, #28]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e021      	b.n	8002c24 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f821 	bl	8002c40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	460b      	mov	r3, r1
 8002c68:	813b      	strh	r3, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	f040 80f9 	bne.w	8002e6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_I2C_Mem_Write+0x34>
 8002c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0ed      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x4e>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0e6      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002caa:	f7ff fc37 	bl	800251c <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2319      	movs	r3, #25
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fac3 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0d1      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2221      	movs	r2, #33	; 0x21
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf4:	88f8      	ldrh	r0, [r7, #6]
 8002cf6:	893a      	ldrh	r2, [r7, #8]
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4603      	mov	r3, r0
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f9d3 	bl	80030b0 <I2C_RequestMemoryWrite>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0a9      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2bff      	cmp	r3, #255	; 0xff
 8002d24:	d90e      	bls.n	8002d44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	22ff      	movs	r2, #255	; 0xff
 8002d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	8979      	ldrh	r1, [r7, #10]
 8002d34:	2300      	movs	r3, #0
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fba5 	bl	800348c <I2C_TransferConfig>
 8002d42:	e00f      	b.n	8002d64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	8979      	ldrh	r1, [r7, #10]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fb94 	bl	800348c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 faad 	bl	80032c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e07b      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d034      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x1c8>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d130      	bne.n	8002e1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fa3f 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e04d      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2bff      	cmp	r3, #255	; 0xff
 8002ddc:	d90e      	bls.n	8002dfc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	22ff      	movs	r2, #255	; 0xff
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	8979      	ldrh	r1, [r7, #10]
 8002dec:	2300      	movs	r3, #0
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fb49 	bl	800348c <I2C_TransferConfig>
 8002dfa:	e00f      	b.n	8002e1c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	8979      	ldrh	r1, [r7, #10]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fb38 	bl	800348c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d19e      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa8c 	bl	8003348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e01a      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_I2C_Mem_Write+0x224>)
 8002e4e:	400b      	ands	r3, r1
 8002e50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	fe00e800 	.word	0xfe00e800

08002e7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 80fd 	bne.w	800309e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x34>
 8002eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0f1      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Mem_Read+0x4e>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0ea      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ed2:	f7ff fb23 	bl	800251c <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2319      	movs	r3, #25
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f9af 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0d5      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2222      	movs	r2, #34	; 0x22
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f1c:	88f8      	ldrh	r0, [r7, #6]
 8002f1e:	893a      	ldrh	r2, [r7, #8]
 8002f20:	8979      	ldrh	r1, [r7, #10]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f913 	bl	8003158 <I2C_RequestMemoryRead>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0ad      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2bff      	cmp	r3, #255	; 0xff
 8002f4c:	d90e      	bls.n	8002f6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_I2C_Mem_Read+0x22c>)
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fa91 	bl	800348c <I2C_TransferConfig>
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <HAL_I2C_Mem_Read+0x22c>)
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fa80 	bl	800348c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	2200      	movs	r2, #0
 8002f94:	2104      	movs	r1, #4
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f956 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07c      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d034      	beq.n	800304c <HAL_I2C_Mem_Read+0x1d0>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d130      	bne.n	800304c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f927 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e04d      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	2bff      	cmp	r3, #255	; 0xff
 800300c:	d90e      	bls.n	800302c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fa31 	bl	800348c <I2C_TransferConfig>
 800302a:	e00f      	b.n	800304c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	b2da      	uxtb	r2, r3
 800303c:	8979      	ldrh	r1, [r7, #10]
 800303e:	2300      	movs	r3, #0
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fa20 	bl	800348c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d19a      	bne.n	8002f8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f974 	bl	8003348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e01a      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2220      	movs	r2, #32
 8003070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_I2C_Mem_Read+0x230>)
 800307e:	400b      	ands	r3, r1
 8003080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	80002400 	.word	0x80002400
 80030ac:	fe00e800 	.word	0xfe00e800

080030b0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <I2C_RequestMemoryWrite+0xa4>)
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f9d7 	bl	800348c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	69b9      	ldr	r1, [r7, #24]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f8f0 	bl	80032c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02c      	b.n	800314c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
 8003102:	e015      	b.n	8003130 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b29b      	uxth	r3, r3
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f8d6 	bl	80032c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e012      	b.n	800314c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003126:	893b      	ldrh	r3, [r7, #8]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2200      	movs	r2, #0
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f884 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	80002000 	.word	0x80002000

08003158 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	4b20      	ldr	r3, [pc, #128]	; (80031fc <I2C_RequestMemoryRead+0xa4>)
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f984 	bl	800348c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f89d 	bl	80032c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e02c      	b.n	80031f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319e:	893b      	ldrh	r3, [r7, #8]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
 80031a8:	e015      	b.n	80031d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031aa:	893b      	ldrh	r3, [r7, #8]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f883 	bl	80032c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e012      	b.n	80031f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2200      	movs	r2, #0
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f831 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	80002000 	.word	0x80002000

08003200 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d103      	bne.n	800321e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d007      	beq.n	800323c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	619a      	str	r2, [r3, #24]
  }
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003258:	e022      	b.n	80032a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d01e      	beq.n	80032a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7ff f95b 	bl	800251c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d113      	bne.n	80032a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e00f      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d0cd      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032d4:	e02c      	b.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f870 	bl	80033c0 <I2C_IsAcknowledgeFailed>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02a      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d01e      	beq.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7ff f913 	bl	800251c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d1cb      	bne.n	80032d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003354:	e028      	b.n	80033a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f830 	bl	80033c0 <I2C_IsAcknowledgeFailed>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e026      	b.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7ff f8d7 	bl	800251c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d113      	bne.n	80033a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e007      	b.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d1cf      	bne.n	8003356 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d151      	bne.n	800347e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033da:	e022      	b.n	8003422 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d01e      	beq.n	8003422 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e4:	f7ff f89a 	bl	800251c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d302      	bcc.n	80033fa <I2C_IsAcknowledgeFailed+0x3a>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f043 0220 	orr.w	r2, r3, #32
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e02e      	b.n	8003480 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d1d5      	bne.n	80033dc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2220      	movs	r2, #32
 800343e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fedd 	bl	8003200 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <I2C_IsAcknowledgeFailed+0xc8>)
 8003452:	400b      	ands	r3, r1
 8003454:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	fe00e800 	.word	0xfe00e800

0800348c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	817b      	strh	r3, [r7, #10]
 800349a:	4613      	mov	r3, r2
 800349c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	0d5b      	lsrs	r3, r3, #21
 80034a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <I2C_TransferConfig+0x58>)
 80034ae:	430b      	orrs	r3, r1
 80034b0:	43db      	mvns	r3, r3
 80034b2:	ea02 0103 	and.w	r1, r2, r3
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034bc:	7a7b      	ldrb	r3, [r7, #9]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	03ff63ff 	.word	0x03ff63ff

080034e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d138      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003508:	2302      	movs	r3, #2
 800350a:	e032      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_PWREx_GetVoltageRange+0x18>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035aa:	d130      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d038      	beq.n	800362c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2232      	movs	r2, #50	; 0x32
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9b      	lsrs	r3, r3, #18
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e0:	e002      	b.n	80035e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d102      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f2      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d110      	bne.n	800362c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e00f      	b.n	800362e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d007      	beq.n	800362c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003624:	4a05      	ldr	r2, [pc, #20]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800362a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40007000 	.word	0x40007000
 8003640:	20000000 	.word	0x20000000
 8003644:	431bde83 	.word	0x431bde83

08003648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e3d4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4ba1      	ldr	r3, [pc, #644]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	4b9e      	ldr	r3, [pc, #632]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80e4 	beq.w	8003844 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_RCC_OscConfig+0x4a>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	f040 808b 	bne.w	80037a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 8087 	bne.w	80037a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003692:	4b93      	ldr	r3, [pc, #588]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e3ac      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_RCC_OscConfig+0x7c>
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_OscConfig+0x88>
 80036c4:	4b86      	ldr	r3, [pc, #536]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d223      	bcs.n	800371c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fd73 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e38d      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e8:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036ee:	f043 0308 	orr.w	r3, r3, #8
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4977      	ldr	r1, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	4972      	ldr	r1, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
 800371a:	e025      	b.n	8003768 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800371c:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6f      	ldr	r2, [pc, #444]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b6d      	ldr	r3, [pc, #436]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	496a      	ldr	r1, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	4965      	ldr	r1, [pc, #404]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fd33 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e34d      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003768:	f000 fc36 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	495a      	ldr	r1, [pc, #360]	; (80038e4 <HAL_RCC_OscConfig+0x29c>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_OscConfig+0x2a0>)
 8003786:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x2a4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe f825 	bl	80017dc <HAL_InitTick>
 8003792:	4603      	mov	r3, r0
 8003794:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d052      	beq.n	8003842 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	e331      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d032      	beq.n	800380e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037a8:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a4c      	ldr	r2, [pc, #304]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037b4:	f7fe feb2 	bl	800251c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037bc:	f7fe feae 	bl	800251c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e31a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ce:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	493b      	ldr	r1, [pc, #236]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	4936      	ldr	r1, [pc, #216]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
 800380c:	e01a      	b.n	8003844 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800381a:	f7fe fe7f 	bl	800251c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003822:	f7fe fe7b 	bl	800251c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e2e7      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x1da>
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d074      	beq.n	800393a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x21a>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d10e      	bne.n	800387a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003862:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d064      	beq.n	8003938 <HAL_RCC_OscConfig+0x2f0>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d160      	bne.n	8003938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e2c4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x24a>
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e01d      	b.n	80038ce <HAL_RCC_OscConfig+0x286>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x26e>
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x286>
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01c      	beq.n	8003910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe fe21 	bl	800251c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038dc:	e011      	b.n	8003902 <HAL_RCC_OscConfig+0x2ba>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08007f58 	.word	0x08007f58
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe fe14 	bl	800251c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e280      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003902:	4baf      	ldr	r3, [pc, #700]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2a8>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fe04 	bl	800251c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fe00 	bl	800251c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e26c      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392a:	4ba5      	ldr	r3, [pc, #660]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x2d0>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d060      	beq.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d005      	beq.n	8003958 <HAL_RCC_OscConfig+0x310>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d119      	bne.n	8003986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d116      	bne.n	8003986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003958:	4b99      	ldr	r3, [pc, #612]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_OscConfig+0x328>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e249      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b93      	ldr	r3, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	4990      	ldr	r1, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003984:	e040      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d023      	beq.n	80039d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800398e:	4b8c      	ldr	r3, [pc, #560]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a8b      	ldr	r2, [pc, #556]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fdbf 	bl	800251c <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fe fdbb 	bl	800251c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e227      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b4:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	497c      	ldr	r1, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	e018      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d6:	4b7a      	ldr	r3, [pc, #488]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a79      	ldr	r2, [pc, #484]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe fd9b 	bl	800251c <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ea:	f7fe fd97 	bl	800251c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e203      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039fc:	4b70      	ldr	r3, [pc, #448]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d03c      	beq.n	8003a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01c      	beq.n	8003a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	4a67      	ldr	r2, [pc, #412]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fd76 	bl	800251c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe fd72 	bl	800251c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1de      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a46:	4b5e      	ldr	r3, [pc, #376]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <HAL_RCC_OscConfig+0x3ec>
 8003a54:	e01b      	b.n	8003a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a56:	4b5a      	ldr	r3, [pc, #360]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fe fd59 	bl	800251c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fe fd55 	bl	800251c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1c1      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a80:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ef      	bne.n	8003a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80a6 	beq.w	8003be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aa0:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aac:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d118      	bne.n	8003b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fd1c 	bl	800251c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fe fd18 	bl	800251c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e184      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4d8>
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1e:	e024      	b.n	8003b6a <HAL_RCC_OscConfig+0x522>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d110      	bne.n	8003b4a <HAL_RCC_OscConfig+0x502>
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b48:	e00f      	b.n	8003b6a <HAL_RCC_OscConfig+0x522>
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe fcd3 	bl	800251c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe fccf 	bl	800251c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e139      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ed      	beq.n	8003b7a <HAL_RCC_OscConfig+0x532>
 8003b9e:	e01a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fcbc 	bl	800251c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fcb8 	bl	800251c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d906      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e122      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc8:	4b90      	ldr	r3, [pc, #576]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e8      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd6:	7ffb      	ldrb	r3, [r7, #31]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4a8a      	ldr	r2, [pc, #552]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8108 	beq.w	8003e02 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	f040 80d0 	bne.w	8003d9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bfc:	4b83      	ldr	r3, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d130      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d127      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11f      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3c:	2a07      	cmp	r2, #7
 8003c3e:	bf14      	ite	ne
 8003c40:	2201      	movne	r2, #1
 8003c42:	2200      	moveq	r2, #0
 8003c44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d113      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	3b01      	subs	r3, #1
 8003c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d06e      	beq.n	8003d50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d069      	beq.n	8003d4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b7      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c94:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5c      	ldr	r2, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca0:	f7fe fc3c 	bl	800251c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fc38 	bl	800251c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0a4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc6:	4b51      	ldr	r3, [pc, #324]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x7c8>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cd6:	3a01      	subs	r2, #1
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce0:	0212      	lsls	r2, r2, #8
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0552      	lsls	r2, r2, #21
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0652      	lsls	r2, r2, #25
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d00:	0912      	lsrs	r2, r2, #4
 8003d02:	0452      	lsls	r2, r2, #17
 8003d04:	430a      	orrs	r2, r1
 8003d06:	4941      	ldr	r1, [pc, #260]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3e      	ldr	r2, [pc, #248]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d18:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a3b      	ldr	r2, [pc, #236]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d24:	f7fe fbfa 	bl	800251c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fbf6 	bl	800251c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e062      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4a:	e05a      	b.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e059      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d50:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d152      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d68:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d74:	f7fe fbd2 	bl	800251c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fe fbce 	bl	800251c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e03a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x734>
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d02d      	beq.n	8003dfe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dc0:	f023 0303 	bic.w	r3, r3, #3
 8003dc4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dcc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fe fba1 	bl	800251c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fe fb9d 	bl	800251c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e009      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x796>
 8003dfc:	e001      	b.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	f99d808c 	.word	0xf99d808c

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0c8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	4961      	ldr	r1, [pc, #388]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b0      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d04c      	beq.n	8003efe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d121      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09e      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e84:	4b50      	ldr	r3, [pc, #320]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e092      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e086      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eac:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e07e      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 0203 	bic.w	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	493f      	ldr	r1, [pc, #252]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ece:	f7fe fb25 	bl	800251c <HAL_GetTick>
 8003ed2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed6:	f7fe fb21 	bl	800251c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e066      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 020c 	and.w	r2, r3, #12
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d1eb      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	492c      	ldr	r1, [pc, #176]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d210      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	4924      	ldr	r1, [pc, #144]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e036      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8a:	f000 f825 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490c      	ldr	r1, [pc, #48]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fc14 	bl	80017dc <HAL_InitTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08007f58 	.word	0x08007f58
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000060 	.word	0x20000060

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe6:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d121      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d11e      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800400c:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e005      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004028:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d102      	bne.n	8004056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e004      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d101      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d134      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xa6>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d003      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0xac>
 800407c:	e005      	b.n	800408a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004080:	617b      	str	r3, [r7, #20]
      break;
 8004082:	e005      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004086:	617b      	str	r3, [r7, #20]
      break;
 8004088:	e002      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	617b      	str	r3, [r7, #20]
      break;
 800408e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	fb02 f203 	mul.w	r2, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	0e5b      	lsrs	r3, r3, #25
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	3301      	adds	r3, #1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d0:	69bb      	ldr	r3, [r7, #24]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08007f70 	.word	0x08007f70
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800410c:	f7ff fff0 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	08007f68 	.word	0x08007f68

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004138:	f7ff ffda 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0adb      	lsrs	r3, r3, #11
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08007f68 	.word	0x08007f68

08004160 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	220f      	movs	r2, #15
 800416e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0203 	and.w	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_RCC_GetClockConfig+0x60>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0207 	and.w	r2, r3, #7
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	601a      	str	r2, [r3, #0]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40022000 	.word	0x40022000

080041c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041dc:	f7ff f9d0 	bl	8003580 <HAL_PWREx_GetVoltageRange>
 80041e0:	6178      	str	r0, [r7, #20]
 80041e2:	e014      	b.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6593      	str	r3, [r2, #88]	; 0x58
 80041f0:	4b22      	ldr	r3, [pc, #136]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041fc:	f7ff f9c0 	bl	8003580 <HAL_PWREx_GetVoltageRange>
 8004200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	d10b      	bne.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d919      	bls.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2ba0      	cmp	r3, #160	; 0xa0
 8004220:	d902      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004222:	2302      	movs	r3, #2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e013      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e010      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d902      	bls.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004234:	2303      	movs	r3, #3
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e00a      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d102      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004240:	2302      	movs	r3, #2
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e004      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b70      	cmp	r3, #112	; 0x70
 800424a:	d101      	bne.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800424c:	2301      	movs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 0207 	bic.w	r2, r3, #7
 8004258:	4909      	ldr	r1, [pc, #36]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40022000 	.word	0x40022000

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800428c:	2300      	movs	r3, #0
 800428e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004290:	2300      	movs	r3, #0
 8004292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	2b00      	cmp	r3, #0
 800429e:	d041      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a8:	d02a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ae:	d824      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ba:	d81e      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c4:	d010      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042c6:	e018      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042c8:	4b86      	ldr	r3, [pc, #536]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a85      	ldr	r2, [pc, #532]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d4:	e015      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fabb 	bl	8004858 <RCCEx_PLLSAI1_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042e6:	e00c      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3320      	adds	r3, #32
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fba6 	bl	8004a40 <RCCEx_PLLSAI2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	74fb      	strb	r3, [r7, #19]
      break;
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004308:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004316:	4973      	ldr	r1, [pc, #460]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800431e:	e001      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d041      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004338:	d02a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800433a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800433e:	d824      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004344:	d008      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434a:	d81e      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004354:	d010      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004356:	e018      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004358:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a61      	ldr	r2, [pc, #388]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004364:	e015      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fa73 	bl	8004858 <RCCEx_PLLSAI1_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004376:	e00c      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3320      	adds	r3, #32
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb5e 	bl	8004a40 <RCCEx_PLLSAI2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	74fb      	strb	r3, [r7, #19]
      break;
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004398:	4b52      	ldr	r3, [pc, #328]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a6:	494f      	ldr	r1, [pc, #316]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ae:	e001      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a0 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043dc:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	4a40      	ldr	r2, [pc, #256]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6593      	str	r3, [r2, #88]	; 0x58
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f8:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004404:	f7fe f88a 	bl	800251c <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800440a:	e009      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fe f886 	bl	800251c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d902      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	74fb      	strb	r3, [r7, #19]
        break;
 800441e:	e005      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004420:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ef      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d15c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004432:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	429a      	cmp	r2, r3
 800444e:	d019      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fe f845 	bl	800251c <HAL_GetTick>
 8004492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004494:	e00b      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe f841 	bl	800251c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d902      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	74fb      	strb	r3, [r7, #19]
            break;
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ec      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d2:	4904      	ldr	r1, [pc, #16]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044da:	e009      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
 80044e0:	e006      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f0:	7c7b      	ldrb	r3, [r7, #17]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4b9e      	ldr	r3, [pc, #632]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	4a9d      	ldr	r2, [pc, #628]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800450e:	4b98      	ldr	r3, [pc, #608]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 0203 	bic.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	4994      	ldr	r1, [pc, #592]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004530:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 020c 	bic.w	r2, r3, #12
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	498c      	ldr	r1, [pc, #560]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004552:	4b87      	ldr	r3, [pc, #540]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4983      	ldr	r1, [pc, #524]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004574:	4b7e      	ldr	r3, [pc, #504]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	497b      	ldr	r1, [pc, #492]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	4972      	ldr	r1, [pc, #456]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b8:	4b6d      	ldr	r3, [pc, #436]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	496a      	ldr	r1, [pc, #424]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	4961      	ldr	r1, [pc, #388]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045fc:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460a:	4959      	ldr	r1, [pc, #356]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800461e:	4b54      	ldr	r3, [pc, #336]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	4950      	ldr	r1, [pc, #320]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	4948      	ldr	r1, [pc, #288]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004662:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	493f      	ldr	r1, [pc, #252]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d028      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004684:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a2:	d106      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a31      	ldr	r2, [pc, #196]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ae:	60d3      	str	r3, [r2, #12]
 80046b0:	e011      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	2101      	movs	r1, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f8c8 	bl	8004858 <RCCEx_PLLSAI1_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d028      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	491f      	ldr	r1, [pc, #124]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004700:	d106      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470c:	60d3      	str	r3, [r2, #12]
 800470e:	e011      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f899 	bl	8004858 <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	4908      	ldr	r1, [pc, #32]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800475e:	d109      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a02      	ldr	r2, [pc, #8]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476a:	60d3      	str	r3, [r2, #12]
 800476c:	e014      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800477c:	d10c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	2101      	movs	r1, #1
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f867 	bl	8004858 <RCCEx_PLLSAI1_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a4:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	4928      	ldr	r1, [pc, #160]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2102      	movs	r1, #2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f844 	bl	8004858 <RCCEx_PLLSAI1_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	74bb      	strb	r3, [r7, #18]
 80047de:	e011      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3320      	adds	r3, #32
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f925 	bl	8004a40 <RCCEx_PLLSAI2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004810:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004842:	4904      	ldr	r1, [pc, #16]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800484a:	7cbb      	ldrb	r3, [r7, #18]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000

08004858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004866:	4b75      	ldr	r3, [pc, #468]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d018      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004872:	4b72      	ldr	r3, [pc, #456]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0203 	and.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d10d      	bne.n	800489e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
       ||
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800488a:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
       ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d047      	beq.n	800492e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e044      	b.n	800492e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d018      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x86>
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d825      	bhi.n	80048fc <RCCEx_PLLSAI1_Config+0xa4>
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d002      	beq.n	80048ba <RCCEx_PLLSAI1_Config+0x62>
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d009      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x74>
 80048b8:	e020      	b.n	80048fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048ba:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11d      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ca:	e01a      	b.n	8004902 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048cc:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048dc:	e013      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048de:	4b57      	ldr	r3, [pc, #348]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ea:	4b54      	ldr	r3, [pc, #336]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048fa:	e006      	b.n	800490a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004900:	e004      	b.n	800490c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490a:	bf00      	nop
    }

    if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004912:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	3b01      	subs	r3, #1
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	430b      	orrs	r3, r1
 8004928:	4944      	ldr	r1, [pc, #272]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d17d      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800493e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004940:	f7fd fdec 	bl	800251c <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004946:	e009      	b.n	800495c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004948:	f7fd fde8 	bl	800251c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d902      	bls.n	800495c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	73fb      	strb	r3, [r7, #15]
        break;
 800495a:	e005      	b.n	8004968 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800495c:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ef      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d160      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d111      	bne.n	8004998 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004974:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800497c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	0211      	lsls	r1, r2, #8
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68d2      	ldr	r2, [r2, #12]
 800498a:	0912      	lsrs	r2, r2, #4
 800498c:	0452      	lsls	r2, r2, #17
 800498e:	430a      	orrs	r2, r1
 8004990:	492a      	ldr	r1, [pc, #168]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
 8004996:	e027      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d112      	bne.n	80049c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800499e:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	0211      	lsls	r1, r2, #8
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6912      	ldr	r2, [r2, #16]
 80049b4:	0852      	lsrs	r2, r2, #1
 80049b6:	3a01      	subs	r2, #1
 80049b8:	0552      	lsls	r2, r2, #21
 80049ba:	430a      	orrs	r2, r1
 80049bc:	491f      	ldr	r1, [pc, #124]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	610b      	str	r3, [r1, #16]
 80049c2:	e011      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	0211      	lsls	r1, r2, #8
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6952      	ldr	r2, [r2, #20]
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0652      	lsls	r2, r2, #25
 80049e0:	430a      	orrs	r2, r1
 80049e2:	4916      	ldr	r1, [pc, #88]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fd fd92 	bl	800251c <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fc:	f7fd fd8e 	bl	800251c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a0e:	e005      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ef      	beq.n	80049fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000

08004a40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d018      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a5a:	4b67      	ldr	r3, [pc, #412]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0203 	and.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d10d      	bne.n	8004a86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a72:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
       ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d047      	beq.n	8004b16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	e044      	b.n	8004b16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d018      	beq.n	8004ac6 <RCCEx_PLLSAI2_Config+0x86>
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d825      	bhi.n	8004ae4 <RCCEx_PLLSAI2_Config+0xa4>
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d002      	beq.n	8004aa2 <RCCEx_PLLSAI2_Config+0x62>
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d009      	beq.n	8004ab4 <RCCEx_PLLSAI2_Config+0x74>
 8004aa0:	e020      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aa2:	4b55      	ldr	r3, [pc, #340]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11d      	bne.n	8004aea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab2:	e01a      	b.n	8004aea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d116      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e013      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ac6:	4b4c      	ldr	r3, [pc, #304]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ad2:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ae2:	e006      	b.n	8004af2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e004      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004afa:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	4939      	ldr	r1, [pc, #228]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d167      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a35      	ldr	r2, [pc, #212]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd fcf8 	bl	800251c <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b2e:	e009      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b30:	f7fd fcf4 	bl	800251c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d902      	bls.n	8004b44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	73fb      	strb	r3, [r7, #15]
        break;
 8004b42:	e005      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b44:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ef      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d14a      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b5c:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6892      	ldr	r2, [r2, #8]
 8004b6c:	0211      	lsls	r1, r2, #8
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	0912      	lsrs	r2, r2, #4
 8004b74:	0452      	lsls	r2, r2, #17
 8004b76:	430a      	orrs	r2, r1
 8004b78:	491f      	ldr	r1, [pc, #124]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	614b      	str	r3, [r1, #20]
 8004b7e:	e011      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6892      	ldr	r2, [r2, #8]
 8004b90:	0211      	lsls	r1, r2, #8
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6912      	ldr	r2, [r2, #16]
 8004b96:	0852      	lsrs	r2, r2, #1
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0652      	lsls	r2, r2, #25
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd fcb4 	bl	800251c <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bb6:	e009      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bb8:	f7fd fcb0 	bl	800251c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bca:	e005      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000

08004bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e095      	b.n	8004d3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d108      	bne.n	8004c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d009      	beq.n	8004c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
 8004c26:	e005      	b.n	8004c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fd3c 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c74:	d902      	bls.n	8004c7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e002      	b.n	8004c82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c8a:	d007      	beq.n	8004c9c <HAL_SPI_Init+0xa0>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c94:	d002      	beq.n	8004c9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	ea42 0103 	orr.w	r1, r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	0c1b      	lsrs	r3, r3, #16
 8004cf8:	f003 0204 	and.w	r2, r3, #4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d18:	ea42 0103 	orr.w	r1, r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e049      	b.n	8004de8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f841 	bl	8004df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 f9f7 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d001      	beq.n	8004e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e04f      	b.n	8004ebc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x76>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d018      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x76>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x76>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x76>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x76>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIM_Base_Start_IT+0x76>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <HAL_TIM_Base_Start_IT+0xd8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d115      	bne.n	8004ea6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d015      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0xb4>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	d011      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	e008      	b.n	8004eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e000      	b.n	8004eba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40013400 	.word	0x40013400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	00010007 	.word	0x00010007

08004ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0202 	mvn.w	r2, #2
 8004f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f905 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8f7 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f908 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0204 	mvn.w	r2, #4
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8db 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8cd 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8de 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d122      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d11b      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0208 	mvn.w	r2, #8
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8b1 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8a3 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f8b4 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d122      	bne.n	800503c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d11b      	bne.n	800503c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0210 	mvn.w	r2, #16
 800500c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2208      	movs	r2, #8
 8005012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f887 	bl	8005136 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f879 	bl	8005122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f88a 	bl	800514a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0201 	mvn.w	r2, #1
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fc faf2 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f914 	bl	80052bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a2:	d10e      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d107      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f907 	bl	80052d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d10e      	bne.n	80050ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f838 	bl	800515e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d10e      	bne.n	800511a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d107      	bne.n	800511a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f06f 0220 	mvn.w	r2, #32
 8005112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f8c7 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a40      	ldr	r2, [pc, #256]	; (8005288 <TIM_Base_SetConfig+0x114>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3d      	ldr	r2, [pc, #244]	; (800528c <TIM_Base_SetConfig+0x118>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3c      	ldr	r2, [pc, #240]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3b      	ldr	r2, [pc, #236]	; (8005294 <TIM_Base_SetConfig+0x120>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a3a      	ldr	r2, [pc, #232]	; (8005298 <TIM_Base_SetConfig+0x124>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2f      	ldr	r2, [pc, #188]	; (8005288 <TIM_Base_SetConfig+0x114>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d01f      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d01b      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2c      	ldr	r2, [pc, #176]	; (800528c <TIM_Base_SetConfig+0x118>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d017      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2b      	ldr	r2, [pc, #172]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2a      	ldr	r2, [pc, #168]	; (8005294 <TIM_Base_SetConfig+0x120>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00f      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a29      	ldr	r2, [pc, #164]	; (8005298 <TIM_Base_SetConfig+0x124>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00b      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a28      	ldr	r2, [pc, #160]	; (800529c <TIM_Base_SetConfig+0x128>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <TIM_Base_SetConfig+0x12c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_Base_SetConfig+0x9a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a26      	ldr	r2, [pc, #152]	; (80052a4 <TIM_Base_SetConfig+0x130>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a10      	ldr	r2, [pc, #64]	; (8005288 <TIM_Base_SetConfig+0x114>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0xf8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a12      	ldr	r2, [pc, #72]	; (8005298 <TIM_Base_SetConfig+0x124>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0xf8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a11      	ldr	r2, [pc, #68]	; (800529c <TIM_Base_SetConfig+0x128>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0xf8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <TIM_Base_SetConfig+0x12c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0xf8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <TIM_Base_SetConfig+0x130>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d103      	bne.n	8005274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	615a      	str	r2, [r3, #20]
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40013400 	.word	0x40013400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e040      	b.n	8005378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fa24 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8c0 	bl	80054a8 <UART_SetConfig>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e022      	b.n	8005378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb3e 	bl	80059bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800534e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800535e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fbc5 	bl	8005b00 <UART_CheckIdleState>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 8082 	bne.w	800549e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Transmit+0x26>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e07a      	b.n	80054a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Transmit+0x38>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e073      	b.n	80054a0 <HAL_UART_Transmit+0x120>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2221      	movs	r2, #33	; 0x21
 80053cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fd f8a5 	bl	800251c <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Transmit+0x80>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005410:	e02d      	b.n	800546e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fbb8 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e039      	b.n	80054a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543e:	b292      	uxth	r2, r2
 8005440:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3302      	adds	r3, #2
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e008      	b.n	800545c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b292      	uxth	r2, r2
 8005454:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1cb      	bne.n	8005412 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	2140      	movs	r1, #64	; 0x40
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fb84 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e005      	b.n	80054a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e000      	b.n	80054a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
  }
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4bad      	ldr	r3, [pc, #692]	; (8005788 <UART_SetConfig+0x2e0>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	69f9      	ldr	r1, [r7, #28]
 80054dc:	430b      	orrs	r3, r1
 80054de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4aa2      	ldr	r2, [pc, #648]	; (800578c <UART_SetConfig+0x2e4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	4313      	orrs	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a99      	ldr	r2, [pc, #612]	; (8005790 <UART_SetConfig+0x2e8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d121      	bne.n	8005572 <UART_SetConfig+0xca>
 800552e:	4b99      	ldr	r3, [pc, #612]	; (8005794 <UART_SetConfig+0x2ec>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d817      	bhi.n	800556c <UART_SetConfig+0xc4>
 800553c:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x9c>)
 800553e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005542:	bf00      	nop
 8005544:	08005555 	.word	0x08005555
 8005548:	08005561 	.word	0x08005561
 800554c:	0800555b 	.word	0x0800555b
 8005550:	08005567 	.word	0x08005567
 8005554:	2301      	movs	r3, #1
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	e0e7      	b.n	800572a <UART_SetConfig+0x282>
 800555a:	2302      	movs	r3, #2
 800555c:	76fb      	strb	r3, [r7, #27]
 800555e:	e0e4      	b.n	800572a <UART_SetConfig+0x282>
 8005560:	2304      	movs	r3, #4
 8005562:	76fb      	strb	r3, [r7, #27]
 8005564:	e0e1      	b.n	800572a <UART_SetConfig+0x282>
 8005566:	2308      	movs	r3, #8
 8005568:	76fb      	strb	r3, [r7, #27]
 800556a:	e0de      	b.n	800572a <UART_SetConfig+0x282>
 800556c:	2310      	movs	r3, #16
 800556e:	76fb      	strb	r3, [r7, #27]
 8005570:	e0db      	b.n	800572a <UART_SetConfig+0x282>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a88      	ldr	r2, [pc, #544]	; (8005798 <UART_SetConfig+0x2f0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d132      	bne.n	80055e2 <UART_SetConfig+0x13a>
 800557c:	4b85      	ldr	r3, [pc, #532]	; (8005794 <UART_SetConfig+0x2ec>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d828      	bhi.n	80055dc <UART_SetConfig+0x134>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0xe8>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055dd 	.word	0x080055dd
 8005598:	080055dd 	.word	0x080055dd
 800559c:	080055dd 	.word	0x080055dd
 80055a0:	080055d1 	.word	0x080055d1
 80055a4:	080055dd 	.word	0x080055dd
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	080055dd 	.word	0x080055dd
 80055b0:	080055cb 	.word	0x080055cb
 80055b4:	080055dd 	.word	0x080055dd
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055dd 	.word	0x080055dd
 80055c0:	080055d7 	.word	0x080055d7
 80055c4:	2300      	movs	r3, #0
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e0af      	b.n	800572a <UART_SetConfig+0x282>
 80055ca:	2302      	movs	r3, #2
 80055cc:	76fb      	strb	r3, [r7, #27]
 80055ce:	e0ac      	b.n	800572a <UART_SetConfig+0x282>
 80055d0:	2304      	movs	r3, #4
 80055d2:	76fb      	strb	r3, [r7, #27]
 80055d4:	e0a9      	b.n	800572a <UART_SetConfig+0x282>
 80055d6:	2308      	movs	r3, #8
 80055d8:	76fb      	strb	r3, [r7, #27]
 80055da:	e0a6      	b.n	800572a <UART_SetConfig+0x282>
 80055dc:	2310      	movs	r3, #16
 80055de:	76fb      	strb	r3, [r7, #27]
 80055e0:	e0a3      	b.n	800572a <UART_SetConfig+0x282>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6d      	ldr	r2, [pc, #436]	; (800579c <UART_SetConfig+0x2f4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d120      	bne.n	800562e <UART_SetConfig+0x186>
 80055ec:	4b69      	ldr	r3, [pc, #420]	; (8005794 <UART_SetConfig+0x2ec>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d013      	beq.n	8005622 <UART_SetConfig+0x17a>
 80055fa:	2b30      	cmp	r3, #48	; 0x30
 80055fc:	d814      	bhi.n	8005628 <UART_SetConfig+0x180>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d009      	beq.n	8005616 <UART_SetConfig+0x16e>
 8005602:	2b20      	cmp	r3, #32
 8005604:	d810      	bhi.n	8005628 <UART_SetConfig+0x180>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <UART_SetConfig+0x168>
 800560a:	2b10      	cmp	r3, #16
 800560c:	d006      	beq.n	800561c <UART_SetConfig+0x174>
 800560e:	e00b      	b.n	8005628 <UART_SetConfig+0x180>
 8005610:	2300      	movs	r3, #0
 8005612:	76fb      	strb	r3, [r7, #27]
 8005614:	e089      	b.n	800572a <UART_SetConfig+0x282>
 8005616:	2302      	movs	r3, #2
 8005618:	76fb      	strb	r3, [r7, #27]
 800561a:	e086      	b.n	800572a <UART_SetConfig+0x282>
 800561c:	2304      	movs	r3, #4
 800561e:	76fb      	strb	r3, [r7, #27]
 8005620:	e083      	b.n	800572a <UART_SetConfig+0x282>
 8005622:	2308      	movs	r3, #8
 8005624:	76fb      	strb	r3, [r7, #27]
 8005626:	e080      	b.n	800572a <UART_SetConfig+0x282>
 8005628:	2310      	movs	r3, #16
 800562a:	76fb      	strb	r3, [r7, #27]
 800562c:	e07d      	b.n	800572a <UART_SetConfig+0x282>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <UART_SetConfig+0x2f8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d120      	bne.n	800567a <UART_SetConfig+0x1d2>
 8005638:	4b56      	ldr	r3, [pc, #344]	; (8005794 <UART_SetConfig+0x2ec>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005642:	2bc0      	cmp	r3, #192	; 0xc0
 8005644:	d013      	beq.n	800566e <UART_SetConfig+0x1c6>
 8005646:	2bc0      	cmp	r3, #192	; 0xc0
 8005648:	d814      	bhi.n	8005674 <UART_SetConfig+0x1cc>
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d009      	beq.n	8005662 <UART_SetConfig+0x1ba>
 800564e:	2b80      	cmp	r3, #128	; 0x80
 8005650:	d810      	bhi.n	8005674 <UART_SetConfig+0x1cc>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <UART_SetConfig+0x1b4>
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d006      	beq.n	8005668 <UART_SetConfig+0x1c0>
 800565a:	e00b      	b.n	8005674 <UART_SetConfig+0x1cc>
 800565c:	2300      	movs	r3, #0
 800565e:	76fb      	strb	r3, [r7, #27]
 8005660:	e063      	b.n	800572a <UART_SetConfig+0x282>
 8005662:	2302      	movs	r3, #2
 8005664:	76fb      	strb	r3, [r7, #27]
 8005666:	e060      	b.n	800572a <UART_SetConfig+0x282>
 8005668:	2304      	movs	r3, #4
 800566a:	76fb      	strb	r3, [r7, #27]
 800566c:	e05d      	b.n	800572a <UART_SetConfig+0x282>
 800566e:	2308      	movs	r3, #8
 8005670:	76fb      	strb	r3, [r7, #27]
 8005672:	e05a      	b.n	800572a <UART_SetConfig+0x282>
 8005674:	2310      	movs	r3, #16
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	e057      	b.n	800572a <UART_SetConfig+0x282>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a49      	ldr	r2, [pc, #292]	; (80057a4 <UART_SetConfig+0x2fc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d125      	bne.n	80056d0 <UART_SetConfig+0x228>
 8005684:	4b43      	ldr	r3, [pc, #268]	; (8005794 <UART_SetConfig+0x2ec>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005692:	d017      	beq.n	80056c4 <UART_SetConfig+0x21c>
 8005694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005698:	d817      	bhi.n	80056ca <UART_SetConfig+0x222>
 800569a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569e:	d00b      	beq.n	80056b8 <UART_SetConfig+0x210>
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d811      	bhi.n	80056ca <UART_SetConfig+0x222>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <UART_SetConfig+0x20a>
 80056aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ae:	d006      	beq.n	80056be <UART_SetConfig+0x216>
 80056b0:	e00b      	b.n	80056ca <UART_SetConfig+0x222>
 80056b2:	2300      	movs	r3, #0
 80056b4:	76fb      	strb	r3, [r7, #27]
 80056b6:	e038      	b.n	800572a <UART_SetConfig+0x282>
 80056b8:	2302      	movs	r3, #2
 80056ba:	76fb      	strb	r3, [r7, #27]
 80056bc:	e035      	b.n	800572a <UART_SetConfig+0x282>
 80056be:	2304      	movs	r3, #4
 80056c0:	76fb      	strb	r3, [r7, #27]
 80056c2:	e032      	b.n	800572a <UART_SetConfig+0x282>
 80056c4:	2308      	movs	r3, #8
 80056c6:	76fb      	strb	r3, [r7, #27]
 80056c8:	e02f      	b.n	800572a <UART_SetConfig+0x282>
 80056ca:	2310      	movs	r3, #16
 80056cc:	76fb      	strb	r3, [r7, #27]
 80056ce:	e02c      	b.n	800572a <UART_SetConfig+0x282>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	; (800578c <UART_SetConfig+0x2e4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d125      	bne.n	8005726 <UART_SetConfig+0x27e>
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <UART_SetConfig+0x2ec>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e8:	d017      	beq.n	800571a <UART_SetConfig+0x272>
 80056ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ee:	d817      	bhi.n	8005720 <UART_SetConfig+0x278>
 80056f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f4:	d00b      	beq.n	800570e <UART_SetConfig+0x266>
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fa:	d811      	bhi.n	8005720 <UART_SetConfig+0x278>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <UART_SetConfig+0x260>
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d006      	beq.n	8005714 <UART_SetConfig+0x26c>
 8005706:	e00b      	b.n	8005720 <UART_SetConfig+0x278>
 8005708:	2300      	movs	r3, #0
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x282>
 800570e:	2302      	movs	r3, #2
 8005710:	76fb      	strb	r3, [r7, #27]
 8005712:	e00a      	b.n	800572a <UART_SetConfig+0x282>
 8005714:	2304      	movs	r3, #4
 8005716:	76fb      	strb	r3, [r7, #27]
 8005718:	e007      	b.n	800572a <UART_SetConfig+0x282>
 800571a:	2308      	movs	r3, #8
 800571c:	76fb      	strb	r3, [r7, #27]
 800571e:	e004      	b.n	800572a <UART_SetConfig+0x282>
 8005720:	2310      	movs	r3, #16
 8005722:	76fb      	strb	r3, [r7, #27]
 8005724:	e001      	b.n	800572a <UART_SetConfig+0x282>
 8005726:	2310      	movs	r3, #16
 8005728:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <UART_SetConfig+0x2e4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	f040 8087 	bne.w	8005844 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005736:	7efb      	ldrb	r3, [r7, #27]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d837      	bhi.n	80057ac <UART_SetConfig+0x304>
 800573c:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <UART_SetConfig+0x29c>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005769 	.word	0x08005769
 8005748:	080057ad 	.word	0x080057ad
 800574c:	08005771 	.word	0x08005771
 8005750:	080057ad 	.word	0x080057ad
 8005754:	08005777 	.word	0x08005777
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080057ad 	.word	0x080057ad
 8005760:	080057ad 	.word	0x080057ad
 8005764:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fe fcce 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 800576c:	6178      	str	r0, [r7, #20]
        break;
 800576e:	e022      	b.n	80057b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <UART_SetConfig+0x300>)
 8005772:	617b      	str	r3, [r7, #20]
        break;
 8005774:	e01f      	b.n	80057b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fe fc2f 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800577a:	6178      	str	r0, [r7, #20]
        break;
 800577c:	e01b      	b.n	80057b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	617b      	str	r3, [r7, #20]
        break;
 8005784:	e017      	b.n	80057b6 <UART_SetConfig+0x30e>
 8005786:	bf00      	nop
 8005788:	efff69f3 	.word	0xefff69f3
 800578c:	40008000 	.word	0x40008000
 8005790:	40013800 	.word	0x40013800
 8005794:	40021000 	.word	0x40021000
 8005798:	40004400 	.word	0x40004400
 800579c:	40004800 	.word	0x40004800
 80057a0:	40004c00 	.word	0x40004c00
 80057a4:	40005000 	.word	0x40005000
 80057a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	76bb      	strb	r3, [r7, #26]
        break;
 80057b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80f1 	beq.w	80059a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d305      	bcc.n	80057da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d902      	bls.n	80057e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	76bb      	strb	r3, [r7, #26]
 80057de:	e0df      	b.n	80059a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f04f 0100 	mov.w	r1, #0
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	020b      	lsls	r3, r1, #8
 80057f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057f6:	0202      	lsls	r2, r0, #8
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	6849      	ldr	r1, [r1, #4]
 80057fc:	0849      	lsrs	r1, r1, #1
 80057fe:	4608      	mov	r0, r1
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	1814      	adds	r4, r2, r0
 8005806:	eb43 0501 	adc.w	r5, r3, r1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	461a      	mov	r2, r3
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	4620      	mov	r0, r4
 8005816:	4629      	mov	r1, r5
 8005818:	f7fb f9a8 	bl	8000b6c <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582a:	d308      	bcc.n	800583e <UART_SetConfig+0x396>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005832:	d204      	bcs.n	800583e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	60da      	str	r2, [r3, #12]
 800583c:	e0b0      	b.n	80059a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	76bb      	strb	r3, [r7, #26]
 8005842:	e0ad      	b.n	80059a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584c:	d15c      	bne.n	8005908 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800584e:	7efb      	ldrb	r3, [r7, #27]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d828      	bhi.n	80058a6 <UART_SetConfig+0x3fe>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x3b4>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	08005881 	.word	0x08005881
 8005860:	08005889 	.word	0x08005889
 8005864:	08005891 	.word	0x08005891
 8005868:	080058a7 	.word	0x080058a7
 800586c:	08005897 	.word	0x08005897
 8005870:	080058a7 	.word	0x080058a7
 8005874:	080058a7 	.word	0x080058a7
 8005878:	080058a7 	.word	0x080058a7
 800587c:	0800589f 	.word	0x0800589f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe fc42 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8005884:	6178      	str	r0, [r7, #20]
        break;
 8005886:	e013      	b.n	80058b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005888:	f7fe fc54 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 800588c:	6178      	str	r0, [r7, #20]
        break;
 800588e:	e00f      	b.n	80058b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005890:	4b49      	ldr	r3, [pc, #292]	; (80059b8 <UART_SetConfig+0x510>)
 8005892:	617b      	str	r3, [r7, #20]
        break;
 8005894:	e00c      	b.n	80058b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005896:	f7fe fb9f 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800589a:	6178      	str	r0, [r7, #20]
        break;
 800589c:	e008      	b.n	80058b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a2:	617b      	str	r3, [r7, #20]
        break;
 80058a4:	e004      	b.n	80058b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	76bb      	strb	r3, [r7, #26]
        break;
 80058ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d074      	beq.n	80059a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	005a      	lsls	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b0f      	cmp	r3, #15
 80058d2:	d916      	bls.n	8005902 <UART_SetConfig+0x45a>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058da:	d212      	bcs.n	8005902 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f023 030f 	bic.w	r3, r3, #15
 80058e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	89fb      	ldrh	r3, [r7, #14]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	89fa      	ldrh	r2, [r7, #14]
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	e04e      	b.n	80059a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	76bb      	strb	r3, [r7, #26]
 8005906:	e04b      	b.n	80059a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005908:	7efb      	ldrb	r3, [r7, #27]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d827      	bhi.n	800595e <UART_SetConfig+0x4b6>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x46c>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005939 	.word	0x08005939
 8005918:	08005941 	.word	0x08005941
 800591c:	08005949 	.word	0x08005949
 8005920:	0800595f 	.word	0x0800595f
 8005924:	0800594f 	.word	0x0800594f
 8005928:	0800595f 	.word	0x0800595f
 800592c:	0800595f 	.word	0x0800595f
 8005930:	0800595f 	.word	0x0800595f
 8005934:	08005957 	.word	0x08005957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005938:	f7fe fbe6 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 800593c:	6178      	str	r0, [r7, #20]
        break;
 800593e:	e013      	b.n	8005968 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005940:	f7fe fbf8 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8005944:	6178      	str	r0, [r7, #20]
        break;
 8005946:	e00f      	b.n	8005968 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <UART_SetConfig+0x510>)
 800594a:	617b      	str	r3, [r7, #20]
        break;
 800594c:	e00c      	b.n	8005968 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594e:	f7fe fb43 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8005952:	6178      	str	r0, [r7, #20]
        break;
 8005954:	e008      	b.n	8005968 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595a:	617b      	str	r3, [r7, #20]
        break;
 800595c:	e004      	b.n	8005968 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	76bb      	strb	r3, [r7, #26]
        break;
 8005966:	bf00      	nop
    }

    if (pclk != 0U)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d018      	beq.n	80059a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	085a      	lsrs	r2, r3, #1
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	441a      	add	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	b29b      	uxth	r3, r3
 8005982:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d908      	bls.n	800599c <UART_SetConfig+0x4f4>
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005990:	d204      	bcs.n	800599c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	e001      	b.n	80059a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bdb0      	pop	{r4, r5, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	00f42400 	.word	0x00f42400

080059bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aba:	d10a      	bne.n	8005ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b10:	f7fc fd04 	bl	800251c <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10e      	bne.n	8005b42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f82d 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e023      	b.n	8005b8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d10e      	bne.n	8005b6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f817 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e00d      	b.n	8005b8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba2:	e05e      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d05a      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bac:	f7fc fcb6 	bl	800251c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11b      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e043      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d02c      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c16:	d124      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c20:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e00f      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d091      	beq.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	4603      	mov	r3, r0
 8005c92:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c9c:	2b84      	cmp	r3, #132	; 0x84
 8005c9e:	d005      	beq.n	8005cac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3303      	adds	r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cbe:	f000 fadf 	bl	8006280 <vTaskStartScheduler>
  
  return osOK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cca:	b089      	sub	sp, #36	; 0x24
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d020      	beq.n	8005d1c <osThreadCreate+0x54>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01c      	beq.n	8005d1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685c      	ldr	r4, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681d      	ldr	r5, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691e      	ldr	r6, [r3, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ffc8 	bl	8005c8a <makeFreeRtosPriority>
 8005cfa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d04:	9202      	str	r2, [sp, #8]
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9100      	str	r1, [sp, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 f8ed 	bl	8005ef0 <xTaskCreateStatic>
 8005d16:	4603      	mov	r3, r0
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e01c      	b.n	8005d56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685c      	ldr	r4, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d28:	b29e      	uxth	r6, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ffaa 	bl	8005c8a <makeFreeRtosPriority>
 8005d36:	4602      	mov	r2, r0
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	4632      	mov	r2, r6
 8005d44:	4629      	mov	r1, r5
 8005d46:	4620      	mov	r0, r4
 8005d48:	f000 f92f 	bl	8005faa <xTaskCreate>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d001      	beq.n	8005d56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e000      	b.n	8005d58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <osDelay+0x16>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	e000      	b.n	8005d78 <osDelay+0x18>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fa4d 	bl	8006218 <vTaskDelay>
  
  return osOK;
 8005d7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f103 0208 	add.w	r2, r3, #8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f103 0208 	add.w	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f103 0208 	add.w	r2, r3, #8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d103      	bne.n	8005e4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e00c      	b.n	8005e64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e002      	b.n	8005e58 <vListInsert+0x2e>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d2f6      	bcs.n	8005e52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6892      	ldr	r2, [r2, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d103      	bne.n	8005ed0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	1e5a      	subs	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	; 0x38
 8005ef4:	af04      	add	r7, sp, #16
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xTaskCreateStatic+0x46>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	61fb      	str	r3, [r7, #28]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f36:	2354      	movs	r3, #84	; 0x54
 8005f38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b54      	cmp	r3, #84	; 0x54
 8005f3e:	d00a      	beq.n	8005f56 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61bb      	str	r3, [r7, #24]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01e      	beq.n	8005f9c <xTaskCreateStatic+0xac>
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d01b      	beq.n	8005f9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f76:	2300      	movs	r3, #0
 8005f78:	9303      	str	r3, [sp, #12]
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	9302      	str	r3, [sp, #8]
 8005f7e:	f107 0314 	add.w	r3, r7, #20
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f850 	bl	8006034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f96:	f000 f8d5 	bl	8006144 <prvAddNewTaskToReadyList>
 8005f9a:	e001      	b.n	8005fa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fa0:	697b      	ldr	r3, [r7, #20]
	}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b08c      	sub	sp, #48	; 0x30
 8005fae:	af04      	add	r7, sp, #16
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 feca 	bl	8006d58 <pvPortMalloc>
 8005fc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fcc:	2054      	movs	r0, #84	; 0x54
 8005fce:	f000 fec3 	bl	8006d58 <pvPortMalloc>
 8005fd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe0:	e005      	b.n	8005fee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fe2:	6978      	ldr	r0, [r7, #20]
 8005fe4:	f000 ff84 	bl	8006ef0 <vPortFree>
 8005fe8:	e001      	b.n	8005fee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d017      	beq.n	8006024 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	2300      	movs	r3, #0
 8006000:	9303      	str	r3, [sp, #12]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f80e 	bl	8006034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006018:	69f8      	ldr	r0, [r7, #28]
 800601a:	f000 f893 	bl	8006144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800601e:	2301      	movs	r3, #1
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e002      	b.n	800602a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800602a:	69bb      	ldr	r3, [r7, #24]
	}
 800602c:	4618      	mov	r0, r3
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800604c:	3b01      	subs	r3, #1
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	617b      	str	r3, [r7, #20]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d01f      	beq.n	80060c2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	e012      	b.n	80060ae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	7819      	ldrb	r1, [r3, #0]
 8006090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	3334      	adds	r3, #52	; 0x34
 8006098:	460a      	mov	r2, r1
 800609a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	3301      	adds	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b0f      	cmp	r3, #15
 80060b2:	d9e9      	bls.n	8006088 <prvInitialiseNewTask+0x54>
 80060b4:	e000      	b.n	80060b8 <prvInitialiseNewTask+0x84>
			{
				break;
 80060b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c0:	e003      	b.n	80060ca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d901      	bls.n	80060d4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060d0:	2306      	movs	r3, #6
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	2200      	movs	r2, #0
 80060e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fe6c 	bl	8005dc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	3318      	adds	r3, #24
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fe67 	bl	8005dc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	f1c3 0207 	rsb	r2, r3, #7
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	2200      	movs	r2, #0
 8006114:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	69b8      	ldr	r0, [r7, #24]
 8006124:	f000 fc06 	bl	8006934 <pxPortInitialiseStack>
 8006128:	4602      	mov	r2, r0
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006138:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800613a:	bf00      	nop
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800614c:	f000 fd22 	bl	8006b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006150:	4b2a      	ldr	r3, [pc, #168]	; (80061fc <prvAddNewTaskToReadyList+0xb8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a29      	ldr	r2, [pc, #164]	; (80061fc <prvAddNewTaskToReadyList+0xb8>)
 8006158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800615a:	4b29      	ldr	r3, [pc, #164]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006168:	4b24      	ldr	r3, [pc, #144]	; (80061fc <prvAddNewTaskToReadyList+0xb8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d110      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006170:	f000 fabc 	bl	80066ec <prvInitialiseTaskLists>
 8006174:	e00d      	b.n	8006192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <prvAddNewTaskToReadyList+0xc0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	429a      	cmp	r2, r3
 800618a:	d802      	bhi.n	8006192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800618c:	4a1c      	ldr	r2, [pc, #112]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a1b      	ldr	r2, [pc, #108]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 800619a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	2201      	movs	r2, #1
 80061a2:	409a      	lsls	r2, r3
 80061a4:	4b19      	ldr	r3, [pc, #100]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	4a18      	ldr	r2, [pc, #96]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a15      	ldr	r2, [pc, #84]	; (8006210 <prvAddNewTaskToReadyList+0xcc>)
 80061bc:	441a      	add	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7ff fe0c 	bl	8005de2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061ca:	f000 fd13 	bl	8006bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061ce:	4b0d      	ldr	r3, [pc, #52]	; (8006204 <prvAddNewTaskToReadyList+0xc0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <prvAddNewTaskToReadyList+0xbc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d207      	bcs.n	80061f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <prvAddNewTaskToReadyList+0xd0>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000454 	.word	0x20000454
 8006200:	20000354 	.word	0x20000354
 8006204:	20000460 	.word	0x20000460
 8006208:	20000470 	.word	0x20000470
 800620c:	2000045c 	.word	0x2000045c
 8006210:	20000358 	.word	0x20000358
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d017      	beq.n	800625a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <vTaskDelay+0x60>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <vTaskDelay+0x30>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60bb      	str	r3, [r7, #8]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006248:	f000 f87a 	bl	8006340 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800624c:	2100      	movs	r1, #0
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fb0a 	bl	8006868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006254:	f000 f882 	bl	800635c <xTaskResumeAll>
 8006258:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d107      	bne.n	8006270 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <vTaskDelay+0x64>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2000047c 	.word	0x2000047c
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800628e:	463a      	mov	r2, r7
 8006290:	1d39      	adds	r1, r7, #4
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa fde4 	bl	8000e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	9202      	str	r2, [sp, #8]
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	460a      	mov	r2, r1
 80062ae:	491e      	ldr	r1, [pc, #120]	; (8006328 <vTaskStartScheduler+0xa8>)
 80062b0:	481e      	ldr	r0, [pc, #120]	; (800632c <vTaskStartScheduler+0xac>)
 80062b2:	f7ff fe1d 	bl	8005ef0 <xTaskCreateStatic>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <vTaskStartScheduler+0xb0>)
 80062ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062bc:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <vTaskStartScheduler+0xb0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e001      	b.n	80062ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d116      	bne.n	8006302 <vTaskStartScheduler+0x82>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e8:	4b12      	ldr	r3, [pc, #72]	; (8006334 <vTaskStartScheduler+0xb4>)
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <vTaskStartScheduler+0xb8>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <vTaskStartScheduler+0xbc>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062fc:	f000 fba8 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006300:	e00e      	b.n	8006320 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d10a      	bne.n	8006320 <vTaskStartScheduler+0xa0>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60fb      	str	r3, [r7, #12]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <vTaskStartScheduler+0x9e>
}
 8006320:	bf00      	nop
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	08007f50 	.word	0x08007f50
 800632c:	080066bd 	.word	0x080066bd
 8006330:	20000478 	.word	0x20000478
 8006334:	20000474 	.word	0x20000474
 8006338:	20000460 	.word	0x20000460
 800633c:	20000458 	.word	0x20000458

08006340 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <vTaskSuspendAll+0x18>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4a03      	ldr	r2, [pc, #12]	; (8006358 <vTaskSuspendAll+0x18>)
 800634c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800634e:	bf00      	nop
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	2000047c 	.word	0x2000047c

0800635c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800636a:	4b41      	ldr	r3, [pc, #260]	; (8006470 <xTaskResumeAll+0x114>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <xTaskResumeAll+0x2c>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	603b      	str	r3, [r7, #0]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006388:	f000 fc04 	bl	8006b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800638c:	4b38      	ldr	r3, [pc, #224]	; (8006470 <xTaskResumeAll+0x114>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3b01      	subs	r3, #1
 8006392:	4a37      	ldr	r2, [pc, #220]	; (8006470 <xTaskResumeAll+0x114>)
 8006394:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <xTaskResumeAll+0x114>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d161      	bne.n	8006462 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800639e:	4b35      	ldr	r3, [pc, #212]	; (8006474 <xTaskResumeAll+0x118>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d05d      	beq.n	8006462 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a6:	e02e      	b.n	8006406 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a8:	4b33      	ldr	r3, [pc, #204]	; (8006478 <xTaskResumeAll+0x11c>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3318      	adds	r3, #24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fd71 	bl	8005e9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3304      	adds	r3, #4
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fd6c 	bl	8005e9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	2201      	movs	r2, #1
 80063ca:	409a      	lsls	r2, r3
 80063cc:	4b2b      	ldr	r3, [pc, #172]	; (800647c <xTaskResumeAll+0x120>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <xTaskResumeAll+0x120>)
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4a27      	ldr	r2, [pc, #156]	; (8006480 <xTaskResumeAll+0x124>)
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7ff fcf8 	bl	8005de2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4b23      	ldr	r3, [pc, #140]	; (8006484 <xTaskResumeAll+0x128>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006400:	4b21      	ldr	r3, [pc, #132]	; (8006488 <xTaskResumeAll+0x12c>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <xTaskResumeAll+0x11c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1cc      	bne.n	80063a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006414:	f000 fa08 	bl	8006828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006418:	4b1c      	ldr	r3, [pc, #112]	; (800648c <xTaskResumeAll+0x130>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d010      	beq.n	8006446 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006424:	f000 f836 	bl	8006494 <xTaskIncrementTick>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800642e:	4b16      	ldr	r3, [pc, #88]	; (8006488 <xTaskResumeAll+0x12c>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3b01      	subs	r3, #1
 8006438:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f1      	bne.n	8006424 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <xTaskResumeAll+0x130>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <xTaskResumeAll+0x12c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <xTaskResumeAll+0x134>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006462:	f000 fbc7 	bl	8006bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8006466:	68bb      	ldr	r3, [r7, #8]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000047c 	.word	0x2000047c
 8006474:	20000454 	.word	0x20000454
 8006478:	20000414 	.word	0x20000414
 800647c:	2000045c 	.word	0x2000045c
 8006480:	20000358 	.word	0x20000358
 8006484:	20000354 	.word	0x20000354
 8006488:	20000468 	.word	0x20000468
 800648c:	20000464 	.word	0x20000464
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649e:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <xTaskIncrementTick+0x144>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f040 808e 	bne.w	80065c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064a8:	4b4c      	ldr	r3, [pc, #304]	; (80065dc <xTaskIncrementTick+0x148>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b0:	4a4a      	ldr	r2, [pc, #296]	; (80065dc <xTaskIncrementTick+0x148>)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d120      	bne.n	80064fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064bc:	4b48      	ldr	r3, [pc, #288]	; (80065e0 <xTaskIncrementTick+0x14c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <xTaskIncrementTick+0x48>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xTaskIncrementTick+0x46>
 80064dc:	4b40      	ldr	r3, [pc, #256]	; (80065e0 <xTaskIncrementTick+0x14c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	4b40      	ldr	r3, [pc, #256]	; (80065e4 <xTaskIncrementTick+0x150>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a3e      	ldr	r2, [pc, #248]	; (80065e0 <xTaskIncrementTick+0x14c>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4a3e      	ldr	r2, [pc, #248]	; (80065e4 <xTaskIncrementTick+0x150>)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <xTaskIncrementTick+0x154>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <xTaskIncrementTick+0x154>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	f000 f995 	bl	8006828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064fe:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <xTaskIncrementTick+0x158>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	d348      	bcc.n	800659a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006508:	4b35      	ldr	r3, [pc, #212]	; (80065e0 <xTaskIncrementTick+0x14c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	4b36      	ldr	r3, [pc, #216]	; (80065ec <xTaskIncrementTick+0x158>)
 8006514:	f04f 32ff 	mov.w	r2, #4294967295
 8006518:	601a      	str	r2, [r3, #0]
					break;
 800651a:	e03e      	b.n	800659a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651c:	4b30      	ldr	r3, [pc, #192]	; (80065e0 <xTaskIncrementTick+0x14c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d203      	bcs.n	800653c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006534:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <xTaskIncrementTick+0x158>)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800653a:	e02e      	b.n	800659a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fcab 	bl	8005e9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3318      	adds	r3, #24
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fca2 	bl	8005e9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	2201      	movs	r2, #1
 800655e:	409a      	lsls	r2, r3
 8006560:	4b23      	ldr	r3, [pc, #140]	; (80065f0 <xTaskIncrementTick+0x15c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <xTaskIncrementTick+0x15c>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <xTaskIncrementTick+0x160>)
 8006578:	441a      	add	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7ff fc2e 	bl	8005de2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <xTaskIncrementTick+0x164>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	429a      	cmp	r2, r3
 8006592:	d3b9      	bcc.n	8006508 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006598:	e7b6      	b.n	8006508 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <xTaskIncrementTick+0x164>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	4914      	ldr	r1, [pc, #80]	; (80065f4 <xTaskIncrementTick+0x160>)
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d901      	bls.n	80065b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <xTaskIncrementTick+0x168>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e004      	b.n	80065ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <xTaskIncrementTick+0x16c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a0d      	ldr	r2, [pc, #52]	; (8006600 <xTaskIncrementTick+0x16c>)
 80065cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	2000047c 	.word	0x2000047c
 80065dc:	20000458 	.word	0x20000458
 80065e0:	2000040c 	.word	0x2000040c
 80065e4:	20000410 	.word	0x20000410
 80065e8:	2000046c 	.word	0x2000046c
 80065ec:	20000474 	.word	0x20000474
 80065f0:	2000045c 	.word	0x2000045c
 80065f4:	20000358 	.word	0x20000358
 80065f8:	20000354 	.word	0x20000354
 80065fc:	20000468 	.word	0x20000468
 8006600:	20000464 	.word	0x20000464

08006604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800660a:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <vTaskSwitchContext+0xa4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <vTaskSwitchContext+0xa8>)
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006618:	e03f      	b.n	800669a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <vTaskSwitchContext+0xa8>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006620:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <vTaskSwitchContext+0xac>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	fab3 f383 	clz	r3, r3
 800662c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	f1c3 031f 	rsb	r3, r3, #31
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	491f      	ldr	r1, [pc, #124]	; (80066b4 <vTaskSwitchContext+0xb0>)
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <vTaskSwitchContext+0x5c>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	607b      	str	r3, [r7, #4]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <vTaskSwitchContext+0x5a>
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <vTaskSwitchContext+0xb0>)
 800666c:	4413      	add	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3308      	adds	r3, #8
 8006682:	429a      	cmp	r2, r3
 8006684:	d104      	bne.n	8006690 <vTaskSwitchContext+0x8c>
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <vTaskSwitchContext+0xb4>)
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	2000047c 	.word	0x2000047c
 80066ac:	20000468 	.word	0x20000468
 80066b0:	2000045c 	.word	0x2000045c
 80066b4:	20000358 	.word	0x20000358
 80066b8:	20000354 	.word	0x20000354

080066bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066c4:	f000 f852 	bl	800676c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <prvIdleTask+0x28>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d9f9      	bls.n	80066c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <prvIdleTask+0x2c>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066e0:	e7f0      	b.n	80066c4 <prvIdleTask+0x8>
 80066e2:	bf00      	nop
 80066e4:	20000358 	.word	0x20000358
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	e00c      	b.n	8006712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4a12      	ldr	r2, [pc, #72]	; (800674c <prvInitialiseTaskLists+0x60>)
 8006704:	4413      	add	r3, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fb3e 	bl	8005d88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3301      	adds	r3, #1
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b06      	cmp	r3, #6
 8006716:	d9ef      	bls.n	80066f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006718:	480d      	ldr	r0, [pc, #52]	; (8006750 <prvInitialiseTaskLists+0x64>)
 800671a:	f7ff fb35 	bl	8005d88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800671e:	480d      	ldr	r0, [pc, #52]	; (8006754 <prvInitialiseTaskLists+0x68>)
 8006720:	f7ff fb32 	bl	8005d88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006724:	480c      	ldr	r0, [pc, #48]	; (8006758 <prvInitialiseTaskLists+0x6c>)
 8006726:	f7ff fb2f 	bl	8005d88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800672a:	480c      	ldr	r0, [pc, #48]	; (800675c <prvInitialiseTaskLists+0x70>)
 800672c:	f7ff fb2c 	bl	8005d88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006730:	480b      	ldr	r0, [pc, #44]	; (8006760 <prvInitialiseTaskLists+0x74>)
 8006732:	f7ff fb29 	bl	8005d88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <prvInitialiseTaskLists+0x78>)
 8006738:	4a05      	ldr	r2, [pc, #20]	; (8006750 <prvInitialiseTaskLists+0x64>)
 800673a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <prvInitialiseTaskLists+0x7c>)
 800673e:	4a05      	ldr	r2, [pc, #20]	; (8006754 <prvInitialiseTaskLists+0x68>)
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000358 	.word	0x20000358
 8006750:	200003e4 	.word	0x200003e4
 8006754:	200003f8 	.word	0x200003f8
 8006758:	20000414 	.word	0x20000414
 800675c:	20000428 	.word	0x20000428
 8006760:	20000440 	.word	0x20000440
 8006764:	2000040c 	.word	0x2000040c
 8006768:	20000410 	.word	0x20000410

0800676c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006772:	e019      	b.n	80067a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006774:	f000 fa0e 	bl	8006b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006778:	4b10      	ldr	r3, [pc, #64]	; (80067bc <prvCheckTasksWaitingTermination+0x50>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fb89 	bl	8005e9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800678a:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <prvCheckTasksWaitingTermination+0x54>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3b01      	subs	r3, #1
 8006790:	4a0b      	ldr	r2, [pc, #44]	; (80067c0 <prvCheckTasksWaitingTermination+0x54>)
 8006792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006794:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <prvCheckTasksWaitingTermination+0x58>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3b01      	subs	r3, #1
 800679a:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <prvCheckTasksWaitingTermination+0x58>)
 800679c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800679e:	f000 fa29 	bl	8006bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f810 	bl	80067c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <prvCheckTasksWaitingTermination+0x58>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e1      	bne.n	8006774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000428 	.word	0x20000428
 80067c0:	20000454 	.word	0x20000454
 80067c4:	2000043c 	.word	0x2000043c

080067c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d108      	bne.n	80067ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fb86 	bl	8006ef0 <vPortFree>
				vPortFree( pxTCB );
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb83 	bl	8006ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067ea:	e018      	b.n	800681e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d103      	bne.n	80067fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fb7a 	bl	8006ef0 <vPortFree>
	}
 80067fc:	e00f      	b.n	800681e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006804:	2b02      	cmp	r3, #2
 8006806:	d00a      	beq.n	800681e <prvDeleteTCB+0x56>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	60fb      	str	r3, [r7, #12]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <prvDeleteTCB+0x54>
	}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <prvResetNextTaskUnblockTime+0x38>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <prvResetNextTaskUnblockTime+0x3c>)
 800683a:	f04f 32ff 	mov.w	r2, #4294967295
 800683e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006840:	e008      	b.n	8006854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b07      	ldr	r3, [pc, #28]	; (8006860 <prvResetNextTaskUnblockTime+0x38>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a04      	ldr	r2, [pc, #16]	; (8006864 <prvResetNextTaskUnblockTime+0x3c>)
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	2000040c 	.word	0x2000040c
 8006864:	20000474 	.word	0x20000474

08006868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006872:	4b29      	ldr	r3, [pc, #164]	; (8006918 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006878:	4b28      	ldr	r3, [pc, #160]	; (800691c <prvAddCurrentTaskToDelayedList+0xb4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3304      	adds	r3, #4
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fb0c 	bl	8005e9c <uxListRemove>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <prvAddCurrentTaskToDelayedList+0xb4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	2201      	movs	r2, #1
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43da      	mvns	r2, r3
 8006898:	4b21      	ldr	r3, [pc, #132]	; (8006920 <prvAddCurrentTaskToDelayedList+0xb8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4013      	ands	r3, r2
 800689e:	4a20      	ldr	r2, [pc, #128]	; (8006920 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d10a      	bne.n	80068c0 <prvAddCurrentTaskToDelayedList+0x58>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d007      	beq.n	80068c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b0:	4b1a      	ldr	r3, [pc, #104]	; (800691c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	481a      	ldr	r0, [pc, #104]	; (8006924 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068ba:	f7ff fa92 	bl	8005de2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068be:	e026      	b.n	800690e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068c8:	4b14      	ldr	r3, [pc, #80]	; (800691c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d209      	bcs.n	80068ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068d8:	4b13      	ldr	r3, [pc, #76]	; (8006928 <prvAddCurrentTaskToDelayedList+0xc0>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f7ff faa0 	bl	8005e2a <vListInsert>
}
 80068ea:	e010      	b.n	800690e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <prvAddCurrentTaskToDelayedList+0xc4>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b0a      	ldr	r3, [pc, #40]	; (800691c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7ff fa96 	bl	8005e2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068fe:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	429a      	cmp	r2, r3
 8006906:	d202      	bcs.n	800690e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <prvAddCurrentTaskToDelayedList+0xc8>)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6013      	str	r3, [r2, #0]
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000458 	.word	0x20000458
 800691c:	20000354 	.word	0x20000354
 8006920:	2000045c 	.word	0x2000045c
 8006924:	20000440 	.word	0x20000440
 8006928:	20000410 	.word	0x20000410
 800692c:	2000040c 	.word	0x2000040c
 8006930:	20000474 	.word	0x20000474

08006934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3b04      	subs	r3, #4
 8006944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800694c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b04      	subs	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f023 0201 	bic.w	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3b04      	subs	r3, #4
 8006962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006964:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <pxPortInitialiseStack+0x64>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3b14      	subs	r3, #20
 800696e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3b04      	subs	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f06f 0202 	mvn.w	r2, #2
 8006982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3b20      	subs	r3, #32
 8006988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	0800699d 	.word	0x0800699d

0800699c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <prvTaskExitError+0x54>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d00a      	beq.n	80069c6 <prvTaskExitError+0x2a>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <prvTaskExitError+0x28>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069da:	bf00      	nop
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0fc      	beq.n	80069dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	20000068 	.word	0x20000068
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	; (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b46      	ldr	r3, [pc, #280]	; (8006b70 <xPortStartScheduler+0x120>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a46      	ldr	r2, [pc, #280]	; (8006b74 <xPortStartScheduler+0x124>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10a      	bne.n	8006a76 <xPortStartScheduler+0x26>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	e7fe      	b.n	8006a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a76:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <xPortStartScheduler+0x120>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3f      	ldr	r2, [pc, #252]	; (8006b78 <xPortStartScheduler+0x128>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10a      	bne.n	8006a96 <xPortStartScheduler+0x46>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	60fb      	str	r3, [r7, #12]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <xPortStartScheduler+0x12c>)
 8006a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	22ff      	movs	r2, #255	; 0xff
 8006aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	4b31      	ldr	r3, [pc, #196]	; (8006b80 <xPortStartScheduler+0x130>)
 8006abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006abe:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <xPortStartScheduler+0x134>)
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac4:	e009      	b.n	8006ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ac6:	4b2f      	ldr	r3, [pc, #188]	; (8006b84 <xPortStartScheduler+0x134>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	4a2d      	ldr	r2, [pc, #180]	; (8006b84 <xPortStartScheduler+0x134>)
 8006ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae2:	2b80      	cmp	r3, #128	; 0x80
 8006ae4:	d0ef      	beq.n	8006ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ae6:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <xPortStartScheduler+0x134>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f1c3 0307 	rsb	r3, r3, #7
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d00a      	beq.n	8006b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60bb      	str	r3, [r7, #8]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <xPortStartScheduler+0x134>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <xPortStartScheduler+0x134>)
 8006b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b12:	4b1c      	ldr	r3, [pc, #112]	; (8006b84 <xPortStartScheduler+0x134>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b1a:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <xPortStartScheduler+0x134>)
 8006b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b26:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <xPortStartScheduler+0x138>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a17      	ldr	r2, [pc, #92]	; (8006b88 <xPortStartScheduler+0x138>)
 8006b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <xPortStartScheduler+0x138>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <xPortStartScheduler+0x138>)
 8006b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b3e:	f000 f8dd 	bl	8006cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b42:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <xPortStartScheduler+0x13c>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b48:	f000 f8fc 	bl	8006d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b4c:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <xPortStartScheduler+0x140>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <xPortStartScheduler+0x140>)
 8006b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b58:	f7ff ff66 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b5c:	f7ff fd52 	bl	8006604 <vTaskSwitchContext>
	prvTaskExitError();
 8006b60:	f7ff ff1c 	bl	800699c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	e000ed00 	.word	0xe000ed00
 8006b74:	410fc271 	.word	0x410fc271
 8006b78:	410fc270 	.word	0x410fc270
 8006b7c:	e000e400 	.word	0xe000e400
 8006b80:	20000480 	.word	0x20000480
 8006b84:	20000484 	.word	0x20000484
 8006b88:	e000ed20 	.word	0xe000ed20
 8006b8c:	20000068 	.word	0x20000068
 8006b90:	e000ef34 	.word	0xe000ef34

08006b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	607b      	str	r3, [r7, #4]
}
 8006bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bae:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <vPortEnterCritical+0x58>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4a0d      	ldr	r2, [pc, #52]	; (8006bec <vPortEnterCritical+0x58>)
 8006bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bb8:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <vPortEnterCritical+0x58>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10f      	bne.n	8006be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <vPortEnterCritical+0x5c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	603b      	str	r3, [r7, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <vPortEnterCritical+0x4a>
	}
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	20000068 	.word	0x20000068
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <vPortExitCritical+0x50>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <vPortExitCritical+0x24>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	607b      	str	r3, [r7, #4]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <vPortExitCritical+0x50>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <vPortExitCritical+0x50>)
 8006c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c22:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d105      	bne.n	8006c36 <vPortExitCritical+0x42>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000068 	.word	0x20000068
	...

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7ff fcc0 	bl	8006604 <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7ff fbdf 	bl	8006494 <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <SysTick_Handler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <vPortSetupTimerInterrupt+0x44>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1e:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	e000e018 	.word	0xe000e018
 8006d38:	20000000 	.word	0x20000000
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	e000e014 	.word	0xe000e014

08006d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d54 <vPortEnableVFP+0x10>
 8006d48:	6801      	ldr	r1, [r0, #0]
 8006d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d4e:	6001      	str	r1, [r0, #0]
 8006d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d52:	bf00      	nop
 8006d54:	e000ed88 	.word	0xe000ed88

08006d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d64:	f7ff faec 	bl	8006340 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d68:	4b5b      	ldr	r3, [pc, #364]	; (8006ed8 <pvPortMalloc+0x180>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d70:	f000 f920 	bl	8006fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d74:	4b59      	ldr	r3, [pc, #356]	; (8006edc <pvPortMalloc+0x184>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8093 	bne.w	8006ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01d      	beq.n	8006dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d88:	2208      	movs	r2, #8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d014      	beq.n	8006dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	3308      	adds	r3, #8
 8006da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	617b      	str	r3, [r7, #20]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d06e      	beq.n	8006ea8 <pvPortMalloc+0x150>
 8006dca:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <pvPortMalloc+0x188>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d869      	bhi.n	8006ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dd4:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <pvPortMalloc+0x18c>)
 8006dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dd8:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <pvPortMalloc+0x18c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dde:	e004      	b.n	8006dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <pvPortMalloc+0xa4>
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f1      	bne.n	8006de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dfc:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <pvPortMalloc+0x180>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d050      	beq.n	8006ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	4413      	add	r3, r2
 8006e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	2308      	movs	r3, #8
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d91f      	bls.n	8006e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <pvPortMalloc+0xf8>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	613b      	str	r3, [r7, #16]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	1ad2      	subs	r2, r2, r3
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e62:	69b8      	ldr	r0, [r7, #24]
 8006e64:	f000 f908 	bl	8007078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e68:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ee8 <pvPortMalloc+0x190>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d203      	bcs.n	8006e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <pvPortMalloc+0x190>)
 8006e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <pvPortMalloc+0x184>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <pvPortMalloc+0x194>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a11      	ldr	r2, [pc, #68]	; (8006eec <pvPortMalloc+0x194>)
 8006ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ea8:	f7ff fa58 	bl	800635c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <pvPortMalloc+0x174>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60fb      	str	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <pvPortMalloc+0x172>
	return pvReturn;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20001818 	.word	0x20001818
 8006edc:	2000182c 	.word	0x2000182c
 8006ee0:	2000181c 	.word	0x2000181c
 8006ee4:	20001810 	.word	0x20001810
 8006ee8:	20001820 	.word	0x20001820
 8006eec:	20001824 	.word	0x20001824

08006ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04d      	beq.n	8006f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f02:	2308      	movs	r3, #8
 8006f04:	425b      	negs	r3, r3
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <vPortFree+0xb8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <vPortFree+0x44>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <vPortFree+0x62>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60bb      	str	r3, [r7, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <vPortFree+0xb8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01e      	beq.n	8006f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11a      	bne.n	8006f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <vPortFree+0xb8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f78:	f7ff f9e2 	bl	8006340 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <vPortFree+0xbc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <vPortFree+0xbc>)
 8006f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f000 f874 	bl	8007078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <vPortFree+0xc0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a06      	ldr	r2, [pc, #24]	; (8006fb0 <vPortFree+0xc0>)
 8006f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f9a:	f7ff f9df 	bl	800635c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000182c 	.word	0x2000182c
 8006fac:	2000181c 	.word	0x2000181c
 8006fb0:	20001828 	.word	0x20001828

08006fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fba:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fc0:	4b27      	ldr	r3, [pc, #156]	; (8007060 <prvHeapInit+0xac>)
 8006fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00c      	beq.n	8006fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3307      	adds	r3, #7
 8006fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <prvHeapInit+0xac>)
 8006fe4:	4413      	add	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fec:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <prvHeapInit+0xb0>)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <prvHeapInit+0xb0>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007000:	2208      	movs	r2, #8
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a15      	ldr	r2, [pc, #84]	; (8007068 <prvHeapInit+0xb4>)
 8007014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <prvHeapInit+0xb4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <prvHeapInit+0xb4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvHeapInit+0xb4>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <prvHeapInit+0xb8>)
 8007042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a09      	ldr	r2, [pc, #36]	; (8007070 <prvHeapInit+0xbc>)
 800704a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800704c:	4b09      	ldr	r3, [pc, #36]	; (8007074 <prvHeapInit+0xc0>)
 800704e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000488 	.word	0x20000488
 8007064:	20001810 	.word	0x20001810
 8007068:	20001818 	.word	0x20001818
 800706c:	20001820 	.word	0x20001820
 8007070:	2000181c 	.word	0x2000181c
 8007074:	2000182c 	.word	0x2000182c

08007078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007080:	4b28      	ldr	r3, [pc, #160]	; (8007124 <prvInsertBlockIntoFreeList+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e002      	b.n	800708c <prvInsertBlockIntoFreeList+0x14>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d8f7      	bhi.n	8007086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d108      	bne.n	80070ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	441a      	add	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	441a      	add	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d118      	bne.n	8007100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <prvInsertBlockIntoFreeList+0xb0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d00d      	beq.n	80070f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	441a      	add	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e008      	b.n	8007108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070f6:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <prvInsertBlockIntoFreeList+0xb0>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e003      	b.n	8007108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d002      	beq.n	8007116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20001810 	.word	0x20001810
 8007128:	20001818 	.word	0x20001818

0800712c <__errno>:
 800712c:	4b01      	ldr	r3, [pc, #4]	; (8007134 <__errno+0x8>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000006c 	.word	0x2000006c

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4d0d      	ldr	r5, [pc, #52]	; (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	; (8007174 <__libc_init_array+0x3c>)
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2600      	movs	r6, #0
 8007144:	42a6      	cmp	r6, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4d0b      	ldr	r5, [pc, #44]	; (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	; (800717c <__libc_init_array+0x44>)
 800714c:	f000 fe40 	bl	8007dd0 <_init>
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2600      	movs	r6, #0
 8007156:	42a6      	cmp	r6, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007160:	4798      	blx	r3
 8007162:	3601      	adds	r6, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f855 3b04 	ldr.w	r3, [r5], #4
 800716a:	4798      	blx	r3
 800716c:	3601      	adds	r6, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	08008080 	.word	0x08008080
 8007174:	08008080 	.word	0x08008080
 8007178:	08008080 	.word	0x08008080
 800717c:	08008084 	.word	0x08008084

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	4291      	cmp	r1, r2
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <memset>:
 800719c:	4402      	add	r2, r0
 800719e:	4603      	mov	r3, r0
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d100      	bne.n	80071a6 <memset+0xa>
 80071a4:	4770      	bx	lr
 80071a6:	f803 1b01 	strb.w	r1, [r3], #1
 80071aa:	e7f9      	b.n	80071a0 <memset+0x4>

080071ac <sniprintf>:
 80071ac:	b40c      	push	{r2, r3}
 80071ae:	b530      	push	{r4, r5, lr}
 80071b0:	4b17      	ldr	r3, [pc, #92]	; (8007210 <sniprintf+0x64>)
 80071b2:	1e0c      	subs	r4, r1, #0
 80071b4:	681d      	ldr	r5, [r3, #0]
 80071b6:	b09d      	sub	sp, #116	; 0x74
 80071b8:	da08      	bge.n	80071cc <sniprintf+0x20>
 80071ba:	238b      	movs	r3, #139	; 0x8b
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	f04f 30ff 	mov.w	r0, #4294967295
 80071c2:	b01d      	add	sp, #116	; 0x74
 80071c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c8:	b002      	add	sp, #8
 80071ca:	4770      	bx	lr
 80071cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80071d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80071d4:	bf14      	ite	ne
 80071d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071da:	4623      	moveq	r3, r4
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071e4:	9002      	str	r0, [sp, #8]
 80071e6:	9006      	str	r0, [sp, #24]
 80071e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80071ee:	ab21      	add	r3, sp, #132	; 0x84
 80071f0:	a902      	add	r1, sp, #8
 80071f2:	4628      	mov	r0, r5
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	f000 f915 	bl	8007424 <_svfiprintf_r>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	bfbc      	itt	lt
 80071fe:	238b      	movlt	r3, #139	; 0x8b
 8007200:	602b      	strlt	r3, [r5, #0]
 8007202:	2c00      	cmp	r4, #0
 8007204:	d0dd      	beq.n	80071c2 <sniprintf+0x16>
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e7d9      	b.n	80071c2 <sniprintf+0x16>
 800720e:	bf00      	nop
 8007210:	2000006c 	.word	0x2000006c

08007214 <__retarget_lock_acquire_recursive>:
 8007214:	4770      	bx	lr

08007216 <__retarget_lock_release_recursive>:
 8007216:	4770      	bx	lr

08007218 <_free_r>:
 8007218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800721a:	2900      	cmp	r1, #0
 800721c:	d048      	beq.n	80072b0 <_free_r+0x98>
 800721e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007222:	9001      	str	r0, [sp, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f1a1 0404 	sub.w	r4, r1, #4
 800722a:	bfb8      	it	lt
 800722c:	18e4      	addlt	r4, r4, r3
 800722e:	f000 fbb7 	bl	80079a0 <__malloc_lock>
 8007232:	4a20      	ldr	r2, [pc, #128]	; (80072b4 <_free_r+0x9c>)
 8007234:	9801      	ldr	r0, [sp, #4]
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	4615      	mov	r5, r2
 800723a:	b933      	cbnz	r3, 800724a <_free_r+0x32>
 800723c:	6063      	str	r3, [r4, #4]
 800723e:	6014      	str	r4, [r2, #0]
 8007240:	b003      	add	sp, #12
 8007242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007246:	f000 bbb1 	b.w	80079ac <__malloc_unlock>
 800724a:	42a3      	cmp	r3, r4
 800724c:	d90b      	bls.n	8007266 <_free_r+0x4e>
 800724e:	6821      	ldr	r1, [r4, #0]
 8007250:	1862      	adds	r2, r4, r1
 8007252:	4293      	cmp	r3, r2
 8007254:	bf04      	itt	eq
 8007256:	681a      	ldreq	r2, [r3, #0]
 8007258:	685b      	ldreq	r3, [r3, #4]
 800725a:	6063      	str	r3, [r4, #4]
 800725c:	bf04      	itt	eq
 800725e:	1852      	addeq	r2, r2, r1
 8007260:	6022      	streq	r2, [r4, #0]
 8007262:	602c      	str	r4, [r5, #0]
 8007264:	e7ec      	b.n	8007240 <_free_r+0x28>
 8007266:	461a      	mov	r2, r3
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	b10b      	cbz	r3, 8007270 <_free_r+0x58>
 800726c:	42a3      	cmp	r3, r4
 800726e:	d9fa      	bls.n	8007266 <_free_r+0x4e>
 8007270:	6811      	ldr	r1, [r2, #0]
 8007272:	1855      	adds	r5, r2, r1
 8007274:	42a5      	cmp	r5, r4
 8007276:	d10b      	bne.n	8007290 <_free_r+0x78>
 8007278:	6824      	ldr	r4, [r4, #0]
 800727a:	4421      	add	r1, r4
 800727c:	1854      	adds	r4, r2, r1
 800727e:	42a3      	cmp	r3, r4
 8007280:	6011      	str	r1, [r2, #0]
 8007282:	d1dd      	bne.n	8007240 <_free_r+0x28>
 8007284:	681c      	ldr	r4, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	6053      	str	r3, [r2, #4]
 800728a:	4421      	add	r1, r4
 800728c:	6011      	str	r1, [r2, #0]
 800728e:	e7d7      	b.n	8007240 <_free_r+0x28>
 8007290:	d902      	bls.n	8007298 <_free_r+0x80>
 8007292:	230c      	movs	r3, #12
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	e7d3      	b.n	8007240 <_free_r+0x28>
 8007298:	6825      	ldr	r5, [r4, #0]
 800729a:	1961      	adds	r1, r4, r5
 800729c:	428b      	cmp	r3, r1
 800729e:	bf04      	itt	eq
 80072a0:	6819      	ldreq	r1, [r3, #0]
 80072a2:	685b      	ldreq	r3, [r3, #4]
 80072a4:	6063      	str	r3, [r4, #4]
 80072a6:	bf04      	itt	eq
 80072a8:	1949      	addeq	r1, r1, r5
 80072aa:	6021      	streq	r1, [r4, #0]
 80072ac:	6054      	str	r4, [r2, #4]
 80072ae:	e7c7      	b.n	8007240 <_free_r+0x28>
 80072b0:	b003      	add	sp, #12
 80072b2:	bd30      	pop	{r4, r5, pc}
 80072b4:	20001830 	.word	0x20001830

080072b8 <_malloc_r>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	1ccd      	adds	r5, r1, #3
 80072bc:	f025 0503 	bic.w	r5, r5, #3
 80072c0:	3508      	adds	r5, #8
 80072c2:	2d0c      	cmp	r5, #12
 80072c4:	bf38      	it	cc
 80072c6:	250c      	movcc	r5, #12
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	4606      	mov	r6, r0
 80072cc:	db01      	blt.n	80072d2 <_malloc_r+0x1a>
 80072ce:	42a9      	cmp	r1, r5
 80072d0:	d903      	bls.n	80072da <_malloc_r+0x22>
 80072d2:	230c      	movs	r3, #12
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	2000      	movs	r0, #0
 80072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072da:	f000 fb61 	bl	80079a0 <__malloc_lock>
 80072de:	4921      	ldr	r1, [pc, #132]	; (8007364 <_malloc_r+0xac>)
 80072e0:	680a      	ldr	r2, [r1, #0]
 80072e2:	4614      	mov	r4, r2
 80072e4:	b99c      	cbnz	r4, 800730e <_malloc_r+0x56>
 80072e6:	4f20      	ldr	r7, [pc, #128]	; (8007368 <_malloc_r+0xb0>)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	b923      	cbnz	r3, 80072f6 <_malloc_r+0x3e>
 80072ec:	4621      	mov	r1, r4
 80072ee:	4630      	mov	r0, r6
 80072f0:	f000 fb2c 	bl	800794c <_sbrk_r>
 80072f4:	6038      	str	r0, [r7, #0]
 80072f6:	4629      	mov	r1, r5
 80072f8:	4630      	mov	r0, r6
 80072fa:	f000 fb27 	bl	800794c <_sbrk_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d123      	bne.n	800734a <_malloc_r+0x92>
 8007302:	230c      	movs	r3, #12
 8007304:	6033      	str	r3, [r6, #0]
 8007306:	4630      	mov	r0, r6
 8007308:	f000 fb50 	bl	80079ac <__malloc_unlock>
 800730c:	e7e3      	b.n	80072d6 <_malloc_r+0x1e>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	1b5b      	subs	r3, r3, r5
 8007312:	d417      	bmi.n	8007344 <_malloc_r+0x8c>
 8007314:	2b0b      	cmp	r3, #11
 8007316:	d903      	bls.n	8007320 <_malloc_r+0x68>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	441c      	add	r4, r3
 800731c:	6025      	str	r5, [r4, #0]
 800731e:	e004      	b.n	800732a <_malloc_r+0x72>
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	42a2      	cmp	r2, r4
 8007324:	bf0c      	ite	eq
 8007326:	600b      	streq	r3, [r1, #0]
 8007328:	6053      	strne	r3, [r2, #4]
 800732a:	4630      	mov	r0, r6
 800732c:	f000 fb3e 	bl	80079ac <__malloc_unlock>
 8007330:	f104 000b 	add.w	r0, r4, #11
 8007334:	1d23      	adds	r3, r4, #4
 8007336:	f020 0007 	bic.w	r0, r0, #7
 800733a:	1ac2      	subs	r2, r0, r3
 800733c:	d0cc      	beq.n	80072d8 <_malloc_r+0x20>
 800733e:	1a1b      	subs	r3, r3, r0
 8007340:	50a3      	str	r3, [r4, r2]
 8007342:	e7c9      	b.n	80072d8 <_malloc_r+0x20>
 8007344:	4622      	mov	r2, r4
 8007346:	6864      	ldr	r4, [r4, #4]
 8007348:	e7cc      	b.n	80072e4 <_malloc_r+0x2c>
 800734a:	1cc4      	adds	r4, r0, #3
 800734c:	f024 0403 	bic.w	r4, r4, #3
 8007350:	42a0      	cmp	r0, r4
 8007352:	d0e3      	beq.n	800731c <_malloc_r+0x64>
 8007354:	1a21      	subs	r1, r4, r0
 8007356:	4630      	mov	r0, r6
 8007358:	f000 faf8 	bl	800794c <_sbrk_r>
 800735c:	3001      	adds	r0, #1
 800735e:	d1dd      	bne.n	800731c <_malloc_r+0x64>
 8007360:	e7cf      	b.n	8007302 <_malloc_r+0x4a>
 8007362:	bf00      	nop
 8007364:	20001830 	.word	0x20001830
 8007368:	20001834 	.word	0x20001834

0800736c <__ssputs_r>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	688e      	ldr	r6, [r1, #8]
 8007372:	429e      	cmp	r6, r3
 8007374:	4682      	mov	sl, r0
 8007376:	460c      	mov	r4, r1
 8007378:	4690      	mov	r8, r2
 800737a:	461f      	mov	r7, r3
 800737c:	d838      	bhi.n	80073f0 <__ssputs_r+0x84>
 800737e:	898a      	ldrh	r2, [r1, #12]
 8007380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007384:	d032      	beq.n	80073ec <__ssputs_r+0x80>
 8007386:	6825      	ldr	r5, [r4, #0]
 8007388:	6909      	ldr	r1, [r1, #16]
 800738a:	eba5 0901 	sub.w	r9, r5, r1
 800738e:	6965      	ldr	r5, [r4, #20]
 8007390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007398:	3301      	adds	r3, #1
 800739a:	444b      	add	r3, r9
 800739c:	106d      	asrs	r5, r5, #1
 800739e:	429d      	cmp	r5, r3
 80073a0:	bf38      	it	cc
 80073a2:	461d      	movcc	r5, r3
 80073a4:	0553      	lsls	r3, r2, #21
 80073a6:	d531      	bpl.n	800740c <__ssputs_r+0xa0>
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7ff ff85 	bl	80072b8 <_malloc_r>
 80073ae:	4606      	mov	r6, r0
 80073b0:	b950      	cbnz	r0, 80073c8 <__ssputs_r+0x5c>
 80073b2:	230c      	movs	r3, #12
 80073b4:	f8ca 3000 	str.w	r3, [sl]
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	6921      	ldr	r1, [r4, #16]
 80073ca:	464a      	mov	r2, r9
 80073cc:	f7ff fed8 	bl	8007180 <memcpy>
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073da:	81a3      	strh	r3, [r4, #12]
 80073dc:	6126      	str	r6, [r4, #16]
 80073de:	6165      	str	r5, [r4, #20]
 80073e0:	444e      	add	r6, r9
 80073e2:	eba5 0509 	sub.w	r5, r5, r9
 80073e6:	6026      	str	r6, [r4, #0]
 80073e8:	60a5      	str	r5, [r4, #8]
 80073ea:	463e      	mov	r6, r7
 80073ec:	42be      	cmp	r6, r7
 80073ee:	d900      	bls.n	80073f2 <__ssputs_r+0x86>
 80073f0:	463e      	mov	r6, r7
 80073f2:	4632      	mov	r2, r6
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	4641      	mov	r1, r8
 80073f8:	f000 fab8 	bl	800796c <memmove>
 80073fc:	68a3      	ldr	r3, [r4, #8]
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	1b9b      	subs	r3, r3, r6
 8007402:	4432      	add	r2, r6
 8007404:	60a3      	str	r3, [r4, #8]
 8007406:	6022      	str	r2, [r4, #0]
 8007408:	2000      	movs	r0, #0
 800740a:	e7db      	b.n	80073c4 <__ssputs_r+0x58>
 800740c:	462a      	mov	r2, r5
 800740e:	f000 fad3 	bl	80079b8 <_realloc_r>
 8007412:	4606      	mov	r6, r0
 8007414:	2800      	cmp	r0, #0
 8007416:	d1e1      	bne.n	80073dc <__ssputs_r+0x70>
 8007418:	6921      	ldr	r1, [r4, #16]
 800741a:	4650      	mov	r0, sl
 800741c:	f7ff fefc 	bl	8007218 <_free_r>
 8007420:	e7c7      	b.n	80073b2 <__ssputs_r+0x46>
	...

08007424 <_svfiprintf_r>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	4698      	mov	r8, r3
 800742a:	898b      	ldrh	r3, [r1, #12]
 800742c:	061b      	lsls	r3, r3, #24
 800742e:	b09d      	sub	sp, #116	; 0x74
 8007430:	4607      	mov	r7, r0
 8007432:	460d      	mov	r5, r1
 8007434:	4614      	mov	r4, r2
 8007436:	d50e      	bpl.n	8007456 <_svfiprintf_r+0x32>
 8007438:	690b      	ldr	r3, [r1, #16]
 800743a:	b963      	cbnz	r3, 8007456 <_svfiprintf_r+0x32>
 800743c:	2140      	movs	r1, #64	; 0x40
 800743e:	f7ff ff3b 	bl	80072b8 <_malloc_r>
 8007442:	6028      	str	r0, [r5, #0]
 8007444:	6128      	str	r0, [r5, #16]
 8007446:	b920      	cbnz	r0, 8007452 <_svfiprintf_r+0x2e>
 8007448:	230c      	movs	r3, #12
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	e0d1      	b.n	80075f6 <_svfiprintf_r+0x1d2>
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	616b      	str	r3, [r5, #20]
 8007456:	2300      	movs	r3, #0
 8007458:	9309      	str	r3, [sp, #36]	; 0x24
 800745a:	2320      	movs	r3, #32
 800745c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007460:	f8cd 800c 	str.w	r8, [sp, #12]
 8007464:	2330      	movs	r3, #48	; 0x30
 8007466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007610 <_svfiprintf_r+0x1ec>
 800746a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800746e:	f04f 0901 	mov.w	r9, #1
 8007472:	4623      	mov	r3, r4
 8007474:	469a      	mov	sl, r3
 8007476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800747a:	b10a      	cbz	r2, 8007480 <_svfiprintf_r+0x5c>
 800747c:	2a25      	cmp	r2, #37	; 0x25
 800747e:	d1f9      	bne.n	8007474 <_svfiprintf_r+0x50>
 8007480:	ebba 0b04 	subs.w	fp, sl, r4
 8007484:	d00b      	beq.n	800749e <_svfiprintf_r+0x7a>
 8007486:	465b      	mov	r3, fp
 8007488:	4622      	mov	r2, r4
 800748a:	4629      	mov	r1, r5
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff ff6d 	bl	800736c <__ssputs_r>
 8007492:	3001      	adds	r0, #1
 8007494:	f000 80aa 	beq.w	80075ec <_svfiprintf_r+0x1c8>
 8007498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800749a:	445a      	add	r2, fp
 800749c:	9209      	str	r2, [sp, #36]	; 0x24
 800749e:	f89a 3000 	ldrb.w	r3, [sl]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80a2 	beq.w	80075ec <_svfiprintf_r+0x1c8>
 80074a8:	2300      	movs	r3, #0
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b2:	f10a 0a01 	add.w	sl, sl, #1
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	9307      	str	r3, [sp, #28]
 80074ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074be:	931a      	str	r3, [sp, #104]	; 0x68
 80074c0:	4654      	mov	r4, sl
 80074c2:	2205      	movs	r2, #5
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	4851      	ldr	r0, [pc, #324]	; (8007610 <_svfiprintf_r+0x1ec>)
 80074ca:	f7f8 fe81 	bl	80001d0 <memchr>
 80074ce:	9a04      	ldr	r2, [sp, #16]
 80074d0:	b9d8      	cbnz	r0, 800750a <_svfiprintf_r+0xe6>
 80074d2:	06d0      	lsls	r0, r2, #27
 80074d4:	bf44      	itt	mi
 80074d6:	2320      	movmi	r3, #32
 80074d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074dc:	0711      	lsls	r1, r2, #28
 80074de:	bf44      	itt	mi
 80074e0:	232b      	movmi	r3, #43	; 0x2b
 80074e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074e6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ea:	2b2a      	cmp	r3, #42	; 0x2a
 80074ec:	d015      	beq.n	800751a <_svfiprintf_r+0xf6>
 80074ee:	9a07      	ldr	r2, [sp, #28]
 80074f0:	4654      	mov	r4, sl
 80074f2:	2000      	movs	r0, #0
 80074f4:	f04f 0c0a 	mov.w	ip, #10
 80074f8:	4621      	mov	r1, r4
 80074fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074fe:	3b30      	subs	r3, #48	; 0x30
 8007500:	2b09      	cmp	r3, #9
 8007502:	d94e      	bls.n	80075a2 <_svfiprintf_r+0x17e>
 8007504:	b1b0      	cbz	r0, 8007534 <_svfiprintf_r+0x110>
 8007506:	9207      	str	r2, [sp, #28]
 8007508:	e014      	b.n	8007534 <_svfiprintf_r+0x110>
 800750a:	eba0 0308 	sub.w	r3, r0, r8
 800750e:	fa09 f303 	lsl.w	r3, r9, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	46a2      	mov	sl, r4
 8007518:	e7d2      	b.n	80074c0 <_svfiprintf_r+0x9c>
 800751a:	9b03      	ldr	r3, [sp, #12]
 800751c:	1d19      	adds	r1, r3, #4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	9103      	str	r1, [sp, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfbb      	ittet	lt
 8007526:	425b      	neglt	r3, r3
 8007528:	f042 0202 	orrlt.w	r2, r2, #2
 800752c:	9307      	strge	r3, [sp, #28]
 800752e:	9307      	strlt	r3, [sp, #28]
 8007530:	bfb8      	it	lt
 8007532:	9204      	strlt	r2, [sp, #16]
 8007534:	7823      	ldrb	r3, [r4, #0]
 8007536:	2b2e      	cmp	r3, #46	; 0x2e
 8007538:	d10c      	bne.n	8007554 <_svfiprintf_r+0x130>
 800753a:	7863      	ldrb	r3, [r4, #1]
 800753c:	2b2a      	cmp	r3, #42	; 0x2a
 800753e:	d135      	bne.n	80075ac <_svfiprintf_r+0x188>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	9203      	str	r2, [sp, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfb8      	it	lt
 800754c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007550:	3402      	adds	r4, #2
 8007552:	9305      	str	r3, [sp, #20]
 8007554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007620 <_svfiprintf_r+0x1fc>
 8007558:	7821      	ldrb	r1, [r4, #0]
 800755a:	2203      	movs	r2, #3
 800755c:	4650      	mov	r0, sl
 800755e:	f7f8 fe37 	bl	80001d0 <memchr>
 8007562:	b140      	cbz	r0, 8007576 <_svfiprintf_r+0x152>
 8007564:	2340      	movs	r3, #64	; 0x40
 8007566:	eba0 000a 	sub.w	r0, r0, sl
 800756a:	fa03 f000 	lsl.w	r0, r3, r0
 800756e:	9b04      	ldr	r3, [sp, #16]
 8007570:	4303      	orrs	r3, r0
 8007572:	3401      	adds	r4, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757a:	4826      	ldr	r0, [pc, #152]	; (8007614 <_svfiprintf_r+0x1f0>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007580:	2206      	movs	r2, #6
 8007582:	f7f8 fe25 	bl	80001d0 <memchr>
 8007586:	2800      	cmp	r0, #0
 8007588:	d038      	beq.n	80075fc <_svfiprintf_r+0x1d8>
 800758a:	4b23      	ldr	r3, [pc, #140]	; (8007618 <_svfiprintf_r+0x1f4>)
 800758c:	bb1b      	cbnz	r3, 80075d6 <_svfiprintf_r+0x1b2>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	3308      	adds	r3, #8
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800759c:	4433      	add	r3, r6
 800759e:	9309      	str	r3, [sp, #36]	; 0x24
 80075a0:	e767      	b.n	8007472 <_svfiprintf_r+0x4e>
 80075a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a6:	460c      	mov	r4, r1
 80075a8:	2001      	movs	r0, #1
 80075aa:	e7a5      	b.n	80074f8 <_svfiprintf_r+0xd4>
 80075ac:	2300      	movs	r3, #0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	4619      	mov	r1, r3
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4620      	mov	r0, r4
 80075ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075be:	3a30      	subs	r2, #48	; 0x30
 80075c0:	2a09      	cmp	r2, #9
 80075c2:	d903      	bls.n	80075cc <_svfiprintf_r+0x1a8>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0c5      	beq.n	8007554 <_svfiprintf_r+0x130>
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	e7c3      	b.n	8007554 <_svfiprintf_r+0x130>
 80075cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d0:	4604      	mov	r4, r0
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f0      	b.n	80075b8 <_svfiprintf_r+0x194>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b0f      	ldr	r3, [pc, #60]	; (800761c <_svfiprintf_r+0x1f8>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4638      	mov	r0, r7
 80075e2:	f3af 8000 	nop.w
 80075e6:	1c42      	adds	r2, r0, #1
 80075e8:	4606      	mov	r6, r0
 80075ea:	d1d6      	bne.n	800759a <_svfiprintf_r+0x176>
 80075ec:	89ab      	ldrh	r3, [r5, #12]
 80075ee:	065b      	lsls	r3, r3, #25
 80075f0:	f53f af2c 	bmi.w	800744c <_svfiprintf_r+0x28>
 80075f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075f6:	b01d      	add	sp, #116	; 0x74
 80075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	ab03      	add	r3, sp, #12
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	462a      	mov	r2, r5
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <_svfiprintf_r+0x1f8>)
 8007604:	a904      	add	r1, sp, #16
 8007606:	4638      	mov	r0, r7
 8007608:	f000 f87a 	bl	8007700 <_printf_i>
 800760c:	e7eb      	b.n	80075e6 <_svfiprintf_r+0x1c2>
 800760e:	bf00      	nop
 8007610:	08008000 	.word	0x08008000
 8007614:	0800800a 	.word	0x0800800a
 8007618:	00000000 	.word	0x00000000
 800761c:	0800736d 	.word	0x0800736d
 8007620:	08008006 	.word	0x08008006

08007624 <_printf_common>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	4616      	mov	r6, r2
 800762a:	4699      	mov	r9, r3
 800762c:	688a      	ldr	r2, [r1, #8]
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007634:	4293      	cmp	r3, r2
 8007636:	bfb8      	it	lt
 8007638:	4613      	movlt	r3, r2
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007640:	4607      	mov	r7, r0
 8007642:	460c      	mov	r4, r1
 8007644:	b10a      	cbz	r2, 800764a <_printf_common+0x26>
 8007646:	3301      	adds	r3, #1
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	0699      	lsls	r1, r3, #26
 800764e:	bf42      	ittt	mi
 8007650:	6833      	ldrmi	r3, [r6, #0]
 8007652:	3302      	addmi	r3, #2
 8007654:	6033      	strmi	r3, [r6, #0]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d106      	bne.n	800766c <_printf_common+0x48>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	6832      	ldr	r2, [r6, #0]
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	42ab      	cmp	r3, r5
 800766a:	dc26      	bgt.n	80076ba <_printf_common+0x96>
 800766c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007670:	1e13      	subs	r3, r2, #0
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	bf18      	it	ne
 8007676:	2301      	movne	r3, #1
 8007678:	0692      	lsls	r2, r2, #26
 800767a:	d42b      	bmi.n	80076d4 <_printf_common+0xb0>
 800767c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007680:	4649      	mov	r1, r9
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	3001      	adds	r0, #1
 8007688:	d01e      	beq.n	80076c8 <_printf_common+0xa4>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	68e5      	ldr	r5, [r4, #12]
 800768e:	6832      	ldr	r2, [r6, #0]
 8007690:	f003 0306 	and.w	r3, r3, #6
 8007694:	2b04      	cmp	r3, #4
 8007696:	bf08      	it	eq
 8007698:	1aad      	subeq	r5, r5, r2
 800769a:	68a3      	ldr	r3, [r4, #8]
 800769c:	6922      	ldr	r2, [r4, #16]
 800769e:	bf0c      	ite	eq
 80076a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a4:	2500      	movne	r5, #0
 80076a6:	4293      	cmp	r3, r2
 80076a8:	bfc4      	itt	gt
 80076aa:	1a9b      	subgt	r3, r3, r2
 80076ac:	18ed      	addgt	r5, r5, r3
 80076ae:	2600      	movs	r6, #0
 80076b0:	341a      	adds	r4, #26
 80076b2:	42b5      	cmp	r5, r6
 80076b4:	d11a      	bne.n	80076ec <_printf_common+0xc8>
 80076b6:	2000      	movs	r0, #0
 80076b8:	e008      	b.n	80076cc <_printf_common+0xa8>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4652      	mov	r2, sl
 80076be:	4649      	mov	r1, r9
 80076c0:	4638      	mov	r0, r7
 80076c2:	47c0      	blx	r8
 80076c4:	3001      	adds	r0, #1
 80076c6:	d103      	bne.n	80076d0 <_printf_common+0xac>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d0:	3501      	adds	r5, #1
 80076d2:	e7c6      	b.n	8007662 <_printf_common+0x3e>
 80076d4:	18e1      	adds	r1, r4, r3
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	2030      	movs	r0, #48	; 0x30
 80076da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076de:	4422      	add	r2, r4
 80076e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076e8:	3302      	adds	r3, #2
 80076ea:	e7c7      	b.n	800767c <_printf_common+0x58>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4622      	mov	r2, r4
 80076f0:	4649      	mov	r1, r9
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c0      	blx	r8
 80076f6:	3001      	adds	r0, #1
 80076f8:	d0e6      	beq.n	80076c8 <_printf_common+0xa4>
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7d9      	b.n	80076b2 <_printf_common+0x8e>
	...

08007700 <_printf_i>:
 8007700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	460c      	mov	r4, r1
 8007706:	4691      	mov	r9, r2
 8007708:	7e27      	ldrb	r7, [r4, #24]
 800770a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800770c:	2f78      	cmp	r7, #120	; 0x78
 800770e:	4680      	mov	r8, r0
 8007710:	469a      	mov	sl, r3
 8007712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007716:	d807      	bhi.n	8007728 <_printf_i+0x28>
 8007718:	2f62      	cmp	r7, #98	; 0x62
 800771a:	d80a      	bhi.n	8007732 <_printf_i+0x32>
 800771c:	2f00      	cmp	r7, #0
 800771e:	f000 80d8 	beq.w	80078d2 <_printf_i+0x1d2>
 8007722:	2f58      	cmp	r7, #88	; 0x58
 8007724:	f000 80a3 	beq.w	800786e <_printf_i+0x16e>
 8007728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800772c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007730:	e03a      	b.n	80077a8 <_printf_i+0xa8>
 8007732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007736:	2b15      	cmp	r3, #21
 8007738:	d8f6      	bhi.n	8007728 <_printf_i+0x28>
 800773a:	a001      	add	r0, pc, #4	; (adr r0, 8007740 <_printf_i+0x40>)
 800773c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007740:	08007799 	.word	0x08007799
 8007744:	080077ad 	.word	0x080077ad
 8007748:	08007729 	.word	0x08007729
 800774c:	08007729 	.word	0x08007729
 8007750:	08007729 	.word	0x08007729
 8007754:	08007729 	.word	0x08007729
 8007758:	080077ad 	.word	0x080077ad
 800775c:	08007729 	.word	0x08007729
 8007760:	08007729 	.word	0x08007729
 8007764:	08007729 	.word	0x08007729
 8007768:	08007729 	.word	0x08007729
 800776c:	080078b9 	.word	0x080078b9
 8007770:	080077dd 	.word	0x080077dd
 8007774:	0800789b 	.word	0x0800789b
 8007778:	08007729 	.word	0x08007729
 800777c:	08007729 	.word	0x08007729
 8007780:	080078db 	.word	0x080078db
 8007784:	08007729 	.word	0x08007729
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007729 	.word	0x08007729
 8007790:	08007729 	.word	0x08007729
 8007794:	080078a3 	.word	0x080078a3
 8007798:	680b      	ldr	r3, [r1, #0]
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	600a      	str	r2, [r1, #0]
 80077a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0a3      	b.n	80078f4 <_printf_i+0x1f4>
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	6808      	ldr	r0, [r1, #0]
 80077b0:	062e      	lsls	r6, r5, #24
 80077b2:	f100 0304 	add.w	r3, r0, #4
 80077b6:	d50a      	bpl.n	80077ce <_printf_i+0xce>
 80077b8:	6805      	ldr	r5, [r0, #0]
 80077ba:	600b      	str	r3, [r1, #0]
 80077bc:	2d00      	cmp	r5, #0
 80077be:	da03      	bge.n	80077c8 <_printf_i+0xc8>
 80077c0:	232d      	movs	r3, #45	; 0x2d
 80077c2:	426d      	negs	r5, r5
 80077c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c8:	485e      	ldr	r0, [pc, #376]	; (8007944 <_printf_i+0x244>)
 80077ca:	230a      	movs	r3, #10
 80077cc:	e019      	b.n	8007802 <_printf_i+0x102>
 80077ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077d2:	6805      	ldr	r5, [r0, #0]
 80077d4:	600b      	str	r3, [r1, #0]
 80077d6:	bf18      	it	ne
 80077d8:	b22d      	sxthne	r5, r5
 80077da:	e7ef      	b.n	80077bc <_printf_i+0xbc>
 80077dc:	680b      	ldr	r3, [r1, #0]
 80077de:	6825      	ldr	r5, [r4, #0]
 80077e0:	1d18      	adds	r0, r3, #4
 80077e2:	6008      	str	r0, [r1, #0]
 80077e4:	0628      	lsls	r0, r5, #24
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0xec>
 80077e8:	681d      	ldr	r5, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <_printf_i+0xf2>
 80077ec:	0669      	lsls	r1, r5, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0xe8>
 80077f0:	881d      	ldrh	r5, [r3, #0]
 80077f2:	4854      	ldr	r0, [pc, #336]	; (8007944 <_printf_i+0x244>)
 80077f4:	2f6f      	cmp	r7, #111	; 0x6f
 80077f6:	bf0c      	ite	eq
 80077f8:	2308      	moveq	r3, #8
 80077fa:	230a      	movne	r3, #10
 80077fc:	2100      	movs	r1, #0
 80077fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007802:	6866      	ldr	r6, [r4, #4]
 8007804:	60a6      	str	r6, [r4, #8]
 8007806:	2e00      	cmp	r6, #0
 8007808:	bfa2      	ittt	ge
 800780a:	6821      	ldrge	r1, [r4, #0]
 800780c:	f021 0104 	bicge.w	r1, r1, #4
 8007810:	6021      	strge	r1, [r4, #0]
 8007812:	b90d      	cbnz	r5, 8007818 <_printf_i+0x118>
 8007814:	2e00      	cmp	r6, #0
 8007816:	d04d      	beq.n	80078b4 <_printf_i+0x1b4>
 8007818:	4616      	mov	r6, r2
 800781a:	fbb5 f1f3 	udiv	r1, r5, r3
 800781e:	fb03 5711 	mls	r7, r3, r1, r5
 8007822:	5dc7      	ldrb	r7, [r0, r7]
 8007824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007828:	462f      	mov	r7, r5
 800782a:	42bb      	cmp	r3, r7
 800782c:	460d      	mov	r5, r1
 800782e:	d9f4      	bls.n	800781a <_printf_i+0x11a>
 8007830:	2b08      	cmp	r3, #8
 8007832:	d10b      	bne.n	800784c <_printf_i+0x14c>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	07df      	lsls	r7, r3, #31
 8007838:	d508      	bpl.n	800784c <_printf_i+0x14c>
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	6861      	ldr	r1, [r4, #4]
 800783e:	4299      	cmp	r1, r3
 8007840:	bfde      	ittt	le
 8007842:	2330      	movle	r3, #48	; 0x30
 8007844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800784c:	1b92      	subs	r2, r2, r6
 800784e:	6122      	str	r2, [r4, #16]
 8007850:	f8cd a000 	str.w	sl, [sp]
 8007854:	464b      	mov	r3, r9
 8007856:	aa03      	add	r2, sp, #12
 8007858:	4621      	mov	r1, r4
 800785a:	4640      	mov	r0, r8
 800785c:	f7ff fee2 	bl	8007624 <_printf_common>
 8007860:	3001      	adds	r0, #1
 8007862:	d14c      	bne.n	80078fe <_printf_i+0x1fe>
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	b004      	add	sp, #16
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786e:	4835      	ldr	r0, [pc, #212]	; (8007944 <_printf_i+0x244>)
 8007870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	680e      	ldr	r6, [r1, #0]
 8007878:	061f      	lsls	r7, r3, #24
 800787a:	f856 5b04 	ldr.w	r5, [r6], #4
 800787e:	600e      	str	r6, [r1, #0]
 8007880:	d514      	bpl.n	80078ac <_printf_i+0x1ac>
 8007882:	07d9      	lsls	r1, r3, #31
 8007884:	bf44      	itt	mi
 8007886:	f043 0320 	orrmi.w	r3, r3, #32
 800788a:	6023      	strmi	r3, [r4, #0]
 800788c:	b91d      	cbnz	r5, 8007896 <_printf_i+0x196>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	f023 0320 	bic.w	r3, r3, #32
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	2310      	movs	r3, #16
 8007898:	e7b0      	b.n	80077fc <_printf_i+0xfc>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	f043 0320 	orr.w	r3, r3, #32
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	2378      	movs	r3, #120	; 0x78
 80078a4:	4828      	ldr	r0, [pc, #160]	; (8007948 <_printf_i+0x248>)
 80078a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078aa:	e7e3      	b.n	8007874 <_printf_i+0x174>
 80078ac:	065e      	lsls	r6, r3, #25
 80078ae:	bf48      	it	mi
 80078b0:	b2ad      	uxthmi	r5, r5
 80078b2:	e7e6      	b.n	8007882 <_printf_i+0x182>
 80078b4:	4616      	mov	r6, r2
 80078b6:	e7bb      	b.n	8007830 <_printf_i+0x130>
 80078b8:	680b      	ldr	r3, [r1, #0]
 80078ba:	6826      	ldr	r6, [r4, #0]
 80078bc:	6960      	ldr	r0, [r4, #20]
 80078be:	1d1d      	adds	r5, r3, #4
 80078c0:	600d      	str	r5, [r1, #0]
 80078c2:	0635      	lsls	r5, r6, #24
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	d501      	bpl.n	80078cc <_printf_i+0x1cc>
 80078c8:	6018      	str	r0, [r3, #0]
 80078ca:	e002      	b.n	80078d2 <_printf_i+0x1d2>
 80078cc:	0671      	lsls	r1, r6, #25
 80078ce:	d5fb      	bpl.n	80078c8 <_printf_i+0x1c8>
 80078d0:	8018      	strh	r0, [r3, #0]
 80078d2:	2300      	movs	r3, #0
 80078d4:	6123      	str	r3, [r4, #16]
 80078d6:	4616      	mov	r6, r2
 80078d8:	e7ba      	b.n	8007850 <_printf_i+0x150>
 80078da:	680b      	ldr	r3, [r1, #0]
 80078dc:	1d1a      	adds	r2, r3, #4
 80078de:	600a      	str	r2, [r1, #0]
 80078e0:	681e      	ldr	r6, [r3, #0]
 80078e2:	6862      	ldr	r2, [r4, #4]
 80078e4:	2100      	movs	r1, #0
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7f8 fc72 	bl	80001d0 <memchr>
 80078ec:	b108      	cbz	r0, 80078f2 <_printf_i+0x1f2>
 80078ee:	1b80      	subs	r0, r0, r6
 80078f0:	6060      	str	r0, [r4, #4]
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	6123      	str	r3, [r4, #16]
 80078f6:	2300      	movs	r3, #0
 80078f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fc:	e7a8      	b.n	8007850 <_printf_i+0x150>
 80078fe:	6923      	ldr	r3, [r4, #16]
 8007900:	4632      	mov	r2, r6
 8007902:	4649      	mov	r1, r9
 8007904:	4640      	mov	r0, r8
 8007906:	47d0      	blx	sl
 8007908:	3001      	adds	r0, #1
 800790a:	d0ab      	beq.n	8007864 <_printf_i+0x164>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	079b      	lsls	r3, r3, #30
 8007910:	d413      	bmi.n	800793a <_printf_i+0x23a>
 8007912:	68e0      	ldr	r0, [r4, #12]
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	4298      	cmp	r0, r3
 8007918:	bfb8      	it	lt
 800791a:	4618      	movlt	r0, r3
 800791c:	e7a4      	b.n	8007868 <_printf_i+0x168>
 800791e:	2301      	movs	r3, #1
 8007920:	4632      	mov	r2, r6
 8007922:	4649      	mov	r1, r9
 8007924:	4640      	mov	r0, r8
 8007926:	47d0      	blx	sl
 8007928:	3001      	adds	r0, #1
 800792a:	d09b      	beq.n	8007864 <_printf_i+0x164>
 800792c:	3501      	adds	r5, #1
 800792e:	68e3      	ldr	r3, [r4, #12]
 8007930:	9903      	ldr	r1, [sp, #12]
 8007932:	1a5b      	subs	r3, r3, r1
 8007934:	42ab      	cmp	r3, r5
 8007936:	dcf2      	bgt.n	800791e <_printf_i+0x21e>
 8007938:	e7eb      	b.n	8007912 <_printf_i+0x212>
 800793a:	2500      	movs	r5, #0
 800793c:	f104 0619 	add.w	r6, r4, #25
 8007940:	e7f5      	b.n	800792e <_printf_i+0x22e>
 8007942:	bf00      	nop
 8007944:	08008011 	.word	0x08008011
 8007948:	08008022 	.word	0x08008022

0800794c <_sbrk_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d06      	ldr	r5, [pc, #24]	; (8007968 <_sbrk_r+0x1c>)
 8007950:	2300      	movs	r3, #0
 8007952:	4604      	mov	r4, r0
 8007954:	4608      	mov	r0, r1
 8007956:	602b      	str	r3, [r5, #0]
 8007958:	f7f9 ffb6 	bl	80018c8 <_sbrk>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_sbrk_r+0x1a>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_sbrk_r+0x1a>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20001a64 	.word	0x20001a64

0800796c <memmove>:
 800796c:	4288      	cmp	r0, r1
 800796e:	b510      	push	{r4, lr}
 8007970:	eb01 0402 	add.w	r4, r1, r2
 8007974:	d902      	bls.n	800797c <memmove+0x10>
 8007976:	4284      	cmp	r4, r0
 8007978:	4623      	mov	r3, r4
 800797a:	d807      	bhi.n	800798c <memmove+0x20>
 800797c:	1e43      	subs	r3, r0, #1
 800797e:	42a1      	cmp	r1, r4
 8007980:	d008      	beq.n	8007994 <memmove+0x28>
 8007982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800798a:	e7f8      	b.n	800797e <memmove+0x12>
 800798c:	4402      	add	r2, r0
 800798e:	4601      	mov	r1, r0
 8007990:	428a      	cmp	r2, r1
 8007992:	d100      	bne.n	8007996 <memmove+0x2a>
 8007994:	bd10      	pop	{r4, pc}
 8007996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800799a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799e:	e7f7      	b.n	8007990 <memmove+0x24>

080079a0 <__malloc_lock>:
 80079a0:	4801      	ldr	r0, [pc, #4]	; (80079a8 <__malloc_lock+0x8>)
 80079a2:	f7ff bc37 	b.w	8007214 <__retarget_lock_acquire_recursive>
 80079a6:	bf00      	nop
 80079a8:	20001a5c 	.word	0x20001a5c

080079ac <__malloc_unlock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_unlock+0x8>)
 80079ae:	f7ff bc32 	b.w	8007216 <__retarget_lock_release_recursive>
 80079b2:	bf00      	nop
 80079b4:	20001a5c 	.word	0x20001a5c

080079b8 <_realloc_r>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	4607      	mov	r7, r0
 80079bc:	4614      	mov	r4, r2
 80079be:	460e      	mov	r6, r1
 80079c0:	b921      	cbnz	r1, 80079cc <_realloc_r+0x14>
 80079c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079c6:	4611      	mov	r1, r2
 80079c8:	f7ff bc76 	b.w	80072b8 <_malloc_r>
 80079cc:	b922      	cbnz	r2, 80079d8 <_realloc_r+0x20>
 80079ce:	f7ff fc23 	bl	8007218 <_free_r>
 80079d2:	4625      	mov	r5, r4
 80079d4:	4628      	mov	r0, r5
 80079d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d8:	f000 f814 	bl	8007a04 <_malloc_usable_size_r>
 80079dc:	42a0      	cmp	r0, r4
 80079de:	d20f      	bcs.n	8007a00 <_realloc_r+0x48>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7ff fc68 	bl	80072b8 <_malloc_r>
 80079e8:	4605      	mov	r5, r0
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d0f2      	beq.n	80079d4 <_realloc_r+0x1c>
 80079ee:	4631      	mov	r1, r6
 80079f0:	4622      	mov	r2, r4
 80079f2:	f7ff fbc5 	bl	8007180 <memcpy>
 80079f6:	4631      	mov	r1, r6
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7ff fc0d 	bl	8007218 <_free_r>
 80079fe:	e7e9      	b.n	80079d4 <_realloc_r+0x1c>
 8007a00:	4635      	mov	r5, r6
 8007a02:	e7e7      	b.n	80079d4 <_realloc_r+0x1c>

08007a04 <_malloc_usable_size_r>:
 8007a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a08:	1f18      	subs	r0, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfbc      	itt	lt
 8007a0e:	580b      	ldrlt	r3, [r1, r0]
 8007a10:	18c0      	addlt	r0, r0, r3
 8007a12:	4770      	bx	lr
 8007a14:	0000      	movs	r0, r0
	...

08007a18 <atan>:
 8007a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	ec55 4b10 	vmov	r4, r5, d0
 8007a20:	4bc3      	ldr	r3, [pc, #780]	; (8007d30 <atan+0x318>)
 8007a22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a26:	429e      	cmp	r6, r3
 8007a28:	46ab      	mov	fp, r5
 8007a2a:	dd18      	ble.n	8007a5e <atan+0x46>
 8007a2c:	4bc1      	ldr	r3, [pc, #772]	; (8007d34 <atan+0x31c>)
 8007a2e:	429e      	cmp	r6, r3
 8007a30:	dc01      	bgt.n	8007a36 <atan+0x1e>
 8007a32:	d109      	bne.n	8007a48 <atan+0x30>
 8007a34:	b144      	cbz	r4, 8007a48 <atan+0x30>
 8007a36:	4622      	mov	r2, r4
 8007a38:	462b      	mov	r3, r5
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f8 fc1d 	bl	800027c <__adddf3>
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	e006      	b.n	8007a56 <atan+0x3e>
 8007a48:	f1bb 0f00 	cmp.w	fp, #0
 8007a4c:	f300 8131 	bgt.w	8007cb2 <atan+0x29a>
 8007a50:	a59b      	add	r5, pc, #620	; (adr r5, 8007cc0 <atan+0x2a8>)
 8007a52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a56:	ec45 4b10 	vmov	d0, r4, r5
 8007a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5e:	4bb6      	ldr	r3, [pc, #728]	; (8007d38 <atan+0x320>)
 8007a60:	429e      	cmp	r6, r3
 8007a62:	dc14      	bgt.n	8007a8e <atan+0x76>
 8007a64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007a68:	429e      	cmp	r6, r3
 8007a6a:	dc0d      	bgt.n	8007a88 <atan+0x70>
 8007a6c:	a396      	add	r3, pc, #600	; (adr r3, 8007cc8 <atan+0x2b0>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	ee10 0a10 	vmov	r0, s0
 8007a76:	4629      	mov	r1, r5
 8007a78:	f7f8 fc00 	bl	800027c <__adddf3>
 8007a7c:	4baf      	ldr	r3, [pc, #700]	; (8007d3c <atan+0x324>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f7f9 f842 	bl	8000b08 <__aeabi_dcmpgt>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d1e6      	bne.n	8007a56 <atan+0x3e>
 8007a88:	f04f 3aff 	mov.w	sl, #4294967295
 8007a8c:	e02b      	b.n	8007ae6 <atan+0xce>
 8007a8e:	f000 f963 	bl	8007d58 <fabs>
 8007a92:	4bab      	ldr	r3, [pc, #684]	; (8007d40 <atan+0x328>)
 8007a94:	429e      	cmp	r6, r3
 8007a96:	ec55 4b10 	vmov	r4, r5, d0
 8007a9a:	f300 80bf 	bgt.w	8007c1c <atan+0x204>
 8007a9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007aa2:	429e      	cmp	r6, r3
 8007aa4:	f300 80a0 	bgt.w	8007be8 <atan+0x1d0>
 8007aa8:	ee10 2a10 	vmov	r2, s0
 8007aac:	ee10 0a10 	vmov	r0, s0
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f8 fbe2 	bl	800027c <__adddf3>
 8007ab8:	4ba0      	ldr	r3, [pc, #640]	; (8007d3c <atan+0x324>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	f7f8 fbdc 	bl	8000278 <__aeabi_dsub>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aca:	4620      	mov	r0, r4
 8007acc:	4629      	mov	r1, r5
 8007ace:	f7f8 fbd5 	bl	800027c <__adddf3>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 feaf 	bl	800083c <__aeabi_ddiv>
 8007ade:	f04f 0a00 	mov.w	sl, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	4620      	mov	r0, r4
 8007aec:	4629      	mov	r1, r5
 8007aee:	f7f8 fd7b 	bl	80005e8 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4680      	mov	r8, r0
 8007af8:	4689      	mov	r9, r1
 8007afa:	f7f8 fd75 	bl	80005e8 <__aeabi_dmul>
 8007afe:	a374      	add	r3, pc, #464	; (adr r3, 8007cd0 <atan+0x2b8>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	4606      	mov	r6, r0
 8007b06:	460f      	mov	r7, r1
 8007b08:	f7f8 fd6e 	bl	80005e8 <__aeabi_dmul>
 8007b0c:	a372      	add	r3, pc, #456	; (adr r3, 8007cd8 <atan+0x2c0>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f8 fbb3 	bl	800027c <__adddf3>
 8007b16:	4632      	mov	r2, r6
 8007b18:	463b      	mov	r3, r7
 8007b1a:	f7f8 fd65 	bl	80005e8 <__aeabi_dmul>
 8007b1e:	a370      	add	r3, pc, #448	; (adr r3, 8007ce0 <atan+0x2c8>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fbaa 	bl	800027c <__adddf3>
 8007b28:	4632      	mov	r2, r6
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	f7f8 fd5c 	bl	80005e8 <__aeabi_dmul>
 8007b30:	a36d      	add	r3, pc, #436	; (adr r3, 8007ce8 <atan+0x2d0>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fba1 	bl	800027c <__adddf3>
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	f7f8 fd53 	bl	80005e8 <__aeabi_dmul>
 8007b42:	a36b      	add	r3, pc, #428	; (adr r3, 8007cf0 <atan+0x2d8>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7f8 fb98 	bl	800027c <__adddf3>
 8007b4c:	4632      	mov	r2, r6
 8007b4e:	463b      	mov	r3, r7
 8007b50:	f7f8 fd4a 	bl	80005e8 <__aeabi_dmul>
 8007b54:	a368      	add	r3, pc, #416	; (adr r3, 8007cf8 <atan+0x2e0>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fb8f 	bl	800027c <__adddf3>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	f7f8 fd41 	bl	80005e8 <__aeabi_dmul>
 8007b66:	a366      	add	r3, pc, #408	; (adr r3, 8007d00 <atan+0x2e8>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	4689      	mov	r9, r1
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fd38 	bl	80005e8 <__aeabi_dmul>
 8007b78:	a363      	add	r3, pc, #396	; (adr r3, 8007d08 <atan+0x2f0>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fb7b 	bl	8000278 <__aeabi_dsub>
 8007b82:	4632      	mov	r2, r6
 8007b84:	463b      	mov	r3, r7
 8007b86:	f7f8 fd2f 	bl	80005e8 <__aeabi_dmul>
 8007b8a:	a361      	add	r3, pc, #388	; (adr r3, 8007d10 <atan+0x2f8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fb72 	bl	8000278 <__aeabi_dsub>
 8007b94:	4632      	mov	r2, r6
 8007b96:	463b      	mov	r3, r7
 8007b98:	f7f8 fd26 	bl	80005e8 <__aeabi_dmul>
 8007b9c:	a35e      	add	r3, pc, #376	; (adr r3, 8007d18 <atan+0x300>)
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	f7f8 fb69 	bl	8000278 <__aeabi_dsub>
 8007ba6:	4632      	mov	r2, r6
 8007ba8:	463b      	mov	r3, r7
 8007baa:	f7f8 fd1d 	bl	80005e8 <__aeabi_dmul>
 8007bae:	a35c      	add	r3, pc, #368	; (adr r3, 8007d20 <atan+0x308>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fb60 	bl	8000278 <__aeabi_dsub>
 8007bb8:	4632      	mov	r2, r6
 8007bba:	463b      	mov	r3, r7
 8007bbc:	f7f8 fd14 	bl	80005e8 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 fb58 	bl	800027c <__adddf3>
 8007bcc:	4622      	mov	r2, r4
 8007bce:	462b      	mov	r3, r5
 8007bd0:	f7f8 fd0a 	bl	80005e8 <__aeabi_dmul>
 8007bd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	d14b      	bne.n	8007c76 <atan+0x25e>
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f8 fb49 	bl	8000278 <__aeabi_dsub>
 8007be6:	e72c      	b.n	8007a42 <atan+0x2a>
 8007be8:	ee10 0a10 	vmov	r0, s0
 8007bec:	4b53      	ldr	r3, [pc, #332]	; (8007d3c <atan+0x324>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fb41 	bl	8000278 <__aeabi_dsub>
 8007bf6:	4b51      	ldr	r3, [pc, #324]	; (8007d3c <atan+0x324>)
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4620      	mov	r0, r4
 8007c00:	4629      	mov	r1, r5
 8007c02:	f7f8 fb3b 	bl	800027c <__adddf3>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 fe15 	bl	800083c <__aeabi_ddiv>
 8007c12:	f04f 0a01 	mov.w	sl, #1
 8007c16:	4604      	mov	r4, r0
 8007c18:	460d      	mov	r5, r1
 8007c1a:	e764      	b.n	8007ae6 <atan+0xce>
 8007c1c:	4b49      	ldr	r3, [pc, #292]	; (8007d44 <atan+0x32c>)
 8007c1e:	429e      	cmp	r6, r3
 8007c20:	da1d      	bge.n	8007c5e <atan+0x246>
 8007c22:	ee10 0a10 	vmov	r0, s0
 8007c26:	4b48      	ldr	r3, [pc, #288]	; (8007d48 <atan+0x330>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f7f8 fb24 	bl	8000278 <__aeabi_dsub>
 8007c30:	4b45      	ldr	r3, [pc, #276]	; (8007d48 <atan+0x330>)
 8007c32:	4606      	mov	r6, r0
 8007c34:	460f      	mov	r7, r1
 8007c36:	2200      	movs	r2, #0
 8007c38:	4620      	mov	r0, r4
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	f7f8 fcd4 	bl	80005e8 <__aeabi_dmul>
 8007c40:	4b3e      	ldr	r3, [pc, #248]	; (8007d3c <atan+0x324>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	f7f8 fb1a 	bl	800027c <__adddf3>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 fdf4 	bl	800083c <__aeabi_ddiv>
 8007c54:	f04f 0a02 	mov.w	sl, #2
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	e743      	b.n	8007ae6 <atan+0xce>
 8007c5e:	462b      	mov	r3, r5
 8007c60:	ee10 2a10 	vmov	r2, s0
 8007c64:	4939      	ldr	r1, [pc, #228]	; (8007d4c <atan+0x334>)
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f8 fde8 	bl	800083c <__aeabi_ddiv>
 8007c6c:	f04f 0a03 	mov.w	sl, #3
 8007c70:	4604      	mov	r4, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	e737      	b.n	8007ae6 <atan+0xce>
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <atan+0x338>)
 8007c78:	4e36      	ldr	r6, [pc, #216]	; (8007d54 <atan+0x33c>)
 8007c7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007c7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007c82:	e9da 2300 	ldrd	r2, r3, [sl]
 8007c86:	f7f8 faf7 	bl	8000278 <__aeabi_dsub>
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	f7f8 faf3 	bl	8000278 <__aeabi_dsub>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007c9a:	f7f8 faed 	bl	8000278 <__aeabi_dsub>
 8007c9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	f6bf aed6 	bge.w	8007a56 <atan+0x3e>
 8007caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cae:	461d      	mov	r5, r3
 8007cb0:	e6d1      	b.n	8007a56 <atan+0x3e>
 8007cb2:	a51d      	add	r5, pc, #116	; (adr r5, 8007d28 <atan+0x310>)
 8007cb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007cb8:	e6cd      	b.n	8007a56 <atan+0x3e>
 8007cba:	bf00      	nop
 8007cbc:	f3af 8000 	nop.w
 8007cc0:	54442d18 	.word	0x54442d18
 8007cc4:	bff921fb 	.word	0xbff921fb
 8007cc8:	8800759c 	.word	0x8800759c
 8007ccc:	7e37e43c 	.word	0x7e37e43c
 8007cd0:	e322da11 	.word	0xe322da11
 8007cd4:	3f90ad3a 	.word	0x3f90ad3a
 8007cd8:	24760deb 	.word	0x24760deb
 8007cdc:	3fa97b4b 	.word	0x3fa97b4b
 8007ce0:	a0d03d51 	.word	0xa0d03d51
 8007ce4:	3fb10d66 	.word	0x3fb10d66
 8007ce8:	c54c206e 	.word	0xc54c206e
 8007cec:	3fb745cd 	.word	0x3fb745cd
 8007cf0:	920083ff 	.word	0x920083ff
 8007cf4:	3fc24924 	.word	0x3fc24924
 8007cf8:	5555550d 	.word	0x5555550d
 8007cfc:	3fd55555 	.word	0x3fd55555
 8007d00:	2c6a6c2f 	.word	0x2c6a6c2f
 8007d04:	bfa2b444 	.word	0xbfa2b444
 8007d08:	52defd9a 	.word	0x52defd9a
 8007d0c:	3fadde2d 	.word	0x3fadde2d
 8007d10:	af749a6d 	.word	0xaf749a6d
 8007d14:	3fb3b0f2 	.word	0x3fb3b0f2
 8007d18:	fe231671 	.word	0xfe231671
 8007d1c:	3fbc71c6 	.word	0x3fbc71c6
 8007d20:	9998ebc4 	.word	0x9998ebc4
 8007d24:	3fc99999 	.word	0x3fc99999
 8007d28:	54442d18 	.word	0x54442d18
 8007d2c:	3ff921fb 	.word	0x3ff921fb
 8007d30:	440fffff 	.word	0x440fffff
 8007d34:	7ff00000 	.word	0x7ff00000
 8007d38:	3fdbffff 	.word	0x3fdbffff
 8007d3c:	3ff00000 	.word	0x3ff00000
 8007d40:	3ff2ffff 	.word	0x3ff2ffff
 8007d44:	40038000 	.word	0x40038000
 8007d48:	3ff80000 	.word	0x3ff80000
 8007d4c:	bff00000 	.word	0xbff00000
 8007d50:	08008058 	.word	0x08008058
 8007d54:	08008038 	.word	0x08008038

08007d58 <fabs>:
 8007d58:	ec51 0b10 	vmov	r0, r1, d0
 8007d5c:	ee10 2a10 	vmov	r2, s0
 8007d60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d64:	ec43 2b10 	vmov	d0, r2, r3
 8007d68:	4770      	bx	lr
	...

08007d6c <trunc>:
 8007d6c:	ec51 0b10 	vmov	r0, r1, d0
 8007d70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d74:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007d78:	2b13      	cmp	r3, #19
 8007d7a:	b5d0      	push	{r4, r6, r7, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	dc10      	bgt.n	8007da2 <trunc+0x36>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bfa5      	ittet	ge
 8007d84:	4a11      	ldrge	r2, [pc, #68]	; (8007dcc <trunc+0x60>)
 8007d86:	fa42 f303 	asrge.w	r3, r2, r3
 8007d8a:	2100      	movlt	r1, #0
 8007d8c:	2100      	movge	r1, #0
 8007d8e:	bfb9      	ittee	lt
 8007d90:	2000      	movlt	r0, #0
 8007d92:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8007d96:	2000      	movge	r0, #0
 8007d98:	ea24 0103 	bicge.w	r1, r4, r3
 8007d9c:	ec41 0b10 	vmov	d0, r0, r1
 8007da0:	bdd0      	pop	{r4, r6, r7, pc}
 8007da2:	2b33      	cmp	r3, #51	; 0x33
 8007da4:	dd08      	ble.n	8007db8 <trunc+0x4c>
 8007da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007daa:	d1f7      	bne.n	8007d9c <trunc+0x30>
 8007dac:	ee10 2a10 	vmov	r2, s0
 8007db0:	460b      	mov	r3, r1
 8007db2:	f7f8 fa63 	bl	800027c <__adddf3>
 8007db6:	e7f1      	b.n	8007d9c <trunc+0x30>
 8007db8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	fa23 f202 	lsr.w	r2, r3, r2
 8007dc4:	ea20 0602 	bic.w	r6, r0, r2
 8007dc8:	4630      	mov	r0, r6
 8007dca:	e7e7      	b.n	8007d9c <trunc+0x30>
 8007dcc:	000fffff 	.word	0x000fffff

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
