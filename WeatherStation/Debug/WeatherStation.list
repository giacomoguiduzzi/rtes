
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800c160  0800c160  0001c160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd98  0800cd98  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cda0  0800cda0  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cda0  0800cda0  0001cda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cda4  0800cda4  0001cda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800cda8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002904  200000d8  0800ce80  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029dc  0800ce80  000229dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d8c  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004edc  00000000  00000000  00046e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e60  00000000  00000000  0004bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c48  00000000  00000000  0004dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5e4  00000000  00000000  0004f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225d9  00000000  00000000  0007bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010519a  00000000  00000000  0009e3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a356f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e90  00000000  00000000  001a35c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001ac454  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001ac508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c144 	.word	0x0800c144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800c144 	.word	0x0800c144

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b2f      	cmp	r3, #47	; 0x2f
 8000e82:	d906      	bls.n	8000e92 <Hex2Num+0x1e>
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b39      	cmp	r3, #57	; 0x39
 8000e88:	d803      	bhi.n	8000e92 <Hex2Num+0x1e>
        return a - '0';
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3b30      	subs	r3, #48	; 0x30
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	e014      	b.n	8000ebc <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b60      	cmp	r3, #96	; 0x60
 8000e96:	d906      	bls.n	8000ea6 <Hex2Num+0x32>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b66      	cmp	r3, #102	; 0x66
 8000e9c:	d803      	bhi.n	8000ea6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	3b57      	subs	r3, #87	; 0x57
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	e00a      	b.n	8000ebc <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b40      	cmp	r3, #64	; 0x40
 8000eaa:	d906      	bls.n	8000eba <Hex2Num+0x46>
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b46      	cmp	r3, #70	; 0x46
 8000eb0:	d803      	bhi.n	8000eba <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3b37      	subs	r3, #55	; 0x37
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	e000      	b.n	8000ebc <Hex2Num+0x48>
    }

    return 0;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000eda:	e012      	b.n	8000f02 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ffc4 	bl	8000e74 <Hex2Num>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
        i++;
 8000efc:	7afb      	ldrb	r3, [r7, #11]
 8000efe:	3301      	adds	r3, #1
 8000f00:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b2f      	cmp	r3, #47	; 0x2f
 8000f08:	d903      	bls.n	8000f12 <ParseHexNumber+0x4a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b39      	cmp	r3, #57	; 0x39
 8000f10:	d9e4      	bls.n	8000edc <ParseHexNumber+0x14>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b60      	cmp	r3, #96	; 0x60
 8000f18:	d903      	bls.n	8000f22 <ParseHexNumber+0x5a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b66      	cmp	r3, #102	; 0x66
 8000f20:	d9dc      	bls.n	8000edc <ParseHexNumber+0x14>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b40      	cmp	r3, #64	; 0x40
 8000f28:	d903      	bls.n	8000f32 <ParseHexNumber+0x6a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b46      	cmp	r3, #70	; 0x46
 8000f30:	d9d4      	bls.n	8000edc <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <ParseHexNumber+0x76>
        *cnt = i;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	7afa      	ldrb	r2, [r7, #11]
 8000f3c:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b2d      	cmp	r3, #45	; 0x2d
 8000f64:	d119      	bne.n	8000f9a <ParseNumber+0x52>
        minus = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
        i++;
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f76:	e010      	b.n	8000f9a <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b30      	subs	r3, #48	; 0x30
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
        i++;
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa0:	d903      	bls.n	8000faa <ParseNumber+0x62>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b39      	cmp	r3, #57	; 0x39
 8000fa8:	d9e6      	bls.n	8000f78 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <ParseNumber+0x6e>
        *cnt = i;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	7bba      	ldrb	r2, [r7, #14]
 8000fb4:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <ParseNumber+0x7a>
        return 0 - sum;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	e000      	b.n	8000fc4 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fc2:	68bb      	ldr	r3, [r7, #8]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8000fde:	e019      	b.n	8001014 <ParseMAC+0x44>
    hexcnt = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b3a      	cmp	r3, #58	; 0x3a
 8000fea:	d00e      	beq.n	800100a <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8000fec:	f107 030e 	add.w	r3, r7, #14
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff68 	bl	8000ec8 <ParseHexNumber>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	73fa      	strb	r2, [r7, #15]
 8001000:	461a      	mov	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b2ca      	uxtb	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e1      	bne.n	8000fe0 <ParseMAC+0x10>
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001034:	e019      	b.n	800106a <ParseIP+0x44>
    hexcnt = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b2e      	cmp	r3, #46	; 0x2e
 8001040:	d00e      	beq.n	8001060 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8001042:	f107 030e 	add.w	r3, r7, #14
 8001046:	4619      	mov	r1, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff7d 	bl	8000f48 <ParseNumber>
 800104e:	4601      	mov	r1, r0
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	73fa      	strb	r2, [r7, #15]
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1e1      	bne.n	8001036 <ParseIP+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3302      	adds	r3, #2
 800108e:	4934      	ldr	r1, [pc, #208]	; (8001160 <AT_ParseInfo+0xe4>)
 8001090:	4618      	mov	r0, r3
 8001092:	f009 fc7d 	bl	800a990 <strtok>
 8001096:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001098:	e05a      	b.n	8001150 <AT_ParseInfo+0xd4>
    switch (num++) {
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	72fa      	strb	r2, [r7, #11]
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d84f      	bhi.n	8001144 <AT_ParseInfo+0xc8>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <AT_ParseInfo+0x30>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010d7 	.word	0x080010d7
 80010b4:	080010e7 	.word	0x080010e7
 80010b8:	080010f7 	.word	0x080010f7
 80010bc:	08001107 	.word	0x08001107
 80010c0:	08001117 	.word	0x08001117
 80010c4:	0800112b 	.word	0x0800112b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2220      	movs	r2, #32
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fc33 	bl	800a93a <strncpy>
      break;
 80010d4:	e037      	b.n	8001146 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3320      	adds	r3, #32
 80010da:	2218      	movs	r2, #24
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fc2b 	bl	800a93a <strncpy>
      break;
 80010e4:	e02f      	b.n	8001146 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3338      	adds	r3, #56	; 0x38
 80010ea:	2210      	movs	r2, #16
 80010ec:	68f9      	ldr	r1, [r7, #12]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 fc23 	bl	800a93a <strncpy>
      break;
 80010f4:	e027      	b.n	8001146 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3348      	adds	r3, #72	; 0x48
 80010fa:	2210      	movs	r2, #16
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fc1b 	bl	800a93a <strncpy>
      break;
 8001104:	e01f      	b.n	8001146 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3358      	adds	r3, #88	; 0x58
 800110a:	2210      	movs	r2, #16
 800110c:	68f9      	ldr	r1, [r7, #12]
 800110e:	4618      	mov	r0, r3
 8001110:	f009 fc13 	bl	800a93a <strncpy>
      break;
 8001114:	e017      	b.n	8001146 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001116:	2100      	movs	r1, #0
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f7ff ff15 	bl	8000f48 <ParseNumber>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001128:	e00d      	b.n	8001146 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <AT_ParseInfo+0xe8>)
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f009 fc2f 	bl	800a990 <strtok>
 8001132:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3368      	adds	r3, #104	; 0x68
 8001138:	2220      	movs	r2, #32
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	f009 fbfc 	bl	800a93a <strncpy>
      break;
 8001142:	e000      	b.n	8001146 <AT_ParseInfo+0xca>

    default: break;
 8001144:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001146:	4906      	ldr	r1, [pc, #24]	; (8001160 <AT_ParseInfo+0xe4>)
 8001148:	2000      	movs	r0, #0
 800114a:	f009 fc21 	bl	800a990 <strtok>
 800114e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1a1      	bne.n	800109a <AT_ParseInfo+0x1e>
  }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800c190 	.word	0x0800c190
 8001164:	0800c194 	.word	0x0800c194

08001168 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3302      	adds	r3, #2
 800117a:	4952      	ldr	r1, [pc, #328]	; (80012c4 <AT_ParseConnSettings+0x15c>)
 800117c:	4618      	mov	r0, r3
 800117e:	f009 fc07 	bl	800a990 <strtok>
 8001182:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001184:	e095      	b.n	80012b2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	73fa      	strb	r2, [r7, #15]
 800118c:	2b0b      	cmp	r3, #11
 800118e:	d87f      	bhi.n	8001290 <AT_ParseConnSettings+0x128>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <AT_ParseConnSettings+0x30>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011c9 	.word	0x080011c9
 800119c:	080011d7 	.word	0x080011d7
 80011a0:	080011e7 	.word	0x080011e7
 80011a4:	080011fb 	.word	0x080011fb
 80011a8:	0800120f 	.word	0x0800120f
 80011ac:	08001223 	.word	0x08001223
 80011b0:	08001231 	.word	0x08001231
 80011b4:	0800123f 	.word	0x0800123f
 80011b8:	0800124d 	.word	0x0800124d
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	08001269 	.word	0x08001269
 80011c4:	0800127d 	.word	0x0800127d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2221      	movs	r2, #33	; 0x21
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f009 fbb3 	bl	800a93a <strncpy>
      break;
 80011d4:	e05d      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	3321      	adds	r3, #33	; 0x21
 80011da:	2221      	movs	r2, #33	; 0x21
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f009 fbab 	bl	800a93a <strncpy>
      break;
 80011e4:	e055      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80011e6:	2100      	movs	r1, #0
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff fead 	bl	8000f48 <ParseNumber>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80011f8:	e04b      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80011fa:	2100      	movs	r1, #0
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f7ff fea3 	bl	8000f48 <ParseNumber>
 8001202:	4603      	mov	r3, r0
 8001204:	b2da      	uxtb	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800120c:	e041      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800120e:	2100      	movs	r1, #0
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fe99 	bl	8000f48 <ParseNumber>
 8001216:	4603      	mov	r3, r0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001220:	e037      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3348      	adds	r3, #72	; 0x48
 8001226:	4619      	mov	r1, r3
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff fefc 	bl	8001026 <ParseIP>
      break;
 800122e:	e030      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	334c      	adds	r3, #76	; 0x4c
 8001234:	4619      	mov	r1, r3
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	f7ff fef5 	bl	8001026 <ParseIP>
      break;
 800123c:	e029      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3350      	adds	r3, #80	; 0x50
 8001242:	4619      	mov	r1, r3
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7ff feee 	bl	8001026 <ParseIP>
      break;
 800124a:	e022      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3354      	adds	r3, #84	; 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff fee7 	bl	8001026 <ParseIP>
      break;
 8001258:	e01b      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3358      	adds	r3, #88	; 0x58
 800125e:	4619      	mov	r1, r3
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff fee0 	bl	8001026 <ParseIP>
      break;
 8001266:	e014      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001268:	2100      	movs	r1, #0
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f7ff fe6c 	bl	8000f48 <ParseNumber>
 8001270:	4603      	mov	r3, r0
 8001272:	b2da      	uxtb	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 800127a:	e00a      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800127c:	2100      	movs	r1, #0
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff fe62 	bl	8000f48 <ParseNumber>
 8001284:	4603      	mov	r3, r0
 8001286:	b2da      	uxtb	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 800128e:	e000      	b.n	8001292 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001290:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001292:	490c      	ldr	r1, [pc, #48]	; (80012c4 <AT_ParseConnSettings+0x15c>)
 8001294:	2000      	movs	r0, #0
 8001296:	f009 fb7b 	bl	800a990 <strtok>
 800129a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <AT_ParseConnSettings+0x14a>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b2c      	cmp	r3, #44	; 0x2c
 80012aa:	d102      	bne.n	80012b2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f af66 	bne.w	8001186 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800c190 	.word	0x0800c190

080012c8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3302      	adds	r3, #2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b31      	cmp	r3, #49	; 0x31
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	701a      	strb	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f7fe ff5e 	bl	80001d0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b299      	uxth	r1, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800131e:	461a      	mov	r2, r3
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	47a0      	blx	r4
 8001324:	4603      	mov	r3, r0
 8001326:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dd33      	ble.n	8001396 <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800133a:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
 8001342:	4603      	mov	r3, r0
 8001344:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8001346:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd1c      	ble.n	8001388 <AT_ExecuteCommand+0x94>
 800134e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001352:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001356:	da17      	bge.n	8001388 <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 8001358:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <AT_ExecuteCommand+0xac>)
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f009 fafa 	bl	800a960 <strstr>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e010      	b.n	8001398 <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001376:	490b      	ldr	r1, [pc, #44]	; (80013a4 <AT_ExecuteCommand+0xb0>)
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f009 faf1 	bl	800a960 <strstr>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001384:	2305      	movs	r3, #5
 8001386:	e007      	b.n	8001398 <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8001388:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800138c:	f113 0f04 	cmn.w	r3, #4
 8001390:	d101      	bne.n	8001396 <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001392:	2306      	movs	r3, #6
 8001394:	e000      	b.n	8001398 <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 8001396:	2304      	movs	r3, #4
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	0800c19c 	.word	0x0800c19c
 80013a4:	0800c1a8 	.word	0x0800c1a8

080013a8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f7fe ff04 	bl	80001d0 <strlen>
 80013c8:	4603      	mov	r3, r0
 80013ca:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80013cc:	8a7b      	ldrh	r3, [r7, #18]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <AT_RequestSendData+0x32>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e053      	b.n	8001482 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80013e6:	8a79      	ldrh	r1, [r7, #18]
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	4798      	blx	r3
 80013ec:	4603      	mov	r3, r0
 80013ee:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80013f0:	8a3a      	ldrh	r2, [r7, #16]
 80013f2:	8a7b      	ldrh	r3, [r7, #18]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d143      	bne.n	8001480 <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001404:	8879      	ldrh	r1, [r7, #2]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800140e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	429a      	cmp	r2, r3
 8001416:	d131      	bne.n	800147c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8001424:	2100      	movs	r1, #0
 8001426:	6a38      	ldr	r0, [r7, #32]
 8001428:	4798      	blx	r3
 800142a:	4603      	mov	r3, r0
 800142c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800142e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dd19      	ble.n	800146a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	4413      	add	r3, r2
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001442:	4912      	ldr	r1, [pc, #72]	; (800148c <AT_RequestSendData+0xe4>)
 8001444:	6a38      	ldr	r0, [r7, #32]
 8001446:	f009 fa8b 	bl	800a960 <strstr>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e016      	b.n	8001482 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <AT_RequestSendData+0xe8>)
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f009 fa82 	bl	800a960 <strstr>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001462:	2305      	movs	r3, #5
 8001464:	e00d      	b.n	8001482 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001466:	2302      	movs	r3, #2
 8001468:	e00b      	b.n	8001482 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800146a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800146e:	f113 0f04 	cmn.w	r3, #4
 8001472:	d101      	bne.n	8001478 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001474:	2306      	movs	r3, #6
 8001476:	e004      	b.n	8001482 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001478:	2302      	movs	r3, #2
 800147a:	e002      	b.n	8001482 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800147c:	2302      	movs	r3, #2
 800147e:	e000      	b.n	8001482 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001480:	2304      	movs	r3, #4
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800c19c 	.word	0x0800c19c
 8001490:	0800c1a8 	.word	0x0800c1a8

08001494 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014a8:	613b      	str	r3, [r7, #16]
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f7fe fe8d 	bl	80001d0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b299      	uxth	r1, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80014c0:	461a      	mov	r2, r3
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	47a0      	blx	r4
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	dd6f      	ble.n	80015ac <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80014d8:	2100      	movs	r1, #0
 80014da:	6938      	ldr	r0, [r7, #16]
 80014dc:	4798      	blx	r3
 80014de:	4603      	mov	r3, r0
 80014e0:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b0d      	cmp	r3, #13
 80014e8:	d104      	bne.n	80014f4 <AT_RequestReceiveData+0x60>
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3301      	adds	r3, #1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d001      	beq.n	80014f8 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 80014f4:	2304      	movs	r3, #4
 80014f6:	e05a      	b.n	80015ae <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3b02      	subs	r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
    p+=2;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	3302      	adds	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b07      	cmp	r3, #7
 8001508:	d94a      	bls.n	80015a0 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 800150a:	e002      	b.n	8001512 <AT_RequestReceiveData+0x7e>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3b01      	subs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <AT_RequestReceiveData+0x92>
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3b01      	subs	r3, #1
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b15      	cmp	r3, #21
 8001524:	d0f2      	beq.n	800150c <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3b08      	subs	r3, #8
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4413      	add	r3, r2
 8001538:	491f      	ldr	r1, [pc, #124]	; (80015b8 <AT_RequestReceiveData+0x124>)
 800153a:	4618      	mov	r0, r3
 800153c:	f009 fa10 	bl	800a960 <strstr>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d016      	beq.n	8001574 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	b29b      	uxth	r3, r3
 800154a:	3b08      	subs	r3, #8
 800154c:	b29a      	uxth	r2, r3
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	429a      	cmp	r2, r3
 800155a:	d202      	bcs.n	8001562 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f009 f8de 	bl	800a72c <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e01c      	b.n	80015ae <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3b04      	subs	r3, #4
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	2204      	movs	r2, #4
 800157e:	490f      	ldr	r1, [pc, #60]	; (80015bc <AT_RequestReceiveData+0x128>)
 8001580:	4618      	mov	r0, r3
 8001582:	f009 f8c5 	bl	800a710 <memcmp>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d104      	bne.n	8001596 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001592:	2305      	movs	r3, #5
 8001594:	e00b      	b.n	80015ae <AT_RequestReceiveData+0x11a>
     }
     
     UNLOCK_WIFI();
     *ReadData = 0;
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	2200      	movs	r2, #0
 800159a:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800159c:	2305      	movs	r3, #5
 800159e:	e006      	b.n	80015ae <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f113 0f04 	cmn.w	r3, #4
 80015a6:	d101      	bne.n	80015ac <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80015a8:	2306      	movs	r3, #6
 80015aa:	e000      	b.n	80015ae <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80015ac:	2304      	movs	r3, #4
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	0800c19c 	.word	0x0800c19c
 80015bc:	0800c1b0 	.word	0x0800c1b0

080015c0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80015c8:	2302      	movs	r3, #2
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f247 5230 	movw	r2, #30000	; 0x7530
 80015d2:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80015dc:	2000      	movs	r0, #0
 80015de:	4798      	blx	r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ec:	461a      	mov	r2, r3
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <ES_WIFI_Init+0x58>)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe7f 	bl	80012f4 <AT_ExecuteCommand>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d106      	bne.n	800160e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fd37 	bl	800107c <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800c1b8 	.word	0x0800c1b8

0800161c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <ES_WIFI_RegisterBusIO+0x2c>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001648:	2302      	movs	r3, #2
 800164a:	e014      	b.n	8001676 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	4932      	ldr	r1, [pc, #200]	; (8001764 <ES_WIFI_Connect+0xe0>)
 800169c:	4618      	mov	r0, r3
 800169e:	f009 f91d 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ae:	461a      	mov	r2, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fe1f 	bl	80012f4 <AT_ExecuteCommand>
 80016b6:	4603      	mov	r3, r0
 80016b8:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d14b      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4927      	ldr	r1, [pc, #156]	; (8001768 <ES_WIFI_Connect+0xe4>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f009 f906 	bl	800a8dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016dc:	461a      	mov	r2, r3
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fe08 	bl	80012f4 <AT_ExecuteCommand>
 80016e4:	4603      	mov	r3, r0
 80016e6:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d134      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	78fa      	ldrb	r2, [r7, #3]
 80016f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <ES_WIFI_Connect+0xe8>)
 8001700:	4618      	mov	r0, r3
 8001702:	f009 f8eb 	bl	800a8dc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001712:	461a      	mov	r2, r3
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fded 	bl	80012f4 <AT_ExecuteCommand>
 800171a:	4603      	mov	r3, r0
 800171c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d119      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800172a:	4911      	ldr	r1, [pc, #68]	; (8001770 <ES_WIFI_Connect+0xec>)
 800172c:	4618      	mov	r0, r3
 800172e:	f009 f8d5 	bl	800a8dc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800173e:	461a      	mov	r2, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fdd7 	bl	80012f4 <AT_ExecuteCommand>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001758:	7dfb      	ldrb	r3, [r7, #23]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800c1d0 	.word	0x0800c1d0
 8001768:	0800c1d8 	.word	0x0800c1d8
 800176c:	0800c1e0 	.word	0x0800c1e0
 8001770:	0800c1e8 	.word	0x0800c1e8

08001774 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001782:	4911      	ldr	r1, [pc, #68]	; (80017c8 <ES_WIFI_IsConnected+0x54>)
 8001784:	4618      	mov	r0, r3
 8001786:	f009 f8a9 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001796:	461a      	mov	r2, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fdab 	bl	80012f4 <AT_ExecuteCommand>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d108      	bne.n	80017ba <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	33d2      	adds	r3, #210	; 0xd2
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f7ff fd87 	bl	80012c8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0800c1ec 	.word	0x0800c1ec

080017cc <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017da:	4910      	ldr	r1, [pc, #64]	; (800181c <ES_WIFI_GetNetworkSettings+0x50>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f009 f87d 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017ee:	461a      	mov	r2, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fd7f 	bl	80012f4 <AT_ExecuteCommand>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d108      	bne.n	8001812 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	338d      	adds	r3, #141	; 0x8d
 800180a:	4619      	mov	r1, r3
 800180c:	4610      	mov	r0, r2
 800180e:	f7ff fcab 	bl	8001168 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0800c1f4 	.word	0x0800c1f4

08001820 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001830:	4912      	ldr	r1, [pc, #72]	; (800187c <ES_WIFI_GetMACAddress+0x5c>)
 8001832:	4618      	mov	r0, r3
 8001834:	f009 f852 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001844:	461a      	mov	r2, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd54 	bl	80012f4 <AT_ExecuteCommand>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800185c:	3302      	adds	r3, #2
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <ES_WIFI_GetMACAddress+0x60>)
 8001860:	4618      	mov	r0, r3
 8001862:	f009 f895 	bl	800a990 <strtok>
 8001866:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f7ff fbb0 	bl	8000fd0 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	0800c250 	.word	0x0800c250
 8001880:	0800c254 	.word	0x0800c254

08001884 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  
    
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	461a      	mov	r2, r3
 800189e:	4949      	ldr	r1, [pc, #292]	; (80019c4 <ES_WIFI_StartServerSingleConn+0x140>)
 80018a0:	f009 f81c 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018b0:	461a      	mov	r2, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fd1e 	bl	80012f4 <AT_ExecuteCommand>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	e079      	b.n	80019ba <ES_WIFI_StartServerSingleConn+0x136>
  }
  
  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d016      	beq.n	80018fc <ES_WIFI_StartServerSingleConn+0x78>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d012      	beq.n	80018fc <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018dc:	493a      	ldr	r1, [pc, #232]	; (80019c8 <ES_WIFI_StartServerSingleConn+0x144>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f008 fffc 	bl	800a8dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f0:	461a      	mov	r2, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fcfe 	bl	80012f4 <AT_ExecuteCommand>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
  }
  
  if(ret == ES_WIFI_STATUS_OK)
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d15a      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
  {  
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	492f      	ldr	r1, [pc, #188]	; (80019cc <ES_WIFI_StartServerSingleConn+0x148>)
 8001910:	f008 ffe4 	bl	800a8dc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001920:	461a      	mov	r2, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fce6 	bl	80012f4 <AT_ExecuteCommand>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d142      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	461a      	mov	r2, r3
 800193e:	4924      	ldr	r1, [pc, #144]	; (80019d0 <ES_WIFI_StartServerSingleConn+0x14c>)
 8001940:	f008 ffcc 	bl	800a8dc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001950:	461a      	mov	r2, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fcce 	bl	80012f4 <AT_ExecuteCommand>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)    
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d12a      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
		    {	
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	461a      	mov	r2, r3
 800196e:	4919      	ldr	r1, [pc, #100]	; (80019d4 <ES_WIFI_StartServerSingleConn+0x150>)
 8001970:	f008 ffb4 	bl	800a8dc <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001980:	461a      	mov	r2, r3
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fcb6 	bl	80012f4 <AT_ExecuteCommand>
 8001988:	4603      	mov	r3, r0
 800198a:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d112      	bne.n	80019b8 <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001998:	490f      	ldr	r1, [pc, #60]	; (80019d8 <ES_WIFI_StartServerSingleConn+0x154>)
 800199a:	4618      	mov	r0, r3
 800199c:	f008 ff9e 	bl	800a8dc <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ac:	461a      	mov	r2, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fca0 	bl	80012f4 <AT_ExecuteCommand>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	0800c2cc 	.word	0x0800c2cc
 80019c8:	0800c304 	.word	0x0800c304
 80019cc:	0800c2d4 	.word	0x0800c2d4
 80019d0:	0800c310 	.word	0x0800c310
 80019d4:	0800c2dc 	.word	0x0800c2dc
 80019d8:	0800c318 	.word	0x0800c318

080019dc <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	4926      	ldr	r1, [pc, #152]	; (8001a88 <ES_WIFI_StopServerSingleConn+0xac>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 ff73 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a02:	461a      	mov	r2, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fc75 	bl	80012f4 <AT_ExecuteCommand>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG_ES("Selecting socket failed: %s\n", Obj->CmdData);
 8001a14:	f240 7292 	movw	r2, #1938	; 0x792
 8001a18:	491c      	ldr	r1, [pc, #112]	; (8001a8c <ES_WIFI_StopServerSingleConn+0xb0>)
 8001a1a:	481d      	ldr	r0, [pc, #116]	; (8001a90 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001a1c:	f008 fe9c 	bl	800a758 <iprintf>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a26:	4619      	mov	r1, r3
 8001a28:	481a      	ldr	r0, [pc, #104]	; (8001a94 <ES_WIFI_StopServerSingleConn+0xb8>)
 8001a2a:	f008 fe95 	bl	800a758 <iprintf>
    UNLOCK_WIFI();
    return ret;  
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	e025      	b.n	8001a7e <ES_WIFI_StopServerSingleConn+0xa2>
  }
  
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a38:	4917      	ldr	r1, [pc, #92]	; (8001a98 <ES_WIFI_StopServerSingleConn+0xbc>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 ff4e 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff fc50 	bl	80012f4 <AT_ExecuteCommand>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00e      	beq.n	8001a7c <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG_ES("Stopping server failed %s\n", Obj->CmdData);
 8001a5e:	f240 729b 	movw	r2, #1947	; 0x79b
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <ES_WIFI_StopServerSingleConn+0xb0>)
 8001a64:	480a      	ldr	r0, [pc, #40]	; (8001a90 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001a66:	f008 fe77 	bl	800a758 <iprintf>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a70:	4619      	mov	r1, r3
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <ES_WIFI_StopServerSingleConn+0xc0>)
 8001a74:	f008 fe70 	bl	800a758 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e000      	b.n	8001a7e <ES_WIFI_StopServerSingleConn+0xa2>
  }
  
  UNLOCK_WIFI();
  return ret;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800c2cc 	.word	0x0800c2cc
 8001a8c:	0800c34c 	.word	0x0800c34c
 8001a90:	0800c364 	.word	0x0800c364
 8001a94:	0800c400 	.word	0x0800c400
 8001a98:	0800c420 	.word	0x0800c420
 8001a9c:	0800c428 	.word	0x0800c428

08001aa0 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	460b      	mov	r3, r1
 8001aae:	72fb      	strb	r3, [r7, #11]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001ab8:	893b      	ldrh	r3, [r7, #8]
 8001aba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001abe:	d302      	bcc.n	8001ac6 <ES_WIFI_SendData+0x26>
 8001ac0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001ac4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ad2:	7afa      	ldrb	r2, [r7, #11]
 8001ad4:	4942      	ldr	r1, [pc, #264]	; (8001be0 <ES_WIFI_SendData+0x140>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f008 ff00 	bl	800a8dc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fc02 	bl	80012f4 <AT_ExecuteCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d15e      	bne.n	8001bb8 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	4938      	ldr	r1, [pc, #224]	; (8001be4 <ES_WIFI_SendData+0x144>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f008 fee9 	bl	800a8dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b16:	461a      	mov	r2, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff fbeb 	bl	80012f4 <AT_ExecuteCommand>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d13d      	bne.n	8001ba4 <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b2e:	893a      	ldrh	r2, [r7, #8]
 8001b30:	492d      	ldr	r1, [pc, #180]	; (8001be8 <ES_WIFI_SendData+0x148>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f008 fed2 	bl	800a8dc <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff fc2b 	bl	80013a8 <AT_RequestSendData>
 8001b52:	4603      	mov	r3, r0
 8001b54:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <ES_WIFI_SendData+0x14c>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f008 fefb 	bl	800a960 <strstr>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d02c      	beq.n	8001bca <ES_WIFI_SendData+0x12a>
        {
          DEBUG_ES("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001b70:	f640 023b 	movw	r2, #2107	; 0x83b
 8001b74:	491e      	ldr	r1, [pc, #120]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001b76:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001b78:	f008 fdee 	bl	800a758 <iprintf>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b82:	4619      	mov	r1, r3
 8001b84:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <ES_WIFI_SendData+0x158>)
 8001b86:	f008 fde7 	bl	800a758 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	75fb      	strb	r3, [r7, #23]
 8001b8e:	e01c      	b.n	8001bca <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        DEBUG_ES("Send Data command failed\n");
 8001b90:	f640 0241 	movw	r2, #2113	; 0x841
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001b96:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001b98:	f008 fdde 	bl	800a758 <iprintf>
 8001b9c:	4817      	ldr	r0, [pc, #92]	; (8001bfc <ES_WIFI_SendData+0x15c>)
 8001b9e:	f008 fe61 	bl	800a864 <puts>
 8001ba2:	e012      	b.n	8001bca <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      DEBUG_ES("S2 command failed\n");
 8001ba4:	f640 0246 	movw	r2, #2118	; 0x846
 8001ba8:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001bac:	f008 fdd4 	bl	800a758 <iprintf>
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <ES_WIFI_SendData+0x160>)
 8001bb2:	f008 fe57 	bl	800a864 <puts>
 8001bb6:	e008      	b.n	8001bca <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   DEBUG_ES("P0 command failed\n");
 8001bb8:	f640 024b 	movw	r2, #2123	; 0x84b
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <ES_WIFI_SendData+0x150>)
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <ES_WIFI_SendData+0x154>)
 8001bc0:	f008 fdca 	bl	800a758 <iprintf>
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <ES_WIFI_SendData+0x164>)
 8001bc6:	f008 fe4d 	bl	800a864 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d102      	bne.n	8001bd6 <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	0800c2cc 	.word	0x0800c2cc
 8001be4:	0800c46c 	.word	0x0800c46c
 8001be8:	0800c474 	.word	0x0800c474
 8001bec:	0800c480 	.word	0x0800c480
 8001bf0:	0800c34c 	.word	0x0800c34c
 8001bf4:	0800c364 	.word	0x0800c364
 8001bf8:	0800c488 	.word	0x0800c488
 8001bfc:	0800c4a4 	.word	0x0800c4a4
 8001c00:	0800c4c0 	.word	0x0800c4c0
 8001c04:	0800c4d4 	.word	0x0800c4d4

08001c08 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	460b      	mov	r3, r1
 8001c16:	72fb      	strb	r3, [r7, #11]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001c20:	893b      	ldrh	r3, [r7, #8]
 8001c22:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001c26:	f200 808b 	bhi.w	8001d40 <ES_WIFI_ReceiveData+0x138>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c30:	7afa      	ldrb	r2, [r7, #11]
 8001c32:	4946      	ldr	r1, [pc, #280]	; (8001d4c <ES_WIFI_ReceiveData+0x144>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f008 fe51 	bl	800a8dc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c46:	461a      	mov	r2, r3
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff fb53 	bl	80012f4 <AT_ExecuteCommand>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d165      	bne.n	8001d24 <ES_WIFI_ReceiveData+0x11c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c5e:	893a      	ldrh	r2, [r7, #8]
 8001c60:	493b      	ldr	r1, [pc, #236]	; (8001d50 <ES_WIFI_ReceiveData+0x148>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f008 fe3a 	bl	800a8dc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c74:	461a      	mov	r2, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff fb3c 	bl	80012f4 <AT_ExecuteCommand>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	75fb      	strb	r3, [r7, #23]
      if(ret == ES_WIFI_STATUS_OK)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d141      	bne.n	8001d0a <ES_WIFI_ReceiveData+0x102>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	4931      	ldr	r1, [pc, #196]	; (8001d54 <ES_WIFI_ReceiveData+0x14c>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f008 fe23 	bl	800a8dc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fb25 	bl	80012f4 <AT_ExecuteCommand>
 8001caa:	4603      	mov	r3, r0
 8001cac:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d120      	bne.n	8001cf6 <ES_WIFI_ReceiveData+0xee>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cba:	4927      	ldr	r1, [pc, #156]	; (8001d58 <ES_WIFI_ReceiveData+0x150>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f008 fe0d 	bl	800a8dc <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fbde 	bl	8001494 <AT_RequestReceiveData>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	75fb      	strb	r3, [r7, #23]
          if (ret != ES_WIFI_STATUS_OK)
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02e      	beq.n	8001d40 <ES_WIFI_ReceiveData+0x138>
          {
            DEBUG_ES("AT_RequestReceiveData  failed\n");
 8001ce2:	f640 02c4 	movw	r2, #2244	; 0x8c4
 8001ce6:	491d      	ldr	r1, [pc, #116]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001ce8:	481d      	ldr	r0, [pc, #116]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001cea:	f008 fd35 	bl	800a758 <iprintf>
 8001cee:	481d      	ldr	r0, [pc, #116]	; (8001d64 <ES_WIFI_ReceiveData+0x15c>)
 8001cf0:	f008 fdb8 	bl	800a864 <puts>
 8001cf4:	e024      	b.n	8001d40 <ES_WIFI_ReceiveData+0x138>
          }
        }
        else
        {
         DEBUG_ES("setting timeout failed\n");
 8001cf6:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8001cfa:	4918      	ldr	r1, [pc, #96]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001cfc:	4818      	ldr	r0, [pc, #96]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001cfe:	f008 fd2b 	bl	800a758 <iprintf>
 8001d02:	4819      	ldr	r0, [pc, #100]	; (8001d68 <ES_WIFI_ReceiveData+0x160>)
 8001d04:	f008 fdae 	bl	800a864 <puts>
 8001d08:	e01a      	b.n	8001d40 <ES_WIFI_ReceiveData+0x138>
        }
      }
      else
      {
        DEBUG_ES("setting requested len failed\n");
 8001d0a:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001d0e:	4913      	ldr	r1, [pc, #76]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001d12:	f008 fd21 	bl	800a758 <iprintf>
 8001d16:	4815      	ldr	r0, [pc, #84]	; (8001d6c <ES_WIFI_ReceiveData+0x164>)
 8001d18:	f008 fda4 	bl	800a864 <puts>
        *Receivedlen = 0;
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	e00d      	b.n	8001d40 <ES_WIFI_ReceiveData+0x138>
      }
    }
    else
    {
      DEBUG_ES("setting socket for read failed\n");
 8001d24:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8001d28:	490c      	ldr	r1, [pc, #48]	; (8001d5c <ES_WIFI_ReceiveData+0x154>)
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <ES_WIFI_ReceiveData+0x158>)
 8001d2c:	f008 fd14 	bl	800a758 <iprintf>
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <ES_WIFI_ReceiveData+0x168>)
 8001d32:	f008 fd97 	bl	800a864 <puts>
      issue15++;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <ES_WIFI_ReceiveData+0x16c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <ES_WIFI_ReceiveData+0x16c>)
 8001d3e:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	0800c2cc 	.word	0x0800c2cc
 8001d50:	0800c4f8 	.word	0x0800c4f8
 8001d54:	0800c500 	.word	0x0800c500
 8001d58:	0800c508 	.word	0x0800c508
 8001d5c:	0800c34c 	.word	0x0800c34c
 8001d60:	0800c364 	.word	0x0800c364
 8001d64:	0800c50c 	.word	0x0800c50c
 8001d68:	0800c52c 	.word	0x0800c52c
 8001d6c:	0800c544 	.word	0x0800c544
 8001d70:	0800c564 	.word	0x0800c564
 8001d74:	200000f4 	.word	0x200000f4

08001d78 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	/* SPI initialization is completed during board initialization, and should not be repeated
	 * here. See:
	 * 	MX_SPI3_Init()
	 */

	return SPI_WIFI_ResetModule();
 8001d82:	f000 f805 	bl	8001d90 <SPI_WIFI_ResetModule>
 8001d86:	4603      	mov	r3, r0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <SPI_WIFI_ResetModule>:

#endif


int8_t SPI_WIFI_ResetModule(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001d96:	f002 fbeb 	bl	8004570 <HAL_GetTick>
 8001d9a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	4830      	ldr	r0, [pc, #192]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001da8:	f002 ffaa 	bl	8004d00 <HAL_GPIO_WritePin>
 8001dac:	200a      	movs	r0, #10
 8001dae:	f002 fbeb 	bl	8004588 <HAL_Delay>
 8001db2:	2201      	movs	r2, #1
 8001db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db8:	482b      	ldr	r0, [pc, #172]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001dba:	f002 ffa1 	bl	8004d00 <HAL_GPIO_WritePin>
 8001dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc2:	f002 fbe1 	bl	8004588 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4827      	ldr	r0, [pc, #156]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001dcc:	f002 ff98 	bl	8004d00 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f000 f9cd 	bl	8002170 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001dd6:	e020      	b.n	8001e1a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 0xFFFF);
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	463a      	mov	r2, r7
 8001ddc:	18d1      	adds	r1, r2, r3
 8001dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de2:	2201      	movs	r2, #1
 8001de4:	4821      	ldr	r0, [pc, #132]	; (8001e6c <SPI_WIFI_ResetModule+0xdc>)
 8001de6:	f005 f92e 	bl	8007046 <HAL_SPI_Receive>
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3302      	adds	r3, #2
 8001df2:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001df4:	f002 fbbc 	bl	8004570 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d202      	bcs.n	8001e0a <SPI_WIFI_ResetModule+0x7a>
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4816      	ldr	r0, [pc, #88]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001e10:	f002 ff76 	bl	8004d00 <HAL_GPIO_WritePin>
      return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e021      	b.n	8001e5e <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001e1e:	f002 ff57 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d0d7      	beq.n	8001dd8 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <SPI_WIFI_ResetModule+0xd8>)
 8001e2e:	f002 ff67 	bl	8004d00 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e32:	783b      	ldrb	r3, [r7, #0]
 8001e34:	2b15      	cmp	r3, #21
 8001e36:	d10e      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b15      	cmp	r3, #21
 8001e3c:	d10b      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
 8001e3e:	78bb      	ldrb	r3, [r7, #2]
 8001e40:	2b0d      	cmp	r3, #13
 8001e42:	d108      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e44:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001e46:	2b0a      	cmp	r3, #10
 8001e48:	d105      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001e4a:	793b      	ldrb	r3, [r7, #4]
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	d102      	bne.n	8001e56 <SPI_WIFI_ResetModule+0xc6>
 8001e50:	797b      	ldrb	r3, [r7, #5]
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d002      	beq.n	8001e5c <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e000      	b.n	8001e5e <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	48001000 	.word	0x48001000
 8001e6c:	20002078 	.word	0x20002078

08001e70 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <SPI_WIFI_DeInit+0x10>)
 8001e76:	f005 f8be 	bl	8006ff6 <HAL_SPI_DeInit>
  RTOS_FREE_SEM_MUTEX();
  return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20002078 	.word	0x20002078

08001e84 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001e8c:	f002 fb70 	bl	8004570 <HAL_GetTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001e94:	e00a      	b.n	8001eac <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e96:	f002 fb6b 	bl	8004570 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad2      	subs	r2, r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d902      	bls.n	8001eac <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e007      	b.n	8001ebc <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001eac:	2102      	movs	r1, #2
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <wait_cmddata_rdy_high+0x40>)
 8001eb0:	f002 ff0e 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d1ed      	bne.n	8001e96 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	48001000 	.word	0x48001000

08001ec8 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001ed0:	f002 fb4e 	bl	8004570 <HAL_GetTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001ed8:	e00a      	b.n	8001ef0 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001eda:	f002 fb49 	bl	8004570 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d902      	bls.n	8001ef0 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e004      	b.n	8001efa <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <wait_cmddata_rdy_rising_event+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d0f0      	beq.n	8001eda <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 8001ef8:	2300      	movs	r3, #0
#endif
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000100 	.word	0x20000100

08001f08 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001f10:	f002 fb2e 	bl	8004570 <HAL_GetTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001f18:	e00a      	b.n	8001f30 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f1a:	f002 fb29 	bl	8004570 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d902      	bls.n	8001f30 <wait_spi_rx_event+0x28>
    {
      return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e004      	b.n	8001f3a <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <wait_spi_rx_event+0x3c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d0f0      	beq.n	8001f1a <wait_spi_rx_event+0x12>
    }
  }
  return 0; 
 8001f38:	2300      	movs	r3, #0
#endif
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000f8 	.word	0x200000f8

08001f48 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 8001f50:	f002 fb0e 	bl	8004570 <HAL_GetTick>
 8001f54:	4603      	mov	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001f58:	e00a      	b.n	8001f70 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f5a:	f002 fb09 	bl	8004570 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d902      	bls.n	8001f70 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	e004      	b.n	8001f7a <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <wait_spi_tx_event+0x3c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d0f0      	beq.n	8001f5a <wait_spi_tx_event+0x12>
    }
  }
  return 0; 
 8001f78:	2300      	movs	r3, #0
#endif
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200000fc 	.word	0x200000fc

08001f88 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	460b      	mov	r3, r1
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4834      	ldr	r0, [pc, #208]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8001fa0:	f002 feae 	bl	8004d00 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f8e3 	bl	8002170 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff8b 	bl	8001ec8 <wait_cmddata_rdy_rising_event>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da02      	bge.n	8001fbe <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001fb8:	f06f 0302 	mvn.w	r3, #2
 8001fbc:	e054      	b.n	8002068 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	482b      	ldr	r0, [pc, #172]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8001fc4:	f002 fe9c 	bl	8004d00 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001fc8:	200f      	movs	r0, #15
 8001fca:	f000 f8d1 	bl	8002170 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001fce:	e03d      	b.n	800204c <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	db02      	blt.n	8001fe0 <SPI_WIFI_ReceiveData+0x58>
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d13c      	bne.n	800205a <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <SPI_WIFI_ReceiveData+0xec>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi3, tmp, 1) != HAL_OK) {
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	4822      	ldr	r0, [pc, #136]	; (8002078 <SPI_WIFI_ReceiveData+0xf0>)
 8001ff0:	f005 fbfa 	bl	80077e8 <HAL_SPI_Receive_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	481c      	ldr	r0, [pc, #112]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8002000:	f002 fe7e 	bl	8004d00 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	e02e      	b.n	8002068 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff7b 	bl	8001f08 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002012:	7d3a      	ldrb	r2, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	7d7a      	ldrb	r2, [r7, #21]
 800201e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	3302      	adds	r3, #2
 8002024:	b29b      	uxth	r3, r3
 8002026:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3302      	adds	r3, #2
 800202c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800202e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002032:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002036:	db09      	blt.n	800204c <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002038:	2201      	movs	r2, #1
 800203a:	2101      	movs	r1, #1
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 800203e:	f002 fe5f 	bl	8004d00 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 8002042:	f7ff fea5 	bl	8001d90 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002046:	f06f 0303 	mvn.w	r3, #3
 800204a:	e00d      	b.n	8002068 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800204c:	2102      	movs	r1, #2
 800204e:	4808      	ldr	r0, [pc, #32]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8002050:	f002 fe3e 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d0ba      	beq.n	8001fd0 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 800205a:	2201      	movs	r2, #1
 800205c:	2101      	movs	r1, #1
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <SPI_WIFI_ReceiveData+0xe8>)
 8002060:	f002 fe4e 	bl	8004d00 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	48001000 	.word	0x48001000
 8002074:	200000f8 	.word	0x200000f8
 8002078:	20002078 	.word	0x20002078

0800207c <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	460b      	mov	r3, r1
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fef9 	bl	8001e84 <wait_cmddata_rdy_high>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	da02      	bge.n	800209e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	e04f      	b.n	800213e <SPI_WIFI_SendData+0xc2>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <SPI_WIFI_SendData+0xcc>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80020a4:	2200      	movs	r2, #0
 80020a6:	2101      	movs	r1, #1
 80020a8:	4828      	ldr	r0, [pc, #160]	; (800214c <SPI_WIFI_SendData+0xd0>)
 80020aa:	f002 fe29 	bl	8004d00 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f000 f85e 	bl	8002170 <SPI_WIFI_DelayUs>
  if (len > 1)
 80020b4:	897b      	ldrh	r3, [r7, #10]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d919      	bls.n	80020ee <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <SPI_WIFI_SendData+0xd4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, (uint8_t *)pdata , len/2) != HAL_OK)
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4822      	ldr	r0, [pc, #136]	; (8002154 <SPI_WIFI_SendData+0xd8>)
 80020cc:	f005 fafe 	bl	80076cc <HAL_SPI_Transmit_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80020d6:	2201      	movs	r2, #1
 80020d8:	2101      	movs	r1, #1
 80020da:	481c      	ldr	r0, [pc, #112]	; (800214c <SPI_WIFI_SendData+0xd0>)
 80020dc:	f002 fe10 	bl	8004d00 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	e02b      	b.n	800213e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff2d 	bl	8001f48 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002104:	230a      	movs	r3, #10
 8002106:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <SPI_WIFI_SendData+0xd4>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi3, Padding, 1) != HAL_OK)
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	480f      	ldr	r0, [pc, #60]	; (8002154 <SPI_WIFI_SendData+0xd8>)
 8002118:	f005 fad8 	bl	80076cc <HAL_SPI_Transmit_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002122:	2201      	movs	r2, #1
 8002124:	2101      	movs	r1, #1
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <SPI_WIFI_SendData+0xd0>)
 8002128:	f002 fdea 	bl	8004d00 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	e005      	b.n	800213e <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff07 	bl	8001f48 <wait_spi_tx_event>
    
  }
  return len;
 800213a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000100 	.word	0x20000100
 800214c:	48001000 	.word	0x48001000
 8002150:	200000fc 	.word	0x200000fc
 8002154:	20002078 	.word	0x20002078

08002158 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f002 fa11 	bl	8004588 <HAL_Delay>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	uint32_t       loop_per_us;
	static  uint32_t cycle_per_loop=0;

	// calibration happen on first call for a duration of 1 ms * nbcycle per loop
	// 10 cycle for STM32L4
	if (cycle_per_loop == 0 )
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d120      	bne.n	80021c2 <SPI_WIFI_DelayUs+0x52>
	{
		uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <SPI_WIFI_DelayUs+0x8c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <SPI_WIFI_DelayUs+0x90>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	617b      	str	r3, [r7, #20]
		uint32_t   t;
		ct=cycle_per_ms;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	60bb      	str	r3, [r7, #8]
		t=HAL_GetTick();
 8002192:	f002 f9ed 	bl	8004570 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]
		while(ct) ct--;
 8002198:	e002      	b.n	80021a0 <SPI_WIFI_DelayUs+0x30>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <SPI_WIFI_DelayUs+0x2a>
		cycle_per_loop=HAL_GetTick()-t;
 80021a6:	f002 f9e3 	bl	8004570 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021b2:	6013      	str	r3, [r2, #0]
		if (cycle_per_loop==0) cycle_per_loop=1;
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <SPI_WIFI_DelayUs+0x52>
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
	}

	loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <SPI_WIFI_DelayUs+0x8c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <SPI_WIFI_DelayUs+0x94>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <SPI_WIFI_DelayUs+0x88>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	60fb      	str	r3, [r7, #12]
	ct = n * loop_per_us;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	60bb      	str	r3, [r7, #8]
	while(ct) ct--;
 80021e2:	e002      	b.n	80021ea <SPI_WIFI_DelayUs+0x7a>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f9      	bne.n	80021e4 <SPI_WIFI_DelayUs+0x74>
	return;
 80021f0:	bf00      	nop
}
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000104 	.word	0x20000104
 80021fc:	20000004 	.word	0x20000004
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	431bde83 	.word	0x431bde83

08002208 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_SPI_RxCpltCallback+0x24>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_SPI_RxCpltCallback+0x24>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200000f8 	.word	0x200000f8

08002230 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_SPI_TxCpltCallback+0x24>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_SPI_TxCpltCallback+0x24>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	200000fc 	.word	0x200000fc

08002258 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <vApplicationGetIdleTaskMemory+0x2c>)
 8002268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <vApplicationGetIdleTaskMemory+0x30>)
 800226e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000108 	.word	0x20000108
 8002288:	2000015c 	.word	0x2000015c

0800228c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)ptr, len, 10);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	b29a      	uxth	r2, r3
 800229c:	230a      	movs	r3, #10
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	4803      	ldr	r0, [pc, #12]	; (80022b0 <_write+0x24>)
 80022a2:	f006 fb3b 	bl	800891c <HAL_UART_Transmit>
	return len;
 80022a6:	687b      	ldr	r3, [r7, #4]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20002174 	.word	0x20002174

080022b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b0aa      	sub	sp, #168	; 0xa8
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ba:	f002 f92c 	bl	8004516 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022be:	f000 f893 	bl	80023e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c2:	f000 f9a7 	bl	8002614 <MX_GPIO_Init>
  MX_SPI3_Init();
 80022c6:	f000 f907 	bl	80024d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80022ca:	f000 f973 	bl	80025b4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80022ce:	f000 f941 	bl	8002554 <MX_UART4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <main+0x104>)
 80022d4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80022d8:	461d      	mov	r5, r3
 80022da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f006 ffb9 	bl	8009264 <osThreadCreate>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a31      	ldr	r2, [pc, #196]	; (80023bc <main+0x108>)
 80022f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of readTemp */
  osThreadDef(readTemp, StartReadTemp, osPriorityNormal, 0, 128);
 80022f8:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <main+0x10c>)
 80022fa:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80022fe:	461d      	mov	r5, r3
 8002300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempHandle = osThreadCreate(osThread(readTemp), NULL);
 800230c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f006 ffa6 	bl	8009264 <osThreadCreate>
 8002318:	4603      	mov	r3, r0
 800231a:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <main+0x110>)
 800231c:	6013      	str	r3, [r2, #0]

  /* definition and creation of readHumidity */
  osThreadDef(readHumidity, StartReadHum, osPriorityNormal, 0, 128);
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <main+0x114>)
 8002320:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002324:	461d      	mov	r5, r3
 8002326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800232e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readHumidityHandle = osThreadCreate(osThread(readHumidity), NULL);
 8002332:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f006 ff93 	bl	8009264 <osThreadCreate>
 800233e:	4603      	mov	r3, r0
 8002340:	4a22      	ldr	r2, [pc, #136]	; (80023cc <main+0x118>)
 8002342:	6013      	str	r3, [r2, #0]

  /* definition and creation of readPressure */
  osThreadDef(readPressure, StartReadPressure, osPriorityNormal, 0, 128);
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <main+0x11c>)
 8002346:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800234a:	461d      	mov	r5, r3
 800234c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800234e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002350:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readPressureHandle = osThreadCreate(osThread(readPressure), NULL);
 8002358:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f006 ff80 	bl	8009264 <osThreadCreate>
 8002364:	4603      	mov	r3, r0
 8002366:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <main+0x120>)
 8002368:	6013      	str	r3, [r2, #0]

  /* definition and creation of readMagneto */
  osThreadDef(readMagneto, StartReadMagnetometer, osPriorityNormal, 0, 128);
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <main+0x124>)
 800236c:	f107 041c 	add.w	r4, r7, #28
 8002370:	461d      	mov	r5, r3
 8002372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800237a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readMagnetoHandle = osThreadCreate(osThread(readMagneto), NULL);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f006 ff6d 	bl	8009264 <osThreadCreate>
 800238a:	4603      	mov	r3, r0
 800238c:	4a13      	ldr	r2, [pc, #76]	; (80023dc <main+0x128>)
 800238e:	6013      	str	r3, [r2, #0]

  /* definition and creation of WebServer */
  osThreadDef(WebServer, StartWebServer, osPriorityNormal, 0, 128);
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <main+0x12c>)
 8002392:	463c      	mov	r4, r7
 8002394:	461d      	mov	r5, r3
 8002396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800239e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerHandle = osThreadCreate(osThread(WebServer), NULL);
 80023a2:	463b      	mov	r3, r7
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 ff5c 	bl	8009264 <osThreadCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <main+0x130>)
 80023b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80023b2:	f006 ff50 	bl	8009256 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <main+0x102>
 80023b8:	0800c66c 	.word	0x0800c66c
 80023bc:	20002064 	.word	0x20002064
 80023c0:	0800c688 	.word	0x0800c688
 80023c4:	20002070 	.word	0x20002070
 80023c8:	0800c6a4 	.word	0x0800c6a4
 80023cc:	200021f8 	.word	0x200021f8
 80023d0:	0800c6c0 	.word	0x0800c6c0
 80023d4:	2000206c 	.word	0x2000206c
 80023d8:	0800c6dc 	.word	0x0800c6dc
 80023dc:	20002164 	.word	0x20002164
 80023e0:	0800c6f8 	.word	0x0800c6f8
 80023e4:	20002170 	.word	0x20002170

080023e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0b8      	sub	sp, #224	; 0xe0
 80023ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f2:	2244      	movs	r2, #68	; 0x44
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f008 f9a6 	bl	800a748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2288      	movs	r2, #136	; 0x88
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f008 f998 	bl	800a748 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002418:	2302      	movs	r3, #2
 800241a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800241e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002426:	2310      	movs	r3, #16
 8002428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800242c:	2302      	movs	r3, #2
 800242e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002438:	2301      	movs	r3, #1
 800243a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800243e:	230a      	movs	r3, #10
 8002440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002444:	2307      	movs	r3, #7
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002456:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fa4e 	bl	80058fc <HAL_RCC_OscConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002466:	f000 fb63 	bl	8002b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800246a:	230f      	movs	r3, #15
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002470:	2303      	movs	r3, #3
 8002472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002488:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800248c:	2104      	movs	r1, #4
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fe1a 	bl	80060c8 <HAL_RCC_ClockConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800249a:	f000 fb49 	bl	8002b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4;
 800249e:	2309      	movs	r3, #9
 80024a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024a2:	2300      	movs	r3, #0
 80024a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80024a6:	2300      	movs	r3, #0
 80024a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 f843 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80024b8:	f000 fb3a 	bl	8002b30 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024c0:	f003 f9c6 	bl	8005850 <HAL_PWREx_ControlVoltageScaling>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80024ca:	f000 fb31 	bl	8002b30 <Error_Handler>
  }
}
 80024ce:	bf00      	nop
 80024d0:	37e0      	adds	r7, #224	; 0xe0
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_SPI3_Init+0x74>)
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <MX_SPI3_Init+0x78>)
 80024e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_SPI3_Init+0x74>)
 80024e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <MX_SPI3_Init+0x74>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <MX_SPI3_Init+0x74>)
 80024f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80024f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <MX_SPI3_Init+0x74>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <MX_SPI3_Init+0x74>)
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_SPI3_Init+0x74>)
 8002506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_SPI3_Init+0x74>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_SPI3_Init+0x74>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_SPI3_Init+0x74>)
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_SPI3_Init+0x74>)
 8002520:	2200      	movs	r2, #0
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_SPI3_Init+0x74>)
 8002526:	2207      	movs	r2, #7
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_SPI3_Init+0x74>)
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_SPI3_Init+0x74>)
 8002532:	2208      	movs	r2, #8
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_SPI3_Init+0x74>)
 8002538:	f004 fcba 	bl	8006eb0 <HAL_SPI_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002542:	f000 faf5 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20002078 	.word	0x20002078
 8002550:	40003c00 	.word	0x40003c00

08002554 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_UART4_Init+0x58>)
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <MX_UART4_Init+0x5c>)
 800255c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <MX_UART4_Init+0x58>)
 8002560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002564:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_UART4_Init+0x58>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_UART4_Init+0x58>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <MX_UART4_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_UART4_Init+0x58>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <MX_UART4_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <MX_UART4_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <MX_UART4_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <MX_UART4_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_UART4_Init+0x58>)
 8002598:	f006 f972 	bl	8008880 <HAL_UART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80025a2:	f000 fac5 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20002174 	.word	0x20002174
 80025b0:	40004c00 	.word	0x40004c00

080025b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <MX_USART1_UART_Init+0x5c>)
 80025bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025da:	220c      	movs	r2, #12
 80025dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <MX_USART1_UART_Init+0x58>)
 80025f8:	f006 f942 	bl	8008880 <HAL_UART_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002602:	f000 fa95 	bl	8002b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200020e0 	.word	0x200020e0
 8002610:	40013800 	.word	0x40013800

08002614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <MX_GPIO_Init+0x90>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <MX_GPIO_Init+0x90>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <MX_GPIO_Init+0x90>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002672:	2201      	movs	r2, #1
 8002674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <MX_GPIO_Init+0x94>)
 800267a:	f002 fb41 	bl	8004d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800267e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002684:	2301      	movs	r3, #1
 8002686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4619      	mov	r1, r3
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <MX_GPIO_Init+0x94>)
 8002698:	f002 f87c 	bl	8004794 <HAL_GPIO_Init>

}
 800269c:	bf00      	nop
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	48000400 	.word	0x48000400

080026ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	 // HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	 osDelay(1000);
 80026b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b8:	f006 fe20 	bl	80092fc <osDelay>
 80026bc:	e7fa      	b.n	80026b4 <StartDefaultTask+0x8>
	...

080026c0 <StartReadTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTemp */
void StartReadTemp(void const * argument)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTemp */
	float temp_value = 0;
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
	char *str_tmp = "Temperatura = %d.%02d°C\n\r";
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <StartReadTemp+0xa0>)
 80026d0:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_tmp)];
	int tmpInt1, tmpInt2;
	float tmpFrac;

	BSP_TSENSOR_Init();
 80026d2:	f001 fba5 	bl	8003e20 <BSP_TSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		temp_value = BSP_TSENSOR_ReadTemp();
 80026d6:	f001 fbbf 	bl	8003e58 <BSP_TSENSOR_ReadTemp>
 80026da:	ed87 0a07 	vstr	s0, [r7, #28]
		tmpInt1 = temp_value;
 80026de:	edd7 7a07 	vldr	s15, [r7, #28]
 80026e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e6:	ee17 3a90 	vmov	r3, s15
 80026ea:	617b      	str	r3, [r7, #20]
		tmpFrac = temp_value - tmpInt1;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fe:	edc7 7a04 	vstr	s15, [r7, #16]
		tmpInt2 = trunc(tmpFrac * 100);
 8002702:	edd7 7a04 	vldr	s15, [r7, #16]
 8002706:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002764 <StartReadTemp+0xa4>
 800270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd ff19 	bl	8000548 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	ec43 2b10 	vmov	d0, r2, r3
 800271e:	f009 fca5 	bl	800c06c <trunc>
 8002722:	ec53 2b10 	vmov	r2, r3, d0
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe f9ff 	bl	8000b2c <__aeabi_d2iz>
 800272e:	4603      	mov	r3, r0
 8002730:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_tmp, tmpInt1, tmpInt2);
 8002732:	f107 0008 	add.w	r0, r7, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	2104      	movs	r1, #4
 8002740:	f008 f898 	bl	800a874 <sniprintf>
		HAL_UART_Transmit(&huart4, (uint8_t *)output_str, sizeof(str_tmp), 1000);
 8002744:	f107 0108 	add.w	r1, r7, #8
 8002748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274c:	2204      	movs	r2, #4
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <StartReadTemp+0xa8>)
 8002750:	f006 f8e4 	bl	800891c <HAL_UART_Transmit>
		osDelay(delay);
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <StartReadTemp+0xac>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f006 fdcf 	bl	80092fc <osDelay>
		temp_value = BSP_TSENSOR_ReadTemp();
 800275e:	e7ba      	b.n	80026d6 <StartReadTemp+0x16>
 8002760:	0800c714 	.word	0x0800c714
 8002764:	42c80000 	.word	0x42c80000
 8002768:	20002174 	.word	0x20002174
 800276c:	20000002 	.word	0x20000002

08002770 <StartReadHum>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadHum */
void StartReadHum(void const * argument)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadHum */
  /* Infinite loop */
	float hum_value = 0;
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
	char *str_hum = "Umidita' = %d.%02d\n\r";
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <StartReadHum+0xa0>)
 8002780:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_hum)];
	int humInt1, humInt2;
	float humFrac;

	BSP_HSENSOR_Init();
 8002782:	f001 faad 	bl	8003ce0 <BSP_HSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		hum_value = BSP_HSENSOR_ReadHumidity();
 8002786:	f001 facb 	bl	8003d20 <BSP_HSENSOR_ReadHumidity>
 800278a:	ed87 0a07 	vstr	s0, [r7, #28]
		humInt1 = hum_value;
 800278e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002796:	ee17 3a90 	vmov	r3, s15
 800279a:	617b      	str	r3, [r7, #20]
		humFrac = hum_value - humInt1;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	edc7 7a04 	vstr	s15, [r7, #16]
		humInt2 = trunc(humFrac * 100);
 80027b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027b6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002814 <StartReadHum+0xa4>
 80027ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027be:	ee17 0a90 	vmov	r0, s15
 80027c2:	f7fd fec1 	bl	8000548 <__aeabi_f2d>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	ec43 2b10 	vmov	d0, r2, r3
 80027ce:	f009 fc4d 	bl	800c06c <trunc>
 80027d2:	ec53 2b10 	vmov	r2, r3, d0
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f7fe f9a7 	bl	8000b2c <__aeabi_d2iz>
 80027de:	4603      	mov	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_hum, humInt1, humInt2);
 80027e2:	f107 0008 	add.w	r0, r7, #8
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	2104      	movs	r1, #4
 80027f0:	f008 f840 	bl	800a874 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_hum), 1000);
 80027f4:	f107 0108 	add.w	r1, r7, #8
 80027f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fc:	2204      	movs	r2, #4
 80027fe:	4806      	ldr	r0, [pc, #24]	; (8002818 <StartReadHum+0xa8>)
 8002800:	f006 f88c 	bl	800891c <HAL_UART_Transmit>
		osDelay(delay);
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <StartReadHum+0xac>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f006 fd77 	bl	80092fc <osDelay>
		hum_value = BSP_HSENSOR_ReadHumidity();
 800280e:	e7ba      	b.n	8002786 <StartReadHum+0x16>
 8002810:	0800c730 	.word	0x0800c730
 8002814:	42c80000 	.word	0x42c80000
 8002818:	200020e0 	.word	0x200020e0
 800281c:	20000002 	.word	0x20000002

08002820 <StartReadPressure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadPressure */
void StartReadPressure(void const * argument)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadPressure */
	float pres_value = 0;
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
	char *str_pres = "Pressione = %d.%02d hPa\n\r";
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <StartReadPressure+0xa0>)
 8002830:	61bb      	str	r3, [r7, #24]
	char output_str[sizeof(str_pres)];
	int presInt1, presInt2;
	float presFrac;

	BSP_PSENSOR_Init();
 8002832:	f001 fac7 	bl	8003dc4 <BSP_PSENSOR_Init>
	/* Infinite loop */
	for(;;)
	{
		pres_value = BSP_PSENSOR_ReadPressure();
 8002836:	f001 fae5 	bl	8003e04 <BSP_PSENSOR_ReadPressure>
 800283a:	ed87 0a07 	vstr	s0, [r7, #28]
		presInt1 = pres_value;
 800283e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002846:	ee17 3a90 	vmov	r3, s15
 800284a:	617b      	str	r3, [r7, #20]
		presFrac = pres_value - presInt1;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ed97 7a07 	vldr	s14, [r7, #28]
 800285a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285e:	edc7 7a04 	vstr	s15, [r7, #16]
		presInt2 = trunc(presFrac * 100);
 8002862:	edd7 7a04 	vldr	s15, [r7, #16]
 8002866:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80028c4 <StartReadPressure+0xa4>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	ee17 0a90 	vmov	r0, s15
 8002872:	f7fd fe69 	bl	8000548 <__aeabi_f2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	ec43 2b10 	vmov	d0, r2, r3
 800287e:	f009 fbf5 	bl	800c06c <trunc>
 8002882:	ec53 2b10 	vmov	r2, r3, d0
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f94f 	bl	8000b2c <__aeabi_d2iz>
 800288e:	4603      	mov	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]
		snprintf(output_str, sizeof(output_str), str_pres, presInt1, presInt2);
 8002892:	f107 0008 	add.w	r0, r7, #8
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	2104      	movs	r1, #4
 80028a0:	f007 ffe8 	bl	800a874 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_pres), 1000);
 80028a4:	f107 0108 	add.w	r1, r7, #8
 80028a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ac:	2204      	movs	r2, #4
 80028ae:	4806      	ldr	r0, [pc, #24]	; (80028c8 <StartReadPressure+0xa8>)
 80028b0:	f006 f834 	bl	800891c <HAL_UART_Transmit>
		osDelay(delay);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <StartReadPressure+0xac>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f006 fd1f 	bl	80092fc <osDelay>
		pres_value = BSP_PSENSOR_ReadPressure();
 80028be:	e7ba      	b.n	8002836 <StartReadPressure+0x16>
 80028c0:	0800c748 	.word	0x0800c748
 80028c4:	42c80000 	.word	0x42c80000
 80028c8:	200020e0 	.word	0x200020e0
 80028cc:	20000002 	.word	0x20000002

080028d0 <StartReadMagnetometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadMagnetometer */
void StartReadMagnetometer(void const * argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b092      	sub	sp, #72	; 0x48
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadMagnetometer */
	int16_t xyz[3];
	int16_t x, y;
	char *str_tmp = "Direzione del nord = %d.%02d°\n\r";
 80028d8:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <StartReadMagnetometer+0x1f8>)
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
	char output_str[sizeof(str_tmp)];
	double direction, magnFrac;
	int magnInt1, magnInt2;
	double declination_angle = 3.45;
 80028dc:	a374      	add	r3, pc, #464	; (adr r3, 8002ab0 <StartReadMagnetometer+0x1e0>)
 80028de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28


	BSP_MAGNETO_Init();
 80028e6:	f001 fa29 	bl	8003d3c <BSP_MAGNETO_Init>
	/* Infinite loop */
	for(;;)
	{
		BSP_MAGNETO_GetXYZ(xyz);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 fa50 	bl	8003d94 <BSP_MAGNETO_GetXYZ>
		x = xyz[0];
 80028f4:	89bb      	ldrh	r3, [r7, #12]
 80028f6:	84fb      	strh	r3, [r7, #38]	; 0x26
		y = xyz[1];
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	84bb      	strh	r3, [r7, #36]	; 0x24

		if(y > 0)
 80028fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	dd2a      	ble.n	800295a <StartReadMagnetometer+0x8a>
			direction = 90 - (atan(x/y) * 180/M_PI);
 8002904:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002908:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800290c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fe07 	bl	8000524 <__aeabi_i2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	ec43 2b10 	vmov	d0, r2, r3
 800291e:	f009 f9fb 	bl	800bd18 <atan>
 8002922:	ec51 0b10 	vmov	r0, r1, d0
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	4b68      	ldr	r3, [pc, #416]	; (8002acc <StartReadMagnetometer+0x1fc>)
 800292c:	f7fd fe64 	bl	80005f8 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	a35f      	add	r3, pc, #380	; (adr r3, 8002ab8 <StartReadMagnetometer+0x1e8>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd ff85 	bl	800084c <__aeabi_ddiv>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	f04f 0000 	mov.w	r0, #0
 800294a:	4961      	ldr	r1, [pc, #388]	; (8002ad0 <StartReadMagnetometer+0x200>)
 800294c:	f7fd fc9c 	bl	8000288 <__aeabi_dsub>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002958:	e050      	b.n	80029fc <StartReadMagnetometer+0x12c>
		else if(y < 0)
 800295a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	da2a      	bge.n	80029b8 <StartReadMagnetometer+0xe8>
			direction = 270 - (atan(x/y) * 180/M_PI);
 8002962:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002966:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800296a:	fb92 f3f3 	sdiv	r3, r2, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fdd8 	bl	8000524 <__aeabi_i2d>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	ec43 2b10 	vmov	d0, r2, r3
 800297c:	f009 f9cc 	bl	800bd18 <atan>
 8002980:	ec51 0b10 	vmov	r0, r1, d0
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <StartReadMagnetometer+0x1fc>)
 800298a:	f7fd fe35 	bl	80005f8 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	a348      	add	r3, pc, #288	; (adr r3, 8002ab8 <StartReadMagnetometer+0x1e8>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd ff56 	bl	800084c <__aeabi_ddiv>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	a146      	add	r1, pc, #280	; (adr r1, 8002ac0 <StartReadMagnetometer+0x1f0>)
 80029a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029aa:	f7fd fc6d 	bl	8000288 <__aeabi_dsub>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80029b6:	e021      	b.n	80029fc <StartReadMagnetometer+0x12c>
		else if(y == 0 && x < 0)
 80029b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <StartReadMagnetometer+0x104>
 80029c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da05      	bge.n	80029d4 <StartReadMagnetometer+0x104>
			direction = 180.0;
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <StartReadMagnetometer+0x1fc>)
 80029ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80029d2:	e013      	b.n	80029fc <StartReadMagnetometer+0x12c>
		else if(y == 0 && x > 0)
 80029d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <StartReadMagnetometer+0x122>
 80029dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	dd06      	ble.n	80029f2 <StartReadMagnetometer+0x122>
			direction = 0.0;
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80029f0:	e004      	b.n	80029fc <StartReadMagnetometer+0x12c>
		else
			direction = -1.0;
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <StartReadMagnetometer+0x204>)
 80029f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		if(direction != -1.0){
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <StartReadMagnetometer+0x204>)
 8002a02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a06:	f7fe f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d146      	bne.n	8002a9e <StartReadMagnetometer+0x1ce>
			direction += declination_angle;
 8002a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a18:	f7fd fc38 	bl	800028c <__adddf3>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			magnInt1 = direction;
 8002a24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a28:	f7fe f880 	bl	8000b2c <__aeabi_d2iz>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	623b      	str	r3, [r7, #32]
			magnFrac = direction - magnInt1;
 8002a30:	6a38      	ldr	r0, [r7, #32]
 8002a32:	f7fd fd77 	bl	8000524 <__aeabi_i2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002a3e:	f7fd fc23 	bl	8000288 <__aeabi_dsub>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	e9c7 2306 	strd	r2, r3, [r7, #24]
			magnInt2 = trunc(magnFrac * 100);
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <StartReadMagnetometer+0x208>)
 8002a50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a54:	f7fd fdd0 	bl	80005f8 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	ec43 2b17 	vmov	d7, r2, r3
 8002a60:	eeb0 0a47 	vmov.f32	s0, s14
 8002a64:	eef0 0a67 	vmov.f32	s1, s15
 8002a68:	f009 fb00 	bl	800c06c <trunc>
 8002a6c:	ec53 2b10 	vmov	r2, r3, d0
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f85a 	bl	8000b2c <__aeabi_d2iz>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	617b      	str	r3, [r7, #20]
			snprintf(output_str, sizeof(output_str), str_tmp, magnInt1, magnInt2);
 8002a7c:	f107 0008 	add.w	r0, r7, #8
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a88:	2104      	movs	r1, #4
 8002a8a:	f007 fef3 	bl	800a874 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
 8002a8e:	f107 0108 	add.w	r1, r7, #8
 8002a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a96:	2204      	movs	r2, #4
 8002a98:	4810      	ldr	r0, [pc, #64]	; (8002adc <StartReadMagnetometer+0x20c>)
 8002a9a:	f005 ff3f 	bl	800891c <HAL_UART_Transmit>
		}

		osDelay(delay);
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <StartReadMagnetometer+0x210>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f006 fc2a 	bl	80092fc <osDelay>
		BSP_MAGNETO_GetXYZ(xyz);
 8002aa8:	e71f      	b.n	80028ea <StartReadMagnetometer+0x1a>
 8002aaa:	bf00      	nop
 8002aac:	f3af 8000 	nop.w
 8002ab0:	9999999a 	.word	0x9999999a
 8002ab4:	400b9999 	.word	0x400b9999
 8002ab8:	54442d18 	.word	0x54442d18
 8002abc:	400921fb 	.word	0x400921fb
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	4070e000 	.word	0x4070e000
 8002ac8:	0800c764 	.word	0x0800c764
 8002acc:	40668000 	.word	0x40668000
 8002ad0:	40568000 	.word	0x40568000
 8002ad4:	bff00000 	.word	0xbff00000
 8002ad8:	40590000 	.word	0x40590000
 8002adc:	200020e0 	.word	0x200020e0
 8002ae0:	20000002 	.word	0x20000002

08002ae4 <StartWebServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebServer */
void StartWebServer(void const * argument)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  do{
		  Initialize_WiFi(LED2_GPIO_Port, LED2_Pin);
 8002aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <StartWebServer+0x20>)
 8002af2:	f000 fb57 	bl	80031a4 <Initialize_WiFi>
	  }while(State == WS_ERROR);
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <StartWebServer+0x24>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d0f6      	beq.n	8002aec <StartWebServer+0x8>

	  WebServerProcess();
 8002afe:	f000 fbc1 	bl	8003284 <WebServerProcess>
  for(;;)
 8002b02:	e7f3      	b.n	8002aec <StartWebServer+0x8>
 8002b04:	48000400 	.word	0x48000400
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b1e:	f001 fd13 	bl	8004548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40001000 	.word	0x40001000

08002b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <Error_Handler+0x8>
	...

08002b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_MspInit+0x4c>)
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <HAL_MspInit+0x4c>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_MspInit+0x4c>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_MspInit+0x4c>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_MspInit+0x4c>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_MspInit+0x4c>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	210f      	movs	r1, #15
 8002b76:	f06f 0001 	mvn.w	r0, #1
 8002b7a:	f001 fde1 	bl	8004740 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_SPI_MspInit+0xb4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d144      	bne.n	8002c38 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bae:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4a24      	ldr	r2, [pc, #144]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_SPI_MspInit+0xb8>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c08:	2306      	movs	r3, #6
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	480d      	ldr	r0, [pc, #52]	; (8002c48 <HAL_SPI_MspInit+0xbc>)
 8002c14:	f001 fdbe 	bl	8004794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c28:	2306      	movs	r3, #6
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4619      	mov	r1, r3
 8002c32:	4806      	ldr	r0, [pc, #24]	; (8002c4c <HAL_SPI_MspInit+0xc0>)
 8002c34:	f001 fdae 	bl	8004794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c38:	bf00      	nop
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40003c00 	.word	0x40003c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000800 	.word	0x48000800
 8002c4c:	48000400 	.word	0x48000400

08002c50 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_SPI_MspDeInit+0x38>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10e      	bne.n	8002c80 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_SPI_MspDeInit+0x3c>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_SPI_MspDeInit+0x3c>)
 8002c68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8002c6e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002c72:	4807      	ldr	r0, [pc, #28]	; (8002c90 <HAL_SPI_MspDeInit+0x40>)
 8002c74:	f001 ff38 	bl	8004ae8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5);
 8002c78:	2120      	movs	r1, #32
 8002c7a:	4806      	ldr	r0, [pc, #24]	; (8002c94 <HAL_SPI_MspDeInit+0x44>)
 8002c7c:	f001 ff34 	bl	8004ae8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40003c00 	.word	0x40003c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000400 	.word	0x48000400

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_UART_MspInit+0xdc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d129      	bne.n	8002d0e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cea:	2303      	movs	r3, #3
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d08:	f001 fd44 	bl	8004794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d0c:	e02e      	b.n	8002d6c <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <HAL_UART_MspInit+0xe4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d129      	bne.n	8002d6c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d22:	6613      	str	r3, [r2, #96]	; 0x60
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d34:	4a10      	ldr	r2, [pc, #64]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_UART_MspInit+0xe0>)
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d5a:	2307      	movs	r3, #7
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	4619      	mov	r1, r3
 8002d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d68:	f001 fd14 	bl	8004794 <HAL_GPIO_Init>
}
 8002d6c:	bf00      	nop
 8002d6e:	3730      	adds	r7, #48	; 0x30
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40004c00 	.word	0x40004c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40013800 	.word	0x40013800

08002d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	2036      	movs	r0, #54	; 0x36
 8002d96:	f001 fcd3 	bl	8004740 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d9a:	2036      	movs	r0, #54	; 0x36
 8002d9c:	f001 fcec 	bl	8004778 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_InitTick+0x9c>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_InitTick+0x9c>)
 8002da6:	f043 0310 	orr.w	r3, r3, #16
 8002daa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_InitTick+0x9c>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002db8:	f107 0210 	add.w	r2, r7, #16
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fb26 	bl	8006414 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f003 faf8 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8002dcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <HAL_InitTick+0xa0>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_InitTick+0xa4>)
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_InitTick+0xa8>)
 8002de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_InitTick+0xa4>)
 8002de4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002de8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dea:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <HAL_InitTick+0xa4>)
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_InitTick+0xa4>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_InitTick+0xa4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002dfc:	4809      	ldr	r0, [pc, #36]	; (8002e24 <HAL_InitTick+0xa4>)
 8002dfe:	f005 fa6e 	bl	80082de <HAL_TIM_Base_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <HAL_InitTick+0xa4>)
 8002e0a:	f005 fac9 	bl	80083a0 <HAL_TIM_Base_Start_IT>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	e000      	b.n	8002e14 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3730      	adds	r7, #48	; 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	20002204 	.word	0x20002204
 8002e28:	40001000 	.word	0x40001000

08002e2c <prvGetRegistersFromStack>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void prvGetRegistersFromStack(uint32_t *pulFaultStackAddress)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b08b      	sub	sp, #44	; 0x2c
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
volatile uint32_t r12;
volatile uint32_t lr; /* Link register. */
volatile uint32_t pc; /* Program counter. */
volatile uint32_t psr;/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    r1 = pulFaultStackAddress[ 1 ];
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	623b      	str	r3, [r7, #32]
    r2 = pulFaultStackAddress[ 2 ];
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	61fb      	str	r3, [r7, #28]
    r3 = pulFaultStackAddress[ 3 ];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	61bb      	str	r3, [r7, #24]

    r12 = pulFaultStackAddress[ 4 ];
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	617b      	str	r3, [r7, #20]
    lr = pulFaultStackAddress[ 5 ];
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	613b      	str	r3, [r7, #16]
    pc = pulFaultStackAddress[ 6 ];
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	60fb      	str	r3, [r7, #12]
    psr = pulFaultStackAddress[ 7 ];
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	60bb      	str	r3, [r7, #8]

    /* When the following line is hit, the variables contain the register values. */
    for( ;; );
 8002e64:	e7fe      	b.n	8002e64 <prvGetRegistersFromStack+0x38>

08002e66 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <NMI_Handler+0x4>

08002e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm volatile
 8002e70:	f01e 0f04 	tst.w	lr, #4
 8002e74:	bf0c      	ite	eq
 8002e76:	f3ef 8008 	mrseq	r0, MSP
 8002e7a:	f3ef 8009 	mrsne	r0, PSP
 8002e7e:	6981      	ldr	r1, [r0, #24]
 8002e80:	4a00      	ldr	r2, [pc, #0]	; (8002e84 <handler2_address_const>)
 8002e82:	4710      	bx	r2

08002e84 <handler2_address_const>:
 8002e84:	08002e2d 	.word	0x08002e2d
	        " ldr r2, handler2_address_const                            \n"
	        " bx r2                                                     \n"
	        " handler2_address_const: .word prvGetRegistersFromStack    \n"
	    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <handler2_address_const+0x4>

08002e8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <MemManage_Handler+0x4>

08002e90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <BusFault_Handler+0x4>

08002e96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <UsageFault_Handler+0x4>

08002e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <TIM6_DAC_IRQHandler+0x10>)
 8002eb2:	f005 fae5 	bl	8008480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20002204 	.word	0x20002204

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f007 fbe4 	bl	800a6bc <__errno>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <_sbrk+0x64>)
 8002f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20018000 	.word	0x20018000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	2000035c 	.word	0x2000035c
 8002f28:	200029e0 	.word	0x200029e0

08002f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <SystemInit+0x5c>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <SystemInit+0x5c>)
 8002f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <SystemInit+0x60>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <SystemInit+0x60>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <SystemInit+0x60>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <SystemInit+0x60>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <SystemInit+0x60>)
 8002f58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <SystemInit+0x60>)
 8002f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <SystemInit+0x60>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <SystemInit+0x60>)
 8002f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SystemInit+0x60>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00
 8002f8c:	40021000 	.word	0x40021000

08002f90 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <WIFI_Init+0x40>)
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <WIFI_Init+0x44>)
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <WIFI_Init+0x48>)
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <WIFI_Init+0x4c>)
 8002fa6:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <WIFI_Init+0x50>)
 8002fa8:	480e      	ldr	r0, [pc, #56]	; (8002fe4 <WIFI_Init+0x54>)
 8002faa:	f7fe fb37 	bl	800161c <ES_WIFI_RegisterBusIO>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <WIFI_Init+0x54>)
 8002fb6:	f7fe fb03 	bl	80015c0 <ES_WIFI_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	08001f89 	.word	0x08001f89
 8002fd4:	0800207d 	.word	0x0800207d
 8002fd8:	08002159 	.word	0x08002159
 8002fdc:	08001e71 	.word	0x08001e71
 8002fe0:	08001d79 	.word	0x08001d79
 8002fe4:	20002250 	.word	0x20002250

08002fe8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	4809      	ldr	r0, [pc, #36]	; (8003028 <WIFI_Connect+0x40>)
 8003004:	f7fe fb3e 	bl	8001684 <ES_WIFI_Connect>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <WIFI_Connect+0x36>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800300e:	4806      	ldr	r0, [pc, #24]	; (8003028 <WIFI_Connect+0x40>)
 8003010:	f7fe fbdc 	bl	80017cc <ES_WIFI_GetNetworkSettings>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <WIFI_Connect+0x36>
    {
       ret = WIFI_STATUS_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 800301e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20002250 	.word	0x20002250

0800302c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <WIFI_GetMAC_Address+0x28>)
 800303c:	f7fe fbf0 	bl	8001820 <ES_WIFI_GetMACAddress>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20002250 	.word	0x20002250

08003058 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <WIFI_GetIP_Address+0x34>)
 8003066:	f7fe fb85 	bl	8001774 <ES_WIFI_IsConnected>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <WIFI_GetIP_Address+0x28>
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <WIFI_GetIP_Address+0x34>)
 8003072:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8003076:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20002250 	.word	0x20002250

08003090 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, const char *name, uint16_t port)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	460b      	mov	r3, r1
 800309e:	72fb      	strb	r3, [r7, #11]
 80030a0:	4613      	mov	r3, r2
 80030a2:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80030b4:	7afb      	ldrb	r3, [r7, #11]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	743b      	strb	r3, [r7, #16]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	4619      	mov	r1, r3
 80030c8:	4807      	ldr	r0, [pc, #28]	; (80030e8 <WIFI_StartServer+0x58>)
 80030ca:	f7fe fbdb 	bl	8001884 <ES_WIFI_StartServerSingleConn>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <WIFI_StartServer+0x4a>
  {
    ret = WIFI_STATUS_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80030da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20002250 	.word	0x20002250

080030ec <WIFI_StopServer>:
/**
  * @brief  Stop a server
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, socket)== ES_WIFI_STATUS_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4619      	mov	r1, r3
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <WIFI_StopServer+0x2c>)
 80030fe:	f7fe fc6d 	bl	80019dc <ES_WIFI_StopServerSingleConn>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20002250 	.word	0x20002250

0800311c <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	4613      	mov	r3, r2
 800312c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003132:	89ba      	ldrh	r2, [r7, #12]
 8003134:	7bf9      	ldrb	r1, [r7, #15]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <WIFI_SendData+0x40>)
 8003144:	f7fe fcac 	bl	8001aa0 <ES_WIFI_SendData>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20002250 	.word	0x20002250

08003160 <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	4603      	mov	r3, r0
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	4613      	mov	r3, r2
 8003170:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003176:	89ba      	ldrh	r2, [r7, #12]
 8003178:	7bf9      	ldrb	r1, [r7, #15]
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	4806      	ldr	r0, [pc, #24]	; (80031a0 <WIFI_ReceiveData+0x40>)
 8003188:	f7fe fd3e 	bl	8001c08 <ES_WIFI_ReceiveData>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK; 
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20002250 	.word	0x20002250

080031a4 <Initialize_WiFi>:
#include "wifi_lib.h"

void Initialize_WiFi(GPIO_TypeDef * led_port, uint16_t led) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]

	wifi_error_led_port = led_port;
 80031b0:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <Initialize_WiFi+0xc0>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
	error_led = led;
 80031b6:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <Initialize_WiFi+0xc4>)
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	8013      	strh	r3, [r2, #0]
	Socket = -1;
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <Initialize_WiFi+0xc8>)
 80031be:	f04f 32ff 	mov.w	r2, #4294967295
 80031c2:	601a      	str	r2, [r3, #0]

	if (WIFI_Init() == WIFI_STATUS_OK) {
 80031c4:	f7ff fee4 	bl	8002f90 <WIFI_Init>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d13b      	bne.n	8003246 <Initialize_WiFi+0xa2>

		if (WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK) {
 80031ce:	4828      	ldr	r0, [pc, #160]	; (8003270 <Initialize_WiFi+0xcc>)
 80031d0:	f7ff ff2c 	bl	800302c <WIFI_GetMAC_Address>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d129      	bne.n	800322e <Initialize_WiFi+0x8a>

			if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK) {
 80031da:	2203      	movs	r2, #3
 80031dc:	4925      	ldr	r1, [pc, #148]	; (8003274 <Initialize_WiFi+0xd0>)
 80031de:	4826      	ldr	r0, [pc, #152]	; (8003278 <Initialize_WiFi+0xd4>)
 80031e0:	f7ff ff02 	bl	8002fe8 <WIFI_Connect>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d115      	bne.n	8003216 <Initialize_WiFi+0x72>
				if (WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 80031ea:	4824      	ldr	r0, [pc, #144]	; (800327c <Initialize_WiFi+0xd8>)
 80031ec:	f7ff ff34 	bl	8003058 <WIFI_GetIP_Address>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <Initialize_WiFi+0x5a>
					State = WS_IDLE;
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <Initialize_WiFi+0xdc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e02f      	b.n	800325e <Initialize_WiFi+0xba>
				else {
					HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <Initialize_WiFi+0xc0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a19      	ldr	r2, [pc, #100]	; (8003268 <Initialize_WiFi+0xc4>)
 8003204:	8812      	ldrh	r2, [r2, #0]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fd91 	bl	8004d30 <HAL_GPIO_TogglePin>
					State = WS_ERROR;
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <Initialize_WiFi+0xdc>)
 8003210:	2203      	movs	r2, #3
 8003212:	701a      	strb	r2, [r3, #0]
					return;
 8003214:	e023      	b.n	800325e <Initialize_WiFi+0xba>
				}
			}
			else {
				HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <Initialize_WiFi+0xc0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a13      	ldr	r2, [pc, #76]	; (8003268 <Initialize_WiFi+0xc4>)
 800321c:	8812      	ldrh	r2, [r2, #0]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f001 fd85 	bl	8004d30 <HAL_GPIO_TogglePin>
				State = WS_ERROR;
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <Initialize_WiFi+0xdc>)
 8003228:	2203      	movs	r2, #3
 800322a:	701a      	strb	r2, [r3, #0]
				return;
 800322c:	e017      	b.n	800325e <Initialize_WiFi+0xba>
			}
		}
		else {
			HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <Initialize_WiFi+0xc0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <Initialize_WiFi+0xc4>)
 8003234:	8812      	ldrh	r2, [r2, #0]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f001 fd79 	bl	8004d30 <HAL_GPIO_TogglePin>
			State = WS_ERROR;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <Initialize_WiFi+0xdc>)
 8003240:	2203      	movs	r2, #3
 8003242:	701a      	strb	r2, [r3, #0]
			return;
 8003244:	e00b      	b.n	800325e <Initialize_WiFi+0xba>
		}
	}
	else {
		HAL_GPIO_TogglePin(wifi_error_led_port, error_led);
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <Initialize_WiFi+0xc0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <Initialize_WiFi+0xc4>)
 800324c:	8812      	ldrh	r2, [r2, #0]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f001 fd6d 	bl	8004d30 <HAL_GPIO_TogglePin>
		State = WS_ERROR;
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <Initialize_WiFi+0xdc>)
 8003258:	2203      	movs	r2, #3
 800325a:	701a      	strb	r2, [r3, #0]
		return;
 800325c:	bf00      	nop
	}
}
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20002068 	.word	0x20002068
 8003268:	200020dc 	.word	0x200020dc
 800326c:	200021fc 	.word	0x200021fc
 8003270:	20002168 	.word	0x20002168
 8003274:	0800c788 	.word	0x0800c788
 8003278:	0800c7a0 	.word	0x0800c7a0
 800327c:	20002200 	.word	0x20002200
 8003280:	20000008 	.word	0x20000008

08003284 <WebServerProcess>:

void WebServerProcess(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af02      	add	r7, sp, #8
	WIFI_Status_t ret;

  switch(State)
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <WebServerProcess+0x1a4>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <WebServerProcess+0x14>
 8003292:	2b01      	cmp	r3, #1
 8003294:	d018      	beq.n	80032c8 <WebServerProcess+0x44>
      State = WS_ERROR;
    }
    break;
  case WS_ERROR:
  default:
    break;
 8003296:	e0c2      	b.n	800341e <WebServerProcess+0x19a>
    Socket = 0;
 8003298:	4b64      	ldr	r3, [pc, #400]	; (800342c <WebServerProcess+0x1a8>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
    WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 800329e:	4b63      	ldr	r3, [pc, #396]	; (800342c <WebServerProcess+0x1a8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	2350      	movs	r3, #80	; 0x50
 80032a6:	4a62      	ldr	r2, [pc, #392]	; (8003430 <WebServerProcess+0x1ac>)
 80032a8:	2100      	movs	r1, #0
 80032aa:	f7ff fef1 	bl	8003090 <WIFI_StartServer>
    if(Socket != -1)
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <WebServerProcess+0x1a8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d003      	beq.n	80032c0 <WebServerProcess+0x3c>
      State = WS_CONNECTED;
 80032b8:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <WebServerProcess+0x1a4>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
    break;
 80032be:	e0ae      	b.n	800341e <WebServerProcess+0x19a>
      State = WS_ERROR;
 80032c0:	4b59      	ldr	r3, [pc, #356]	; (8003428 <WebServerProcess+0x1a4>)
 80032c2:	2203      	movs	r2, #3
 80032c4:	701a      	strb	r2, [r3, #0]
    break;
 80032c6:	e0aa      	b.n	800341e <WebServerProcess+0x19a>
    WIFI_ReceiveData(Socket, resp, 1200, &respLen, 1000);
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <WebServerProcess+0x1a8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	b2d8      	uxtb	r0, r3
 80032ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <WebServerProcess+0x1b0>)
 80032d6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80032da:	4957      	ldr	r1, [pc, #348]	; (8003438 <WebServerProcess+0x1b4>)
 80032dc:	f7ff ff40 	bl	8003160 <WIFI_ReceiveData>
    if( respLen > 0)
 80032e0:	4b54      	ldr	r3, [pc, #336]	; (8003434 <WebServerProcess+0x1b0>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8085 	beq.w	80033f4 <WebServerProcess+0x170>
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 80032ea:	4954      	ldr	r1, [pc, #336]	; (800343c <WebServerProcess+0x1b8>)
 80032ec:	4852      	ldr	r0, [pc, #328]	; (8003438 <WebServerProcess+0x1b4>)
 80032ee:	f007 fb37 	bl	800a960 <strstr>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01b      	beq.n	8003330 <WebServerProcess+0xac>
    	  ret = SendWebPage(sensor_data);
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <WebServerProcess+0x1bc>)
 80032fa:	ed93 6a00 	vldr	s12, [r3]
 80032fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8003302:	ed93 7a02 	vldr	s14, [r3, #8]
 8003306:	edd3 7a03 	vldr	s15, [r3, #12]
 800330a:	eeb0 0a46 	vmov.f32	s0, s12
 800330e:	eef0 0a66 	vmov.f32	s1, s13
 8003312:	eeb0 1a47 	vmov.f32	s2, s14
 8003316:	eef0 1a67 	vmov.f32	s3, s15
 800331a:	f000 f8a5 	bl	8003468 <SendWebPage>
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
    	  if(ret == WIFI_STATUS_ERROR){
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d165      	bne.n	80033f4 <WebServerProcess+0x170>
    		  printf("There was an error during web page's sending operation.\n\r");
 8003328:	4846      	ldr	r0, [pc, #280]	; (8003444 <WebServerProcess+0x1c0>)
 800332a:	f007 fa15 	bl	800a758 <iprintf>
    		  break;
 800332e:	e076      	b.n	800341e <WebServerProcess+0x19a>
      else if(strstr((char *)resp, "POST"))/* POST: received info */
 8003330:	4945      	ldr	r1, [pc, #276]	; (8003448 <WebServerProcess+0x1c4>)
 8003332:	4841      	ldr	r0, [pc, #260]	; (8003438 <WebServerProcess+0x1b4>)
 8003334:	f007 fb14 	bl	800a960 <strstr>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d05a      	beq.n	80033f4 <WebServerProcess+0x170>
          if(strstr((char *)resp, "radio"))
 800333e:	4943      	ldr	r1, [pc, #268]	; (800344c <WebServerProcess+0x1c8>)
 8003340:	483d      	ldr	r0, [pc, #244]	; (8003438 <WebServerProcess+0x1b4>)
 8003342:	f007 fb0d 	bl	800a960 <strstr>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d053      	beq.n	80033f4 <WebServerProcess+0x170>
            if(strstr((char *)resp, "radio=500"))
 800334c:	4940      	ldr	r1, [pc, #256]	; (8003450 <WebServerProcess+0x1cc>)
 800334e:	483a      	ldr	r0, [pc, #232]	; (8003438 <WebServerProcess+0x1b4>)
 8003350:	f007 fb06 	bl	800a960 <strstr>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <WebServerProcess+0xe0>
            	delay = FAST;
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <WebServerProcess+0x1d0>)
 800335c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003360:	801a      	strh	r2, [r3, #0]
 8003362:	e02e      	b.n	80033c2 <WebServerProcess+0x13e>
            else if(strstr((char *)resp, "radio=1000"))
 8003364:	493c      	ldr	r1, [pc, #240]	; (8003458 <WebServerProcess+0x1d4>)
 8003366:	4834      	ldr	r0, [pc, #208]	; (8003438 <WebServerProcess+0x1b4>)
 8003368:	f007 fafa 	bl	800a960 <strstr>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <WebServerProcess+0xf8>
            	delay = MEDIUM;
 8003372:	4b38      	ldr	r3, [pc, #224]	; (8003454 <WebServerProcess+0x1d0>)
 8003374:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003378:	801a      	strh	r2, [r3, #0]
 800337a:	e022      	b.n	80033c2 <WebServerProcess+0x13e>
            else if(strstr((char *)resp, "radio=2500"))
 800337c:	4937      	ldr	r1, [pc, #220]	; (800345c <WebServerProcess+0x1d8>)
 800337e:	482e      	ldr	r0, [pc, #184]	; (8003438 <WebServerProcess+0x1b4>)
 8003380:	f007 faee 	bl	800a960 <strstr>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <WebServerProcess+0x110>
            	delay = SLOW;
 800338a:	4b32      	ldr	r3, [pc, #200]	; (8003454 <WebServerProcess+0x1d0>)
 800338c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	e016      	b.n	80033c2 <WebServerProcess+0x13e>
            else if(strstr((char * )resp, "radio=5000"))
 8003394:	4932      	ldr	r1, [pc, #200]	; (8003460 <WebServerProcess+0x1dc>)
 8003396:	4828      	ldr	r0, [pc, #160]	; (8003438 <WebServerProcess+0x1b4>)
 8003398:	f007 fae2 	bl	800a960 <strstr>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <WebServerProcess+0x128>
            	delay = VERY_SLOW;
 80033a2:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <WebServerProcess+0x1d0>)
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e00a      	b.n	80033c2 <WebServerProcess+0x13e>
            else if(strstr((char *)resp, "radio=10000"))
 80033ac:	492d      	ldr	r1, [pc, #180]	; (8003464 <WebServerProcess+0x1e0>)
 80033ae:	4822      	ldr	r0, [pc, #136]	; (8003438 <WebServerProcess+0x1b4>)
 80033b0:	f007 fad6 	bl	800a960 <strstr>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <WebServerProcess+0x13e>
            	delay = TAKE_A_BREAK;
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <WebServerProcess+0x1d0>)
 80033bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80033c0:	801a      	strh	r2, [r3, #0]
            if(SendWebPage(sensor_data) != WIFI_STATUS_OK)
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <WebServerProcess+0x1bc>)
 80033c4:	ed93 6a00 	vldr	s12, [r3]
 80033c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80033cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80033d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80033d4:	eeb0 0a46 	vmov.f32	s0, s12
 80033d8:	eef0 0a66 	vmov.f32	s1, s13
 80033dc:	eeb0 1a47 	vmov.f32	s2, s14
 80033e0:	eef0 1a67 	vmov.f32	s3, s15
 80033e4:	f000 f840 	bl	8003468 <SendWebPage>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <WebServerProcess+0x170>
              State = WS_ERROR;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <WebServerProcess+0x1a4>)
 80033f0:	2203      	movs	r2, #3
 80033f2:	701a      	strb	r2, [r3, #0]
    if(WIFI_StopServer(Socket) == WIFI_STATUS_OK)
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <WebServerProcess+0x1a8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe77 	bl	80030ec <WIFI_StopServer>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <WebServerProcess+0x192>
      WIFI_StartServer(Socket, WIFI_TCP_PROTOCOL, "", PORT);
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <WebServerProcess+0x1a8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	2350      	movs	r3, #80	; 0x50
 800340c:	4a08      	ldr	r2, [pc, #32]	; (8003430 <WebServerProcess+0x1ac>)
 800340e:	2100      	movs	r1, #0
 8003410:	f7ff fe3e 	bl	8003090 <WIFI_StartServer>
    break;
 8003414:	e002      	b.n	800341c <WebServerProcess+0x198>
      State = WS_ERROR;
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <WebServerProcess+0x1a4>)
 8003418:	2203      	movs	r2, #3
 800341a:	701a      	strb	r2, [r3, #0]
    break;
 800341c:	bf00      	nop
  }
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000008 	.word	0x20000008
 800342c:	200021fc 	.word	0x200021fc
 8003430:	0800c7c0 	.word	0x0800c7c0
 8003434:	20002074 	.word	0x20002074
 8003438:	20000760 	.word	0x20000760
 800343c:	0800c7c4 	.word	0x0800c7c4
 8003440:	20002054 	.word	0x20002054
 8003444:	0800c7c8 	.word	0x0800c7c8
 8003448:	0800c804 	.word	0x0800c804
 800344c:	0800c80c 	.word	0x0800c80c
 8003450:	0800c814 	.word	0x0800c814
 8003454:	20000002 	.word	0x20000002
 8003458:	0800c820 	.word	0x0800c820
 800345c:	0800c82c 	.word	0x0800c82c
 8003460:	0800c838 	.word	0x0800c838
 8003464:	0800c844 	.word	0x0800c844

08003468 <SendWebPage>:

WIFI_Status_t SendWebPage(sensor_data_t sensor_data)
{
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	b0c1      	sub	sp, #260	; 0x104
 800346c:	af02      	add	r7, sp, #8
 800346e:	eeb0 6a40 	vmov.f32	s12, s0
 8003472:	eef0 6a60 	vmov.f32	s13, s1
 8003476:	eeb0 7a41 	vmov.f32	s14, s2
 800347a:	eef0 7a61 	vmov.f32	s15, s3
 800347e:	ed87 6a00 	vstr	s12, [r7]
 8003482:	edc7 6a01 	vstr	s13, [r7, #4]
 8003486:	ed87 7a02 	vstr	s14, [r7, #8]
 800348a:	edc7 7a03 	vstr	s15, [r7, #12]
  int dataInt1, dataFrac, dataInt2;
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 800348e:	4ac8      	ldr	r2, [pc, #800]	; (80037b0 <SendWebPage+0x348>)
 8003490:	4bc8      	ldr	r3, [pc, #800]	; (80037b4 <SendWebPage+0x34c>)
 8003492:	4614      	mov	r4, r2
 8003494:	461d      	mov	r5, r3
 8003496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034a6:	c407      	stmia	r4!, {r0, r1, r2}
 80034a8:	8023      	strh	r3, [r4, #0]
 80034aa:	3402      	adds	r4, #2
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 80034b0:	48bf      	ldr	r0, [pc, #764]	; (80037b0 <SendWebPage+0x348>)
 80034b2:	f7fc fe8d 	bl	80001d0 <strlen>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	4bbd      	ldr	r3, [pc, #756]	; (80037b0 <SendWebPage+0x348>)
 80034bc:	4413      	add	r3, r2
 80034be:	4abe      	ldr	r2, [pc, #760]	; (80037b8 <SendWebPage+0x350>)
 80034c0:	461d      	mov	r5, r3
 80034c2:	4614      	mov	r4, r2
 80034c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c6:	6028      	str	r0, [r5, #0]
 80034c8:	6069      	str	r1, [r5, #4]
 80034ca:	60aa      	str	r2, [r5, #8]
 80034cc:	60eb      	str	r3, [r5, #12]
 80034ce:	7823      	ldrb	r3, [r4, #0]
 80034d0:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80034d2:	48b7      	ldr	r0, [pc, #732]	; (80037b0 <SendWebPage+0x348>)
 80034d4:	f7fc fe7c 	bl	80001d0 <strlen>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	4bb4      	ldr	r3, [pc, #720]	; (80037b0 <SendWebPage+0x348>)
 80034de:	4413      	add	r3, r2
 80034e0:	4ab6      	ldr	r2, [pc, #728]	; (80037bc <SendWebPage+0x354>)
 80034e2:	4614      	mov	r4, r2
 80034e4:	469c      	mov	ip, r3
 80034e6:	f104 0e20 	add.w	lr, r4, #32
 80034ea:	4665      	mov	r5, ip
 80034ec:	4626      	mov	r6, r4
 80034ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034f0:	6028      	str	r0, [r5, #0]
 80034f2:	6069      	str	r1, [r5, #4]
 80034f4:	60aa      	str	r2, [r5, #8]
 80034f6:	60eb      	str	r3, [r5, #12]
 80034f8:	3410      	adds	r4, #16
 80034fa:	f10c 0c10 	add.w	ip, ip, #16
 80034fe:	4574      	cmp	r4, lr
 8003500:	d1f3      	bne.n	80034ea <SendWebPage+0x82>
 8003502:	4662      	mov	r2, ip
 8003504:	4623      	mov	r3, r4
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 800350a:	48a9      	ldr	r0, [pc, #676]	; (80037b0 <SendWebPage+0x348>)
 800350c:	f7fc fe60 	bl	80001d0 <strlen>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	4ba6      	ldr	r3, [pc, #664]	; (80037b0 <SendWebPage+0x348>)
 8003516:	4413      	add	r3, r2
 8003518:	4aa9      	ldr	r2, [pc, #676]	; (80037c0 <SendWebPage+0x358>)
 800351a:	4614      	mov	r4, r2
 800351c:	469c      	mov	ip, r3
 800351e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003522:	4665      	mov	r5, ip
 8003524:	4626      	mov	r6, r4
 8003526:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003528:	6028      	str	r0, [r5, #0]
 800352a:	6069      	str	r1, [r5, #4]
 800352c:	60aa      	str	r2, [r5, #8]
 800352e:	60eb      	str	r3, [r5, #12]
 8003530:	3410      	adds	r4, #16
 8003532:	f10c 0c10 	add.w	ip, ip, #16
 8003536:	4574      	cmp	r4, lr
 8003538:	d1f3      	bne.n	8003522 <SendWebPage+0xba>
 800353a:	4665      	mov	r5, ip
 800353c:	4623      	mov	r3, r4
 800353e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003540:	6028      	str	r0, [r5, #0]
 8003542:	6069      	str	r1, [r5, #4]
 8003544:	60aa      	str	r2, [r5, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 800354a:	4899      	ldr	r0, [pc, #612]	; (80037b0 <SendWebPage+0x348>)
 800354c:	f7fc fe40 	bl	80001d0 <strlen>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b96      	ldr	r3, [pc, #600]	; (80037b0 <SendWebPage+0x348>)
 8003556:	4413      	add	r3, r2
 8003558:	4a9a      	ldr	r2, [pc, #616]	; (80037c4 <SendWebPage+0x35c>)
 800355a:	461c      	mov	r4, r3
 800355c:	4613      	mov	r3, r2
 800355e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003560:	6020      	str	r0, [r4, #0]
 8003562:	6061      	str	r1, [r4, #4]
 8003564:	60a2      	str	r2, [r4, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	7323      	strb	r3, [r4, #12]

  // Add temperature
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temperature: <input type=\"text\" size=2 value=\"");
 800356a:	4891      	ldr	r0, [pc, #580]	; (80037b0 <SendWebPage+0x348>)
 800356c:	f7fc fe30 	bl	80001d0 <strlen>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <SendWebPage+0x348>)
 8003576:	4413      	add	r3, r2
 8003578:	4a93      	ldr	r2, [pc, #588]	; (80037c8 <SendWebPage+0x360>)
 800357a:	4618      	mov	r0, r3
 800357c:	4611      	mov	r1, r2
 800357e:	234e      	movs	r3, #78	; 0x4e
 8003580:	461a      	mov	r2, r3
 8003582:	f007 f8d3 	bl	800a72c <memcpy>
  dataInt1 = sensor_data.temperature;
 8003586:	edd7 7a00 	vldr	s15, [r7]
 800358a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800358e:	ee17 3a90 	vmov	r3, s15
 8003592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.temperature - dataInt1;
 8003596:	ed97 7a00 	vldr	s14, [r7]
 800359a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ae:	ee17 3a90 	vmov	r3, s15
 80035b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 80035b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035ba:	2264      	movs	r2, #100	; 0x64
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ffaf 	bl	8000524 <__aeabi_i2d>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd faad 	bl	8000b2c <__aeabi_d2iz>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)temp, "%d.%02d", dataInt1, dataInt2);
 80035d8:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80035dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035e0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80035e4:	4979      	ldr	r1, [pc, #484]	; (80037cc <SendWebPage+0x364>)
 80035e6:	f007 f979 	bl	800a8dc <siprintf>
  strcat((char *)http, (char *)temp);
 80035ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035ee:	4619      	mov	r1, r3
 80035f0:	486f      	ldr	r0, [pc, #444]	; (80037b0 <SendWebPage+0x348>)
 80035f2:	f007 f993 	bl	800a91c <strcat>
  strcat((char *)http, (char *)"\">°C");
 80035f6:	486e      	ldr	r0, [pc, #440]	; (80037b0 <SendWebPage+0x348>)
 80035f8:	f7fc fdea 	bl	80001d0 <strlen>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <SendWebPage+0x348>)
 8003602:	4413      	add	r3, r2
 8003604:	4a72      	ldr	r2, [pc, #456]	; (80037d0 <SendWebPage+0x368>)
 8003606:	6810      	ldr	r0, [r2, #0]
 8003608:	6018      	str	r0, [r3, #0]
 800360a:	8892      	ldrh	r2, [r2, #4]
 800360c:	809a      	strh	r2, [r3, #4]

  // Add humidity
  strcat((char *)http, (char *)"Humidity: <input type=\"text\" size=2 value=\"");
 800360e:	4868      	ldr	r0, [pc, #416]	; (80037b0 <SendWebPage+0x348>)
 8003610:	f7fc fdde 	bl	80001d0 <strlen>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	4b65      	ldr	r3, [pc, #404]	; (80037b0 <SendWebPage+0x348>)
 800361a:	4413      	add	r3, r2
 800361c:	4a6d      	ldr	r2, [pc, #436]	; (80037d4 <SendWebPage+0x36c>)
 800361e:	4614      	mov	r4, r2
 8003620:	469c      	mov	ip, r3
 8003622:	f104 0e20 	add.w	lr, r4, #32
 8003626:	4665      	mov	r5, ip
 8003628:	4626      	mov	r6, r4
 800362a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800362c:	6028      	str	r0, [r5, #0]
 800362e:	6069      	str	r1, [r5, #4]
 8003630:	60aa      	str	r2, [r5, #8]
 8003632:	60eb      	str	r3, [r5, #12]
 8003634:	3410      	adds	r4, #16
 8003636:	f10c 0c10 	add.w	ip, ip, #16
 800363a:	4574      	cmp	r4, lr
 800363c:	d1f3      	bne.n	8003626 <SendWebPage+0x1be>
 800363e:	4665      	mov	r5, ip
 8003640:	4623      	mov	r3, r4
 8003642:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003644:	6028      	str	r0, [r5, #0]
 8003646:	6069      	str	r1, [r5, #4]
 8003648:	60aa      	str	r2, [r5, #8]
  dataInt1 = sensor_data.humidity;
 800364a:	edd7 7a02 	vldr	s15, [r7, #8]
 800364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.humidity - dataInt1;
 800365a:	ed97 7a02 	vldr	s14, [r7, #8]
 800365e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003672:	ee17 3a90 	vmov	r3, s15
 8003676:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 800367a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800367e:	2264      	movs	r2, #100	; 0x64
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	4618      	mov	r0, r3
 8003686:	f7fc ff4d 	bl	8000524 <__aeabi_i2d>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd fa4b 	bl	8000b2c <__aeabi_d2iz>
 8003696:	4603      	mov	r3, r0
 8003698:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)hum, "%d.%02d", dataInt1, dataInt2);
 800369c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80036a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036a4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80036a8:	4948      	ldr	r1, [pc, #288]	; (80037cc <SendWebPage+0x364>)
 80036aa:	f007 f917 	bl	800a8dc <siprintf>
  strcat((char *)http, (char *)hum);
 80036ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80036b2:	4619      	mov	r1, r3
 80036b4:	483e      	ldr	r0, [pc, #248]	; (80037b0 <SendWebPage+0x348>)
 80036b6:	f007 f931 	bl	800a91c <strcat>
  strcat((char *)http, (char *)"\">\%");
 80036ba:	483d      	ldr	r0, [pc, #244]	; (80037b0 <SendWebPage+0x348>)
 80036bc:	f7fc fd88 	bl	80001d0 <strlen>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <SendWebPage+0x348>)
 80036c6:	4413      	add	r3, r2
 80036c8:	4a43      	ldr	r2, [pc, #268]	; (80037d8 <SendWebPage+0x370>)
 80036ca:	6810      	ldr	r0, [r2, #0]
 80036cc:	6018      	str	r0, [r3, #0]

  // Add pressure
  strcat((char *)http, (char *)"Pressure: <input type=\"text\" size=2 value=\"");
 80036ce:	4838      	ldr	r0, [pc, #224]	; (80037b0 <SendWebPage+0x348>)
 80036d0:	f7fc fd7e 	bl	80001d0 <strlen>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <SendWebPage+0x348>)
 80036da:	4413      	add	r3, r2
 80036dc:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <SendWebPage+0x374>)
 80036de:	4614      	mov	r4, r2
 80036e0:	469c      	mov	ip, r3
 80036e2:	f104 0e20 	add.w	lr, r4, #32
 80036e6:	4665      	mov	r5, ip
 80036e8:	4626      	mov	r6, r4
 80036ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036ec:	6028      	str	r0, [r5, #0]
 80036ee:	6069      	str	r1, [r5, #4]
 80036f0:	60aa      	str	r2, [r5, #8]
 80036f2:	60eb      	str	r3, [r5, #12]
 80036f4:	3410      	adds	r4, #16
 80036f6:	f10c 0c10 	add.w	ip, ip, #16
 80036fa:	4574      	cmp	r4, lr
 80036fc:	d1f3      	bne.n	80036e6 <SendWebPage+0x27e>
 80036fe:	4665      	mov	r5, ip
 8003700:	4623      	mov	r3, r4
 8003702:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003704:	6028      	str	r0, [r5, #0]
 8003706:	6069      	str	r1, [r5, #4]
 8003708:	60aa      	str	r2, [r5, #8]
  dataInt1 = sensor_data.pressure;
 800370a:	edd7 7a01 	vldr	s15, [r7, #4]
 800370e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003712:	ee17 3a90 	vmov	r3, s15
 8003716:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.pressure - dataInt1;
 800371a:	ed97 7a01 	vldr	s14, [r7, #4]
 800371e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003732:	ee17 3a90 	vmov	r3, s15
 8003736:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 800373a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800373e:	2264      	movs	r2, #100	; 0x64
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc feed 	bl	8000524 <__aeabi_i2d>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	f7fd f9eb 	bl	8000b2c <__aeabi_d2iz>
 8003756:	4603      	mov	r3, r0
 8003758:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)press, "%d.%02d", dataInt1, dataInt2);
 800375c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003764:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003768:	4918      	ldr	r1, [pc, #96]	; (80037cc <SendWebPage+0x364>)
 800376a:	f007 f8b7 	bl	800a8dc <siprintf>
  strcat((char *)http, (char *)press);
 800376e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003772:	4619      	mov	r1, r3
 8003774:	480e      	ldr	r0, [pc, #56]	; (80037b0 <SendWebPage+0x348>)
 8003776:	f007 f8d1 	bl	800a91c <strcat>
  strcat((char *)http, (char *)"\"> hPa");
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <SendWebPage+0x348>)
 800377c:	f7fc fd28 	bl	80001d0 <strlen>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <SendWebPage+0x348>)
 8003786:	4413      	add	r3, r2
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <SendWebPage+0x378>)
 800378a:	6810      	ldr	r0, [r2, #0]
 800378c:	6018      	str	r0, [r3, #0]
 800378e:	8891      	ldrh	r1, [r2, #4]
 8003790:	7992      	ldrb	r2, [r2, #6]
 8003792:	8099      	strh	r1, [r3, #4]
 8003794:	719a      	strb	r2, [r3, #6]

  // Add north direction
  strcat((char *)http, (char *)"North direction: <input type=\"text\" size=2 value=\"");
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <SendWebPage+0x348>)
 8003798:	f7fc fd1a 	bl	80001d0 <strlen>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <SendWebPage+0x348>)
 80037a2:	4413      	add	r3, r2
 80037a4:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <SendWebPage+0x37c>)
 80037a6:	4614      	mov	r4, r2
 80037a8:	469c      	mov	ip, r3
 80037aa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80037ae:	e01b      	b.n	80037e8 <SendWebPage+0x380>
 80037b0:	20000360 	.word	0x20000360
 80037b4:	0800c850 	.word	0x0800c850
 80037b8:	0800c890 	.word	0x0800c890
 80037bc:	0800c8a4 	.word	0x0800c8a4
 80037c0:	0800c8c8 	.word	0x0800c8c8
 80037c4:	0800c908 	.word	0x0800c908
 80037c8:	0800c918 	.word	0x0800c918
 80037cc:	0800c968 	.word	0x0800c968
 80037d0:	0800c970 	.word	0x0800c970
 80037d4:	0800c978 	.word	0x0800c978
 80037d8:	0800c9a4 	.word	0x0800c9a4
 80037dc:	0800c9a8 	.word	0x0800c9a8
 80037e0:	0800c9d4 	.word	0x0800c9d4
 80037e4:	0800c9dc 	.word	0x0800c9dc
 80037e8:	4665      	mov	r5, ip
 80037ea:	4626      	mov	r6, r4
 80037ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80037ee:	6028      	str	r0, [r5, #0]
 80037f0:	6069      	str	r1, [r5, #4]
 80037f2:	60aa      	str	r2, [r5, #8]
 80037f4:	60eb      	str	r3, [r5, #12]
 80037f6:	3410      	adds	r4, #16
 80037f8:	f10c 0c10 	add.w	ip, ip, #16
 80037fc:	4574      	cmp	r4, lr
 80037fe:	d1f3      	bne.n	80037e8 <SendWebPage+0x380>
 8003800:	4663      	mov	r3, ip
 8003802:	4622      	mov	r2, r4
 8003804:	8811      	ldrh	r1, [r2, #0]
 8003806:	7892      	ldrb	r2, [r2, #2]
 8003808:	8019      	strh	r1, [r3, #0]
 800380a:	709a      	strb	r2, [r3, #2]
  dataInt1 = sensor_data.north_direction;
 800380c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003814:	ee17 3a90 	vmov	r3, s15
 8003818:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  dataFrac = sensor_data.north_direction - dataInt1;
 800381c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800382c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003834:	ee17 3a90 	vmov	r3, s15
 8003838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dataInt2 = trunc(dataFrac * 100);
 800383c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fe6c 	bl	8000524 <__aeabi_i2d>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f7fd f96a 	bl	8000b2c <__aeabi_d2iz>
 8003858:	4603      	mov	r3, r0
 800385a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  sprintf((char *)magneto_dir, "%d.%02d", dataInt1, dataInt2);
 800385e:	f107 0018 	add.w	r0, r7, #24
 8003862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003866:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800386a:	4956      	ldr	r1, [pc, #344]	; (80039c4 <SendWebPage+0x55c>)
 800386c:	f007 f836 	bl	800a8dc <siprintf>
  strcat((char *)http, (char *)magneto_dir);
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	4619      	mov	r1, r3
 8003876:	4854      	ldr	r0, [pc, #336]	; (80039c8 <SendWebPage+0x560>)
 8003878:	f007 f850 	bl	800a91c <strcat>
  strcat((char *)http, (char *)"\">°");
 800387c:	4852      	ldr	r0, [pc, #328]	; (80039c8 <SendWebPage+0x560>)
 800387e:	f7fc fca7 	bl	80001d0 <strlen>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <SendWebPage+0x560>)
 8003888:	4413      	add	r3, r2
 800388a:	4a50      	ldr	r2, [pc, #320]	; (80039cc <SendWebPage+0x564>)
 800388c:	6810      	ldr	r0, [r2, #0]
 800388e:	6018      	str	r0, [r3, #0]
 8003890:	7912      	ldrb	r2, [r2, #4]
 8003892:	711a      	strb	r2, [r3, #4]

  // Add delay edit
  strcat((char *)http, (char *)"<p>Delay:<br><input type=\"radio\" name=\"radio\" value=\"500\" >0.5 seconds");
 8003894:	484c      	ldr	r0, [pc, #304]	; (80039c8 <SendWebPage+0x560>)
 8003896:	f7fc fc9b 	bl	80001d0 <strlen>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <SendWebPage+0x560>)
 80038a0:	4413      	add	r3, r2
 80038a2:	4a4b      	ldr	r2, [pc, #300]	; (80039d0 <SendWebPage+0x568>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	4611      	mov	r1, r2
 80038a8:	2347      	movs	r3, #71	; 0x47
 80038aa:	461a      	mov	r2, r3
 80038ac:	f006 ff3e 	bl	800a72c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1000\" checked>1 second");
 80038b0:	4845      	ldr	r0, [pc, #276]	; (80039c8 <SendWebPage+0x560>)
 80038b2:	f7fc fc8d 	bl	80001d0 <strlen>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <SendWebPage+0x560>)
 80038bc:	4413      	add	r3, r2
 80038be:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <SendWebPage+0x56c>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	4611      	mov	r1, r2
 80038c4:	2343      	movs	r3, #67	; 0x43
 80038c6:	461a      	mov	r2, r3
 80038c8:	f006 ff30 	bl	800a72c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"2500\" checked>2.5 seconds");
 80038cc:	483e      	ldr	r0, [pc, #248]	; (80039c8 <SendWebPage+0x560>)
 80038ce:	f7fc fc7f 	bl	80001d0 <strlen>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b3c      	ldr	r3, [pc, #240]	; (80039c8 <SendWebPage+0x560>)
 80038d8:	4413      	add	r3, r2
 80038da:	4a3f      	ldr	r2, [pc, #252]	; (80039d8 <SendWebPage+0x570>)
 80038dc:	4618      	mov	r0, r3
 80038de:	4611      	mov	r1, r2
 80038e0:	2346      	movs	r3, #70	; 0x46
 80038e2:	461a      	mov	r2, r3
 80038e4:	f006 ff22 	bl	800a72c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"5000\" checked>5 seconds");
 80038e8:	4837      	ldr	r0, [pc, #220]	; (80039c8 <SendWebPage+0x560>)
 80038ea:	f7fc fc71 	bl	80001d0 <strlen>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <SendWebPage+0x560>)
 80038f4:	4413      	add	r3, r2
 80038f6:	4a39      	ldr	r2, [pc, #228]	; (80039dc <SendWebPage+0x574>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	4611      	mov	r1, r2
 80038fc:	2344      	movs	r3, #68	; 0x44
 80038fe:	461a      	mov	r2, r3
 8003900:	f006 ff14 	bl	800a72c <memcpy>
  strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"10000\" checked>10 seconds");
 8003904:	4830      	ldr	r0, [pc, #192]	; (80039c8 <SendWebPage+0x560>)
 8003906:	f7fc fc63 	bl	80001d0 <strlen>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <SendWebPage+0x560>)
 8003910:	4413      	add	r3, r2
 8003912:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <SendWebPage+0x578>)
 8003914:	4618      	mov	r0, r3
 8003916:	4611      	mov	r1, r2
 8003918:	2346      	movs	r3, #70	; 0x46
 800391a:	461a      	mov	r2, r3
 800391c:	f006 ff06 	bl	800a72c <memcpy>

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8003920:	4829      	ldr	r0, [pc, #164]	; (80039c8 <SendWebPage+0x560>)
 8003922:	f7fc fc55 	bl	80001d0 <strlen>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <SendWebPage+0x560>)
 800392c:	4413      	add	r3, r2
 800392e:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <SendWebPage+0x57c>)
 8003930:	4614      	mov	r4, r2
 8003932:	469c      	mov	ip, r3
 8003934:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003938:	4665      	mov	r5, ip
 800393a:	4626      	mov	r6, r4
 800393c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800393e:	6028      	str	r0, [r5, #0]
 8003940:	6069      	str	r1, [r5, #4]
 8003942:	60aa      	str	r2, [r5, #8]
 8003944:	60eb      	str	r3, [r5, #12]
 8003946:	3410      	adds	r4, #16
 8003948:	f10c 0c10 	add.w	ip, ip, #16
 800394c:	4574      	cmp	r4, lr
 800394e:	d1f3      	bne.n	8003938 <SendWebPage+0x4d0>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8003950:	481d      	ldr	r0, [pc, #116]	; (80039c8 <SendWebPage+0x560>)
 8003952:	f7fc fc3d 	bl	80001d0 <strlen>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <SendWebPage+0x560>)
 800395c:	4413      	add	r3, r2
 800395e:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <SendWebPage+0x580>)
 8003960:	461d      	mov	r5, r3
 8003962:	4614      	mov	r4, r2
 8003964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003966:	6028      	str	r0, [r5, #0]
 8003968:	6069      	str	r1, [r5, #4]
 800396a:	60aa      	str	r2, [r5, #8]
 800396c:	60eb      	str	r3, [r5, #12]
 800396e:	8823      	ldrh	r3, [r4, #0]
 8003970:	78a2      	ldrb	r2, [r4, #2]
 8003972:	822b      	strh	r3, [r5, #16]
 8003974:	4613      	mov	r3, r2
 8003976:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, 1000);
 8003978:	4813      	ldr	r0, [pc, #76]	; (80039c8 <SendWebPage+0x560>)
 800397a:	f7fc fc29 	bl	80001d0 <strlen>
 800397e:	4603      	mov	r3, r0
 8003980:	b29a      	uxth	r2, r3
 8003982:	f107 0316 	add.w	r3, r7, #22
 8003986:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800398a:	9100      	str	r1, [sp, #0]
 800398c:	490e      	ldr	r1, [pc, #56]	; (80039c8 <SendWebPage+0x560>)
 800398e:	2000      	movs	r0, #0
 8003990:	f7ff fbc4 	bl	800311c <WIFI_SendData>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 800399a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <SendWebPage+0x550>
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	461c      	mov	r4, r3
 80039a6:	4808      	ldr	r0, [pc, #32]	; (80039c8 <SendWebPage+0x560>)
 80039a8:	f7fc fc12 	bl	80001d0 <strlen>
 80039ac:	4603      	mov	r3, r0
 80039ae:	429c      	cmp	r4, r3
 80039b0:	d002      	beq.n	80039b8 <SendWebPage+0x550>
  {
    ret = WIFI_STATUS_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  }

  return ret;
 80039b8:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
}
 80039bc:	4618      	mov	r0, r3
 80039be:	37fc      	adds	r7, #252	; 0xfc
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c4:	0800c968 	.word	0x0800c968
 80039c8:	20000360 	.word	0x20000360
 80039cc:	0800ca10 	.word	0x0800ca10
 80039d0:	0800ca18 	.word	0x0800ca18
 80039d4:	0800ca60 	.word	0x0800ca60
 80039d8:	0800caa4 	.word	0x0800caa4
 80039dc:	0800caec 	.word	0x0800caec
 80039e0:	0800cb30 	.word	0x0800cb30
 80039e4:	0800cb78 	.word	0x0800cb78
 80039e8:	0800cba8 	.word	0x0800cba8

080039ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039f0:	f7ff fa9c 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80039f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80039f6:	e003      	b.n	8003a00 <LoopCopyDataInit>

080039f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80039fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80039fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80039fe:	3104      	adds	r1, #4

08003a00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a00:	480a      	ldr	r0, [pc, #40]	; (8003a2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a08:	d3f6      	bcc.n	80039f8 <CopyDataInit>
	ldr	r2, =_sbss
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a0c:	e002      	b.n	8003a14 <LoopFillZerobss>

08003a0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a10:	f842 3b04 	str.w	r3, [r2], #4

08003a14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <LoopForever+0x16>)
	cmp	r2, r3
 8003a16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a18:	d3f9      	bcc.n	8003a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a1a:	f006 fe55 	bl	800a6c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a1e:	f7fe fc49 	bl	80022b4 <main>

08003a22 <LoopForever>:

LoopForever:
    b LoopForever
 8003a22:	e7fe      	b.n	8003a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003a28:	0800cda8 	.word	0x0800cda8
	ldr	r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a30:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8003a34:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8003a38:	200029dc 	.word	0x200029dc

08003a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC1_2_IRQHandler>
	...

08003a40 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003a60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a64:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a66:	2312      	movs	r3, #18
 8003a68:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003a72:	2304      	movs	r3, #4
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	481b      	ldr	r0, [pc, #108]	; (8003aec <I2Cx_MspInit+0xac>)
 8003a7e:	f000 fe89 	bl	8004794 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a82:	f107 0314 	add.w	r3, r7, #20
 8003a86:	4619      	mov	r1, r3
 8003a88:	4818      	ldr	r0, [pc, #96]	; (8003aec <I2Cx_MspInit+0xac>)
 8003a8a:	f000 fe83 	bl	8004794 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <I2Cx_MspInit+0xa8>)
 8003ab8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003abc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	210f      	movs	r1, #15
 8003ac2:	2021      	movs	r0, #33	; 0x21
 8003ac4:	f000 fe3c 	bl	8004740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003ac8:	2021      	movs	r0, #33	; 0x21
 8003aca:	f000 fe55 	bl	8004778 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	2022      	movs	r0, #34	; 0x22
 8003ad4:	f000 fe34 	bl	8004740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003ad8:	2022      	movs	r0, #34	; 0x22
 8003ada:	f000 fe4d 	bl	8004778 <HAL_NVIC_EnableIRQ>
}
 8003ade:	bf00      	nop
 8003ae0:	3728      	adds	r7, #40	; 0x28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	48000400 	.word	0x48000400

08003af0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <I2Cx_Init+0x54>)
 8003afc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <I2Cx_Init+0x58>)
 8003b02:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff89 	bl	8003a40 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f001 f918 	bl	8004d64 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003b34:	2100      	movs	r1, #0
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f001 fe30 	bl	800579c <HAL_I2CEx_ConfigAnalogFilter>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40005800 	.word	0x40005800
 8003b48:	00702681 	.word	0x00702681

08003b4c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af04      	add	r7, sp, #16
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	72fb      	strb	r3, [r7, #11]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	b299      	uxth	r1, r3
 8003b6e:	88f8      	ldrh	r0, [r7, #6]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b76:	9302      	str	r3, [sp, #8]
 8003b78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4603      	mov	r3, r0
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f001 fad4 	bl	8005130 <HAL_I2C_Mem_Read>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b92:	7afb      	ldrb	r3, [r7, #11]
 8003b94:	4619      	mov	r1, r3
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f832 	bl	8003c00 <I2Cx_Error>
  }
  return status;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b08a      	sub	sp, #40	; 0x28
 8003baa:	af04      	add	r7, sp, #16
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	4608      	mov	r0, r1
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	72fb      	strb	r3, [r7, #11]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	813b      	strh	r3, [r7, #8]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	88f8      	ldrh	r0, [r7, #6]
 8003bca:	893a      	ldrh	r2, [r7, #8]
 8003bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bd0:	9302      	str	r3, [sp, #8]
 8003bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f001 f993 	bl	8004f08 <HAL_I2C_Mem_Write>
 8003be2:	4603      	mov	r3, r0
 8003be4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f805 	bl	8003c00 <I2Cx_Error>
  }
  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f001 f938 	bl	8004e82 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ff6c 	bl	8003af0 <I2Cx_Init>
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <SENSOR_IO_Init+0x10>)
 8003c26:	f7ff ff63 	bl	8003af0 <I2Cx_Init>
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000297c 	.word	0x2000297c

08003c34 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	71fb      	strb	r3, [r7, #7]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	71bb      	strb	r3, [r7, #6]
 8003c42:	4613      	mov	r3, r2
 8003c44:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003c46:	79bb      	ldrb	r3, [r7, #6]
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	79f9      	ldrb	r1, [r7, #7]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	1d7b      	adds	r3, r7, #5
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2301      	movs	r3, #1
 8003c56:	4803      	ldr	r0, [pc, #12]	; (8003c64 <SENSOR_IO_Write+0x30>)
 8003c58:	f7ff ffa5 	bl	8003ba6 <I2Cx_WriteMultiple>
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	2000297c 	.word	0x2000297c

08003c68 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460a      	mov	r2, r1
 8003c72:	71fb      	strb	r3, [r7, #7]
 8003c74:	4613      	mov	r3, r2
 8003c76:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c7c:	79bb      	ldrb	r3, [r7, #6]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	79f9      	ldrb	r1, [r7, #7]
 8003c82:	2301      	movs	r3, #1
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f107 030f 	add.w	r3, r7, #15
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <SENSOR_IO_Read+0x38>)
 8003c90:	f7ff ff5c 	bl	8003b4c <I2Cx_ReadMultiple>

  return read_value;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2000297c 	.word	0x2000297c

08003ca4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	603a      	str	r2, [r7, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	71bb      	strb	r3, [r7, #6]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003cba:	79bb      	ldrb	r3, [r7, #6]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	79f9      	ldrb	r1, [r7, #7]
 8003cc0:	88bb      	ldrh	r3, [r7, #4]
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	4804      	ldr	r0, [pc, #16]	; (8003cdc <SENSOR_IO_ReadMultiple+0x38>)
 8003ccc:	f7ff ff3e 	bl	8003b4c <I2Cx_ReadMultiple>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	b29b      	uxth	r3, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	2000297c 	.word	0x2000297c

08003ce0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <BSP_HSENSOR_Init+0x38>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	20be      	movs	r0, #190	; 0xbe
 8003cec:	4798      	blx	r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2bbc      	cmp	r3, #188	; 0xbc
 8003cf2:	d002      	beq.n	8003cfa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	e009      	b.n	8003d0e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <BSP_HSENSOR_Init+0x3c>)
 8003cfc:	4a06      	ldr	r2, [pc, #24]	; (8003d18 <BSP_HSENSOR_Init+0x38>)
 8003cfe:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <BSP_HSENSOR_Init+0x3c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	20be      	movs	r0, #190	; 0xbe
 8003d08:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003d0e:	687b      	ldr	r3, [r7, #4]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000000c 	.word	0x2000000c
 8003d1c:	20000b60 	.word	0x20000b60

08003d20 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <BSP_HSENSOR_ReadHumidity+0x18>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	20be      	movs	r0, #190	; 0xbe
 8003d2c:	4798      	blx	r3
 8003d2e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000b60 	.word	0x20000b60

08003d3c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <BSP_MAGNETO_Init+0x50>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4798      	blx	r3
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b3d      	cmp	r3, #61	; 0x3d
 8003d50:	d002      	beq.n	8003d58 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	e013      	b.n	8003d80 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <BSP_MAGNETO_Init+0x54>)
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <BSP_MAGNETO_Init+0x50>)
 8003d5c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003d5e:	2358      	movs	r3, #88	; 0x58
 8003d60:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003d62:	2300      	movs	r3, #0
 8003d64:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <BSP_MAGNETO_Init+0x54>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	463a      	mov	r2, r7
 8003d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d7e:	4798      	blx	r3
  } 

  return ret;  
 8003d80:	79fb      	ldrb	r3, [r7, #7]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000028 	.word	0x20000028
 8003d90:	20000b64 	.word	0x20000b64

08003d94 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000b64 	.word	0x20000b64

08003dc4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <BSP_PSENSOR_Init+0x38>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	20ba      	movs	r0, #186	; 0xba
 8003dd0:	4798      	blx	r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2bb1      	cmp	r3, #177	; 0xb1
 8003dd6:	d002      	beq.n	8003dde <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	e009      	b.n	8003df2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <BSP_PSENSOR_Init+0x3c>)
 8003de0:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <BSP_PSENSOR_Init+0x38>)
 8003de2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <BSP_PSENSOR_Init+0x3c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	20ba      	movs	r0, #186	; 0xba
 8003dec:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003df2:	687b      	ldr	r3, [r7, #4]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2000005c 	.word	0x2000005c
 8003e00:	20000b68 	.word	0x20000b68

08003e04 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <BSP_PSENSOR_ReadPressure+0x18>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	20ba      	movs	r0, #186	; 0xba
 8003e10:	4798      	blx	r3
 8003e12:	eef0 7a40 	vmov.f32	s15, s0
}
 8003e16:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000b68 	.word	0x20000b68

08003e20 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <BSP_TSENSOR_Init+0x30>)
 8003e2c:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <BSP_TSENSOR_Init+0x34>)
 8003e2e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003e30:	f7ff fef6 	bl	8003c20 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <BSP_TSENSOR_Init+0x30>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	20be      	movs	r0, #190	; 0xbe
 8003e3e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003e44:	79fb      	ldrb	r3, [r7, #7]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000b6c 	.word	0x20000b6c
 8003e54:	20000018 	.word	0x20000018

08003e58 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <BSP_TSENSOR_ReadTemp+0x18>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	20be      	movs	r0, #190	; 0xbe
 8003e64:	4798      	blx	r3
 8003e66:	eef0 7a40 	vmov.f32	s15, s0
}
 8003e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000b6c 	.word	0x20000b6c

08003e74 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2120      	movs	r1, #32
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff feef 	bl	8003c68 <SENSOR_IO_Read>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	f023 0303 	bic.w	r3, r3, #3
 8003ea4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff feb8 	bl	8003c34 <SENSOR_IO_Write>
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8003eda:	f7ff fea1 	bl	8003c20 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff febf 	bl	8003c68 <SENSOR_IO_Read>
 8003eea:	4603      	mov	r3, r0
 8003eec:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	b2d8      	uxtb	r0, r3
 8003f06:	f107 020c 	add.w	r2, r7, #12
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	21b0      	movs	r1, #176	; 0xb0
 8003f0e:	f7ff fec9 	bl	8003ca4 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8003f12:	7b3b      	ldrb	r3, [r7, #12]
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8003f1a:	7b7b      	ldrb	r3, [r7, #13]
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	b2d8      	uxtb	r0, r3
 8003f26:	f107 020c 	add.w	r2, r7, #12
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	21b6      	movs	r1, #182	; 0xb6
 8003f2e:	f7ff feb9 	bl	8003ca4 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f32:	7b7b      	ldrb	r3, [r7, #13]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	b21a      	sxth	r2, r3
 8003f38:	7b3b      	ldrb	r3, [r7, #12]
 8003f3a:	b21b      	sxth	r3, r3
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	b2d8      	uxtb	r0, r3
 8003f44:	f107 020c 	add.w	r2, r7, #12
 8003f48:	2302      	movs	r3, #2
 8003f4a:	21ba      	movs	r1, #186	; 0xba
 8003f4c:	f7ff feaa 	bl	8003ca4 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f50:	7b7b      	ldrb	r3, [r7, #13]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	b21a      	sxth	r2, r3
 8003f56:	7b3b      	ldrb	r3, [r7, #12]
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	b2d8      	uxtb	r0, r3
 8003f62:	f107 020c 	add.w	r2, r7, #12
 8003f66:	2302      	movs	r3, #2
 8003f68:	21a8      	movs	r1, #168	; 0xa8
 8003f6a:	f7ff fe9b 	bl	8003ca4 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f6e:	7b7b      	ldrb	r3, [r7, #13]
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	b21a      	sxth	r2, r3
 8003f74:	7b3b      	ldrb	r3, [r7, #12]
 8003f76:	b21b      	sxth	r3, r3
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003f80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003f92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003fa4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003fa8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fca:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003fce:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fda:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8003fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fe2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004028 <HTS221_H_ReadHumidity+0x130>
 8003fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fee:	dd01      	ble.n	8003ff4 <HTS221_H_ReadHumidity+0xfc>
 8003ff0:	4b0e      	ldr	r3, [pc, #56]	; (800402c <HTS221_H_ReadHumidity+0x134>)
 8003ff2:	e00a      	b.n	800400a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8003ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	d502      	bpl.n	8004008 <HTS221_H_ReadHumidity+0x110>
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e000      	b.n	800400a <HTS221_H_ReadHumidity+0x112>
 8004008:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800400a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800400c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004010:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004014:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004018:	eef0 7a66 	vmov.f32	s15, s13
}
 800401c:	eeb0 0a67 	vmov.f32	s0, s15
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	447a0000 	.word	0x447a0000
 800402c:	447a0000 	.word	0x447a0000

08004030 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2120      	movs	r1, #32
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fe10 	bl	8003c68 <SENSOR_IO_Read>
 8004048:	4603      	mov	r3, r0
 800404a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	f023 0304 	bic.w	r3, r3, #4
 8004052:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004072:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	2120      	movs	r1, #32
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fdd9 	bl	8003c34 <SENSOR_IO_Write>
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b088      	sub	sp, #32
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	b2d8      	uxtb	r0, r3
 8004098:	f107 0208 	add.w	r2, r7, #8
 800409c:	2302      	movs	r3, #2
 800409e:	21b2      	movs	r1, #178	; 0xb2
 80040a0:	f7ff fe00 	bl	8003ca4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2135      	movs	r1, #53	; 0x35
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fddc 	bl	8003c68 <SENSOR_IO_Read>
 80040b0:	4603      	mov	r3, r0
 80040b2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	b21a      	sxth	r2, r3
 80040c0:	7a3b      	ldrb	r3, [r7, #8]
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	019b      	lsls	r3, r3, #6
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	7a7b      	ldrb	r3, [r7, #9]
 80040d6:	b21b      	sxth	r3, r3
 80040d8:	4313      	orrs	r3, r2
 80040da:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80040dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80040e0:	10db      	asrs	r3, r3, #3
 80040e2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80040e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80040e8:	10db      	asrs	r3, r3, #3
 80040ea:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	b2d8      	uxtb	r0, r3
 80040f0:	f107 0208 	add.w	r2, r7, #8
 80040f4:	2304      	movs	r3, #4
 80040f6:	21bc      	movs	r1, #188	; 0xbc
 80040f8:	f7ff fdd4 	bl	8003ca4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80040fc:	7a7b      	ldrb	r3, [r7, #9]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	b21a      	sxth	r2, r3
 8004102:	7a3b      	ldrb	r3, [r7, #8]
 8004104:	b21b      	sxth	r3, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	b21a      	sxth	r2, r3
 8004110:	7abb      	ldrb	r3, [r7, #10]
 8004112:	b21b      	sxth	r3, r3
 8004114:	4313      	orrs	r3, r2
 8004116:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	b2d8      	uxtb	r0, r3
 800411c:	f107 0208 	add.w	r2, r7, #8
 8004120:	2302      	movs	r3, #2
 8004122:	21aa      	movs	r1, #170	; 0xaa
 8004124:	f7ff fdbe 	bl	8003ca4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004128:	7a7b      	ldrb	r3, [r7, #9]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	b21a      	sxth	r2, r3
 800412e:	7a3b      	ldrb	r3, [r7, #8]
 8004130:	b21b      	sxth	r3, r3
 8004132:	4313      	orrs	r3, r2
 8004134:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004136:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800413a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004148:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800414c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800415e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004162:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004174:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004178:	ee07 3a90 	vmov	s15, r3
 800417c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004184:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	ee07 3a90 	vmov	s15, r3
}
 800418e:	eeb0 0a67 	vmov.f32	s0, s15
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	463b      	mov	r3, r7
 80041a0:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80041a4:	783b      	ldrb	r3, [r7, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	2120      	movs	r1, #32
 80041aa:	203c      	movs	r0, #60	; 0x3c
 80041ac:	f7ff fd42 	bl	8003c34 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80041b0:	787b      	ldrb	r3, [r7, #1]
 80041b2:	461a      	mov	r2, r3
 80041b4:	2121      	movs	r1, #33	; 0x21
 80041b6:	203c      	movs	r0, #60	; 0x3c
 80041b8:	f7ff fd3c 	bl	8003c34 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80041bc:	78bb      	ldrb	r3, [r7, #2]
 80041be:	461a      	mov	r2, r3
 80041c0:	2122      	movs	r1, #34	; 0x22
 80041c2:	203c      	movs	r0, #60	; 0x3c
 80041c4:	f7ff fd36 	bl	8003c34 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	461a      	mov	r2, r3
 80041cc:	2123      	movs	r1, #35	; 0x23
 80041ce:	203c      	movs	r0, #60	; 0x3c
 80041d0:	f7ff fd30 	bl	8003c34 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80041d4:	793b      	ldrb	r3, [r7, #4]
 80041d6:	461a      	mov	r2, r3
 80041d8:	2124      	movs	r1, #36	; 0x24
 80041da:	203c      	movs	r0, #60	; 0x3c
 80041dc:	f7ff fd2a 	bl	8003c34 <SENSOR_IO_Write>
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80041ee:	2300      	movs	r3, #0
 80041f0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80041f2:	2122      	movs	r1, #34	; 0x22
 80041f4:	203c      	movs	r0, #60	; 0x3c
 80041f6:	f7ff fd37 	bl	8003c68 <SENSOR_IO_Read>
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f023 0303 	bic.w	r3, r3, #3
 8004204:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	f043 0303 	orr.w	r3, r3, #3
 800420c:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	461a      	mov	r2, r3
 8004212:	2122      	movs	r1, #34	; 0x22
 8004214:	203c      	movs	r0, #60	; 0x3c
 8004216:	f7ff fd0d 	bl	8003c34 <SENSOR_IO_Write>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004226:	f7ff fcfb 	bl	8003c20 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800422a:	210f      	movs	r1, #15
 800422c:	203c      	movs	r0, #60	; 0x3c
 800422e:	f7ff fd1b 	bl	8003c68 <SENSOR_IO_Read>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}

08004238 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004246:	2122      	movs	r1, #34	; 0x22
 8004248:	203c      	movs	r0, #60	; 0x3c
 800424a:	f7ff fd0d 	bl	8003c68 <SENSOR_IO_Read>
 800424e:	4603      	mov	r3, r0
 8004250:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	f023 0320 	bic.w	r3, r3, #32
 8004258:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	f043 0320 	orr.w	r3, r3, #32
 8004266:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	461a      	mov	r2, r3
 800426c:	2122      	movs	r1, #34	; 0x22
 800426e:	203c      	movs	r0, #60	; 0x3c
 8004270:	f7ff fce0 	bl	8003c34 <SENSOR_IO_Write>
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8004284:	2300      	movs	r3, #0
 8004286:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8004292:	2121      	movs	r1, #33	; 0x21
 8004294:	203c      	movs	r0, #60	; 0x3c
 8004296:	f7ff fce7 	bl	8003c68 <SENSOR_IO_Read>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800429e:	f107 0208 	add.w	r2, r7, #8
 80042a2:	2306      	movs	r3, #6
 80042a4:	21a8      	movs	r1, #168	; 0xa8
 80042a6:	203c      	movs	r0, #60	; 0x3c
 80042a8:	f7ff fcfc 	bl	8003ca4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e01f      	b.n	80042f2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	3301      	adds	r3, #1
 80042b8:	f107 0220 	add.w	r2, r7, #32
 80042bc:	4413      	add	r3, r2
 80042be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f107 0120 	add.w	r1, r7, #32
 80042d0:	440b      	add	r3, r1
 80042d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4413      	add	r3, r2
 80042da:	b29a      	uxth	r2, r3
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
 80042de:	b212      	sxth	r2, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	f107 0120 	add.w	r1, r7, #32
 80042e6:	440b      	add	r3, r1
 80042e8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	3301      	adds	r3, #1
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	7ffb      	ldrb	r3, [r7, #31]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d9dc      	bls.n	80042b2 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042fe:	2b60      	cmp	r3, #96	; 0x60
 8004300:	d013      	beq.n	800432a <LIS3MDL_MagReadXYZ+0xae>
 8004302:	2b60      	cmp	r3, #96	; 0x60
 8004304:	dc14      	bgt.n	8004330 <LIS3MDL_MagReadXYZ+0xb4>
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d00c      	beq.n	8004324 <LIS3MDL_MagReadXYZ+0xa8>
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	dc10      	bgt.n	8004330 <LIS3MDL_MagReadXYZ+0xb4>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <LIS3MDL_MagReadXYZ+0x9c>
 8004312:	2b20      	cmp	r3, #32
 8004314:	d003      	beq.n	800431e <LIS3MDL_MagReadXYZ+0xa2>
 8004316:	e00b      	b.n	8004330 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <LIS3MDL_MagReadXYZ+0x104>)
 800431a:	61bb      	str	r3, [r7, #24]
    break;
 800431c:	e008      	b.n	8004330 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <LIS3MDL_MagReadXYZ+0x108>)
 8004320:	61bb      	str	r3, [r7, #24]
    break;
 8004322:	e005      	b.n	8004330 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <LIS3MDL_MagReadXYZ+0x10c>)
 8004326:	61bb      	str	r3, [r7, #24]
    break;
 8004328:	e002      	b.n	8004330 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <LIS3MDL_MagReadXYZ+0x110>)
 800432c:	61bb      	str	r3, [r7, #24]
    break;    
 800432e:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e01b      	b.n	800436e <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004336:	7ffb      	ldrb	r3, [r7, #31]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	f107 0220 	add.w	r2, r7, #32
 800433e:	4413      	add	r3, r2
 8004340:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800434c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004354:	7ffb      	ldrb	r3, [r7, #31]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004360:	ee17 2a90 	vmov	r2, s15
 8004364:	b212      	sxth	r2, r2
 8004366:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004368:	7ffb      	ldrb	r3, [r7, #31]
 800436a:	3301      	adds	r3, #1
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d9e0      	bls.n	8004336 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	3e0f5c29 	.word	0x3e0f5c29
 8004384:	3e947ae1 	.word	0x3e947ae1
 8004388:	3edc28f6 	.word	0x3edc28f6
 800438c:	3f147ae1 	.word	0x3f147ae1

08004390 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f87b 	bl	8004498 <LPS22HB_Init>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	4603      	mov	r3, r0
 80043b2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80043b8:	f7ff fc32 	bl	8003c20 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	210f      	movs	r1, #15
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fc50 	bl	8003c68 <SENSOR_IO_Read>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	74fb      	strb	r3, [r7, #19]
 80043ea:	e013      	b.n	8004414 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	3328      	adds	r3, #40	; 0x28
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	7cfc      	ldrb	r4, [r7, #19]
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f7ff fc34 	bl	8003c68 <SENSOR_IO_Read>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	f107 0318 	add.w	r3, r7, #24
 8004408:	4423      	add	r3, r4
 800440a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	3301      	adds	r3, #1
 8004412:	74fb      	strb	r3, [r7, #19]
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d9e8      	bls.n	80043ec <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	74fb      	strb	r3, [r7, #19]
 800441e:	e010      	b.n	8004442 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	f107 0218 	add.w	r2, r7, #24
 8004426:	4413      	add	r3, r2
 8004428:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800442c:	461a      	mov	r2, r3
 800442e:	7cfb      	ldrb	r3, [r7, #19]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	3301      	adds	r3, #1
 8004440:	74fb      	strb	r3, [r7, #19]
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d9eb      	bls.n	8004420 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004458:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2264      	movs	r2, #100	; 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	da01      	bge.n	800446e <LPS22HB_P_ReadPressure+0x96>
 800446a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800446e:	131b      	asrs	r3, r3, #12
 8004470:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800447c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004494 <LPS22HB_P_ReadPressure+0xbc>
 8004480:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004484:	eef0 7a66 	vmov.f32	s15, s13
}
 8004488:	eeb0 0a67 	vmov.f32	s0, s15
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop
 8004494:	42c80000 	.word	0x42c80000

08004498 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	211a      	movs	r1, #26
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fbdd 	bl	8003c68 <SENSOR_IO_Read>
 80044ae:	4603      	mov	r3, r0
 80044b0:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	211a      	movs	r1, #26
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fbb2 	bl	8003c34 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2110      	movs	r1, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fbc6 	bl	8003c68 <SENSOR_IO_Read>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80044ee:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	f023 0302 	bic.w	r3, r3, #2
 80044f6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	2110      	movs	r1, #16
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fb93 	bl	8003c34 <SENSOR_IO_Write>
}  
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004520:	2003      	movs	r0, #3
 8004522:	f000 f902 	bl	800472a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004526:	2000      	movs	r0, #0
 8004528:	f7fe fc2a 	bl	8002d80 <HAL_InitTick>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	71fb      	strb	r3, [r7, #7]
 8004536:	e001      	b.n	800453c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004538:	f7fe fb00 	bl	8002b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800453c:	79fb      	ldrb	r3, [r7, #7]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_IncTick+0x20>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_IncTick+0x24>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4413      	add	r3, r2
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <HAL_IncTick+0x24>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	2000006c 	.word	0x2000006c
 800456c:	200029c8 	.word	0x200029c8

08004570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return uwTick;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_GetTick+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	200029c8 	.word	0x200029c8

08004588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004590:	f7ff ffee 	bl	8004570 <HAL_GetTick>
 8004594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d005      	beq.n	80045ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80045a2:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <HAL_Delay+0x44>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045ae:	bf00      	nop
 80045b0:	f7ff ffde 	bl	8004570 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d8f7      	bhi.n	80045b0 <HAL_Delay+0x28>
  {
  }
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000006c 	.word	0x2000006c

080045d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <__NVIC_SetPriorityGrouping+0x44>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045ec:	4013      	ands	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <__NVIC_SetPriorityGrouping+0x44>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	60d3      	str	r3, [r2, #12]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <__NVIC_GetPriorityGrouping+0x18>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	f003 0307 	and.w	r3, r3, #7
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db0b      	blt.n	800465e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4907      	ldr	r1, [pc, #28]	; (800466c <__NVIC_EnableIRQ+0x38>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2001      	movs	r0, #1
 8004656:	fa00 f202 	lsl.w	r2, r0, r2
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000e100 	.word	0xe000e100

08004670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004680:	2b00      	cmp	r3, #0
 8004682:	db0a      	blt.n	800469a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	490c      	ldr	r1, [pc, #48]	; (80046bc <__NVIC_SetPriority+0x4c>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	0112      	lsls	r2, r2, #4
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	440b      	add	r3, r1
 8004694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004698:	e00a      	b.n	80046b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4908      	ldr	r1, [pc, #32]	; (80046c0 <__NVIC_SetPriority+0x50>)
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	3b04      	subs	r3, #4
 80046a8:	0112      	lsls	r2, r2, #4
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	440b      	add	r3, r1
 80046ae:	761a      	strb	r2, [r3, #24]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000e100 	.word	0xe000e100
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f1c3 0307 	rsb	r3, r3, #7
 80046de:	2b04      	cmp	r3, #4
 80046e0:	bf28      	it	cs
 80046e2:	2304      	movcs	r3, #4
 80046e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d902      	bls.n	80046f4 <NVIC_EncodePriority+0x30>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3b03      	subs	r3, #3
 80046f2:	e000      	b.n	80046f6 <NVIC_EncodePriority+0x32>
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43da      	mvns	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	401a      	ands	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	43d9      	mvns	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	4313      	orrs	r3, r2
         );
}
 800471e:	4618      	mov	r0, r3
 8004720:	3724      	adds	r7, #36	; 0x24
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ff4c 	bl	80045d0 <__NVIC_SetPriorityGrouping>
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004752:	f7ff ff61 	bl	8004618 <__NVIC_GetPriorityGrouping>
 8004756:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	6978      	ldr	r0, [r7, #20]
 800475e:	f7ff ffb1 	bl	80046c4 <NVIC_EncodePriority>
 8004762:	4602      	mov	r2, r0
 8004764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff ff80 	bl	8004670 <__NVIC_SetPriority>
}
 8004770:	bf00      	nop
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff54 	bl	8004634 <__NVIC_EnableIRQ>
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a2:	e17f      	b.n	8004aa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2101      	movs	r1, #1
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	4013      	ands	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8171 	beq.w	8004a9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d00b      	beq.n	80047dc <HAL_GPIO_Init+0x48>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d007      	beq.n	80047dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047d0:	2b11      	cmp	r3, #17
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b12      	cmp	r3, #18
 80047da:	d130      	bne.n	800483e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4013      	ands	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004812:	2201      	movs	r2, #1
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0201 	and.w	r2, r3, #1
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b03      	cmp	r3, #3
 8004848:	d118      	bne.n	800487c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004850:	2201      	movs	r2, #1
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0201 	and.w	r2, r3, #1
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x128>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b12      	cmp	r3, #18
 80048ba:	d123      	bne.n	8004904 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	220f      	movs	r2, #15
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4013      	ands	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	08da      	lsrs	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	6939      	ldr	r1, [r7, #16]
 8004900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4013      	ands	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0203 	and.w	r2, r3, #3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80ac 	beq.w	8004a9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004946:	4b5f      	ldr	r3, [pc, #380]	; (8004ac4 <HAL_GPIO_Init+0x330>)
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	4a5e      	ldr	r2, [pc, #376]	; (8004ac4 <HAL_GPIO_Init+0x330>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6613      	str	r3, [r2, #96]	; 0x60
 8004952:	4b5c      	ldr	r3, [pc, #368]	; (8004ac4 <HAL_GPIO_Init+0x330>)
 8004954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800495e:	4a5a      	ldr	r2, [pc, #360]	; (8004ac8 <HAL_GPIO_Init+0x334>)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	3302      	adds	r3, #2
 8004966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004988:	d025      	beq.n	80049d6 <HAL_GPIO_Init+0x242>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4f      	ldr	r2, [pc, #316]	; (8004acc <HAL_GPIO_Init+0x338>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01f      	beq.n	80049d2 <HAL_GPIO_Init+0x23e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4e      	ldr	r2, [pc, #312]	; (8004ad0 <HAL_GPIO_Init+0x33c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d019      	beq.n	80049ce <HAL_GPIO_Init+0x23a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4d      	ldr	r2, [pc, #308]	; (8004ad4 <HAL_GPIO_Init+0x340>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d013      	beq.n	80049ca <HAL_GPIO_Init+0x236>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4c      	ldr	r2, [pc, #304]	; (8004ad8 <HAL_GPIO_Init+0x344>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00d      	beq.n	80049c6 <HAL_GPIO_Init+0x232>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a4b      	ldr	r2, [pc, #300]	; (8004adc <HAL_GPIO_Init+0x348>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <HAL_GPIO_Init+0x22e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4a      	ldr	r2, [pc, #296]	; (8004ae0 <HAL_GPIO_Init+0x34c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_GPIO_Init+0x22a>
 80049ba:	2306      	movs	r3, #6
 80049bc:	e00c      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049be:	2307      	movs	r3, #7
 80049c0:	e00a      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e008      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e004      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_Init+0x244>
 80049d6:	2300      	movs	r3, #0
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	f002 0203 	and.w	r2, r2, #3
 80049de:	0092      	lsls	r2, r2, #2
 80049e0:	4093      	lsls	r3, r2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049e8:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <HAL_GPIO_Init+0x334>)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049f6:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a1a:	4a32      	ldr	r2, [pc, #200]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a20:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a98:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <HAL_GPIO_Init+0x350>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f47f ae78 	bne.w	80047a4 <HAL_GPIO_Init+0x10>
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	48000400 	.word	0x48000400
 8004ad0:	48000800 	.word	0x48000800
 8004ad4:	48000c00 	.word	0x48000c00
 8004ad8:	48001000 	.word	0x48001000
 8004adc:	48001400 	.word	0x48001400
 8004ae0:	48001800 	.word	0x48001800
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004af6:	e0cd      	b.n	8004c94 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004af8:	2201      	movs	r2, #1
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80c0 	beq.w	8004c8e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b0e:	4a68      	ldr	r2, [pc, #416]	; (8004cb0 <HAL_GPIO_DeInit+0x1c8>)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	220f      	movs	r2, #15
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b36:	d025      	beq.n	8004b84 <HAL_GPIO_DeInit+0x9c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a5e      	ldr	r2, [pc, #376]	; (8004cb4 <HAL_GPIO_DeInit+0x1cc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01f      	beq.n	8004b80 <HAL_GPIO_DeInit+0x98>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a5d      	ldr	r2, [pc, #372]	; (8004cb8 <HAL_GPIO_DeInit+0x1d0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d019      	beq.n	8004b7c <HAL_GPIO_DeInit+0x94>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a5c      	ldr	r2, [pc, #368]	; (8004cbc <HAL_GPIO_DeInit+0x1d4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d013      	beq.n	8004b78 <HAL_GPIO_DeInit+0x90>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a5b      	ldr	r2, [pc, #364]	; (8004cc0 <HAL_GPIO_DeInit+0x1d8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00d      	beq.n	8004b74 <HAL_GPIO_DeInit+0x8c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a5a      	ldr	r2, [pc, #360]	; (8004cc4 <HAL_GPIO_DeInit+0x1dc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d007      	beq.n	8004b70 <HAL_GPIO_DeInit+0x88>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a59      	ldr	r2, [pc, #356]	; (8004cc8 <HAL_GPIO_DeInit+0x1e0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d101      	bne.n	8004b6c <HAL_GPIO_DeInit+0x84>
 8004b68:	2306      	movs	r3, #6
 8004b6a:	e00c      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	e00a      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b70:	2305      	movs	r3, #5
 8004b72:	e008      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b74:	2304      	movs	r3, #4
 8004b76:	e006      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e004      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e002      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_GPIO_DeInit+0x9e>
 8004b84:	2300      	movs	r3, #0
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	f002 0203 	and.w	r2, r2, #3
 8004b8c:	0092      	lsls	r2, r2, #2
 8004b8e:	4093      	lsls	r3, r2
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d132      	bne.n	8004bfc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004b96:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	494b      	ldr	r1, [pc, #300]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004ba4:	4b49      	ldr	r3, [pc, #292]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	43db      	mvns	r3, r3
 8004bac:	4947      	ldr	r1, [pc, #284]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004bb2:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	4944      	ldr	r1, [pc, #272]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004bc0:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	4940      	ldr	r1, [pc, #256]	; (8004ccc <HAL_GPIO_DeInit+0x1e4>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	220f      	movs	r2, #15
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004bde:	4a34      	ldr	r2, [pc, #208]	; (8004cb0 <HAL_GPIO_DeInit+0x1c8>)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	3302      	adds	r3, #2
 8004be6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	43da      	mvns	r2, r3
 8004bee:	4830      	ldr	r0, [pc, #192]	; (8004cb0 <HAL_GPIO_DeInit+0x1c8>)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	2103      	movs	r1, #3
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	08da      	lsrs	r2, r3, #3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3208      	adds	r2, #8
 8004c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	08d2      	lsrs	r2, r2, #3
 8004c30:	4019      	ands	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3208      	adds	r2, #8
 8004c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	2103      	movs	r1, #3
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	401a      	ands	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	2101      	movs	r1, #1
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	401a      	ands	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	2101      	movs	r1, #1
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	401a      	ands	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3301      	adds	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f47f af2b 	bne.w	8004af8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	48000400 	.word	0x48000400
 8004cb8:	48000800 	.word	0x48000800
 8004cbc:	48000c00 	.word	0x48000c00
 8004cc0:	48001000 	.word	0x48001000
 8004cc4:	48001400 	.word	0x48001400
 8004cc8:	48001800 	.word	0x48001800
 8004ccc:	40010400 	.word	0x40010400

08004cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	e001      	b.n	8004cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d10:	787b      	ldrb	r3, [r7, #1]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d16:	887a      	ldrh	r2, [r7, #2]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d1c:	e002      	b.n	8004d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	041a      	lsls	r2, r3, #16
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	43d9      	mvns	r1, r3
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	400b      	ands	r3, r1
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	619a      	str	r2, [r3, #24]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e081      	b.n	8004e7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8a8 	bl	8004ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d107      	bne.n	8004dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dda:	609a      	str	r2, [r3, #8]
 8004ddc:	e006      	b.n	8004dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d104      	bne.n	8004dfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	ea42 0103 	orr.w	r1, r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e021      	b.n	8004ed8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f821 	bl	8004ef4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	817b      	strh	r3, [r7, #10]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	813b      	strh	r3, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	f040 80f9 	bne.w	8005122 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x34>
 8004f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0ed      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_I2C_Mem_Write+0x4e>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e0e6      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f5e:	f7ff fb07 	bl	8004570 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2319      	movs	r3, #25
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fac3 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0d1      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2221      	movs	r2, #33	; 0x21
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2240      	movs	r2, #64	; 0x40
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a3a      	ldr	r2, [r7, #32]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fa8:	88f8      	ldrh	r0, [r7, #6]
 8004faa:	893a      	ldrh	r2, [r7, #8]
 8004fac:	8979      	ldrh	r1, [r7, #10]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f9d3 	bl	8005364 <I2C_RequestMemoryWrite>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0a9      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2bff      	cmp	r3, #255	; 0xff
 8004fd8:	d90e      	bls.n	8004ff8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fba5 	bl	8005740 <I2C_TransferConfig>
 8004ff6:	e00f      	b.n	8005018 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	b2da      	uxtb	r2, r3
 8005008:	8979      	ldrh	r1, [r7, #10]
 800500a:	2300      	movs	r3, #0
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fb94 	bl	8005740 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 faad 	bl	800557c <I2C_WaitOnTXISFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e07b      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	781a      	ldrb	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d034      	beq.n	80050d0 <HAL_I2C_Mem_Write+0x1c8>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d130      	bne.n	80050d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fa3f 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e04d      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2bff      	cmp	r3, #255	; 0xff
 8005090:	d90e      	bls.n	80050b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	b2da      	uxtb	r2, r3
 800509e:	8979      	ldrh	r1, [r7, #10]
 80050a0:	2300      	movs	r3, #0
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fb49 	bl	8005740 <I2C_TransferConfig>
 80050ae:	e00f      	b.n	80050d0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	8979      	ldrh	r1, [r7, #10]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fb38 	bl	8005740 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d19e      	bne.n	8005018 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fa8c 	bl	80055fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e01a      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2220      	movs	r2, #32
 80050f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_I2C_Mem_Write+0x224>)
 8005102:	400b      	ands	r3, r1
 8005104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e000      	b.n	8005124 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fe00e800 	.word	0xfe00e800

08005130 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	461a      	mov	r2, r3
 800513e:	4603      	mov	r3, r0
 8005140:	817b      	strh	r3, [r7, #10]
 8005142:	460b      	mov	r3, r1
 8005144:	813b      	strh	r3, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	f040 80fd 	bne.w	8005352 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_I2C_Mem_Read+0x34>
 800515e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d105      	bne.n	8005170 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0f1      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_I2C_Mem_Read+0x4e>
 800517a:	2302      	movs	r3, #2
 800517c:	e0ea      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005186:	f7ff f9f3 	bl	8004570 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2319      	movs	r3, #25
 8005192:	2201      	movs	r2, #1
 8005194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f9af 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0d5      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2222      	movs	r2, #34	; 0x22
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2240      	movs	r2, #64	; 0x40
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051d0:	88f8      	ldrh	r0, [r7, #6]
 80051d2:	893a      	ldrh	r2, [r7, #8]
 80051d4:	8979      	ldrh	r1, [r7, #10]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	4603      	mov	r3, r0
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f913 	bl	800540c <I2C_RequestMemoryRead>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0ad      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2bff      	cmp	r3, #255	; 0xff
 8005200:	d90e      	bls.n	8005220 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	b2da      	uxtb	r2, r3
 800520e:	8979      	ldrh	r1, [r7, #10]
 8005210:	4b52      	ldr	r3, [pc, #328]	; (800535c <HAL_I2C_Mem_Read+0x22c>)
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fa91 	bl	8005740 <I2C_TransferConfig>
 800521e:	e00f      	b.n	8005240 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522e:	b2da      	uxtb	r2, r3
 8005230:	8979      	ldrh	r1, [r7, #10]
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_I2C_Mem_Read+0x22c>)
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fa80 	bl	8005740 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	2200      	movs	r2, #0
 8005248:	2104      	movs	r1, #4
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f956 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e07c      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d034      	beq.n	8005300 <HAL_I2C_Mem_Read+0x1d0>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d130      	bne.n	8005300 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	2200      	movs	r2, #0
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f927 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e04d      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2bff      	cmp	r3, #255	; 0xff
 80052c0:	d90e      	bls.n	80052e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	8979      	ldrh	r1, [r7, #10]
 80052d0:	2300      	movs	r3, #0
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 fa31 	bl	8005740 <I2C_TransferConfig>
 80052de:	e00f      	b.n	8005300 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	8979      	ldrh	r1, [r7, #10]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fa20 	bl	8005740 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d19a      	bne.n	8005240 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f974 	bl	80055fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e01a      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2220      	movs	r2, #32
 8005324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_I2C_Mem_Read+0x230>)
 8005332:	400b      	ands	r3, r1
 8005334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	80002400 	.word	0x80002400
 8005360:	fe00e800 	.word	0xfe00e800

08005364 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	4603      	mov	r3, r0
 8005374:	817b      	strh	r3, [r7, #10]
 8005376:	460b      	mov	r3, r1
 8005378:	813b      	strh	r3, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	8979      	ldrh	r1, [r7, #10]
 8005384:	4b20      	ldr	r3, [pc, #128]	; (8005408 <I2C_RequestMemoryWrite+0xa4>)
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f9d7 	bl	8005740 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	69b9      	ldr	r1, [r7, #24]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f8f0 	bl	800557c <I2C_WaitOnTXISFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e02c      	b.n	8005400 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
 80053b6:	e015      	b.n	80053e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053b8:	893b      	ldrh	r3, [r7, #8]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	b29b      	uxth	r3, r3
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	69b9      	ldr	r1, [r7, #24]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f8d6 	bl	800557c <I2C_WaitOnTXISFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e012      	b.n	8005400 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f884 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	80002000 	.word	0x80002000

0800540c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	4608      	mov	r0, r1
 8005416:	4611      	mov	r1, r2
 8005418:	461a      	mov	r2, r3
 800541a:	4603      	mov	r3, r0
 800541c:	817b      	strh	r3, [r7, #10]
 800541e:	460b      	mov	r3, r1
 8005420:	813b      	strh	r3, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	8979      	ldrh	r1, [r7, #10]
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <I2C_RequestMemoryRead+0xa4>)
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f984 	bl	8005740 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	69b9      	ldr	r1, [r7, #24]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f89d 	bl	800557c <I2C_WaitOnTXISFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e02c      	b.n	80054a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d105      	bne.n	800545e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005452:	893b      	ldrh	r3, [r7, #8]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
 800545c:	e015      	b.n	800548a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800545e:	893b      	ldrh	r3, [r7, #8]
 8005460:	0a1b      	lsrs	r3, r3, #8
 8005462:	b29b      	uxth	r3, r3
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	69b9      	ldr	r1, [r7, #24]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f883 	bl	800557c <I2C_WaitOnTXISFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e012      	b.n	80054a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005480:	893b      	ldrh	r3, [r7, #8]
 8005482:	b2da      	uxtb	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2200      	movs	r2, #0
 8005492:	2140      	movs	r1, #64	; 0x40
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f831 	bl	80054fc <I2C_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e000      	b.n	80054a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	80002000 	.word	0x80002000

080054b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d103      	bne.n	80054d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d007      	beq.n	80054f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	619a      	str	r2, [r3, #24]
  }
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550c:	e022      	b.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d01e      	beq.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7ff f82b 	bl	8004570 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e00f      	b.n	8005574 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	429a      	cmp	r2, r3
 8005562:	bf0c      	ite	eq
 8005564:	2301      	moveq	r3, #1
 8005566:	2300      	movne	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	429a      	cmp	r2, r3
 8005570:	d0cd      	beq.n	800550e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005588:	e02c      	b.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f870 	bl	8005674 <I2C_IsAcknowledgeFailed>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e02a      	b.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d01e      	beq.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fe ffe3 	bl	8004570 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d113      	bne.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e007      	b.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d1cb      	bne.n	800558a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005608:	e028      	b.n	800565c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f830 	bl	8005674 <I2C_IsAcknowledgeFailed>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e026      	b.n	800566c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fe ffa7 	bl	8004570 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d113      	bne.n	800565c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d1cf      	bne.n	800560a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b10      	cmp	r3, #16
 800568c:	d151      	bne.n	8005732 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800568e:	e022      	b.n	80056d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d01e      	beq.n	80056d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005698:	f7fe ff6a 	bl	8004570 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <I2C_IsAcknowledgeFailed+0x3a>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d113      	bne.n	80056d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e02e      	b.n	8005734 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d1d5      	bne.n	8005690 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2210      	movs	r2, #16
 80056ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2220      	movs	r2, #32
 80056f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff fedd 	bl	80054b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <I2C_IsAcknowledgeFailed+0xc8>)
 8005706:	400b      	ands	r3, r1
 8005708:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	f043 0204 	orr.w	r2, r3, #4
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	fe00e800 	.word	0xfe00e800

08005740 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607b      	str	r3, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	817b      	strh	r3, [r7, #10]
 800574e:	4613      	mov	r3, r2
 8005750:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	0d5b      	lsrs	r3, r3, #21
 800575c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <I2C_TransferConfig+0x58>)
 8005762:	430b      	orrs	r3, r1
 8005764:	43db      	mvns	r3, r3
 8005766:	ea02 0103 	and.w	r1, r2, r3
 800576a:	897b      	ldrh	r3, [r7, #10]
 800576c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005770:	7a7b      	ldrb	r3, [r7, #9]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	431a      	orrs	r2, r3
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	431a      	orrs	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	03ff63ff 	.word	0x03ff63ff

0800579c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d138      	bne.n	8005824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057bc:	2302      	movs	r3, #2
 80057be:	e032      	b.n	8005826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2224      	movs	r2, #36	; 0x24
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	e000      	b.n	8005826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005824:	2302      	movs	r3, #2
  }
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <HAL_PWREx_GetVoltageRange+0x18>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40007000 	.word	0x40007000

08005850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585e:	d130      	bne.n	80058c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586c:	d038      	beq.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005876:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800587c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2232      	movs	r2, #50	; 0x32
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0c9b      	lsrs	r3, r3, #18
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005894:	e002      	b.n	800589c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b01      	subs	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a8:	d102      	bne.n	80058b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f2      	bne.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d110      	bne.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e00f      	b.n	80058e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d007      	beq.n	80058e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058d8:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40007000 	.word	0x40007000
 80058f4:	20000004 	.word	0x20000004
 80058f8:	431bde83 	.word	0x431bde83

080058fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e3d4      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590e:	4ba1      	ldr	r3, [pc, #644]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	4b9e      	ldr	r3, [pc, #632]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80e4 	beq.w	8005af8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_RCC_OscConfig+0x4a>
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	f040 808b 	bne.w	8005a54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b01      	cmp	r3, #1
 8005942:	f040 8087 	bne.w	8005a54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005946:	4b93      	ldr	r3, [pc, #588]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_RCC_OscConfig+0x62>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e3ac      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	4b8c      	ldr	r3, [pc, #560]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <HAL_RCC_OscConfig+0x7c>
 800596e:	4b89      	ldr	r3, [pc, #548]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005976:	e005      	b.n	8005984 <HAL_RCC_OscConfig+0x88>
 8005978:	4b86      	ldr	r3, [pc, #536]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 800597a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005984:	4293      	cmp	r3, r2
 8005986:	d223      	bcs.n	80059d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fd73 	bl	8006478 <RCC_SetFlashLatencyFromMSIRange>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e38d      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800599c:	4b7d      	ldr	r3, [pc, #500]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a7c      	ldr	r2, [pc, #496]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059a2:	f043 0308 	orr.w	r3, r3, #8
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4977      	ldr	r1, [pc, #476]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ba:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	4972      	ldr	r1, [pc, #456]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	604b      	str	r3, [r1, #4]
 80059ce:	e025      	b.n	8005a1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d0:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6f      	ldr	r2, [pc, #444]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059d6:	f043 0308 	orr.w	r3, r3, #8
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b6d      	ldr	r3, [pc, #436]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	496a      	ldr	r1, [pc, #424]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ee:	4b69      	ldr	r3, [pc, #420]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	4965      	ldr	r1, [pc, #404]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d109      	bne.n	8005a1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fd33 	bl	8006478 <RCC_SetFlashLatencyFromMSIRange>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e34d      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a1c:	f000 fc36 	bl	800628c <HAL_RCC_GetSysClockFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b5c      	ldr	r3, [pc, #368]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	495a      	ldr	r1, [pc, #360]	; (8005b98 <HAL_RCC_OscConfig+0x29c>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
 8005a38:	4a58      	ldr	r2, [pc, #352]	; (8005b9c <HAL_RCC_OscConfig+0x2a0>)
 8005a3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a3c:	4b58      	ldr	r3, [pc, #352]	; (8005ba0 <HAL_RCC_OscConfig+0x2a4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fd f99d 	bl	8002d80 <HAL_InitTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d052      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	e331      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d032      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a4c      	ldr	r2, [pc, #304]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fd82 	bl	8004570 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a70:	f7fe fd7e 	bl	8004570 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e31a      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a82:	4b44      	ldr	r3, [pc, #272]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a8e:	4b41      	ldr	r3, [pc, #260]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a40      	ldr	r2, [pc, #256]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a94:	f043 0308 	orr.w	r3, r3, #8
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	493b      	ldr	r1, [pc, #236]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aac:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	4936      	ldr	r1, [pc, #216]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	604b      	str	r3, [r1, #4]
 8005ac0:	e01a      	b.n	8005af8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ac2:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a33      	ldr	r2, [pc, #204]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ace:	f7fe fd4f 	bl	8004570 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ad6:	f7fe fd4b 	bl	8004570 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e2e7      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f0      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x1da>
 8005af4:	e000      	b.n	8005af8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005af6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d074      	beq.n	8005bee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d005      	beq.n	8005b16 <HAL_RCC_OscConfig+0x21a>
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d10e      	bne.n	8005b2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d10b      	bne.n	8005b2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b16:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d064      	beq.n	8005bec <HAL_RCC_OscConfig+0x2f0>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d160      	bne.n	8005bec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e2c4      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x24a>
 8005b38:	4b16      	ldr	r3, [pc, #88]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e01d      	b.n	8005b82 <HAL_RCC_OscConfig+0x286>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCC_OscConfig+0x26e>
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0f      	ldr	r2, [pc, #60]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e00b      	b.n	8005b82 <HAL_RCC_OscConfig+0x286>
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a06      	ldr	r2, [pc, #24]	; (8005b94 <HAL_RCC_OscConfig+0x298>)
 8005b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01c      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8a:	f7fe fcf1 	bl	8004570 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b90:	e011      	b.n	8005bb6 <HAL_RCC_OscConfig+0x2ba>
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000
 8005b98:	0800cbc4 	.word	0x0800cbc4
 8005b9c:	20000004 	.word	0x20000004
 8005ba0:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fe fce4 	bl	8004570 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e280      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb6:	4baf      	ldr	r3, [pc, #700]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x2a8>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc4:	f7fe fcd4 	bl	8004570 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fe fcd0 	bl	8004570 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e26c      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bde:	4ba5      	ldr	r3, [pc, #660]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0x2d0>
 8005bea:	e000      	b.n	8005bee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d060      	beq.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d005      	beq.n	8005c0c <HAL_RCC_OscConfig+0x310>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d119      	bne.n	8005c3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d116      	bne.n	8005c3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0c:	4b99      	ldr	r3, [pc, #612]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x328>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e249      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c24:	4b93      	ldr	r3, [pc, #588]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	4990      	ldr	r1, [pc, #576]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c38:	e040      	b.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d023      	beq.n	8005c8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c42:	4b8c      	ldr	r3, [pc, #560]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a8b      	ldr	r2, [pc, #556]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fe fc8f 	bl	8004570 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c56:	f7fe fc8b 	bl	8004570 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e227      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c68:	4b82      	ldr	r3, [pc, #520]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c74:	4b7f      	ldr	r3, [pc, #508]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	497c      	ldr	r1, [pc, #496]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	604b      	str	r3, [r1, #4]
 8005c88:	e018      	b.n	8005cbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c8a:	4b7a      	ldr	r3, [pc, #488]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a79      	ldr	r2, [pc, #484]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fe fc6b 	bl	8004570 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9e:	f7fe fc67 	bl	8004570 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e203      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb0:	4b70      	ldr	r3, [pc, #448]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f0      	bne.n	8005c9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d03c      	beq.n	8005d42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd0:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd6:	4a67      	ldr	r2, [pc, #412]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce0:	f7fe fc46 	bl	8004570 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce8:	f7fe fc42 	bl	8004570 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e1de      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfa:	4b5e      	ldr	r3, [pc, #376]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0ef      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x3ec>
 8005d08:	e01b      	b.n	8005d42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d0a:	4b5a      	ldr	r3, [pc, #360]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d10:	4a58      	ldr	r2, [pc, #352]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1a:	f7fe fc29 	bl	8004570 <HAL_GetTick>
 8005d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d22:	f7fe fc25 	bl	8004570 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e1c1      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d34:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ef      	bne.n	8005d22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80a6 	beq.w	8005e9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d50:	2300      	movs	r3, #0
 8005d52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d54:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10d      	bne.n	8005d7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d60:	4b44      	ldr	r3, [pc, #272]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	4a43      	ldr	r2, [pc, #268]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6c:	4b41      	ldr	r3, [pc, #260]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d7c:	4b3e      	ldr	r3, [pc, #248]	; (8005e78 <HAL_RCC_OscConfig+0x57c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d118      	bne.n	8005dba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d88:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <HAL_RCC_OscConfig+0x57c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <HAL_RCC_OscConfig+0x57c>)
 8005d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d94:	f7fe fbec 	bl	8004570 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9c:	f7fe fbe8 	bl	8004570 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e184      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dae:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <HAL_RCC_OscConfig+0x57c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4d8>
 8005dc2:	4b2c      	ldr	r3, [pc, #176]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005dca:	f043 0301 	orr.w	r3, r3, #1
 8005dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dd2:	e024      	b.n	8005e1e <HAL_RCC_OscConfig+0x522>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d110      	bne.n	8005dfe <HAL_RCC_OscConfig+0x502>
 8005ddc:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	4a24      	ldr	r2, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dec:	4b21      	ldr	r3, [pc, #132]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dfc:	e00f      	b.n	8005e1e <HAL_RCC_OscConfig+0x522>
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e04:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005e16:	f023 0304 	bic.w	r3, r3, #4
 8005e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d016      	beq.n	8005e54 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e26:	f7fe fba3 	bl	8004570 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fe fb9f 	bl	8004570 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e139      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_RCC_OscConfig+0x578>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ed      	beq.n	8005e2e <HAL_RCC_OscConfig+0x532>
 8005e52:	e01a      	b.n	8005e8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e54:	f7fe fb8c 	bl	8004570 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e5a:	e00f      	b.n	8005e7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5c:	f7fe fb88 	bl	8004570 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d906      	bls.n	8005e7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e122      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
 8005e72:	bf00      	nop
 8005e74:	40021000 	.word	0x40021000
 8005e78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e7c:	4b90      	ldr	r3, [pc, #576]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e8      	bne.n	8005e5c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8a:	7ffb      	ldrb	r3, [r7, #31]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4b8b      	ldr	r3, [pc, #556]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	4a8a      	ldr	r2, [pc, #552]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8108 	beq.w	80060b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	f040 80d0 	bne.w	8006050 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005eb0:	4b83      	ldr	r3, [pc, #524]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0203 	and.w	r2, r3, #3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d130      	bne.n	8005f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d127      	bne.n	8005f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d11f      	bne.n	8005f26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ef0:	2a07      	cmp	r2, #7
 8005ef2:	bf14      	ite	ne
 8005ef4:	2201      	movne	r2, #1
 8005ef6:	2200      	moveq	r2, #0
 8005ef8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d113      	bne.n	8005f26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d109      	bne.n	8005f26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d06e      	beq.n	8006004 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d069      	beq.n	8006000 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f2c:	4b64      	ldr	r3, [pc, #400]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005f38:	4b61      	ldr	r3, [pc, #388]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0b7      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f48:	4b5d      	ldr	r3, [pc, #372]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f54:	f7fe fb0c 	bl	8004570 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7fe fb08 	bl	8004570 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0a4      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f6e:	4b54      	ldr	r3, [pc, #336]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f7a:	4b51      	ldr	r3, [pc, #324]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	4b51      	ldr	r3, [pc, #324]	; (80060c4 <HAL_RCC_OscConfig+0x7c8>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f8a:	3a01      	subs	r2, #1
 8005f8c:	0112      	lsls	r2, r2, #4
 8005f8e:	4311      	orrs	r1, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f94:	0212      	lsls	r2, r2, #8
 8005f96:	4311      	orrs	r1, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f9c:	0852      	lsrs	r2, r2, #1
 8005f9e:	3a01      	subs	r2, #1
 8005fa0:	0552      	lsls	r2, r2, #21
 8005fa2:	4311      	orrs	r1, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fa8:	0852      	lsrs	r2, r2, #1
 8005faa:	3a01      	subs	r2, #1
 8005fac:	0652      	lsls	r2, r2, #25
 8005fae:	4311      	orrs	r1, r2
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fb4:	0912      	lsrs	r2, r2, #4
 8005fb6:	0452      	lsls	r2, r2, #17
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	4941      	ldr	r1, [pc, #260]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fc0:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a3e      	ldr	r2, [pc, #248]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fcc:	4b3c      	ldr	r3, [pc, #240]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a3b      	ldr	r2, [pc, #236]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fd8:	f7fe faca 	bl	8004570 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe0:	f7fe fac6 	bl	8004570 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e062      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ff2:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ffe:	e05a      	b.n	80060b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e059      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006004:	4b2e      	ldr	r3, [pc, #184]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d152      	bne.n	80060b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006010:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2a      	ldr	r2, [pc, #168]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800601a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800601c:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a27      	ldr	r2, [pc, #156]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006028:	f7fe faa2 	bl	8004570 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006030:	f7fe fa9e 	bl	8004570 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e03a      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006042:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x734>
 800604e:	e032      	b.n	80060b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b0c      	cmp	r3, #12
 8006054:	d02d      	beq.n	80060b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006056:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 800605c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006060:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006062:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800606e:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006074:	f023 0303 	bic.w	r3, r3, #3
 8006078:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 8006080:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006088:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fe fa71 	bl	8004570 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006092:	f7fe fa6d 	bl	8004570 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e009      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a4:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <HAL_RCC_OscConfig+0x7c4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f0      	bne.n	8006092 <HAL_RCC_OscConfig+0x796>
 80060b0:	e001      	b.n	80060b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	f99d808c 	.word	0xf99d808c

080060c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e0c8      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d910      	bls.n	800610c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b63      	ldr	r3, [pc, #396]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 0207 	bic.w	r2, r3, #7
 80060f2:	4961      	ldr	r1, [pc, #388]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b5f      	ldr	r3, [pc, #380]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0b0      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d04c      	beq.n	80061b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d107      	bne.n	8006130 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006120:	4b56      	ldr	r3, [pc, #344]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d121      	bne.n	8006170 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e09e      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d107      	bne.n	8006148 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006138:	4b50      	ldr	r3, [pc, #320]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d115      	bne.n	8006170 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e092      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006150:	4b4a      	ldr	r3, [pc, #296]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e086      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006160:	4b46      	ldr	r3, [pc, #280]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e07e      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006170:	4b42      	ldr	r3, [pc, #264]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f023 0203 	bic.w	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	493f      	ldr	r1, [pc, #252]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006182:	f7fe f9f5 	bl	8004570 <HAL_GetTick>
 8006186:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006188:	e00a      	b.n	80061a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800618a:	f7fe f9f1 	bl	8004570 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	; 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e066      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a0:	4b36      	ldr	r3, [pc, #216]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 020c 	and.w	r2, r3, #12
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d1eb      	bne.n	800618a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061be:	4b2f      	ldr	r3, [pc, #188]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	492c      	ldr	r1, [pc, #176]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d210      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 0207 	bic.w	r2, r3, #7
 80061e6:	4924      	ldr	r1, [pc, #144]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b22      	ldr	r3, [pc, #136]	; (8006278 <HAL_RCC_ClockConfig+0x1b0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e036      	b.n	800626e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4918      	ldr	r1, [pc, #96]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622a:	4b14      	ldr	r3, [pc, #80]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4910      	ldr	r1, [pc, #64]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800623e:	f000 f825 	bl	800628c <HAL_RCC_GetSysClockFreq>
 8006242:	4602      	mov	r2, r0
 8006244:	4b0d      	ldr	r3, [pc, #52]	; (800627c <HAL_RCC_ClockConfig+0x1b4>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	490c      	ldr	r1, [pc, #48]	; (8006280 <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	5ccb      	ldrb	r3, [r1, r3]
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	4a0a      	ldr	r2, [pc, #40]	; (8006284 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800625e:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <HAL_RCC_ClockConfig+0x1c0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fc fd8c 	bl	8002d80 <HAL_InitTick>
 8006268:	4603      	mov	r3, r0
 800626a:	72fb      	strb	r3, [r7, #11]

  return status;
 800626c:	7afb      	ldrb	r3, [r7, #11]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40022000 	.word	0x40022000
 800627c:	40021000 	.word	0x40021000
 8006280:	0800cbc4 	.word	0x0800cbc4
 8006284:	20000004 	.word	0x20000004
 8006288:	20000068 	.word	0x20000068

0800628c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800628c:	b480      	push	{r7}
 800628e:	b089      	sub	sp, #36	; 0x24
 8006290:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800629a:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062a4:	4b3b      	ldr	r3, [pc, #236]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_GetSysClockFreq+0x34>
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d121      	bne.n	80062fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d11e      	bne.n	80062fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062c0:	4b34      	ldr	r3, [pc, #208]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062cc:	4b31      	ldr	r3, [pc, #196]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 80062ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e005      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062dc:	4b2d      	ldr	r3, [pc, #180]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	091b      	lsrs	r3, r3, #4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <HAL_RCC_GetSysClockFreq+0x10c>)
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10d      	bne.n	8006314 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062fc:	e00a      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b04      	cmp	r3, #4
 8006302:	d102      	bne.n	800630a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006304:	4b25      	ldr	r3, [pc, #148]	; (800639c <HAL_RCC_GetSysClockFreq+0x110>)
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e004      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d101      	bne.n	8006314 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006310:	4b23      	ldr	r3, [pc, #140]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006312:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b0c      	cmp	r3, #12
 8006318:	d134      	bne.n	8006384 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d003      	beq.n	8006332 <HAL_RCC_GetSysClockFreq+0xa6>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d003      	beq.n	8006338 <HAL_RCC_GetSysClockFreq+0xac>
 8006330:	e005      	b.n	800633e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006332:	4b1a      	ldr	r3, [pc, #104]	; (800639c <HAL_RCC_GetSysClockFreq+0x110>)
 8006334:	617b      	str	r3, [r7, #20]
      break;
 8006336:	e005      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006338:	4b19      	ldr	r3, [pc, #100]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800633a:	617b      	str	r3, [r7, #20]
      break;
 800633c:	e002      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	617b      	str	r3, [r7, #20]
      break;
 8006342:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006344:	4b13      	ldr	r3, [pc, #76]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	3301      	adds	r3, #1
 8006350:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	fb02 f203 	mul.w	r2, r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800636a:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <HAL_RCC_GetSysClockFreq+0x108>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	0e5b      	lsrs	r3, r3, #25
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	3301      	adds	r3, #1
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006382:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006384:	69bb      	ldr	r3, [r7, #24]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3724      	adds	r7, #36	; 0x24
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	0800cbdc 	.word	0x0800cbdc
 800639c:	00f42400 	.word	0x00f42400
 80063a0:	007a1200 	.word	0x007a1200

080063a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063a8:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063aa:	681b      	ldr	r3, [r3, #0]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000004 	.word	0x20000004

080063bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063c0:	f7ff fff0 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80063c4:	4602      	mov	r2, r0
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4904      	ldr	r1, [pc, #16]	; (80063e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063d2:	5ccb      	ldrb	r3, [r1, r3]
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063dc:	4618      	mov	r0, r3
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40021000 	.word	0x40021000
 80063e4:	0800cbd4 	.word	0x0800cbd4

080063e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063ec:	f7ff ffda 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	0adb      	lsrs	r3, r3, #11
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	4904      	ldr	r1, [pc, #16]	; (8006410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063fe:	5ccb      	ldrb	r3, [r1, r3]
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40021000 	.word	0x40021000
 8006410:	0800cbd4 	.word	0x0800cbd4

08006414 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	220f      	movs	r2, #15
 8006422:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006424:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_GetClockConfig+0x5c>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 0203 	and.w	r2, r3, #3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <HAL_RCC_GetClockConfig+0x5c>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800643c:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <HAL_RCC_GetClockConfig+0x5c>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <HAL_RCC_GetClockConfig+0x5c>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <HAL_RCC_GetClockConfig+0x60>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0207 	and.w	r2, r3, #7
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	601a      	str	r2, [r3, #0]
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40021000 	.word	0x40021000
 8006474:	40022000 	.word	0x40022000

08006478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006484:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006490:	f7ff f9d0 	bl	8005834 <HAL_PWREx_GetVoltageRange>
 8006494:	6178      	str	r0, [r7, #20]
 8006496:	e014      	b.n	80064c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	4a24      	ldr	r2, [pc, #144]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a2:	6593      	str	r3, [r2, #88]	; 0x58
 80064a4:	4b22      	ldr	r3, [pc, #136]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064b0:	f7ff f9c0 	bl	8005834 <HAL_PWREx_GetVoltageRange>
 80064b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064b6:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c8:	d10b      	bne.n	80064e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d919      	bls.n	8006504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2ba0      	cmp	r3, #160	; 0xa0
 80064d4:	d902      	bls.n	80064dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064d6:	2302      	movs	r3, #2
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	e013      	b.n	8006504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064dc:	2301      	movs	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	e010      	b.n	8006504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b80      	cmp	r3, #128	; 0x80
 80064e6:	d902      	bls.n	80064ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80064e8:	2303      	movs	r3, #3
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	e00a      	b.n	8006504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b80      	cmp	r3, #128	; 0x80
 80064f2:	d102      	bne.n	80064fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064f4:	2302      	movs	r3, #2
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	e004      	b.n	8006504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b70      	cmp	r3, #112	; 0x70
 80064fe:	d101      	bne.n	8006504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006500:	2301      	movs	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f023 0207 	bic.w	r2, r3, #7
 800650c:	4909      	ldr	r1, [pc, #36]	; (8006534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006514:	4b07      	ldr	r3, [pc, #28]	; (8006534 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	429a      	cmp	r2, r3
 8006520:	d001      	beq.n	8006526 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40021000 	.word	0x40021000
 8006534:	40022000 	.word	0x40022000

08006538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006540:	2300      	movs	r3, #0
 8006542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006544:	2300      	movs	r3, #0
 8006546:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006550:	2b00      	cmp	r3, #0
 8006552:	d041      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006558:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800655c:	d02a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800655e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006562:	d824      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006568:	d008      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800656a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800656e:	d81e      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006578:	d010      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800657a:	e018      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800657c:	4b86      	ldr	r3, [pc, #536]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a85      	ldr	r2, [pc, #532]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006586:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006588:	e015      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	2100      	movs	r1, #0
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fabb 	bl	8006b0c <RCCEx_PLLSAI1_Config>
 8006596:	4603      	mov	r3, r0
 8006598:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800659a:	e00c      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3320      	adds	r3, #32
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fba6 	bl	8006cf4 <RCCEx_PLLSAI2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ac:	e003      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	74fb      	strb	r3, [r7, #19]
      break;
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80065b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065bc:	4b76      	ldr	r3, [pc, #472]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ca:	4973      	ldr	r1, [pc, #460]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065d2:	e001      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	7cfb      	ldrb	r3, [r7, #19]
 80065d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d041      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065ec:	d02a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80065ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065f2:	d824      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80065f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065f8:	d008      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065fe:	d81e      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006608:	d010      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800660a:	e018      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800660c:	4b62      	ldr	r3, [pc, #392]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4a61      	ldr	r2, [pc, #388]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006616:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006618:	e015      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3304      	adds	r3, #4
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fa73 	bl	8006b0c <RCCEx_PLLSAI1_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800662a:	e00c      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3320      	adds	r3, #32
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fb5e 	bl	8006cf4 <RCCEx_PLLSAI2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	74fb      	strb	r3, [r7, #19]
      break;
 8006642:	e000      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006646:	7cfb      	ldrb	r3, [r7, #19]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10b      	bne.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800664c:	4b52      	ldr	r3, [pc, #328]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006652:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665a:	494f      	ldr	r1, [pc, #316]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006662:	e001      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80a0 	beq.w	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006676:	2300      	movs	r3, #0
 8006678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800667a:	4b47      	ldr	r3, [pc, #284]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00d      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006690:	4b41      	ldr	r3, [pc, #260]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006694:	4a40      	ldr	r2, [pc, #256]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669a:	6593      	str	r3, [r2, #88]	; 0x58
 800669c:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800669e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066a8:	2301      	movs	r3, #1
 80066aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066ac:	4b3b      	ldr	r3, [pc, #236]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a3a      	ldr	r2, [pc, #232]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066b8:	f7fd ff5a 	bl	8004570 <HAL_GetTick>
 80066bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066be:	e009      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c0:	f7fd ff56 	bl	8004570 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d902      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	74fb      	strb	r3, [r7, #19]
        break;
 80066d2:	e005      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066d4:	4b31      	ldr	r3, [pc, #196]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0ef      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80066e0:	7cfb      	ldrb	r3, [r7, #19]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d15c      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066e6:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d01f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	429a      	cmp	r2, r3
 8006702:	d019      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006704:	4b24      	ldr	r3, [pc, #144]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006710:	4b21      	ldr	r3, [pc, #132]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	4a20      	ldr	r2, [pc, #128]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006726:	4a1c      	ldr	r2, [pc, #112]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006730:	4a19      	ldr	r2, [pc, #100]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d016      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006742:	f7fd ff15 	bl	8004570 <HAL_GetTick>
 8006746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006748:	e00b      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674a:	f7fd ff11 	bl	8004570 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f241 3288 	movw	r2, #5000	; 0x1388
 8006758:	4293      	cmp	r3, r2
 800675a:	d902      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	74fb      	strb	r3, [r7, #19]
            break;
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0ec      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006770:	7cfb      	ldrb	r3, [r7, #19]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10c      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006786:	4904      	ldr	r1, [pc, #16]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800678e:	e009      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006790:	7cfb      	ldrb	r3, [r7, #19]
 8006792:	74bb      	strb	r3, [r7, #18]
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006796:	bf00      	nop
 8006798:	40021000 	.word	0x40021000
 800679c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	7cfb      	ldrb	r3, [r7, #19]
 80067a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067a4:	7c7b      	ldrb	r3, [r7, #17]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d105      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067aa:	4b9e      	ldr	r3, [pc, #632]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ae:	4a9d      	ldr	r2, [pc, #628]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067c2:	4b98      	ldr	r3, [pc, #608]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	f023 0203 	bic.w	r2, r3, #3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	4994      	ldr	r1, [pc, #592]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067e4:	4b8f      	ldr	r3, [pc, #572]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f023 020c 	bic.w	r2, r3, #12
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	498c      	ldr	r1, [pc, #560]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006806:	4b87      	ldr	r3, [pc, #540]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	4983      	ldr	r1, [pc, #524]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006828:	4b7e      	ldr	r3, [pc, #504]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	497b      	ldr	r1, [pc, #492]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800684a:	4b76      	ldr	r3, [pc, #472]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006858:	4972      	ldr	r1, [pc, #456]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800686c:	4b6d      	ldr	r3, [pc, #436]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687a:	496a      	ldr	r1, [pc, #424]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800688e:	4b65      	ldr	r3, [pc, #404]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689c:	4961      	ldr	r1, [pc, #388]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068b0:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068be:	4959      	ldr	r1, [pc, #356]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d2:	4b54      	ldr	r3, [pc, #336]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e0:	4950      	ldr	r1, [pc, #320]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068f4:	4b4b      	ldr	r3, [pc, #300]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	4948      	ldr	r1, [pc, #288]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006916:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006924:	493f      	ldr	r1, [pc, #252]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d028      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006938:	4b3a      	ldr	r3, [pc, #232]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	4937      	ldr	r1, [pc, #220]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006958:	4b32      	ldr	r3, [pc, #200]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a31      	ldr	r2, [pc, #196]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800695e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006962:	60d3      	str	r3, [r2, #12]
 8006964:	e011      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800696e:	d10c      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	2101      	movs	r1, #1
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f8c8 	bl	8006b0c <RCCEx_PLLSAI1_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006980:	7cfb      	ldrb	r3, [r7, #19]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006986:	7cfb      	ldrb	r3, [r7, #19]
 8006988:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d028      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006996:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	491f      	ldr	r1, [pc, #124]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b4:	d106      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b6:	4b1b      	ldr	r3, [pc, #108]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	4a1a      	ldr	r2, [pc, #104]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c0:	60d3      	str	r3, [r2, #12]
 80069c2:	e011      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	2101      	movs	r1, #1
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f899 	bl	8006b0c <RCCEx_PLLSAI1_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069de:	7cfb      	ldrb	r3, [r7, #19]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80069e4:	7cfb      	ldrb	r3, [r7, #19]
 80069e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d02b      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a02:	4908      	ldr	r1, [pc, #32]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a12:	d109      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a14:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4a02      	ldr	r2, [pc, #8]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a1e:	60d3      	str	r3, [r2, #12]
 8006a20:	e014      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006a22:	bf00      	nop
 8006a24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a30:	d10c      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3304      	adds	r3, #4
 8006a36:	2101      	movs	r1, #1
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f867 	bl	8006b0c <RCCEx_PLLSAI1_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006a48:	7cfb      	ldrb	r3, [r7, #19]
 8006a4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02f      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a58:	4b2b      	ldr	r3, [pc, #172]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a66:	4928      	ldr	r1, [pc, #160]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a76:	d10d      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f844 	bl	8006b0c <RCCEx_PLLSAI1_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a88:	7cfb      	ldrb	r3, [r7, #19]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d014      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a8e:	7cfb      	ldrb	r3, [r7, #19]
 8006a90:	74bb      	strb	r3, [r7, #18]
 8006a92:	e011      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3320      	adds	r3, #32
 8006aa2:	2102      	movs	r1, #2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 f925 	bl	8006cf4 <RCCEx_PLLSAI2_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006aae:	7cfb      	ldrb	r3, [r7, #19]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ab4:	7cfb      	ldrb	r3, [r7, #19]
 8006ab6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ac4:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad2:	490d      	ldr	r1, [pc, #52]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00b      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ae6:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af6:	4904      	ldr	r1, [pc, #16]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006afe:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40021000 	.word	0x40021000

08006b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b1a:	4b75      	ldr	r3, [pc, #468]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d018      	beq.n	8006b58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b26:	4b72      	ldr	r3, [pc, #456]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0203 	and.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d10d      	bne.n	8006b52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
       ||
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b3e:	4b6c      	ldr	r3, [pc, #432]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	091b      	lsrs	r3, r3, #4
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d047      	beq.n	8006be2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	73fb      	strb	r3, [r7, #15]
 8006b56:	e044      	b.n	8006be2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d018      	beq.n	8006b92 <RCCEx_PLLSAI1_Config+0x86>
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d825      	bhi.n	8006bb0 <RCCEx_PLLSAI1_Config+0xa4>
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d002      	beq.n	8006b6e <RCCEx_PLLSAI1_Config+0x62>
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d009      	beq.n	8006b80 <RCCEx_PLLSAI1_Config+0x74>
 8006b6c:	e020      	b.n	8006bb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b6e:	4b60      	ldr	r3, [pc, #384]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d11d      	bne.n	8006bb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b7e:	e01a      	b.n	8006bb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b80:	4b5b      	ldr	r3, [pc, #364]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d116      	bne.n	8006bba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b90:	e013      	b.n	8006bba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b92:	4b57      	ldr	r3, [pc, #348]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b9e:	4b54      	ldr	r3, [pc, #336]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bae:	e006      	b.n	8006bbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb4:	e004      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bb6:	bf00      	nop
 8006bb8:	e002      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10d      	bne.n	8006be2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	4944      	ldr	r1, [pc, #272]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d17d      	bne.n	8006ce4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006be8:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a40      	ldr	r2, [pc, #256]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf4:	f7fd fcbc 	bl	8004570 <HAL_GetTick>
 8006bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bfa:	e009      	b.n	8006c10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bfc:	f7fd fcb8 	bl	8004570 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d902      	bls.n	8006c10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c0e:	e005      	b.n	8006c1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c10:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1ef      	bne.n	8006bfc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d160      	bne.n	8006ce4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d111      	bne.n	8006c4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c28:	4b31      	ldr	r3, [pc, #196]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6892      	ldr	r2, [r2, #8]
 8006c38:	0211      	lsls	r1, r2, #8
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68d2      	ldr	r2, [r2, #12]
 8006c3e:	0912      	lsrs	r2, r2, #4
 8006c40:	0452      	lsls	r2, r2, #17
 8006c42:	430a      	orrs	r2, r1
 8006c44:	492a      	ldr	r1, [pc, #168]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	610b      	str	r3, [r1, #16]
 8006c4a:	e027      	b.n	8006c9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d112      	bne.n	8006c78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c52:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6892      	ldr	r2, [r2, #8]
 8006c62:	0211      	lsls	r1, r2, #8
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6912      	ldr	r2, [r2, #16]
 8006c68:	0852      	lsrs	r2, r2, #1
 8006c6a:	3a01      	subs	r2, #1
 8006c6c:	0552      	lsls	r2, r2, #21
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	491f      	ldr	r1, [pc, #124]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	610b      	str	r3, [r1, #16]
 8006c76:	e011      	b.n	8006c9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c78:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6892      	ldr	r2, [r2, #8]
 8006c88:	0211      	lsls	r1, r2, #8
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6952      	ldr	r2, [r2, #20]
 8006c8e:	0852      	lsrs	r2, r2, #1
 8006c90:	3a01      	subs	r2, #1
 8006c92:	0652      	lsls	r2, r2, #25
 8006c94:	430a      	orrs	r2, r1
 8006c96:	4916      	ldr	r1, [pc, #88]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c9c:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ca6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca8:	f7fd fc62 	bl	8004570 <HAL_GetTick>
 8006cac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cae:	e009      	b.n	8006cc4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cb0:	f7fd fc5e 	bl	8004570 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d902      	bls.n	8006cc4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	73fb      	strb	r3, [r7, #15]
          break;
 8006cc2:	e005      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0ef      	beq.n	8006cb0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	4904      	ldr	r1, [pc, #16]	; (8006cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40021000 	.word	0x40021000

08006cf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d02:	4b6a      	ldr	r3, [pc, #424]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d018      	beq.n	8006d40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d0e:	4b67      	ldr	r3, [pc, #412]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0203 	and.w	r2, r3, #3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d10d      	bne.n	8006d3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
       ||
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d26:	4b61      	ldr	r3, [pc, #388]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	091b      	lsrs	r3, r3, #4
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
       ||
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d047      	beq.n	8006dca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
 8006d3e:	e044      	b.n	8006dca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d018      	beq.n	8006d7a <RCCEx_PLLSAI2_Config+0x86>
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d825      	bhi.n	8006d98 <RCCEx_PLLSAI2_Config+0xa4>
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d002      	beq.n	8006d56 <RCCEx_PLLSAI2_Config+0x62>
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d009      	beq.n	8006d68 <RCCEx_PLLSAI2_Config+0x74>
 8006d54:	e020      	b.n	8006d98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d56:	4b55      	ldr	r3, [pc, #340]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d11d      	bne.n	8006d9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d66:	e01a      	b.n	8006d9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d68:	4b50      	ldr	r3, [pc, #320]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d116      	bne.n	8006da2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d78:	e013      	b.n	8006da2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d7a:	4b4c      	ldr	r3, [pc, #304]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10f      	bne.n	8006da6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d86:	4b49      	ldr	r3, [pc, #292]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d96:	e006      	b.n	8006da6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9c:	e004      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e002      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006da6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dae:	4b3f      	ldr	r3, [pc, #252]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6819      	ldr	r1, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	4939      	ldr	r1, [pc, #228]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d167      	bne.n	8006ea0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dd0:	4b36      	ldr	r3, [pc, #216]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a35      	ldr	r2, [pc, #212]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ddc:	f7fd fbc8 	bl	8004570 <HAL_GetTick>
 8006de0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006de2:	e009      	b.n	8006df8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006de4:	f7fd fbc4 	bl	8004570 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d902      	bls.n	8006df8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	73fb      	strb	r3, [r7, #15]
        break;
 8006df6:	e005      	b.n	8006e04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006df8:	4b2c      	ldr	r3, [pc, #176]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1ef      	bne.n	8006de4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d14a      	bne.n	8006ea0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d111      	bne.n	8006e34 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e10:	4b26      	ldr	r3, [pc, #152]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6892      	ldr	r2, [r2, #8]
 8006e20:	0211      	lsls	r1, r2, #8
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68d2      	ldr	r2, [r2, #12]
 8006e26:	0912      	lsrs	r2, r2, #4
 8006e28:	0452      	lsls	r2, r2, #17
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	491f      	ldr	r1, [pc, #124]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	614b      	str	r3, [r1, #20]
 8006e32:	e011      	b.n	8006e58 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e34:	4b1d      	ldr	r3, [pc, #116]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6892      	ldr	r2, [r2, #8]
 8006e44:	0211      	lsls	r1, r2, #8
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6912      	ldr	r2, [r2, #16]
 8006e4a:	0852      	lsrs	r2, r2, #1
 8006e4c:	3a01      	subs	r2, #1
 8006e4e:	0652      	lsls	r2, r2, #25
 8006e50:	430a      	orrs	r2, r1
 8006e52:	4916      	ldr	r1, [pc, #88]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e58:	4b14      	ldr	r3, [pc, #80]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a13      	ldr	r2, [pc, #76]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e64:	f7fd fb84 	bl	8004570 <HAL_GetTick>
 8006e68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e6a:	e009      	b.n	8006e80 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e6c:	f7fd fb80 	bl	8004570 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d902      	bls.n	8006e80 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	73fb      	strb	r3, [r7, #15]
          break;
 8006e7e:	e005      	b.n	8006e8c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ef      	beq.n	8006e6c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e92:	4b06      	ldr	r3, [pc, #24]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	4904      	ldr	r1, [pc, #16]	; (8006eac <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40021000 	.word	0x40021000

08006eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e095      	b.n	8006fee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d108      	bne.n	8006edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed2:	d009      	beq.n	8006ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	61da      	str	r2, [r3, #28]
 8006eda:	e005      	b.n	8006ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fb fe42 	bl	8002b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f28:	d902      	bls.n	8006f30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e002      	b.n	8006f36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f3e:	d007      	beq.n	8006f50 <HAL_SPI_Init+0xa0>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f48:	d002      	beq.n	8006f50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f92:	ea42 0103 	orr.w	r1, r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	f003 0204 	and.w	r2, r3, #4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006fcc:	ea42 0103 	orr.w	r1, r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e01a      	b.n	800703e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7fb fe15 	bl	8002c50 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b088      	sub	sp, #32
 800704a:	af02      	add	r7, sp, #8
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007062:	d112      	bne.n	800708a <HAL_SPI_Receive+0x44>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10e      	bne.n	800708a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2204      	movs	r2, #4
 8007070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007074:	88fa      	ldrh	r2, [r7, #6]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f910 	bl	80072a6 <HAL_SPI_TransmitReceive>
 8007086:	4603      	mov	r3, r0
 8007088:	e109      	b.n	800729e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_SPI_Receive+0x52>
 8007094:	2302      	movs	r3, #2
 8007096:	e102      	b.n	800729e <HAL_SPI_Receive+0x258>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a0:	f7fd fa66 	bl	8004570 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d002      	beq.n	80070b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80070b2:	2302      	movs	r3, #2
 80070b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070b6:	e0e9      	b.n	800728c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_SPI_Receive+0x7e>
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070c8:	e0e0      	b.n	800728c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2204      	movs	r2, #4
 80070ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	88fa      	ldrh	r2, [r7, #6]
 80070e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	88fa      	ldrh	r2, [r7, #6]
 80070ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007114:	d908      	bls.n	8007128 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	e007      	b.n	8007138 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007136:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007140:	d10f      	bne.n	8007162 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007160:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716c:	2b40      	cmp	r3, #64	; 0x40
 800716e:	d007      	beq.n	8007180 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800717e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007188:	d867      	bhi.n	800725a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800718a:	e030      	b.n	80071ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b01      	cmp	r3, #1
 8007198:	d117      	bne.n	80071ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f103 020c 	add.w	r2, r3, #12
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071c8:	e011      	b.n	80071ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ca:	f7fd f9d1 	bl	8004570 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d803      	bhi.n	80071e2 <HAL_SPI_Receive+0x19c>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e0:	d102      	bne.n	80071e8 <HAL_SPI_Receive+0x1a2>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071ec:	e04e      	b.n	800728c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1c8      	bne.n	800718c <HAL_SPI_Receive+0x146>
 80071fa:	e034      	b.n	8007266 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d115      	bne.n	8007236 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	b292      	uxth	r2, r2
 8007216:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007234:	e011      	b.n	800725a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007236:	f7fd f99b 	bl	8004570 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d803      	bhi.n	800724e <HAL_SPI_Receive+0x208>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d102      	bne.n	8007254 <HAL_SPI_Receive+0x20e>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007258:	e018      	b.n	800728c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1ca      	bne.n	80071fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fee8 	bl	8008040 <SPI_EndRxTransaction>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
 8007288:	e000      	b.n	800728c <HAL_SPI_Receive+0x246>
  }

error :
 800728a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b08a      	sub	sp, #40	; 0x28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072b4:	2301      	movs	r3, #1
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_SPI_TransmitReceive+0x26>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e1fb      	b.n	80076c4 <HAL_SPI_TransmitReceive+0x41e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d4:	f7fd f94c 	bl	8004570 <HAL_GetTick>
 80072d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072e8:	887b      	ldrh	r3, [r7, #2]
 80072ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80072ec:	887b      	ldrh	r3, [r7, #2]
 80072ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072f0:	7efb      	ldrb	r3, [r7, #27]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d00e      	beq.n	8007314 <HAL_SPI_TransmitReceive+0x6e>
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fc:	d106      	bne.n	800730c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <HAL_SPI_TransmitReceive+0x66>
 8007306:	7efb      	ldrb	r3, [r7, #27]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d003      	beq.n	8007314 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800730c:	2302      	movs	r3, #2
 800730e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007312:	e1cd      	b.n	80076b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_SPI_TransmitReceive+0x80>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_SPI_TransmitReceive+0x80>
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800732c:	e1c0      	b.n	80076b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b04      	cmp	r3, #4
 8007338:	d003      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2205      	movs	r2, #5
 800733e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	887a      	ldrh	r2, [r7, #2]
 8007352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	887a      	ldrh	r2, [r7, #2]
 800735a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	887a      	ldrh	r2, [r7, #2]
 8007368:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	887a      	ldrh	r2, [r7, #2]
 800736e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007384:	d802      	bhi.n	800738c <HAL_SPI_TransmitReceive+0xe6>
 8007386:	8a3b      	ldrh	r3, [r7, #16]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d908      	bls.n	800739e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	e007      	b.n	80073ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d007      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073d4:	d97c      	bls.n	80074d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x13e>
 80073de:	8a7b      	ldrh	r3, [r7, #18]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d169      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	881a      	ldrh	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	1c9a      	adds	r2, r3, #2
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007408:	e056      	b.n	80074b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d11b      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x1aa>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <HAL_SPI_TransmitReceive+0x1aa>
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2b01      	cmp	r3, #1
 8007426:	d113      	bne.n	8007450 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d11c      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x1f2>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d016      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	b292      	uxth	r2, r2
 8007476:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b29a      	uxth	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007494:	2301      	movs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007498:	f7fd f86a 	bl	8004570 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d807      	bhi.n	80074b8 <HAL_SPI_TransmitReceive+0x212>
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d003      	beq.n	80074b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80074b6:	e0fb      	b.n	80076b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1a3      	bne.n	800740a <HAL_SPI_TransmitReceive+0x164>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d19d      	bne.n	800740a <HAL_SPI_TransmitReceive+0x164>
 80074ce:	e0df      	b.n	8007690 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x23a>
 80074d8:	8a7b      	ldrh	r3, [r7, #18]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	f040 80cb 	bne.w	8007676 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d912      	bls.n	8007510 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	1c9a      	adds	r2, r3, #2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b02      	subs	r3, #2
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800750e:	e0b2      	b.n	8007676 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007536:	e09e      	b.n	8007676 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b02      	cmp	r3, #2
 8007544:	d134      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x30a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d02f      	beq.n	80075b0 <HAL_SPI_TransmitReceive+0x30a>
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	2b01      	cmp	r3, #1
 8007554:	d12c      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d912      	bls.n	8007586 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	881a      	ldrh	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	1c9a      	adds	r2, r3, #2
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b02      	subs	r3, #2
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007584:	e012      	b.n	80075ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d148      	bne.n	8007650 <HAL_SPI_TransmitReceive+0x3aa>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d042      	beq.n	8007650 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d923      	bls.n	800761e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	b292      	uxth	r2, r2
 80075e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	1c9a      	adds	r2, r3, #2
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b02      	subs	r3, #2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d81f      	bhi.n	800764c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800761a:	605a      	str	r2, [r3, #4]
 800761c:	e016      	b.n	800764c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f103 020c 	add.w	r2, r3, #12
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800764c:	2301      	movs	r3, #1
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007650:	f7fc ff8e 	bl	8004570 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765c:	429a      	cmp	r2, r3
 800765e:	d803      	bhi.n	8007668 <HAL_SPI_TransmitReceive+0x3c2>
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007666:	d102      	bne.n	800766e <HAL_SPI_TransmitReceive+0x3c8>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007674:	e01c      	b.n	80076b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	f47f af5b 	bne.w	8007538 <HAL_SPI_TransmitReceive+0x292>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	f47f af54 	bne.w	8007538 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fd2b 	bl	80080f0 <SPI_EndRxTxTransaction>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2220      	movs	r2, #32
 80076aa:	661a      	str	r2, [r3, #96]	; 0x60
 80076ac:	e000      	b.n	80076b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80076ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3728      	adds	r7, #40	; 0x28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_SPI_Transmit_IT+0x20>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e072      	b.n	80077d2 <HAL_SPI_Transmit_IT+0x106>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_SPI_Transmit_IT+0x34>
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007704:	e060      	b.n	80077c8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d002      	beq.n	8007718 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8007712:	2302      	movs	r3, #2
 8007714:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007716:	e057      	b.n	80077c8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2203      	movs	r2, #3
 800771c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	88fa      	ldrh	r2, [r7, #6]
 8007730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800775c:	d903      	bls.n	8007766 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a1f      	ldr	r2, [pc, #124]	; (80077e0 <HAL_SPI_Transmit_IT+0x114>)
 8007762:	651a      	str	r2, [r3, #80]	; 0x50
 8007764:	e002      	b.n	800776c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_SPI_Transmit_IT+0x118>)
 800776a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007774:	d10f      	bne.n	8007796 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007784:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007794:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80077a4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d008      	beq.n	80077c6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e000      	b.n	80077c8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80077c6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	08007dc9 	.word	0x08007dc9
 80077e4:	08007d83 	.word	0x08007d83

080077e8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <HAL_SPI_Receive_IT+0x3c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780a:	d10b      	bne.n	8007824 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2204      	movs	r2, #4
 8007810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f894 	bl	8007948 <HAL_SPI_TransmitReceive_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	e089      	b.n	8007938 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_SPI_Receive_IT+0x4a>
 800782e:	2302      	movs	r3, #2
 8007830:	e082      	b.n	8007938 <HAL_SPI_Receive_IT+0x150>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	d002      	beq.n	800784c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007846:	2302      	movs	r3, #2
 8007848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800784a:	e070      	b.n	800792e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_SPI_Receive_IT+0x70>
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800785c:	e067      	b.n	800792e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2204      	movs	r2, #4
 8007862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a2:	d90b      	bls.n	80078bc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078b2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a22      	ldr	r2, [pc, #136]	; (8007940 <HAL_SPI_Receive_IT+0x158>)
 80078b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80078ba:	e00a      	b.n	80078d2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ca:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <HAL_SPI_Receive_IT+0x15c>)
 80078d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078da:	d10f      	bne.n	80078fc <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078fa:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800790a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d008      	beq.n	800792c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	e000      	b.n	800792e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800792c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	08007d37 	.word	0x08007d37
 8007944:	08007ce7 	.word	0x08007ce7

08007948 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_SPI_TransmitReceive_IT+0x20>
 8007964:	2302      	movs	r3, #2
 8007966:	e091      	b.n	8007a8c <HAL_SPI_TransmitReceive_IT+0x144>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007976:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800797e:	7dbb      	ldrb	r3, [r7, #22]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d00d      	beq.n	80079a0 <HAL_SPI_TransmitReceive_IT+0x58>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800798a:	d106      	bne.n	800799a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <HAL_SPI_TransmitReceive_IT+0x52>
 8007994:	7dbb      	ldrb	r3, [r7, #22]
 8007996:	2b04      	cmp	r3, #4
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800799a:	2302      	movs	r3, #2
 800799c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800799e:	e070      	b.n	8007a82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80079ac:	887b      	ldrh	r3, [r7, #2]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079b6:	e064      	b.n	8007a82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d003      	beq.n	80079cc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2205      	movs	r2, #5
 80079c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	887a      	ldrh	r2, [r7, #2]
 80079dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	887a      	ldrh	r2, [r7, #2]
 80079ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	887a      	ldrh	r2, [r7, #2]
 80079f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a02:	d906      	bls.n	8007a12 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4a24      	ldr	r2, [pc, #144]	; (8007a98 <HAL_SPI_TransmitReceive_IT+0x150>)
 8007a08:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4a23      	ldr	r2, [pc, #140]	; (8007a9c <HAL_SPI_TransmitReceive_IT+0x154>)
 8007a0e:	651a      	str	r2, [r3, #80]	; 0x50
 8007a10:	e005      	b.n	8007a1e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007a16:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007a1c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a26:	d802      	bhi.n	8007a2e <HAL_SPI_TransmitReceive_IT+0xe6>
 8007a28:	887b      	ldrh	r3, [r7, #2]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d908      	bls.n	8007a40 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a3c:	605a      	str	r2, [r3, #4]
 8007a3e:	e007      	b.n	8007a50 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a4e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007a5e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	d008      	beq.n	8007a80 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e000      	b.n	8007a82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007a80:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	08007c21 	.word	0x08007c21
 8007a9c:	08007c87 	.word	0x08007c87
 8007aa0:	08007ad1 	.word	0x08007ad1
 8007aa4:	08007b8f 	.word	0x08007b8f

08007aa8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d923      	bls.n	8007b2c <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	b292      	uxth	r2, r2
 8007af0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	1c9a      	adds	r2, r3, #2
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b02      	subs	r3, #2
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d11f      	bne.n	8007b5a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	e016      	b.n	8007b5a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f103 020c 	add.w	r2, r3, #12
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10f      	bne.n	8007b86 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b74:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fafb 	bl	800817c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d912      	bls.n	8007bc6 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b02      	subs	r3, #2
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bc4:	e012      	b.n	8007bec <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	330c      	adds	r3, #12
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d110      	bne.n	8007c18 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c04:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fab2 	bl	800817c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	b292      	uxth	r2, r2
 8007c34:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	1c9a      	adds	r2, r3, #2
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10f      	bne.n	8007c7e <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa7f 	bl	800817c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	881a      	ldrh	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	1c9a      	adds	r2, r3, #2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cca:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa4f 	bl	800817c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f103 020c 	add.w	r2, r3, #12
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	7812      	ldrb	r2, [r2, #0]
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa69 	bl	8008200 <SPI_CloseRx_ISR>
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	b292      	uxth	r2, r2
 8007d4a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa43 	bl	8008200 <SPI_CloseRx_ISR>
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	330c      	adds	r3, #12
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa50 	bl	8008260 <SPI_CloseTx_ISR>
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	1c9a      	adds	r2, r3, #2
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa2e 	bl	8008260 <SPI_CloseTx_ISR>
  }
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e1c:	f7fc fba8 	bl	8004570 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4413      	add	r3, r2
 8007e2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e2c:	f7fc fba0 	bl	8004570 <HAL_GetTick>
 8007e30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e32:	4b39      	ldr	r3, [pc, #228]	; (8007f18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	015b      	lsls	r3, r3, #5
 8007e38:	0d1b      	lsrs	r3, r3, #20
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	fb02 f303 	mul.w	r3, r2, r3
 8007e40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e42:	e054      	b.n	8007eee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d050      	beq.n	8007eee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e4c:	f7fc fb90 	bl	8004570 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d902      	bls.n	8007e62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d13d      	bne.n	8007ede <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e7a:	d111      	bne.n	8007ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e84:	d004      	beq.n	8007e90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8e:	d107      	bne.n	8007ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea8:	d10f      	bne.n	8007eca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e017      	b.n	8007f0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	bf0c      	ite	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	2300      	movne	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d19b      	bne.n	8007e44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3720      	adds	r7, #32
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000004 	.word	0x20000004

08007f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f2a:	f7fc fb21 	bl	8004570 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	4413      	add	r3, r2
 8007f38:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f3a:	f7fc fb19 	bl	8004570 <HAL_GetTick>
 8007f3e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f40:	4b3e      	ldr	r3, [pc, #248]	; (800803c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	00da      	lsls	r2, r3, #3
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	0d1b      	lsrs	r3, r3, #20
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
 8007f56:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f58:	e062      	b.n	8008020 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f60:	d109      	bne.n	8007f76 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007f74:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d050      	beq.n	8008020 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f7e:	f7fc faf7 	bl	8004570 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d902      	bls.n	8007f94 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d13d      	bne.n	8008010 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fac:	d111      	bne.n	8007fd2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb6:	d004      	beq.n	8007fc2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc0:	d107      	bne.n	8007fd2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fda:	d10f      	bne.n	8007ffc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ffa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e010      	b.n	8008032 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3b01      	subs	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4013      	ands	r3, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	d194      	bne.n	8007f5a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000004 	.word	0x20000004

08008040 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008054:	d111      	bne.n	800807a <SPI_EndRxTransaction+0x3a>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805e:	d004      	beq.n	800806a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008068:	d107      	bne.n	800807a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008078:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2200      	movs	r2, #0
 8008082:	2180      	movs	r1, #128	; 0x80
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fec1 	bl	8007e0c <SPI_WaitFlagStateUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008094:	f043 0220 	orr.w	r2, r3, #32
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e023      	b.n	80080e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a8:	d11d      	bne.n	80080e6 <SPI_EndRxTransaction+0xa6>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b2:	d004      	beq.n	80080be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080bc:	d113      	bne.n	80080e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff ff26 	bl	8007f1c <SPI_WaitFifoStateUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e000      	b.n	80080e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2200      	movs	r2, #0
 8008104:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff ff07 	bl	8007f1c <SPI_WaitFifoStateUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	f043 0220 	orr.w	r2, r3, #32
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e027      	b.n	8008174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff fe6c 	bl	8007e0c <SPI_WaitFlagStateUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813e:	f043 0220 	orr.w	r2, r3, #32
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e014      	b.n	8008174 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2200      	movs	r2, #0
 8008152:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7ff fee0 	bl	8007f1c <SPI_WaitFifoStateUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e000      	b.n	8008174 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008184:	f7fc f9f4 	bl	8004570 <HAL_GetTick>
 8008188:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0220 	bic.w	r2, r2, #32
 8008198:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	2164      	movs	r1, #100	; 0x64
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff ffa6 	bl	80080f0 <SPI_EndRxTxTransaction>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ae:	f043 0220 	orr.w	r2, r3, #32
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d115      	bne.n	80081ea <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d107      	bne.n	80081da <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fa f818 	bl	8002208 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80081d8:	e00e      	b.n	80081f8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fc60 	bl	8007aa8 <HAL_SPI_TxRxCpltCallback>
}
 80081e8:	e006      	b.n	80081f8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff fc62 	bl	8007abc <HAL_SPI_ErrorCallback>
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008216:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008218:	f7fc f9aa 	bl	8004570 <HAL_GetTick>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	2164      	movs	r1, #100	; 0x64
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff ff0c 	bl	8008040 <SPI_EndRxTransaction>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008232:	f043 0220 	orr.w	r2, r3, #32
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008246:	2b00      	cmp	r3, #0
 8008248:	d103      	bne.n	8008252 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7f9 ffdc 	bl	8002208 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008250:	e002      	b.n	8008258 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fc32 	bl	8007abc <HAL_SPI_ErrorCallback>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008268:	f7fc f982 	bl	8004570 <HAL_GetTick>
 800826c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800827c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	2164      	movs	r1, #100	; 0x64
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff ff34 	bl	80080f0 <SPI_EndRxTxTransaction>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fbf7 	bl	8007abc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80082ce:	e002      	b.n	80082d6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7f9 ffad 	bl	8002230 <HAL_SPI_TxCpltCallback>
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e049      	b.n	8008384 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f841 	bl	800838c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3304      	adds	r3, #4
 800831a:	4619      	mov	r1, r3
 800831c:	4610      	mov	r0, r2
 800831e:	f000 f9f7 	bl	8008710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d001      	beq.n	80083b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e04f      	b.n	8008458 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0201 	orr.w	r2, r2, #1
 80083ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a23      	ldr	r2, [pc, #140]	; (8008464 <HAL_TIM_Base_Start_IT+0xc4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d01d      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x76>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e2:	d018      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x76>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <HAL_TIM_Base_Start_IT+0xc8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d013      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x76>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <HAL_TIM_Base_Start_IT+0xcc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00e      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x76>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1c      	ldr	r2, [pc, #112]	; (8008470 <HAL_TIM_Base_Start_IT+0xd0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d009      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x76>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <HAL_TIM_Base_Start_IT+0xd4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d004      	beq.n	8008416 <HAL_TIM_Base_Start_IT+0x76>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a19      	ldr	r2, [pc, #100]	; (8008478 <HAL_TIM_Base_Start_IT+0xd8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d115      	bne.n	8008442 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <HAL_TIM_Base_Start_IT+0xdc>)
 800841e:	4013      	ands	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b06      	cmp	r3, #6
 8008426:	d015      	beq.n	8008454 <HAL_TIM_Base_Start_IT+0xb4>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842e:	d011      	beq.n	8008454 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008440:	e008      	b.n	8008454 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	e000      	b.n	8008456 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008454:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40000c00 	.word	0x40000c00
 8008474:	40013400 	.word	0x40013400
 8008478:	40014000 	.word	0x40014000
 800847c:	00010007 	.word	0x00010007

08008480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b02      	cmp	r3, #2
 8008494:	d122      	bne.n	80084dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d11b      	bne.n	80084dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0202 	mvn.w	r2, #2
 80084ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f905 	bl	80086d2 <HAL_TIM_IC_CaptureCallback>
 80084c8:	e005      	b.n	80084d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f8f7 	bl	80086be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f908 	bl	80086e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d122      	bne.n	8008530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d11b      	bne.n	8008530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0204 	mvn.w	r2, #4
 8008500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8db 	bl	80086d2 <HAL_TIM_IC_CaptureCallback>
 800851c:	e005      	b.n	800852a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8cd 	bl	80086be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f8de 	bl	80086e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b08      	cmp	r3, #8
 800853c:	d122      	bne.n	8008584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b08      	cmp	r3, #8
 800854a:	d11b      	bne.n	8008584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0208 	mvn.w	r2, #8
 8008554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f8b1 	bl	80086d2 <HAL_TIM_IC_CaptureCallback>
 8008570:	e005      	b.n	800857e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f8a3 	bl	80086be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f8b4 	bl	80086e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b10      	cmp	r3, #16
 8008590:	d122      	bne.n	80085d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b10      	cmp	r3, #16
 800859e:	d11b      	bne.n	80085d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0210 	mvn.w	r2, #16
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2208      	movs	r2, #8
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f887 	bl	80086d2 <HAL_TIM_IC_CaptureCallback>
 80085c4:	e005      	b.n	80085d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f879 	bl	80086be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f88a 	bl	80086e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d10e      	bne.n	8008604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d107      	bne.n	8008604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f06f 0201 	mvn.w	r2, #1
 80085fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fa fa84 	bl	8002b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860e:	2b80      	cmp	r3, #128	; 0x80
 8008610:	d10e      	bne.n	8008630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	2b80      	cmp	r3, #128	; 0x80
 800861e:	d107      	bne.n	8008630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f914 	bl	8008858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863e:	d10e      	bne.n	800865e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d107      	bne.n	800865e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f907 	bl	800886c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d10e      	bne.n	800868a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d107      	bne.n	800868a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f838 	bl	80086fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	2b20      	cmp	r3, #32
 8008696:	d10e      	bne.n	80086b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d107      	bne.n	80086b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f06f 0220 	mvn.w	r2, #32
 80086ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8c7 	bl	8008844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a40      	ldr	r2, [pc, #256]	; (8008824 <TIM_Base_SetConfig+0x114>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d013      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872e:	d00f      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a3d      	ldr	r2, [pc, #244]	; (8008828 <TIM_Base_SetConfig+0x118>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00b      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a3c      	ldr	r2, [pc, #240]	; (800882c <TIM_Base_SetConfig+0x11c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d007      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a3b      	ldr	r2, [pc, #236]	; (8008830 <TIM_Base_SetConfig+0x120>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a3a      	ldr	r2, [pc, #232]	; (8008834 <TIM_Base_SetConfig+0x124>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d108      	bne.n	8008762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2f      	ldr	r2, [pc, #188]	; (8008824 <TIM_Base_SetConfig+0x114>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d01f      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008770:	d01b      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2c      	ldr	r2, [pc, #176]	; (8008828 <TIM_Base_SetConfig+0x118>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d017      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a2b      	ldr	r2, [pc, #172]	; (800882c <TIM_Base_SetConfig+0x11c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2a      	ldr	r2, [pc, #168]	; (8008830 <TIM_Base_SetConfig+0x120>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00f      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a29      	ldr	r2, [pc, #164]	; (8008834 <TIM_Base_SetConfig+0x124>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00b      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a28      	ldr	r2, [pc, #160]	; (8008838 <TIM_Base_SetConfig+0x128>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a27      	ldr	r2, [pc, #156]	; (800883c <TIM_Base_SetConfig+0x12c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a26      	ldr	r2, [pc, #152]	; (8008840 <TIM_Base_SetConfig+0x130>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d108      	bne.n	80087bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a10      	ldr	r2, [pc, #64]	; (8008824 <TIM_Base_SetConfig+0x114>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00f      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a12      	ldr	r2, [pc, #72]	; (8008834 <TIM_Base_SetConfig+0x124>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a11      	ldr	r2, [pc, #68]	; (8008838 <TIM_Base_SetConfig+0x128>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a10      	ldr	r2, [pc, #64]	; (800883c <TIM_Base_SetConfig+0x12c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a0f      	ldr	r2, [pc, #60]	; (8008840 <TIM_Base_SetConfig+0x130>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d103      	bne.n	8008810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	615a      	str	r2, [r3, #20]
}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40000400 	.word	0x40000400
 800882c:	40000800 	.word	0x40000800
 8008830:	40000c00 	.word	0x40000c00
 8008834:	40013400 	.word	0x40013400
 8008838:	40014000 	.word	0x40014000
 800883c:	40014400 	.word	0x40014400
 8008840:	40014800 	.word	0x40014800

08008844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e040      	b.n	8008914 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fa f9f8 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2224      	movs	r2, #36	; 0x24
 80088ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0201 	bic.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f8c0 	bl	8008a44 <UART_SetConfig>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e022      	b.n	8008914 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fb3e 	bl	8008f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fbc5 	bl	800909c <UART_CheckIdleState>
 8008912:	4603      	mov	r3, r0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af02      	add	r7, sp, #8
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008930:	2b20      	cmp	r3, #32
 8008932:	f040 8082 	bne.w	8008a3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_UART_Transmit+0x26>
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e07a      	b.n	8008a3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_UART_Transmit+0x38>
 8008950:	2302      	movs	r3, #2
 8008952:	e073      	b.n	8008a3c <HAL_UART_Transmit+0x120>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2221      	movs	r2, #33	; 0x21
 8008968:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800896a:	f7fb fe01 	bl	8004570 <HAL_GetTick>
 800896e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	88fa      	ldrh	r2, [r7, #6]
 800897c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008988:	d108      	bne.n	800899c <HAL_UART_Transmit+0x80>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d104      	bne.n	800899c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	e003      	b.n	80089a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80089ac:	e02d      	b.n	8008a0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2200      	movs	r2, #0
 80089b6:	2180      	movs	r1, #128	; 0x80
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fbb8 	bl	800912e <UART_WaitOnFlagUntilTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e039      	b.n	8008a3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	881a      	ldrh	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089da:	b292      	uxth	r2, r2
 80089dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	3302      	adds	r3, #2
 80089e2:	61bb      	str	r3, [r7, #24]
 80089e4:	e008      	b.n	80089f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	b292      	uxth	r2, r2
 80089f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	3301      	adds	r3, #1
 80089f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1cb      	bne.n	80089ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2140      	movs	r1, #64	; 0x40
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fb84 	bl	800912e <UART_WaitOnFlagUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e005      	b.n	8008a3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008a3a:	2302      	movs	r3, #2
  }
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a44:	b5b0      	push	{r4, r5, r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	4bad      	ldr	r3, [pc, #692]	; (8008d24 <UART_SetConfig+0x2e0>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	69f9      	ldr	r1, [r7, #28]
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4aa2      	ldr	r2, [pc, #648]	; (8008d28 <UART_SetConfig+0x2e4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d004      	beq.n	8008aac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a99      	ldr	r2, [pc, #612]	; (8008d2c <UART_SetConfig+0x2e8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d121      	bne.n	8008b0e <UART_SetConfig+0xca>
 8008aca:	4b99      	ldr	r3, [pc, #612]	; (8008d30 <UART_SetConfig+0x2ec>)
 8008acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d817      	bhi.n	8008b08 <UART_SetConfig+0xc4>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <UART_SetConfig+0x9c>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008afd 	.word	0x08008afd
 8008ae8:	08008af7 	.word	0x08008af7
 8008aec:	08008b03 	.word	0x08008b03
 8008af0:	2301      	movs	r3, #1
 8008af2:	76fb      	strb	r3, [r7, #27]
 8008af4:	e0e7      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008af6:	2302      	movs	r3, #2
 8008af8:	76fb      	strb	r3, [r7, #27]
 8008afa:	e0e4      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008afc:	2304      	movs	r3, #4
 8008afe:	76fb      	strb	r3, [r7, #27]
 8008b00:	e0e1      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b02:	2308      	movs	r3, #8
 8008b04:	76fb      	strb	r3, [r7, #27]
 8008b06:	e0de      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b08:	2310      	movs	r3, #16
 8008b0a:	76fb      	strb	r3, [r7, #27]
 8008b0c:	e0db      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a88      	ldr	r2, [pc, #544]	; (8008d34 <UART_SetConfig+0x2f0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d132      	bne.n	8008b7e <UART_SetConfig+0x13a>
 8008b18:	4b85      	ldr	r3, [pc, #532]	; (8008d30 <UART_SetConfig+0x2ec>)
 8008b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1e:	f003 030c 	and.w	r3, r3, #12
 8008b22:	2b0c      	cmp	r3, #12
 8008b24:	d828      	bhi.n	8008b78 <UART_SetConfig+0x134>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <UART_SetConfig+0xe8>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b61 	.word	0x08008b61
 8008b30:	08008b79 	.word	0x08008b79
 8008b34:	08008b79 	.word	0x08008b79
 8008b38:	08008b79 	.word	0x08008b79
 8008b3c:	08008b6d 	.word	0x08008b6d
 8008b40:	08008b79 	.word	0x08008b79
 8008b44:	08008b79 	.word	0x08008b79
 8008b48:	08008b79 	.word	0x08008b79
 8008b4c:	08008b67 	.word	0x08008b67
 8008b50:	08008b79 	.word	0x08008b79
 8008b54:	08008b79 	.word	0x08008b79
 8008b58:	08008b79 	.word	0x08008b79
 8008b5c:	08008b73 	.word	0x08008b73
 8008b60:	2300      	movs	r3, #0
 8008b62:	76fb      	strb	r3, [r7, #27]
 8008b64:	e0af      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b66:	2302      	movs	r3, #2
 8008b68:	76fb      	strb	r3, [r7, #27]
 8008b6a:	e0ac      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	76fb      	strb	r3, [r7, #27]
 8008b70:	e0a9      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b72:	2308      	movs	r3, #8
 8008b74:	76fb      	strb	r3, [r7, #27]
 8008b76:	e0a6      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	76fb      	strb	r3, [r7, #27]
 8008b7c:	e0a3      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a6d      	ldr	r2, [pc, #436]	; (8008d38 <UART_SetConfig+0x2f4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d120      	bne.n	8008bca <UART_SetConfig+0x186>
 8008b88:	4b69      	ldr	r3, [pc, #420]	; (8008d30 <UART_SetConfig+0x2ec>)
 8008b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b92:	2b30      	cmp	r3, #48	; 0x30
 8008b94:	d013      	beq.n	8008bbe <UART_SetConfig+0x17a>
 8008b96:	2b30      	cmp	r3, #48	; 0x30
 8008b98:	d814      	bhi.n	8008bc4 <UART_SetConfig+0x180>
 8008b9a:	2b20      	cmp	r3, #32
 8008b9c:	d009      	beq.n	8008bb2 <UART_SetConfig+0x16e>
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d810      	bhi.n	8008bc4 <UART_SetConfig+0x180>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <UART_SetConfig+0x168>
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d006      	beq.n	8008bb8 <UART_SetConfig+0x174>
 8008baa:	e00b      	b.n	8008bc4 <UART_SetConfig+0x180>
 8008bac:	2300      	movs	r3, #0
 8008bae:	76fb      	strb	r3, [r7, #27]
 8008bb0:	e089      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	76fb      	strb	r3, [r7, #27]
 8008bb6:	e086      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	76fb      	strb	r3, [r7, #27]
 8008bbc:	e083      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	76fb      	strb	r3, [r7, #27]
 8008bc2:	e080      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	76fb      	strb	r3, [r7, #27]
 8008bc8:	e07d      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a5b      	ldr	r2, [pc, #364]	; (8008d3c <UART_SetConfig+0x2f8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d120      	bne.n	8008c16 <UART_SetConfig+0x1d2>
 8008bd4:	4b56      	ldr	r3, [pc, #344]	; (8008d30 <UART_SetConfig+0x2ec>)
 8008bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bde:	2bc0      	cmp	r3, #192	; 0xc0
 8008be0:	d013      	beq.n	8008c0a <UART_SetConfig+0x1c6>
 8008be2:	2bc0      	cmp	r3, #192	; 0xc0
 8008be4:	d814      	bhi.n	8008c10 <UART_SetConfig+0x1cc>
 8008be6:	2b80      	cmp	r3, #128	; 0x80
 8008be8:	d009      	beq.n	8008bfe <UART_SetConfig+0x1ba>
 8008bea:	2b80      	cmp	r3, #128	; 0x80
 8008bec:	d810      	bhi.n	8008c10 <UART_SetConfig+0x1cc>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <UART_SetConfig+0x1b4>
 8008bf2:	2b40      	cmp	r3, #64	; 0x40
 8008bf4:	d006      	beq.n	8008c04 <UART_SetConfig+0x1c0>
 8008bf6:	e00b      	b.n	8008c10 <UART_SetConfig+0x1cc>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	76fb      	strb	r3, [r7, #27]
 8008bfc:	e063      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	76fb      	strb	r3, [r7, #27]
 8008c02:	e060      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c04:	2304      	movs	r3, #4
 8008c06:	76fb      	strb	r3, [r7, #27]
 8008c08:	e05d      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	76fb      	strb	r3, [r7, #27]
 8008c0e:	e05a      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c10:	2310      	movs	r3, #16
 8008c12:	76fb      	strb	r3, [r7, #27]
 8008c14:	e057      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a49      	ldr	r2, [pc, #292]	; (8008d40 <UART_SetConfig+0x2fc>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d125      	bne.n	8008c6c <UART_SetConfig+0x228>
 8008c20:	4b43      	ldr	r3, [pc, #268]	; (8008d30 <UART_SetConfig+0x2ec>)
 8008c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c2e:	d017      	beq.n	8008c60 <UART_SetConfig+0x21c>
 8008c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c34:	d817      	bhi.n	8008c66 <UART_SetConfig+0x222>
 8008c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c3a:	d00b      	beq.n	8008c54 <UART_SetConfig+0x210>
 8008c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c40:	d811      	bhi.n	8008c66 <UART_SetConfig+0x222>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <UART_SetConfig+0x20a>
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4a:	d006      	beq.n	8008c5a <UART_SetConfig+0x216>
 8008c4c:	e00b      	b.n	8008c66 <UART_SetConfig+0x222>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	76fb      	strb	r3, [r7, #27]
 8008c52:	e038      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c54:	2302      	movs	r3, #2
 8008c56:	76fb      	strb	r3, [r7, #27]
 8008c58:	e035      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	76fb      	strb	r3, [r7, #27]
 8008c5e:	e032      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c60:	2308      	movs	r3, #8
 8008c62:	76fb      	strb	r3, [r7, #27]
 8008c64:	e02f      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c66:	2310      	movs	r3, #16
 8008c68:	76fb      	strb	r3, [r7, #27]
 8008c6a:	e02c      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a2d      	ldr	r2, [pc, #180]	; (8008d28 <UART_SetConfig+0x2e4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d125      	bne.n	8008cc2 <UART_SetConfig+0x27e>
 8008c76:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <UART_SetConfig+0x2ec>)
 8008c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c84:	d017      	beq.n	8008cb6 <UART_SetConfig+0x272>
 8008c86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c8a:	d817      	bhi.n	8008cbc <UART_SetConfig+0x278>
 8008c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c90:	d00b      	beq.n	8008caa <UART_SetConfig+0x266>
 8008c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c96:	d811      	bhi.n	8008cbc <UART_SetConfig+0x278>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d003      	beq.n	8008ca4 <UART_SetConfig+0x260>
 8008c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca0:	d006      	beq.n	8008cb0 <UART_SetConfig+0x26c>
 8008ca2:	e00b      	b.n	8008cbc <UART_SetConfig+0x278>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	76fb      	strb	r3, [r7, #27]
 8008ca8:	e00d      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008caa:	2302      	movs	r3, #2
 8008cac:	76fb      	strb	r3, [r7, #27]
 8008cae:	e00a      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	76fb      	strb	r3, [r7, #27]
 8008cb4:	e007      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008cb6:	2308      	movs	r3, #8
 8008cb8:	76fb      	strb	r3, [r7, #27]
 8008cba:	e004      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	76fb      	strb	r3, [r7, #27]
 8008cc0:	e001      	b.n	8008cc6 <UART_SetConfig+0x282>
 8008cc2:	2310      	movs	r3, #16
 8008cc4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <UART_SetConfig+0x2e4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	f040 8087 	bne.w	8008de0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cd2:	7efb      	ldrb	r3, [r7, #27]
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d837      	bhi.n	8008d48 <UART_SetConfig+0x304>
 8008cd8:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <UART_SetConfig+0x29c>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d49 	.word	0x08008d49
 8008ce8:	08008d0d 	.word	0x08008d0d
 8008cec:	08008d49 	.word	0x08008d49
 8008cf0:	08008d13 	.word	0x08008d13
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008d49 	.word	0x08008d49
 8008cfc:	08008d49 	.word	0x08008d49
 8008d00:	08008d1b 	.word	0x08008d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d04:	f7fd fb5a 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8008d08:	6178      	str	r0, [r7, #20]
        break;
 8008d0a:	e022      	b.n	8008d52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <UART_SetConfig+0x300>)
 8008d0e:	617b      	str	r3, [r7, #20]
        break;
 8008d10:	e01f      	b.n	8008d52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d12:	f7fd fabb 	bl	800628c <HAL_RCC_GetSysClockFreq>
 8008d16:	6178      	str	r0, [r7, #20]
        break;
 8008d18:	e01b      	b.n	8008d52 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1e:	617b      	str	r3, [r7, #20]
        break;
 8008d20:	e017      	b.n	8008d52 <UART_SetConfig+0x30e>
 8008d22:	bf00      	nop
 8008d24:	efff69f3 	.word	0xefff69f3
 8008d28:	40008000 	.word	0x40008000
 8008d2c:	40013800 	.word	0x40013800
 8008d30:	40021000 	.word	0x40021000
 8008d34:	40004400 	.word	0x40004400
 8008d38:	40004800 	.word	0x40004800
 8008d3c:	40004c00 	.word	0x40004c00
 8008d40:	40005000 	.word	0x40005000
 8008d44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	76bb      	strb	r3, [r7, #26]
        break;
 8008d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80f1 	beq.w	8008f3c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4413      	add	r3, r2
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d305      	bcc.n	8008d76 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d902      	bls.n	8008d7c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	76bb      	strb	r3, [r7, #26]
 8008d7a:	e0df      	b.n	8008f3c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f04f 0100 	mov.w	r1, #0
 8008d84:	f04f 0200 	mov.w	r2, #0
 8008d88:	f04f 0300 	mov.w	r3, #0
 8008d8c:	020b      	lsls	r3, r1, #8
 8008d8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d92:	0202      	lsls	r2, r0, #8
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	6849      	ldr	r1, [r1, #4]
 8008d98:	0849      	lsrs	r1, r1, #1
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	1814      	adds	r4, r2, r0
 8008da2:	eb43 0501 	adc.w	r5, r3, r1
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fee2 	bl	8000b7c <__aeabi_uldivmod>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dc6:	d308      	bcc.n	8008dda <UART_SetConfig+0x396>
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dce:	d204      	bcs.n	8008dda <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	60da      	str	r2, [r3, #12]
 8008dd8:	e0b0      	b.n	8008f3c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	76bb      	strb	r3, [r7, #26]
 8008dde:	e0ad      	b.n	8008f3c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de8:	d15c      	bne.n	8008ea4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008dea:	7efb      	ldrb	r3, [r7, #27]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d828      	bhi.n	8008e42 <UART_SetConfig+0x3fe>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <UART_SetConfig+0x3b4>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e25 	.word	0x08008e25
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	08008e43 	.word	0x08008e43
 8008e08:	08008e33 	.word	0x08008e33
 8008e0c:	08008e43 	.word	0x08008e43
 8008e10:	08008e43 	.word	0x08008e43
 8008e14:	08008e43 	.word	0x08008e43
 8008e18:	08008e3b 	.word	0x08008e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e1c:	f7fd face 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8008e20:	6178      	str	r0, [r7, #20]
        break;
 8008e22:	e013      	b.n	8008e4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e24:	f7fd fae0 	bl	80063e8 <HAL_RCC_GetPCLK2Freq>
 8008e28:	6178      	str	r0, [r7, #20]
        break;
 8008e2a:	e00f      	b.n	8008e4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e2c:	4b49      	ldr	r3, [pc, #292]	; (8008f54 <UART_SetConfig+0x510>)
 8008e2e:	617b      	str	r3, [r7, #20]
        break;
 8008e30:	e00c      	b.n	8008e4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e32:	f7fd fa2b 	bl	800628c <HAL_RCC_GetSysClockFreq>
 8008e36:	6178      	str	r0, [r7, #20]
        break;
 8008e38:	e008      	b.n	8008e4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3e:	617b      	str	r3, [r7, #20]
        break;
 8008e40:	e004      	b.n	8008e4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	76bb      	strb	r3, [r7, #26]
        break;
 8008e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d074      	beq.n	8008f3c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	005a      	lsls	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	441a      	add	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b0f      	cmp	r3, #15
 8008e6e:	d916      	bls.n	8008e9e <UART_SetConfig+0x45a>
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d212      	bcs.n	8008e9e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	f023 030f 	bic.w	r3, r3, #15
 8008e80:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	89fa      	ldrh	r2, [r7, #14]
 8008e9a:	60da      	str	r2, [r3, #12]
 8008e9c:	e04e      	b.n	8008f3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	76bb      	strb	r3, [r7, #26]
 8008ea2:	e04b      	b.n	8008f3c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ea4:	7efb      	ldrb	r3, [r7, #27]
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d827      	bhi.n	8008efa <UART_SetConfig+0x4b6>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0x46c>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008ed5 	.word	0x08008ed5
 8008eb4:	08008edd 	.word	0x08008edd
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	08008efb 	.word	0x08008efb
 8008ec0:	08008eeb 	.word	0x08008eeb
 8008ec4:	08008efb 	.word	0x08008efb
 8008ec8:	08008efb 	.word	0x08008efb
 8008ecc:	08008efb 	.word	0x08008efb
 8008ed0:	08008ef3 	.word	0x08008ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed4:	f7fd fa72 	bl	80063bc <HAL_RCC_GetPCLK1Freq>
 8008ed8:	6178      	str	r0, [r7, #20]
        break;
 8008eda:	e013      	b.n	8008f04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008edc:	f7fd fa84 	bl	80063e8 <HAL_RCC_GetPCLK2Freq>
 8008ee0:	6178      	str	r0, [r7, #20]
        break;
 8008ee2:	e00f      	b.n	8008f04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	; (8008f54 <UART_SetConfig+0x510>)
 8008ee6:	617b      	str	r3, [r7, #20]
        break;
 8008ee8:	e00c      	b.n	8008f04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eea:	f7fd f9cf 	bl	800628c <HAL_RCC_GetSysClockFreq>
 8008eee:	6178      	str	r0, [r7, #20]
        break;
 8008ef0:	e008      	b.n	8008f04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ef6:	617b      	str	r3, [r7, #20]
        break;
 8008ef8:	e004      	b.n	8008f04 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	76bb      	strb	r3, [r7, #26]
        break;
 8008f02:	bf00      	nop
    }

    if (pclk != 0U)
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d018      	beq.n	8008f3c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	085a      	lsrs	r2, r3, #1
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	441a      	add	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	d908      	bls.n	8008f38 <UART_SetConfig+0x4f4>
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d204      	bcs.n	8008f38 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	60da      	str	r2, [r3, #12]
 8008f36:	e001      	b.n	8008f3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008f48:	7ebb      	ldrb	r3, [r7, #26]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bdb0      	pop	{r4, r5, r7, pc}
 8008f52:	bf00      	nop
 8008f54:	00f42400 	.word	0x00f42400

08008f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00a      	beq.n	8008f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00a      	beq.n	8008fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	f003 0310 	and.w	r3, r3, #16
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01a      	beq.n	800906e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009056:	d10a      	bne.n	800906e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	430a      	orrs	r2, r1
 800908e:	605a      	str	r2, [r3, #4]
  }
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090ac:	f7fb fa60 	bl	8004570 <HAL_GetTick>
 80090b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0308 	and.w	r3, r3, #8
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d10e      	bne.n	80090de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f82d 	bl	800912e <UART_WaitOnFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e023      	b.n	8009126 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	d10e      	bne.n	800910a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f817 	bl	800912e <UART_WaitOnFlagUntilTimeout>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e00d      	b.n	8009126 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2220      	movs	r2, #32
 800910e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	4613      	mov	r3, r2
 800913c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913e:	e05e      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d05a      	beq.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009148:	f7fb fa12 	bl	8004570 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	429a      	cmp	r2, r3
 8009156:	d302      	bcc.n	800915e <UART_WaitOnFlagUntilTimeout+0x30>
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d11b      	bne.n	8009196 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800916c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2220      	movs	r2, #32
 8009182:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2220      	movs	r2, #32
 8009188:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e043      	b.n	800921e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d02c      	beq.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091b2:	d124      	bne.n	80091fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091bc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0201 	bic.w	r2, r2, #1
 80091dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2220      	movs	r2, #32
 80091e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e00f      	b.n	800921e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4013      	ands	r3, r2
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	429a      	cmp	r2, r3
 800920c:	bf0c      	ite	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	2300      	movne	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	461a      	mov	r2, r3
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	429a      	cmp	r2, r3
 800921a:	d091      	beq.n	8009140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	4603      	mov	r3, r0
 800922e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009238:	2b84      	cmp	r3, #132	; 0x84
 800923a:	d005      	beq.n	8009248 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800923c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	3303      	adds	r3, #3
 8009246:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009248:	68fb      	ldr	r3, [r7, #12]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800925a:	f000 fadf 	bl	800981c <vTaskStartScheduler>
  
  return osOK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	bd80      	pop	{r7, pc}

08009264 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af04      	add	r7, sp, #16
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d020      	beq.n	80092b8 <osThreadCreate+0x54>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01c      	beq.n	80092b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685c      	ldr	r4, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681d      	ldr	r5, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691e      	ldr	r6, [r3, #16]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f7ff ffc8 	bl	8009226 <makeFreeRtosPriority>
 8009296:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092a0:	9202      	str	r2, [sp, #8]
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	9100      	str	r1, [sp, #0]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	4632      	mov	r2, r6
 80092aa:	4629      	mov	r1, r5
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 f8ed 	bl	800948c <xTaskCreateStatic>
 80092b2:	4603      	mov	r3, r0
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	e01c      	b.n	80092f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685c      	ldr	r4, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092c4:	b29e      	uxth	r6, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff ffaa 	bl	8009226 <makeFreeRtosPriority>
 80092d2:	4602      	mov	r2, r0
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	9200      	str	r2, [sp, #0]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	4632      	mov	r2, r6
 80092e0:	4629      	mov	r1, r5
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 f92f 	bl	8009546 <xTaskCreate>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d001      	beq.n	80092f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e000      	b.n	80092f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <osDelay+0x16>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	e000      	b.n	8009314 <osDelay+0x18>
 8009312:	2301      	movs	r3, #1
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fa4d 	bl	80097b4 <vTaskDelay>
  
  return osOK;
 800931a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f103 0208 	add.w	r2, r3, #8
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f04f 32ff 	mov.w	r2, #4294967295
 800933c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f103 0208 	add.w	r2, r3, #8
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f103 0208 	add.w	r2, r3, #8
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800937e:	b480      	push	{r7}
 8009380:	b085      	sub	sp, #20
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	601a      	str	r2, [r3, #0]
}
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093dc:	d103      	bne.n	80093e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e00c      	b.n	8009400 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3308      	adds	r3, #8
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e002      	b.n	80093f4 <vListInsert+0x2e>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d2f6      	bcs.n	80093ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	601a      	str	r2, [r3, #0]
}
 800942c:	bf00      	nop
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6892      	ldr	r2, [r2, #8]
 800944e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	6852      	ldr	r2, [r2, #4]
 8009458:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	429a      	cmp	r2, r3
 8009462:	d103      	bne.n	800946c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	1e5a      	subs	r2, r3, #1
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08e      	sub	sp, #56	; 0x38
 8009490:	af04      	add	r7, sp, #16
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	61fb      	str	r3, [r7, #28]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094d2:	2354      	movs	r3, #84	; 0x54
 80094d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	2b54      	cmp	r3, #84	; 0x54
 80094da:	d00a      	beq.n	80094f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	61bb      	str	r3, [r7, #24]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d01e      	beq.n	8009538 <xTaskCreateStatic+0xac>
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01b      	beq.n	8009538 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009508:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	2202      	movs	r2, #2
 800950e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009512:	2300      	movs	r3, #0
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	f107 0314 	add.w	r3, r7, #20
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f850 	bl	80095d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009532:	f000 f8d5 	bl	80096e0 <prvAddNewTaskToReadyList>
 8009536:	e001      	b.n	800953c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009538:	2300      	movs	r3, #0
 800953a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800953c:	697b      	ldr	r3, [r7, #20]
	}
 800953e:	4618      	mov	r0, r3
 8009540:	3728      	adds	r7, #40	; 0x28
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009546:	b580      	push	{r7, lr}
 8009548:	b08c      	sub	sp, #48	; 0x30
 800954a:	af04      	add	r7, sp, #16
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	603b      	str	r3, [r7, #0]
 8009552:	4613      	mov	r3, r2
 8009554:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fec4 	bl	800a2e8 <pvPortMalloc>
 8009560:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00e      	beq.n	8009586 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009568:	2054      	movs	r0, #84	; 0x54
 800956a:	f000 febd 	bl	800a2e8 <pvPortMalloc>
 800956e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
 800957c:	e005      	b.n	800958a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800957e:	6978      	ldr	r0, [r7, #20]
 8009580:	f000 ff7e 	bl	800a480 <vPortFree>
 8009584:	e001      	b.n	800958a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d017      	beq.n	80095c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009598:	88fa      	ldrh	r2, [r7, #6]
 800959a:	2300      	movs	r3, #0
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 f80e 	bl	80095d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095b4:	69f8      	ldr	r0, [r7, #28]
 80095b6:	f000 f893 	bl	80096e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095ba:	2301      	movs	r3, #1
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	e002      	b.n	80095c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095c6:	69bb      	ldr	r3, [r7, #24]
	}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3720      	adds	r7, #32
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095e8:	3b01      	subs	r3, #1
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	f023 0307 	bic.w	r3, r3, #7
 80095f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	617b      	str	r3, [r7, #20]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01f      	beq.n	800965e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	e012      	b.n	800964a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	7819      	ldrb	r1, [r3, #0]
 800962c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4413      	add	r3, r2
 8009632:	3334      	adds	r3, #52	; 0x34
 8009634:	460a      	mov	r2, r1
 8009636:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	4413      	add	r3, r2
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d006      	beq.n	8009652 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	3301      	adds	r3, #1
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b0f      	cmp	r3, #15
 800964e:	d9e9      	bls.n	8009624 <prvInitialiseNewTask+0x54>
 8009650:	e000      	b.n	8009654 <prvInitialiseNewTask+0x84>
			{
				break;
 8009652:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800965c:	e003      	b.n	8009666 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	2b06      	cmp	r3, #6
 800966a:	d901      	bls.n	8009670 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800966c:	2306      	movs	r3, #6
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009674:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800967a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	2200      	movs	r2, #0
 8009680:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	3304      	adds	r3, #4
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff fe6c 	bl	8009364 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	3318      	adds	r3, #24
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff fe67 	bl	8009364 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f1c3 0207 	rsb	r2, r3, #7
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	2200      	movs	r2, #0
 80096b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	68f9      	ldr	r1, [r7, #12]
 80096be:	69b8      	ldr	r0, [r7, #24]
 80096c0:	f000 fc06 	bl	8009ed0 <pxPortInitialiseStack>
 80096c4:	4602      	mov	r2, r0
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096d6:	bf00      	nop
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096e8:	f000 fd1c 	bl	800a124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096ec:	4b2a      	ldr	r3, [pc, #168]	; (8009798 <prvAddNewTaskToReadyList+0xb8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3301      	adds	r3, #1
 80096f2:	4a29      	ldr	r2, [pc, #164]	; (8009798 <prvAddNewTaskToReadyList+0xb8>)
 80096f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096f6:	4b29      	ldr	r3, [pc, #164]	; (800979c <prvAddNewTaskToReadyList+0xbc>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d109      	bne.n	8009712 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096fe:	4a27      	ldr	r2, [pc, #156]	; (800979c <prvAddNewTaskToReadyList+0xbc>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009704:	4b24      	ldr	r3, [pc, #144]	; (8009798 <prvAddNewTaskToReadyList+0xb8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d110      	bne.n	800972e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800970c:	f000 fabc 	bl	8009c88 <prvInitialiseTaskLists>
 8009710:	e00d      	b.n	800972e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009712:	4b23      	ldr	r3, [pc, #140]	; (80097a0 <prvAddNewTaskToReadyList+0xc0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800971a:	4b20      	ldr	r3, [pc, #128]	; (800979c <prvAddNewTaskToReadyList+0xbc>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	429a      	cmp	r2, r3
 8009726:	d802      	bhi.n	800972e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009728:	4a1c      	ldr	r2, [pc, #112]	; (800979c <prvAddNewTaskToReadyList+0xbc>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <prvAddNewTaskToReadyList+0xc4>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3301      	adds	r3, #1
 8009734:	4a1b      	ldr	r2, [pc, #108]	; (80097a4 <prvAddNewTaskToReadyList+0xc4>)
 8009736:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	2201      	movs	r2, #1
 800973e:	409a      	lsls	r2, r3
 8009740:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4313      	orrs	r3, r2
 8009746:	4a18      	ldr	r2, [pc, #96]	; (80097a8 <prvAddNewTaskToReadyList+0xc8>)
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4a15      	ldr	r2, [pc, #84]	; (80097ac <prvAddNewTaskToReadyList+0xcc>)
 8009758:	441a      	add	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	3304      	adds	r3, #4
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7ff fe0c 	bl	800937e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009766:	f000 fd0d 	bl	800a184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800976a:	4b0d      	ldr	r3, [pc, #52]	; (80097a0 <prvAddNewTaskToReadyList+0xc0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00e      	beq.n	8009790 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <prvAddNewTaskToReadyList+0xbc>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977c:	429a      	cmp	r2, r3
 800977e:	d207      	bcs.n	8009790 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <prvAddNewTaskToReadyList+0xd0>)
 8009782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000c70 	.word	0x20000c70
 800979c:	20000b70 	.word	0x20000b70
 80097a0:	20000c7c 	.word	0x20000c7c
 80097a4:	20000c8c 	.word	0x20000c8c
 80097a8:	20000c78 	.word	0x20000c78
 80097ac:	20000b74 	.word	0x20000b74
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d017      	beq.n	80097f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097c6:	4b13      	ldr	r3, [pc, #76]	; (8009814 <vTaskDelay+0x60>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <vTaskDelay+0x30>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60bb      	str	r3, [r7, #8]
}
 80097e0:	bf00      	nop
 80097e2:	e7fe      	b.n	80097e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097e4:	f000 f87a 	bl	80098dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097e8:	2100      	movs	r1, #0
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fb0a 	bl	8009e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097f0:	f000 f882 	bl	80098f8 <xTaskResumeAll>
 80097f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d107      	bne.n	800980c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <vTaskDelay+0x64>)
 80097fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000c98 	.word	0x20000c98
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	; 0x28
 8009820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800982a:	463a      	mov	r2, r7
 800982c:	1d39      	adds	r1, r7, #4
 800982e:	f107 0308 	add.w	r3, r7, #8
 8009832:	4618      	mov	r0, r3
 8009834:	f7f8 fd10 	bl	8002258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	9202      	str	r2, [sp, #8]
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	2300      	movs	r3, #0
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	2300      	movs	r3, #0
 8009848:	460a      	mov	r2, r1
 800984a:	491e      	ldr	r1, [pc, #120]	; (80098c4 <vTaskStartScheduler+0xa8>)
 800984c:	481e      	ldr	r0, [pc, #120]	; (80098c8 <vTaskStartScheduler+0xac>)
 800984e:	f7ff fe1d 	bl	800948c <xTaskCreateStatic>
 8009852:	4603      	mov	r3, r0
 8009854:	4a1d      	ldr	r2, [pc, #116]	; (80098cc <vTaskStartScheduler+0xb0>)
 8009856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009858:	4b1c      	ldr	r3, [pc, #112]	; (80098cc <vTaskStartScheduler+0xb0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009860:	2301      	movs	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
 8009864:	e001      	b.n	800986a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d116      	bne.n	800989e <vTaskStartScheduler+0x82>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	613b      	str	r3, [r7, #16]
}
 8009882:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009884:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <vTaskStartScheduler+0xb4>)
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800988c:	4b11      	ldr	r3, [pc, #68]	; (80098d4 <vTaskStartScheduler+0xb8>)
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009892:	4b11      	ldr	r3, [pc, #68]	; (80098d8 <vTaskStartScheduler+0xbc>)
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009898:	f000 fba2 	bl	8009fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800989c:	e00e      	b.n	80098bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d10a      	bne.n	80098bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60fb      	str	r3, [r7, #12]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <vTaskStartScheduler+0x9e>
}
 80098bc:	bf00      	nop
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	0800cbbc 	.word	0x0800cbbc
 80098c8:	08009c59 	.word	0x08009c59
 80098cc:	20000c94 	.word	0x20000c94
 80098d0:	20000c90 	.word	0x20000c90
 80098d4:	20000c7c 	.word	0x20000c7c
 80098d8:	20000c74 	.word	0x20000c74

080098dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <vTaskSuspendAll+0x18>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	4a03      	ldr	r2, [pc, #12]	; (80098f4 <vTaskSuspendAll+0x18>)
 80098e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098ea:	bf00      	nop
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	20000c98 	.word	0x20000c98

080098f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009906:	4b41      	ldr	r3, [pc, #260]	; (8009a0c <xTaskResumeAll+0x114>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <xTaskResumeAll+0x2c>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	603b      	str	r3, [r7, #0]
}
 8009920:	bf00      	nop
 8009922:	e7fe      	b.n	8009922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009924:	f000 fbfe 	bl	800a124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009928:	4b38      	ldr	r3, [pc, #224]	; (8009a0c <xTaskResumeAll+0x114>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3b01      	subs	r3, #1
 800992e:	4a37      	ldr	r2, [pc, #220]	; (8009a0c <xTaskResumeAll+0x114>)
 8009930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009932:	4b36      	ldr	r3, [pc, #216]	; (8009a0c <xTaskResumeAll+0x114>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d161      	bne.n	80099fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800993a:	4b35      	ldr	r3, [pc, #212]	; (8009a10 <xTaskResumeAll+0x118>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d05d      	beq.n	80099fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009942:	e02e      	b.n	80099a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009944:	4b33      	ldr	r3, [pc, #204]	; (8009a14 <xTaskResumeAll+0x11c>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3318      	adds	r3, #24
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fd71 	bl	8009438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3304      	adds	r3, #4
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fd6c 	bl	8009438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	2201      	movs	r2, #1
 8009966:	409a      	lsls	r2, r3
 8009968:	4b2b      	ldr	r3, [pc, #172]	; (8009a18 <xTaskResumeAll+0x120>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4313      	orrs	r3, r2
 800996e:	4a2a      	ldr	r2, [pc, #168]	; (8009a18 <xTaskResumeAll+0x120>)
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4a27      	ldr	r2, [pc, #156]	; (8009a1c <xTaskResumeAll+0x124>)
 8009980:	441a      	add	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3304      	adds	r3, #4
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7ff fcf8 	bl	800937e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009992:	4b23      	ldr	r3, [pc, #140]	; (8009a20 <xTaskResumeAll+0x128>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	429a      	cmp	r2, r3
 800999a:	d302      	bcc.n	80099a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800999c:	4b21      	ldr	r3, [pc, #132]	; (8009a24 <xTaskResumeAll+0x12c>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <xTaskResumeAll+0x11c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1cc      	bne.n	8009944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099b0:	f000 fa08 	bl	8009dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099b4:	4b1c      	ldr	r3, [pc, #112]	; (8009a28 <xTaskResumeAll+0x130>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d010      	beq.n	80099e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099c0:	f000 f836 	bl	8009a30 <xTaskIncrementTick>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80099ca:	4b16      	ldr	r3, [pc, #88]	; (8009a24 <xTaskResumeAll+0x12c>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1f1      	bne.n	80099c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80099dc:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <xTaskResumeAll+0x130>)
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <xTaskResumeAll+0x12c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099ea:	2301      	movs	r3, #1
 80099ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <xTaskResumeAll+0x134>)
 80099f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099fe:	f000 fbc1 	bl	800a184 <vPortExitCritical>

	return xAlreadyYielded;
 8009a02:	68bb      	ldr	r3, [r7, #8]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000c98 	.word	0x20000c98
 8009a10:	20000c70 	.word	0x20000c70
 8009a14:	20000c30 	.word	0x20000c30
 8009a18:	20000c78 	.word	0x20000c78
 8009a1c:	20000b74 	.word	0x20000b74
 8009a20:	20000b70 	.word	0x20000b70
 8009a24:	20000c84 	.word	0x20000c84
 8009a28:	20000c80 	.word	0x20000c80
 8009a2c:	e000ed04 	.word	0xe000ed04

08009a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a3a:	4b4e      	ldr	r3, [pc, #312]	; (8009b74 <xTaskIncrementTick+0x144>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f040 808e 	bne.w	8009b60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a44:	4b4c      	ldr	r3, [pc, #304]	; (8009b78 <xTaskIncrementTick+0x148>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a4c:	4a4a      	ldr	r2, [pc, #296]	; (8009b78 <xTaskIncrementTick+0x148>)
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d120      	bne.n	8009a9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a58:	4b48      	ldr	r3, [pc, #288]	; (8009b7c <xTaskIncrementTick+0x14c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00a      	beq.n	8009a78 <xTaskIncrementTick+0x48>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	603b      	str	r3, [r7, #0]
}
 8009a74:	bf00      	nop
 8009a76:	e7fe      	b.n	8009a76 <xTaskIncrementTick+0x46>
 8009a78:	4b40      	ldr	r3, [pc, #256]	; (8009b7c <xTaskIncrementTick+0x14c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	4b40      	ldr	r3, [pc, #256]	; (8009b80 <xTaskIncrementTick+0x150>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a3e      	ldr	r2, [pc, #248]	; (8009b7c <xTaskIncrementTick+0x14c>)
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	4a3e      	ldr	r2, [pc, #248]	; (8009b80 <xTaskIncrementTick+0x150>)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	4b3d      	ldr	r3, [pc, #244]	; (8009b84 <xTaskIncrementTick+0x154>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3301      	adds	r3, #1
 8009a92:	4a3c      	ldr	r2, [pc, #240]	; (8009b84 <xTaskIncrementTick+0x154>)
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	f000 f995 	bl	8009dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a9a:	4b3b      	ldr	r3, [pc, #236]	; (8009b88 <xTaskIncrementTick+0x158>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d348      	bcc.n	8009b36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aa4:	4b35      	ldr	r3, [pc, #212]	; (8009b7c <xTaskIncrementTick+0x14c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aae:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <xTaskIncrementTick+0x158>)
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab4:	601a      	str	r2, [r3, #0]
					break;
 8009ab6:	e03e      	b.n	8009b36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab8:	4b30      	ldr	r3, [pc, #192]	; (8009b7c <xTaskIncrementTick+0x14c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d203      	bcs.n	8009ad8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ad0:	4a2d      	ldr	r2, [pc, #180]	; (8009b88 <xTaskIncrementTick+0x158>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ad6:	e02e      	b.n	8009b36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff fcab 	bl	8009438 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	3318      	adds	r3, #24
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff fca2 	bl	8009438 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	2201      	movs	r2, #1
 8009afa:	409a      	lsls	r2, r3
 8009afc:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <xTaskIncrementTick+0x15c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	4a22      	ldr	r2, [pc, #136]	; (8009b8c <xTaskIncrementTick+0x15c>)
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4a1f      	ldr	r2, [pc, #124]	; (8009b90 <xTaskIncrementTick+0x160>)
 8009b14:	441a      	add	r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7ff fc2e 	bl	800937e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b26:	4b1b      	ldr	r3, [pc, #108]	; (8009b94 <xTaskIncrementTick+0x164>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d3b9      	bcc.n	8009aa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b30:	2301      	movs	r3, #1
 8009b32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b34:	e7b6      	b.n	8009aa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b36:	4b17      	ldr	r3, [pc, #92]	; (8009b94 <xTaskIncrementTick+0x164>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3c:	4914      	ldr	r1, [pc, #80]	; (8009b90 <xTaskIncrementTick+0x160>)
 8009b3e:	4613      	mov	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	440b      	add	r3, r1
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d901      	bls.n	8009b52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b52:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <xTaskIncrementTick+0x168>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e004      	b.n	8009b6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b60:	4b0e      	ldr	r3, [pc, #56]	; (8009b9c <xTaskIncrementTick+0x16c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <xTaskIncrementTick+0x16c>)
 8009b68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20000c98 	.word	0x20000c98
 8009b78:	20000c74 	.word	0x20000c74
 8009b7c:	20000c28 	.word	0x20000c28
 8009b80:	20000c2c 	.word	0x20000c2c
 8009b84:	20000c88 	.word	0x20000c88
 8009b88:	20000c90 	.word	0x20000c90
 8009b8c:	20000c78 	.word	0x20000c78
 8009b90:	20000b74 	.word	0x20000b74
 8009b94:	20000b70 	.word	0x20000b70
 8009b98:	20000c84 	.word	0x20000c84
 8009b9c:	20000c80 	.word	0x20000c80

08009ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ba6:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <vTaskSwitchContext+0xa4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bae:	4b26      	ldr	r3, [pc, #152]	; (8009c48 <vTaskSwitchContext+0xa8>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bb4:	e03f      	b.n	8009c36 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <vTaskSwitchContext+0xa8>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bbc:	4b23      	ldr	r3, [pc, #140]	; (8009c4c <vTaskSwitchContext+0xac>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	fab3 f383 	clz	r3, r3
 8009bc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	f1c3 031f 	rsb	r3, r3, #31
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	491f      	ldr	r1, [pc, #124]	; (8009c50 <vTaskSwitchContext+0xb0>)
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <vTaskSwitchContext+0x5c>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	607b      	str	r3, [r7, #4]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <vTaskSwitchContext+0x5a>
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4a12      	ldr	r2, [pc, #72]	; (8009c50 <vTaskSwitchContext+0xb0>)
 8009c08:	4413      	add	r3, r2
 8009c0a:	613b      	str	r3, [r7, #16]
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	605a      	str	r2, [r3, #4]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3308      	adds	r3, #8
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d104      	bne.n	8009c2c <vTaskSwitchContext+0x8c>
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	4a08      	ldr	r2, [pc, #32]	; (8009c54 <vTaskSwitchContext+0xb4>)
 8009c34:	6013      	str	r3, [r2, #0]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000c98 	.word	0x20000c98
 8009c48:	20000c84 	.word	0x20000c84
 8009c4c:	20000c78 	.word	0x20000c78
 8009c50:	20000b74 	.word	0x20000b74
 8009c54:	20000b70 	.word	0x20000b70

08009c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c60:	f000 f852 	bl	8009d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c64:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <prvIdleTask+0x28>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d9f9      	bls.n	8009c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <prvIdleTask+0x2c>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c7c:	e7f0      	b.n	8009c60 <prvIdleTask+0x8>
 8009c7e:	bf00      	nop
 8009c80:	20000b74 	.word	0x20000b74
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c8e:	2300      	movs	r3, #0
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	e00c      	b.n	8009cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4a12      	ldr	r2, [pc, #72]	; (8009ce8 <prvInitialiseTaskLists+0x60>)
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fb3e 	bl	8009324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3301      	adds	r3, #1
 8009cac:	607b      	str	r3, [r7, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b06      	cmp	r3, #6
 8009cb2:	d9ef      	bls.n	8009c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cb4:	480d      	ldr	r0, [pc, #52]	; (8009cec <prvInitialiseTaskLists+0x64>)
 8009cb6:	f7ff fb35 	bl	8009324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cba:	480d      	ldr	r0, [pc, #52]	; (8009cf0 <prvInitialiseTaskLists+0x68>)
 8009cbc:	f7ff fb32 	bl	8009324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cc0:	480c      	ldr	r0, [pc, #48]	; (8009cf4 <prvInitialiseTaskLists+0x6c>)
 8009cc2:	f7ff fb2f 	bl	8009324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cc6:	480c      	ldr	r0, [pc, #48]	; (8009cf8 <prvInitialiseTaskLists+0x70>)
 8009cc8:	f7ff fb2c 	bl	8009324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ccc:	480b      	ldr	r0, [pc, #44]	; (8009cfc <prvInitialiseTaskLists+0x74>)
 8009cce:	f7ff fb29 	bl	8009324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <prvInitialiseTaskLists+0x78>)
 8009cd4:	4a05      	ldr	r2, [pc, #20]	; (8009cec <prvInitialiseTaskLists+0x64>)
 8009cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <prvInitialiseTaskLists+0x7c>)
 8009cda:	4a05      	ldr	r2, [pc, #20]	; (8009cf0 <prvInitialiseTaskLists+0x68>)
 8009cdc:	601a      	str	r2, [r3, #0]
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000b74 	.word	0x20000b74
 8009cec:	20000c00 	.word	0x20000c00
 8009cf0:	20000c14 	.word	0x20000c14
 8009cf4:	20000c30 	.word	0x20000c30
 8009cf8:	20000c44 	.word	0x20000c44
 8009cfc:	20000c5c 	.word	0x20000c5c
 8009d00:	20000c28 	.word	0x20000c28
 8009d04:	20000c2c 	.word	0x20000c2c

08009d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d0e:	e019      	b.n	8009d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d10:	f000 fa08 	bl	800a124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d14:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <prvCheckTasksWaitingTermination+0x50>)
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff fb89 	bl	8009438 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <prvCheckTasksWaitingTermination+0x54>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	4a0b      	ldr	r2, [pc, #44]	; (8009d5c <prvCheckTasksWaitingTermination+0x54>)
 8009d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d30:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <prvCheckTasksWaitingTermination+0x58>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	4a0a      	ldr	r2, [pc, #40]	; (8009d60 <prvCheckTasksWaitingTermination+0x58>)
 8009d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d3a:	f000 fa23 	bl	800a184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f810 	bl	8009d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d44:	4b06      	ldr	r3, [pc, #24]	; (8009d60 <prvCheckTasksWaitingTermination+0x58>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e1      	bne.n	8009d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000c44 	.word	0x20000c44
 8009d5c:	20000c70 	.word	0x20000c70
 8009d60:	20000c58 	.word	0x20000c58

08009d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d108      	bne.n	8009d88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 fb80 	bl	800a480 <vPortFree>
				vPortFree( pxTCB );
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fb7d 	bl	800a480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d86:	e018      	b.n	8009dba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d103      	bne.n	8009d9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fb74 	bl	800a480 <vPortFree>
	}
 8009d98:	e00f      	b.n	8009dba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d00a      	beq.n	8009dba <prvDeleteTCB+0x56>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	60fb      	str	r3, [r7, #12]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <prvDeleteTCB+0x54>
	}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dca:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <prvResetNextTaskUnblockTime+0x38>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d104      	bne.n	8009dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <prvResetNextTaskUnblockTime+0x3c>)
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ddc:	e008      	b.n	8009df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dde:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <prvResetNextTaskUnblockTime+0x38>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	4a04      	ldr	r2, [pc, #16]	; (8009e00 <prvResetNextTaskUnblockTime+0x3c>)
 8009dee:	6013      	str	r3, [r2, #0]
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20000c28 	.word	0x20000c28
 8009e00:	20000c90 	.word	0x20000c90

08009e04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e0e:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e14:	4b28      	ldr	r3, [pc, #160]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff fb0c 	bl	8009438 <uxListRemove>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10b      	bne.n	8009e3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e26:	4b24      	ldr	r3, [pc, #144]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	43da      	mvns	r2, r3
 8009e34:	4b21      	ldr	r3, [pc, #132]	; (8009ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4013      	ands	r3, r2
 8009e3a:	4a20      	ldr	r2, [pc, #128]	; (8009ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e44:	d10a      	bne.n	8009e5c <prvAddCurrentTaskToDelayedList+0x58>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d007      	beq.n	8009e5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4c:	4b1a      	ldr	r3, [pc, #104]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4619      	mov	r1, r3
 8009e54:	481a      	ldr	r0, [pc, #104]	; (8009ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e56:	f7ff fa92 	bl	800937e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e5a:	e026      	b.n	8009eaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e64:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d209      	bcs.n	8009e88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e74:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7ff faa0 	bl	80093c6 <vListInsert>
}
 8009e86:	e010      	b.n	8009eaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e88:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4619      	mov	r1, r3
 8009e94:	4610      	mov	r0, r2
 8009e96:	f7ff fa96 	bl	80093c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d202      	bcs.n	8009eaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ea4:	4a09      	ldr	r2, [pc, #36]	; (8009ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6013      	str	r3, [r2, #0]
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000c74 	.word	0x20000c74
 8009eb8:	20000b70 	.word	0x20000b70
 8009ebc:	20000c78 	.word	0x20000c78
 8009ec0:	20000c5c 	.word	0x20000c5c
 8009ec4:	20000c2c 	.word	0x20000c2c
 8009ec8:	20000c28 	.word	0x20000c28
 8009ecc:	20000c90 	.word	0x20000c90

08009ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3b04      	subs	r3, #4
 8009ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3b04      	subs	r3, #4
 8009eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f023 0201 	bic.w	r2, r3, #1
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3b04      	subs	r3, #4
 8009efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f00:	4a0c      	ldr	r2, [pc, #48]	; (8009f34 <pxPortInitialiseStack+0x64>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b14      	subs	r3, #20
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f06f 0202 	mvn.w	r2, #2
 8009f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3b20      	subs	r3, #32
 8009f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f26:	68fb      	ldr	r3, [r7, #12]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	08009f39 	.word	0x08009f39

08009f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f42:	4b12      	ldr	r3, [pc, #72]	; (8009f8c <prvTaskExitError+0x54>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d00a      	beq.n	8009f62 <prvTaskExitError+0x2a>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	60fb      	str	r3, [r7, #12]
}
 8009f5e:	bf00      	nop
 8009f60:	e7fe      	b.n	8009f60 <prvTaskExitError+0x28>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	60bb      	str	r3, [r7, #8]
}
 8009f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f76:	bf00      	nop
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0fc      	beq.n	8009f78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f7e:	bf00      	nop
 8009f80:	bf00      	nop
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20000070 	.word	0x20000070

08009f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <pxCurrentTCBConst2>)
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	6808      	ldr	r0, [r1, #0]
 8009f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9a:	f380 8809 	msr	PSP, r0
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f04f 0000 	mov.w	r0, #0
 8009fa6:	f380 8811 	msr	BASEPRI, r0
 8009faa:	4770      	bx	lr
 8009fac:	f3af 8000 	nop.w

08009fb0 <pxCurrentTCBConst2>:
 8009fb0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop

08009fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fb8:	4808      	ldr	r0, [pc, #32]	; (8009fdc <prvPortStartFirstTask+0x24>)
 8009fba:	6800      	ldr	r0, [r0, #0]
 8009fbc:	6800      	ldr	r0, [r0, #0]
 8009fbe:	f380 8808 	msr	MSP, r0
 8009fc2:	f04f 0000 	mov.w	r0, #0
 8009fc6:	f380 8814 	msr	CONTROL, r0
 8009fca:	b662      	cpsie	i
 8009fcc:	b661      	cpsie	f
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	df00      	svc	0
 8009fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fda:	bf00      	nop
 8009fdc:	e000ed08 	.word	0xe000ed08

08009fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fe6:	4b46      	ldr	r3, [pc, #280]	; (800a100 <xPortStartScheduler+0x120>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a46      	ldr	r2, [pc, #280]	; (800a104 <xPortStartScheduler+0x124>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d10a      	bne.n	800a006 <xPortStartScheduler+0x26>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	613b      	str	r3, [r7, #16]
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a006:	4b3e      	ldr	r3, [pc, #248]	; (800a100 <xPortStartScheduler+0x120>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a3f      	ldr	r2, [pc, #252]	; (800a108 <xPortStartScheduler+0x128>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d10a      	bne.n	800a026 <xPortStartScheduler+0x46>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	60fb      	str	r3, [r7, #12]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a026:	4b39      	ldr	r3, [pc, #228]	; (800a10c <xPortStartScheduler+0x12c>)
 800a028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	22ff      	movs	r2, #255	; 0xff
 800a036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	b2db      	uxtb	r3, r3
 800a044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	4b31      	ldr	r3, [pc, #196]	; (800a110 <xPortStartScheduler+0x130>)
 800a04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a04e:	4b31      	ldr	r3, [pc, #196]	; (800a114 <xPortStartScheduler+0x134>)
 800a050:	2207      	movs	r2, #7
 800a052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a054:	e009      	b.n	800a06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a056:	4b2f      	ldr	r3, [pc, #188]	; (800a114 <xPortStartScheduler+0x134>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	4a2d      	ldr	r2, [pc, #180]	; (800a114 <xPortStartScheduler+0x134>)
 800a05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	b2db      	uxtb	r3, r3
 800a068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a072:	2b80      	cmp	r3, #128	; 0x80
 800a074:	d0ef      	beq.n	800a056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a076:	4b27      	ldr	r3, [pc, #156]	; (800a114 <xPortStartScheduler+0x134>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1c3 0307 	rsb	r3, r3, #7
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d00a      	beq.n	800a098 <xPortStartScheduler+0xb8>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	60bb      	str	r3, [r7, #8]
}
 800a094:	bf00      	nop
 800a096:	e7fe      	b.n	800a096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a098:	4b1e      	ldr	r3, [pc, #120]	; (800a114 <xPortStartScheduler+0x134>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	021b      	lsls	r3, r3, #8
 800a09e:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <xPortStartScheduler+0x134>)
 800a0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0a2:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <xPortStartScheduler+0x134>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0aa:	4a1a      	ldr	r2, [pc, #104]	; (800a114 <xPortStartScheduler+0x134>)
 800a0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0b6:	4b18      	ldr	r3, [pc, #96]	; (800a118 <xPortStartScheduler+0x138>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a17      	ldr	r2, [pc, #92]	; (800a118 <xPortStartScheduler+0x138>)
 800a0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0c2:	4b15      	ldr	r3, [pc, #84]	; (800a118 <xPortStartScheduler+0x138>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a14      	ldr	r2, [pc, #80]	; (800a118 <xPortStartScheduler+0x138>)
 800a0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0ce:	f000 f8dd 	bl	800a28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0d2:	4b12      	ldr	r3, [pc, #72]	; (800a11c <xPortStartScheduler+0x13c>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0d8:	f000 f8fc 	bl	800a2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0dc:	4b10      	ldr	r3, [pc, #64]	; (800a120 <xPortStartScheduler+0x140>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a0f      	ldr	r2, [pc, #60]	; (800a120 <xPortStartScheduler+0x140>)
 800a0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0e8:	f7ff ff66 	bl	8009fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0ec:	f7ff fd58 	bl	8009ba0 <vTaskSwitchContext>
	prvTaskExitError();
 800a0f0:	f7ff ff22 	bl	8009f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	e000ed00 	.word	0xe000ed00
 800a104:	410fc271 	.word	0x410fc271
 800a108:	410fc270 	.word	0x410fc270
 800a10c:	e000e400 	.word	0xe000e400
 800a110:	20000c9c 	.word	0x20000c9c
 800a114:	20000ca0 	.word	0x20000ca0
 800a118:	e000ed20 	.word	0xe000ed20
 800a11c:	20000070 	.word	0x20000070
 800a120:	e000ef34 	.word	0xe000ef34

0800a124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	607b      	str	r3, [r7, #4]
}
 800a13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a13e:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <vPortEnterCritical+0x58>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3301      	adds	r3, #1
 800a144:	4a0d      	ldr	r2, [pc, #52]	; (800a17c <vPortEnterCritical+0x58>)
 800a146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a148:	4b0c      	ldr	r3, [pc, #48]	; (800a17c <vPortEnterCritical+0x58>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d10f      	bne.n	800a170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a150:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <vPortEnterCritical+0x5c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <vPortEnterCritical+0x4c>
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	603b      	str	r3, [r7, #0]
}
 800a16c:	bf00      	nop
 800a16e:	e7fe      	b.n	800a16e <vPortEnterCritical+0x4a>
	}
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	20000070 	.word	0x20000070
 800a180:	e000ed04 	.word	0xe000ed04

0800a184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a18a:	4b12      	ldr	r3, [pc, #72]	; (800a1d4 <vPortExitCritical+0x50>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10a      	bne.n	800a1a8 <vPortExitCritical+0x24>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	607b      	str	r3, [r7, #4]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <vPortExitCritical+0x50>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	4a09      	ldr	r2, [pc, #36]	; (800a1d4 <vPortExitCritical+0x50>)
 800a1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1b2:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <vPortExitCritical+0x50>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <vPortExitCritical+0x42>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	20000070 	.word	0x20000070
	...

0800a1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1e0:	f3ef 8009 	mrs	r0, PSP
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	4b15      	ldr	r3, [pc, #84]	; (800a240 <pxCurrentTCBConst>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	f01e 0f10 	tst.w	lr, #16
 800a1f0:	bf08      	it	eq
 800a1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fa:	6010      	str	r0, [r2, #0]
 800a1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a204:	f380 8811 	msr	BASEPRI, r0
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f7ff fcc6 	bl	8009ba0 <vTaskSwitchContext>
 800a214:	f04f 0000 	mov.w	r0, #0
 800a218:	f380 8811 	msr	BASEPRI, r0
 800a21c:	bc09      	pop	{r0, r3}
 800a21e:	6819      	ldr	r1, [r3, #0]
 800a220:	6808      	ldr	r0, [r1, #0]
 800a222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a226:	f01e 0f10 	tst.w	lr, #16
 800a22a:	bf08      	it	eq
 800a22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a230:	f380 8809 	msr	PSP, r0
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w

0800a240 <pxCurrentTCBConst>:
 800a240:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop

0800a248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	607b      	str	r3, [r7, #4]
}
 800a260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a262:	f7ff fbe5 	bl	8009a30 <xTaskIncrementTick>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <SysTick_Handler+0x40>)
 800a26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	2300      	movs	r3, #0
 800a276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	f383 8811 	msr	BASEPRI, r3
}
 800a27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <vPortSetupTimerInterrupt+0x34>)
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <vPortSetupTimerInterrupt+0x38>)
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a29c:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <vPortSetupTimerInterrupt+0x3c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <vPortSetupTimerInterrupt+0x40>)
 800a2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a6:	099b      	lsrs	r3, r3, #6
 800a2a8:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <vPortSetupTimerInterrupt+0x44>)
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <vPortSetupTimerInterrupt+0x34>)
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	e000e010 	.word	0xe000e010
 800a2c4:	e000e018 	.word	0xe000e018
 800a2c8:	20000004 	.word	0x20000004
 800a2cc:	10624dd3 	.word	0x10624dd3
 800a2d0:	e000e014 	.word	0xe000e014

0800a2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a2e4 <vPortEnableVFP+0x10>
 800a2d8:	6801      	ldr	r1, [r0, #0]
 800a2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2de:	6001      	str	r1, [r0, #0]
 800a2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2e2:	bf00      	nop
 800a2e4:	e000ed88 	.word	0xe000ed88

0800a2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08a      	sub	sp, #40	; 0x28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2f4:	f7ff faf2 	bl	80098dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2f8:	4b5b      	ldr	r3, [pc, #364]	; (800a468 <pvPortMalloc+0x180>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a300:	f000 f920 	bl	800a544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a304:	4b59      	ldr	r3, [pc, #356]	; (800a46c <pvPortMalloc+0x184>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f040 8093 	bne.w	800a438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d01d      	beq.n	800a354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a318:	2208      	movs	r2, #8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4413      	add	r3, r2
 800a31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	2b00      	cmp	r3, #0
 800a328:	d014      	beq.n	800a354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f023 0307 	bic.w	r3, r3, #7
 800a330:	3308      	adds	r3, #8
 800a332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00a      	beq.n	800a354 <pvPortMalloc+0x6c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	617b      	str	r3, [r7, #20]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d06e      	beq.n	800a438 <pvPortMalloc+0x150>
 800a35a:	4b45      	ldr	r3, [pc, #276]	; (800a470 <pvPortMalloc+0x188>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d869      	bhi.n	800a438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a364:	4b43      	ldr	r3, [pc, #268]	; (800a474 <pvPortMalloc+0x18c>)
 800a366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a368:	4b42      	ldr	r3, [pc, #264]	; (800a474 <pvPortMalloc+0x18c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a36e:	e004      	b.n	800a37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d903      	bls.n	800a38c <pvPortMalloc+0xa4>
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1f1      	bne.n	800a370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a38c:	4b36      	ldr	r3, [pc, #216]	; (800a468 <pvPortMalloc+0x180>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a392:	429a      	cmp	r2, r3
 800a394:	d050      	beq.n	800a438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2208      	movs	r2, #8
 800a39c:	4413      	add	r3, r2
 800a39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d91f      	bls.n	800a3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	613b      	str	r3, [r7, #16]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	1ad2      	subs	r2, r2, r3
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3f2:	69b8      	ldr	r0, [r7, #24]
 800a3f4:	f000 f908 	bl	800a608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3f8:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <pvPortMalloc+0x188>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	4a1b      	ldr	r2, [pc, #108]	; (800a470 <pvPortMalloc+0x188>)
 800a404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <pvPortMalloc+0x188>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <pvPortMalloc+0x190>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d203      	bcs.n	800a41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a412:	4b17      	ldr	r3, [pc, #92]	; (800a470 <pvPortMalloc+0x188>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a18      	ldr	r2, [pc, #96]	; (800a478 <pvPortMalloc+0x190>)
 800a418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	4b13      	ldr	r3, [pc, #76]	; (800a46c <pvPortMalloc+0x184>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	431a      	orrs	r2, r3
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <pvPortMalloc+0x194>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a11      	ldr	r2, [pc, #68]	; (800a47c <pvPortMalloc+0x194>)
 800a436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a438:	f7ff fa5e 	bl	80098f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <pvPortMalloc+0x174>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <pvPortMalloc+0x172>
	return pvReturn;
 800a45c:	69fb      	ldr	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3728      	adds	r7, #40	; 0x28
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20002034 	.word	0x20002034
 800a46c:	20002048 	.word	0x20002048
 800a470:	20002038 	.word	0x20002038
 800a474:	2000202c 	.word	0x2000202c
 800a478:	2000203c 	.word	0x2000203c
 800a47c:	20002040 	.word	0x20002040

0800a480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d04d      	beq.n	800a52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a492:	2308      	movs	r3, #8
 800a494:	425b      	negs	r3, r3
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	4413      	add	r3, r2
 800a49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	4b24      	ldr	r3, [pc, #144]	; (800a538 <vPortFree+0xb8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <vPortFree+0x44>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60fb      	str	r3, [r7, #12]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <vPortFree+0x62>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60bb      	str	r3, [r7, #8]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <vPortFree+0xb8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01e      	beq.n	800a52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d11a      	bne.n	800a52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <vPortFree+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	43db      	mvns	r3, r3
 800a502:	401a      	ands	r2, r3
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a508:	f7ff f9e8 	bl	80098dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <vPortFree+0xbc>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4413      	add	r3, r2
 800a516:	4a09      	ldr	r2, [pc, #36]	; (800a53c <vPortFree+0xbc>)
 800a518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a51a:	6938      	ldr	r0, [r7, #16]
 800a51c:	f000 f874 	bl	800a608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <vPortFree+0xc0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	4a06      	ldr	r2, [pc, #24]	; (800a540 <vPortFree+0xc0>)
 800a528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a52a:	f7ff f9e5 	bl	80098f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a52e:	bf00      	nop
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20002048 	.word	0x20002048
 800a53c:	20002038 	.word	0x20002038
 800a540:	20002044 	.word	0x20002044

0800a544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a54a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a550:	4b27      	ldr	r3, [pc, #156]	; (800a5f0 <prvHeapInit+0xac>)
 800a552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0307 	bic.w	r3, r3, #7
 800a56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <prvHeapInit+0xac>)
 800a574:	4413      	add	r3, r2
 800a576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a57c:	4a1d      	ldr	r2, [pc, #116]	; (800a5f4 <prvHeapInit+0xb0>)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a582:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <prvHeapInit+0xb0>)
 800a584:	2200      	movs	r2, #0
 800a586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a590:	2208      	movs	r2, #8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1a9b      	subs	r3, r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0307 	bic.w	r3, r3, #7
 800a59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <prvHeapInit+0xb8>)
 800a5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a09      	ldr	r2, [pc, #36]	; (800a600 <prvHeapInit+0xbc>)
 800a5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <prvHeapInit+0xc0>)
 800a5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	20000ca4 	.word	0x20000ca4
 800a5f4:	2000202c 	.word	0x2000202c
 800a5f8:	20002034 	.word	0x20002034
 800a5fc:	2000203c 	.word	0x2000203c
 800a600:	20002038 	.word	0x20002038
 800a604:	20002048 	.word	0x20002048

0800a608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a610:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <prvInsertBlockIntoFreeList+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e002      	b.n	800a61c <prvInsertBlockIntoFreeList+0x14>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d8f7      	bhi.n	800a616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d108      	bne.n	800a64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	441a      	add	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d118      	bne.n	800a690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d00d      	beq.n	800a686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	e008      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a686:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e003      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d002      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	2000202c 	.word	0x2000202c
 800a6b8:	20002034 	.word	0x20002034

0800a6bc <__errno>:
 800a6bc:	4b01      	ldr	r3, [pc, #4]	; (800a6c4 <__errno+0x8>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20000074 	.word	0x20000074

0800a6c8 <__libc_init_array>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	4d0d      	ldr	r5, [pc, #52]	; (800a700 <__libc_init_array+0x38>)
 800a6cc:	4c0d      	ldr	r4, [pc, #52]	; (800a704 <__libc_init_array+0x3c>)
 800a6ce:	1b64      	subs	r4, r4, r5
 800a6d0:	10a4      	asrs	r4, r4, #2
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	42a6      	cmp	r6, r4
 800a6d6:	d109      	bne.n	800a6ec <__libc_init_array+0x24>
 800a6d8:	4d0b      	ldr	r5, [pc, #44]	; (800a708 <__libc_init_array+0x40>)
 800a6da:	4c0c      	ldr	r4, [pc, #48]	; (800a70c <__libc_init_array+0x44>)
 800a6dc:	f001 fd32 	bl	800c144 <_init>
 800a6e0:	1b64      	subs	r4, r4, r5
 800a6e2:	10a4      	asrs	r4, r4, #2
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	42a6      	cmp	r6, r4
 800a6e8:	d105      	bne.n	800a6f6 <__libc_init_array+0x2e>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f0:	4798      	blx	r3
 800a6f2:	3601      	adds	r6, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__libc_init_array+0xc>
 800a6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6fa:	4798      	blx	r3
 800a6fc:	3601      	adds	r6, #1
 800a6fe:	e7f2      	b.n	800a6e6 <__libc_init_array+0x1e>
 800a700:	0800cda0 	.word	0x0800cda0
 800a704:	0800cda0 	.word	0x0800cda0
 800a708:	0800cda0 	.word	0x0800cda0
 800a70c:	0800cda4 	.word	0x0800cda4

0800a710 <memcmp>:
 800a710:	b530      	push	{r4, r5, lr}
 800a712:	3901      	subs	r1, #1
 800a714:	2400      	movs	r4, #0
 800a716:	42a2      	cmp	r2, r4
 800a718:	d101      	bne.n	800a71e <memcmp+0xe>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e005      	b.n	800a72a <memcmp+0x1a>
 800a71e:	5d03      	ldrb	r3, [r0, r4]
 800a720:	3401      	adds	r4, #1
 800a722:	5d0d      	ldrb	r5, [r1, r4]
 800a724:	42ab      	cmp	r3, r5
 800a726:	d0f6      	beq.n	800a716 <memcmp+0x6>
 800a728:	1b58      	subs	r0, r3, r5
 800a72a:	bd30      	pop	{r4, r5, pc}

0800a72c <memcpy>:
 800a72c:	440a      	add	r2, r1
 800a72e:	4291      	cmp	r1, r2
 800a730:	f100 33ff 	add.w	r3, r0, #4294967295
 800a734:	d100      	bne.n	800a738 <memcpy+0xc>
 800a736:	4770      	bx	lr
 800a738:	b510      	push	{r4, lr}
 800a73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a742:	4291      	cmp	r1, r2
 800a744:	d1f9      	bne.n	800a73a <memcpy+0xe>
 800a746:	bd10      	pop	{r4, pc}

0800a748 <memset>:
 800a748:	4402      	add	r2, r0
 800a74a:	4603      	mov	r3, r0
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d100      	bne.n	800a752 <memset+0xa>
 800a750:	4770      	bx	lr
 800a752:	f803 1b01 	strb.w	r1, [r3], #1
 800a756:	e7f9      	b.n	800a74c <memset+0x4>

0800a758 <iprintf>:
 800a758:	b40f      	push	{r0, r1, r2, r3}
 800a75a:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <iprintf+0x2c>)
 800a75c:	b513      	push	{r0, r1, r4, lr}
 800a75e:	681c      	ldr	r4, [r3, #0]
 800a760:	b124      	cbz	r4, 800a76c <iprintf+0x14>
 800a762:	69a3      	ldr	r3, [r4, #24]
 800a764:	b913      	cbnz	r3, 800a76c <iprintf+0x14>
 800a766:	4620      	mov	r0, r4
 800a768:	f000 fb66 	bl	800ae38 <__sinit>
 800a76c:	ab05      	add	r3, sp, #20
 800a76e:	9a04      	ldr	r2, [sp, #16]
 800a770:	68a1      	ldr	r1, [r4, #8]
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	4620      	mov	r0, r4
 800a776:	f000 fead 	bl	800b4d4 <_vfiprintf_r>
 800a77a:	b002      	add	sp, #8
 800a77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a780:	b004      	add	sp, #16
 800a782:	4770      	bx	lr
 800a784:	20000074 	.word	0x20000074

0800a788 <_puts_r>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	460e      	mov	r6, r1
 800a78c:	4605      	mov	r5, r0
 800a78e:	b118      	cbz	r0, 800a798 <_puts_r+0x10>
 800a790:	6983      	ldr	r3, [r0, #24]
 800a792:	b90b      	cbnz	r3, 800a798 <_puts_r+0x10>
 800a794:	f000 fb50 	bl	800ae38 <__sinit>
 800a798:	69ab      	ldr	r3, [r5, #24]
 800a79a:	68ac      	ldr	r4, [r5, #8]
 800a79c:	b913      	cbnz	r3, 800a7a4 <_puts_r+0x1c>
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 fb4a 	bl	800ae38 <__sinit>
 800a7a4:	4b2c      	ldr	r3, [pc, #176]	; (800a858 <_puts_r+0xd0>)
 800a7a6:	429c      	cmp	r4, r3
 800a7a8:	d120      	bne.n	800a7ec <_puts_r+0x64>
 800a7aa:	686c      	ldr	r4, [r5, #4]
 800a7ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7ae:	07db      	lsls	r3, r3, #31
 800a7b0:	d405      	bmi.n	800a7be <_puts_r+0x36>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	0598      	lsls	r0, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_puts_r+0x36>
 800a7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ba:	f000 fbed 	bl	800af98 <__retarget_lock_acquire_recursive>
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	0719      	lsls	r1, r3, #28
 800a7c2:	d51d      	bpl.n	800a800 <_puts_r+0x78>
 800a7c4:	6923      	ldr	r3, [r4, #16]
 800a7c6:	b1db      	cbz	r3, 800a800 <_puts_r+0x78>
 800a7c8:	3e01      	subs	r6, #1
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	60a3      	str	r3, [r4, #8]
 800a7d4:	bb39      	cbnz	r1, 800a826 <_puts_r+0x9e>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	da38      	bge.n	800a84c <_puts_r+0xc4>
 800a7da:	4622      	mov	r2, r4
 800a7dc:	210a      	movs	r1, #10
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 f932 	bl	800aa48 <__swbuf_r>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d011      	beq.n	800a80c <_puts_r+0x84>
 800a7e8:	250a      	movs	r5, #10
 800a7ea:	e011      	b.n	800a810 <_puts_r+0x88>
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <_puts_r+0xd4>)
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d101      	bne.n	800a7f6 <_puts_r+0x6e>
 800a7f2:	68ac      	ldr	r4, [r5, #8]
 800a7f4:	e7da      	b.n	800a7ac <_puts_r+0x24>
 800a7f6:	4b1a      	ldr	r3, [pc, #104]	; (800a860 <_puts_r+0xd8>)
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	bf08      	it	eq
 800a7fc:	68ec      	ldreq	r4, [r5, #12]
 800a7fe:	e7d5      	b.n	800a7ac <_puts_r+0x24>
 800a800:	4621      	mov	r1, r4
 800a802:	4628      	mov	r0, r5
 800a804:	f000 f972 	bl	800aaec <__swsetup_r>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0dd      	beq.n	800a7c8 <_puts_r+0x40>
 800a80c:	f04f 35ff 	mov.w	r5, #4294967295
 800a810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a812:	07da      	lsls	r2, r3, #31
 800a814:	d405      	bmi.n	800a822 <_puts_r+0x9a>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	059b      	lsls	r3, r3, #22
 800a81a:	d402      	bmi.n	800a822 <_puts_r+0x9a>
 800a81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a81e:	f000 fbbc 	bl	800af9a <__retarget_lock_release_recursive>
 800a822:	4628      	mov	r0, r5
 800a824:	bd70      	pop	{r4, r5, r6, pc}
 800a826:	2b00      	cmp	r3, #0
 800a828:	da04      	bge.n	800a834 <_puts_r+0xac>
 800a82a:	69a2      	ldr	r2, [r4, #24]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	dc06      	bgt.n	800a83e <_puts_r+0xb6>
 800a830:	290a      	cmp	r1, #10
 800a832:	d004      	beq.n	800a83e <_puts_r+0xb6>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	6022      	str	r2, [r4, #0]
 800a83a:	7019      	strb	r1, [r3, #0]
 800a83c:	e7c5      	b.n	800a7ca <_puts_r+0x42>
 800a83e:	4622      	mov	r2, r4
 800a840:	4628      	mov	r0, r5
 800a842:	f000 f901 	bl	800aa48 <__swbuf_r>
 800a846:	3001      	adds	r0, #1
 800a848:	d1bf      	bne.n	800a7ca <_puts_r+0x42>
 800a84a:	e7df      	b.n	800a80c <_puts_r+0x84>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	250a      	movs	r5, #10
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	701d      	strb	r5, [r3, #0]
 800a856:	e7db      	b.n	800a810 <_puts_r+0x88>
 800a858:	0800cce4 	.word	0x0800cce4
 800a85c:	0800cd04 	.word	0x0800cd04
 800a860:	0800ccc4 	.word	0x0800ccc4

0800a864 <puts>:
 800a864:	4b02      	ldr	r3, [pc, #8]	; (800a870 <puts+0xc>)
 800a866:	4601      	mov	r1, r0
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	f7ff bf8d 	b.w	800a788 <_puts_r>
 800a86e:	bf00      	nop
 800a870:	20000074 	.word	0x20000074

0800a874 <sniprintf>:
 800a874:	b40c      	push	{r2, r3}
 800a876:	b530      	push	{r4, r5, lr}
 800a878:	4b17      	ldr	r3, [pc, #92]	; (800a8d8 <sniprintf+0x64>)
 800a87a:	1e0c      	subs	r4, r1, #0
 800a87c:	681d      	ldr	r5, [r3, #0]
 800a87e:	b09d      	sub	sp, #116	; 0x74
 800a880:	da08      	bge.n	800a894 <sniprintf+0x20>
 800a882:	238b      	movs	r3, #139	; 0x8b
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	b01d      	add	sp, #116	; 0x74
 800a88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a890:	b002      	add	sp, #8
 800a892:	4770      	bx	lr
 800a894:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a898:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a89c:	bf14      	ite	ne
 800a89e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8a2:	4623      	moveq	r3, r4
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8ac:	9002      	str	r0, [sp, #8]
 800a8ae:	9006      	str	r0, [sp, #24]
 800a8b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8b6:	ab21      	add	r3, sp, #132	; 0x84
 800a8b8:	a902      	add	r1, sp, #8
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	f000 fcdf 	bl	800b280 <_svfiprintf_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	bfbc      	itt	lt
 800a8c6:	238b      	movlt	r3, #139	; 0x8b
 800a8c8:	602b      	strlt	r3, [r5, #0]
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	d0dd      	beq.n	800a88a <sniprintf+0x16>
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
 800a8d4:	e7d9      	b.n	800a88a <sniprintf+0x16>
 800a8d6:	bf00      	nop
 800a8d8:	20000074 	.word	0x20000074

0800a8dc <siprintf>:
 800a8dc:	b40e      	push	{r1, r2, r3}
 800a8de:	b500      	push	{lr}
 800a8e0:	b09c      	sub	sp, #112	; 0x70
 800a8e2:	ab1d      	add	r3, sp, #116	; 0x74
 800a8e4:	9002      	str	r0, [sp, #8]
 800a8e6:	9006      	str	r0, [sp, #24]
 800a8e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8ec:	4809      	ldr	r0, [pc, #36]	; (800a914 <siprintf+0x38>)
 800a8ee:	9107      	str	r1, [sp, #28]
 800a8f0:	9104      	str	r1, [sp, #16]
 800a8f2:	4909      	ldr	r1, [pc, #36]	; (800a918 <siprintf+0x3c>)
 800a8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f8:	9105      	str	r1, [sp, #20]
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	a902      	add	r1, sp, #8
 800a900:	f000 fcbe 	bl	800b280 <_svfiprintf_r>
 800a904:	9b02      	ldr	r3, [sp, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	b01c      	add	sp, #112	; 0x70
 800a90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a910:	b003      	add	sp, #12
 800a912:	4770      	bx	lr
 800a914:	20000074 	.word	0x20000074
 800a918:	ffff0208 	.word	0xffff0208

0800a91c <strcat>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	4602      	mov	r2, r0
 800a920:	7814      	ldrb	r4, [r2, #0]
 800a922:	4613      	mov	r3, r2
 800a924:	3201      	adds	r2, #1
 800a926:	2c00      	cmp	r4, #0
 800a928:	d1fa      	bne.n	800a920 <strcat+0x4>
 800a92a:	3b01      	subs	r3, #1
 800a92c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a930:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a934:	2a00      	cmp	r2, #0
 800a936:	d1f9      	bne.n	800a92c <strcat+0x10>
 800a938:	bd10      	pop	{r4, pc}

0800a93a <strncpy>:
 800a93a:	b510      	push	{r4, lr}
 800a93c:	3901      	subs	r1, #1
 800a93e:	4603      	mov	r3, r0
 800a940:	b132      	cbz	r2, 800a950 <strncpy+0x16>
 800a942:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a946:	f803 4b01 	strb.w	r4, [r3], #1
 800a94a:	3a01      	subs	r2, #1
 800a94c:	2c00      	cmp	r4, #0
 800a94e:	d1f7      	bne.n	800a940 <strncpy+0x6>
 800a950:	441a      	add	r2, r3
 800a952:	2100      	movs	r1, #0
 800a954:	4293      	cmp	r3, r2
 800a956:	d100      	bne.n	800a95a <strncpy+0x20>
 800a958:	bd10      	pop	{r4, pc}
 800a95a:	f803 1b01 	strb.w	r1, [r3], #1
 800a95e:	e7f9      	b.n	800a954 <strncpy+0x1a>

0800a960 <strstr>:
 800a960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a962:	780c      	ldrb	r4, [r1, #0]
 800a964:	b164      	cbz	r4, 800a980 <strstr+0x20>
 800a966:	4603      	mov	r3, r0
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	4618      	mov	r0, r3
 800a96c:	1c5e      	adds	r6, r3, #1
 800a96e:	b90a      	cbnz	r2, 800a974 <strstr+0x14>
 800a970:	4610      	mov	r0, r2
 800a972:	e005      	b.n	800a980 <strstr+0x20>
 800a974:	4294      	cmp	r4, r2
 800a976:	d108      	bne.n	800a98a <strstr+0x2a>
 800a978:	460d      	mov	r5, r1
 800a97a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a97e:	b902      	cbnz	r2, 800a982 <strstr+0x22>
 800a980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a982:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a986:	4297      	cmp	r7, r2
 800a988:	d0f7      	beq.n	800a97a <strstr+0x1a>
 800a98a:	4633      	mov	r3, r6
 800a98c:	e7ec      	b.n	800a968 <strstr+0x8>
	...

0800a990 <strtok>:
 800a990:	4b16      	ldr	r3, [pc, #88]	; (800a9ec <strtok+0x5c>)
 800a992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a994:	681e      	ldr	r6, [r3, #0]
 800a996:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a998:	4605      	mov	r5, r0
 800a99a:	b9fc      	cbnz	r4, 800a9dc <strtok+0x4c>
 800a99c:	2050      	movs	r0, #80	; 0x50
 800a99e:	9101      	str	r1, [sp, #4]
 800a9a0:	f000 fb60 	bl	800b064 <malloc>
 800a9a4:	9901      	ldr	r1, [sp, #4]
 800a9a6:	65b0      	str	r0, [r6, #88]	; 0x58
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	b920      	cbnz	r0, 800a9b6 <strtok+0x26>
 800a9ac:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <strtok+0x60>)
 800a9ae:	4811      	ldr	r0, [pc, #68]	; (800a9f4 <strtok+0x64>)
 800a9b0:	2157      	movs	r1, #87	; 0x57
 800a9b2:	f000 f909 	bl	800abc8 <__assert_func>
 800a9b6:	e9c0 4400 	strd	r4, r4, [r0]
 800a9ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a9be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a9c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a9c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a9ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a9ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a9d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a9d6:	6184      	str	r4, [r0, #24]
 800a9d8:	7704      	strb	r4, [r0, #28]
 800a9da:	6244      	str	r4, [r0, #36]	; 0x24
 800a9dc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a9de:	2301      	movs	r3, #1
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	b002      	add	sp, #8
 800a9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9e8:	f000 b806 	b.w	800a9f8 <__strtok_r>
 800a9ec:	20000074 	.word	0x20000074
 800a9f0:	0800cc10 	.word	0x0800cc10
 800a9f4:	0800cc27 	.word	0x0800cc27

0800a9f8 <__strtok_r>:
 800a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fa:	b908      	cbnz	r0, 800aa00 <__strtok_r+0x8>
 800a9fc:	6810      	ldr	r0, [r2, #0]
 800a9fe:	b188      	cbz	r0, 800aa24 <__strtok_r+0x2c>
 800aa00:	4604      	mov	r4, r0
 800aa02:	4620      	mov	r0, r4
 800aa04:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa08:	460f      	mov	r7, r1
 800aa0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa0e:	b91e      	cbnz	r6, 800aa18 <__strtok_r+0x20>
 800aa10:	b965      	cbnz	r5, 800aa2c <__strtok_r+0x34>
 800aa12:	6015      	str	r5, [r2, #0]
 800aa14:	4628      	mov	r0, r5
 800aa16:	e005      	b.n	800aa24 <__strtok_r+0x2c>
 800aa18:	42b5      	cmp	r5, r6
 800aa1a:	d1f6      	bne.n	800aa0a <__strtok_r+0x12>
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f0      	bne.n	800aa02 <__strtok_r+0xa>
 800aa20:	6014      	str	r4, [r2, #0]
 800aa22:	7003      	strb	r3, [r0, #0]
 800aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa26:	461c      	mov	r4, r3
 800aa28:	e00c      	b.n	800aa44 <__strtok_r+0x4c>
 800aa2a:	b915      	cbnz	r5, 800aa32 <__strtok_r+0x3a>
 800aa2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa30:	460e      	mov	r6, r1
 800aa32:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aa36:	42ab      	cmp	r3, r5
 800aa38:	d1f7      	bne.n	800aa2a <__strtok_r+0x32>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0f3      	beq.n	800aa26 <__strtok_r+0x2e>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aa44:	6014      	str	r4, [r2, #0]
 800aa46:	e7ed      	b.n	800aa24 <__strtok_r+0x2c>

0800aa48 <__swbuf_r>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	460e      	mov	r6, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	4605      	mov	r5, r0
 800aa50:	b118      	cbz	r0, 800aa5a <__swbuf_r+0x12>
 800aa52:	6983      	ldr	r3, [r0, #24]
 800aa54:	b90b      	cbnz	r3, 800aa5a <__swbuf_r+0x12>
 800aa56:	f000 f9ef 	bl	800ae38 <__sinit>
 800aa5a:	4b21      	ldr	r3, [pc, #132]	; (800aae0 <__swbuf_r+0x98>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	d12b      	bne.n	800aab8 <__swbuf_r+0x70>
 800aa60:	686c      	ldr	r4, [r5, #4]
 800aa62:	69a3      	ldr	r3, [r4, #24]
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	071a      	lsls	r2, r3, #28
 800aa6a:	d52f      	bpl.n	800aacc <__swbuf_r+0x84>
 800aa6c:	6923      	ldr	r3, [r4, #16]
 800aa6e:	b36b      	cbz	r3, 800aacc <__swbuf_r+0x84>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	6820      	ldr	r0, [r4, #0]
 800aa74:	1ac0      	subs	r0, r0, r3
 800aa76:	6963      	ldr	r3, [r4, #20]
 800aa78:	b2f6      	uxtb	r6, r6
 800aa7a:	4283      	cmp	r3, r0
 800aa7c:	4637      	mov	r7, r6
 800aa7e:	dc04      	bgt.n	800aa8a <__swbuf_r+0x42>
 800aa80:	4621      	mov	r1, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f944 	bl	800ad10 <_fflush_r>
 800aa88:	bb30      	cbnz	r0, 800aad8 <__swbuf_r+0x90>
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	60a3      	str	r3, [r4, #8]
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	6022      	str	r2, [r4, #0]
 800aa96:	701e      	strb	r6, [r3, #0]
 800aa98:	6963      	ldr	r3, [r4, #20]
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	4283      	cmp	r3, r0
 800aa9e:	d004      	beq.n	800aaaa <__swbuf_r+0x62>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	07db      	lsls	r3, r3, #31
 800aaa4:	d506      	bpl.n	800aab4 <__swbuf_r+0x6c>
 800aaa6:	2e0a      	cmp	r6, #10
 800aaa8:	d104      	bne.n	800aab4 <__swbuf_r+0x6c>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f92f 	bl	800ad10 <_fflush_r>
 800aab2:	b988      	cbnz	r0, 800aad8 <__swbuf_r+0x90>
 800aab4:	4638      	mov	r0, r7
 800aab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab8:	4b0a      	ldr	r3, [pc, #40]	; (800aae4 <__swbuf_r+0x9c>)
 800aaba:	429c      	cmp	r4, r3
 800aabc:	d101      	bne.n	800aac2 <__swbuf_r+0x7a>
 800aabe:	68ac      	ldr	r4, [r5, #8]
 800aac0:	e7cf      	b.n	800aa62 <__swbuf_r+0x1a>
 800aac2:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <__swbuf_r+0xa0>)
 800aac4:	429c      	cmp	r4, r3
 800aac6:	bf08      	it	eq
 800aac8:	68ec      	ldreq	r4, [r5, #12]
 800aaca:	e7ca      	b.n	800aa62 <__swbuf_r+0x1a>
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 f80c 	bl	800aaec <__swsetup_r>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d0cb      	beq.n	800aa70 <__swbuf_r+0x28>
 800aad8:	f04f 37ff 	mov.w	r7, #4294967295
 800aadc:	e7ea      	b.n	800aab4 <__swbuf_r+0x6c>
 800aade:	bf00      	nop
 800aae0:	0800cce4 	.word	0x0800cce4
 800aae4:	0800cd04 	.word	0x0800cd04
 800aae8:	0800ccc4 	.word	0x0800ccc4

0800aaec <__swsetup_r>:
 800aaec:	4b32      	ldr	r3, [pc, #200]	; (800abb8 <__swsetup_r+0xcc>)
 800aaee:	b570      	push	{r4, r5, r6, lr}
 800aaf0:	681d      	ldr	r5, [r3, #0]
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	b125      	cbz	r5, 800ab02 <__swsetup_r+0x16>
 800aaf8:	69ab      	ldr	r3, [r5, #24]
 800aafa:	b913      	cbnz	r3, 800ab02 <__swsetup_r+0x16>
 800aafc:	4628      	mov	r0, r5
 800aafe:	f000 f99b 	bl	800ae38 <__sinit>
 800ab02:	4b2e      	ldr	r3, [pc, #184]	; (800abbc <__swsetup_r+0xd0>)
 800ab04:	429c      	cmp	r4, r3
 800ab06:	d10f      	bne.n	800ab28 <__swsetup_r+0x3c>
 800ab08:	686c      	ldr	r4, [r5, #4]
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab10:	0719      	lsls	r1, r3, #28
 800ab12:	d42c      	bmi.n	800ab6e <__swsetup_r+0x82>
 800ab14:	06dd      	lsls	r5, r3, #27
 800ab16:	d411      	bmi.n	800ab3c <__swsetup_r+0x50>
 800ab18:	2309      	movs	r3, #9
 800ab1a:	6033      	str	r3, [r6, #0]
 800ab1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	f04f 30ff 	mov.w	r0, #4294967295
 800ab26:	e03e      	b.n	800aba6 <__swsetup_r+0xba>
 800ab28:	4b25      	ldr	r3, [pc, #148]	; (800abc0 <__swsetup_r+0xd4>)
 800ab2a:	429c      	cmp	r4, r3
 800ab2c:	d101      	bne.n	800ab32 <__swsetup_r+0x46>
 800ab2e:	68ac      	ldr	r4, [r5, #8]
 800ab30:	e7eb      	b.n	800ab0a <__swsetup_r+0x1e>
 800ab32:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <__swsetup_r+0xd8>)
 800ab34:	429c      	cmp	r4, r3
 800ab36:	bf08      	it	eq
 800ab38:	68ec      	ldreq	r4, [r5, #12]
 800ab3a:	e7e6      	b.n	800ab0a <__swsetup_r+0x1e>
 800ab3c:	0758      	lsls	r0, r3, #29
 800ab3e:	d512      	bpl.n	800ab66 <__swsetup_r+0x7a>
 800ab40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab42:	b141      	cbz	r1, 800ab56 <__swsetup_r+0x6a>
 800ab44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab48:	4299      	cmp	r1, r3
 800ab4a:	d002      	beq.n	800ab52 <__swsetup_r+0x66>
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 fa91 	bl	800b074 <_free_r>
 800ab52:	2300      	movs	r3, #0
 800ab54:	6363      	str	r3, [r4, #52]	; 0x34
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	6063      	str	r3, [r4, #4]
 800ab62:	6923      	ldr	r3, [r4, #16]
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	f043 0308 	orr.w	r3, r3, #8
 800ab6c:	81a3      	strh	r3, [r4, #12]
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	b94b      	cbnz	r3, 800ab86 <__swsetup_r+0x9a>
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab7c:	d003      	beq.n	800ab86 <__swsetup_r+0x9a>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4630      	mov	r0, r6
 800ab82:	f000 fa2f 	bl	800afe4 <__smakebuf_r>
 800ab86:	89a0      	ldrh	r0, [r4, #12]
 800ab88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab8c:	f010 0301 	ands.w	r3, r0, #1
 800ab90:	d00a      	beq.n	800aba8 <__swsetup_r+0xbc>
 800ab92:	2300      	movs	r3, #0
 800ab94:	60a3      	str	r3, [r4, #8]
 800ab96:	6963      	ldr	r3, [r4, #20]
 800ab98:	425b      	negs	r3, r3
 800ab9a:	61a3      	str	r3, [r4, #24]
 800ab9c:	6923      	ldr	r3, [r4, #16]
 800ab9e:	b943      	cbnz	r3, 800abb2 <__swsetup_r+0xc6>
 800aba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aba4:	d1ba      	bne.n	800ab1c <__swsetup_r+0x30>
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
 800aba8:	0781      	lsls	r1, r0, #30
 800abaa:	bf58      	it	pl
 800abac:	6963      	ldrpl	r3, [r4, #20]
 800abae:	60a3      	str	r3, [r4, #8]
 800abb0:	e7f4      	b.n	800ab9c <__swsetup_r+0xb0>
 800abb2:	2000      	movs	r0, #0
 800abb4:	e7f7      	b.n	800aba6 <__swsetup_r+0xba>
 800abb6:	bf00      	nop
 800abb8:	20000074 	.word	0x20000074
 800abbc:	0800cce4 	.word	0x0800cce4
 800abc0:	0800cd04 	.word	0x0800cd04
 800abc4:	0800ccc4 	.word	0x0800ccc4

0800abc8 <__assert_func>:
 800abc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abca:	4614      	mov	r4, r2
 800abcc:	461a      	mov	r2, r3
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <__assert_func+0x2c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4605      	mov	r5, r0
 800abd4:	68d8      	ldr	r0, [r3, #12]
 800abd6:	b14c      	cbz	r4, 800abec <__assert_func+0x24>
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <__assert_func+0x30>)
 800abda:	9100      	str	r1, [sp, #0]
 800abdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abe0:	4906      	ldr	r1, [pc, #24]	; (800abfc <__assert_func+0x34>)
 800abe2:	462b      	mov	r3, r5
 800abe4:	f000 f9a6 	bl	800af34 <fiprintf>
 800abe8:	f000 ff9e 	bl	800bb28 <abort>
 800abec:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <__assert_func+0x38>)
 800abee:	461c      	mov	r4, r3
 800abf0:	e7f3      	b.n	800abda <__assert_func+0x12>
 800abf2:	bf00      	nop
 800abf4:	20000074 	.word	0x20000074
 800abf8:	0800cc88 	.word	0x0800cc88
 800abfc:	0800cc95 	.word	0x0800cc95
 800ac00:	0800ccc3 	.word	0x0800ccc3

0800ac04 <__sflush_r>:
 800ac04:	898a      	ldrh	r2, [r1, #12]
 800ac06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	0710      	lsls	r0, r2, #28
 800ac0e:	460c      	mov	r4, r1
 800ac10:	d458      	bmi.n	800acc4 <__sflush_r+0xc0>
 800ac12:	684b      	ldr	r3, [r1, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dc05      	bgt.n	800ac24 <__sflush_r+0x20>
 800ac18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dc02      	bgt.n	800ac24 <__sflush_r+0x20>
 800ac1e:	2000      	movs	r0, #0
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d0f9      	beq.n	800ac1e <__sflush_r+0x1a>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac30:	682f      	ldr	r7, [r5, #0]
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	d032      	beq.n	800ac9c <__sflush_r+0x98>
 800ac36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	075a      	lsls	r2, r3, #29
 800ac3c:	d505      	bpl.n	800ac4a <__sflush_r+0x46>
 800ac3e:	6863      	ldr	r3, [r4, #4]
 800ac40:	1ac0      	subs	r0, r0, r3
 800ac42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac44:	b10b      	cbz	r3, 800ac4a <__sflush_r+0x46>
 800ac46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac48:	1ac0      	subs	r0, r0, r3
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac50:	6a21      	ldr	r1, [r4, #32]
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b0      	blx	r6
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	d106      	bne.n	800ac6a <__sflush_r+0x66>
 800ac5c:	6829      	ldr	r1, [r5, #0]
 800ac5e:	291d      	cmp	r1, #29
 800ac60:	d82c      	bhi.n	800acbc <__sflush_r+0xb8>
 800ac62:	4a2a      	ldr	r2, [pc, #168]	; (800ad0c <__sflush_r+0x108>)
 800ac64:	40ca      	lsrs	r2, r1
 800ac66:	07d6      	lsls	r6, r2, #31
 800ac68:	d528      	bpl.n	800acbc <__sflush_r+0xb8>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	6062      	str	r2, [r4, #4]
 800ac6e:	04d9      	lsls	r1, r3, #19
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	6022      	str	r2, [r4, #0]
 800ac74:	d504      	bpl.n	800ac80 <__sflush_r+0x7c>
 800ac76:	1c42      	adds	r2, r0, #1
 800ac78:	d101      	bne.n	800ac7e <__sflush_r+0x7a>
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	b903      	cbnz	r3, 800ac80 <__sflush_r+0x7c>
 800ac7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac82:	602f      	str	r7, [r5, #0]
 800ac84:	2900      	cmp	r1, #0
 800ac86:	d0ca      	beq.n	800ac1e <__sflush_r+0x1a>
 800ac88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac8c:	4299      	cmp	r1, r3
 800ac8e:	d002      	beq.n	800ac96 <__sflush_r+0x92>
 800ac90:	4628      	mov	r0, r5
 800ac92:	f000 f9ef 	bl	800b074 <_free_r>
 800ac96:	2000      	movs	r0, #0
 800ac98:	6360      	str	r0, [r4, #52]	; 0x34
 800ac9a:	e7c1      	b.n	800ac20 <__sflush_r+0x1c>
 800ac9c:	6a21      	ldr	r1, [r4, #32]
 800ac9e:	2301      	movs	r3, #1
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b0      	blx	r6
 800aca4:	1c41      	adds	r1, r0, #1
 800aca6:	d1c7      	bne.n	800ac38 <__sflush_r+0x34>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0c4      	beq.n	800ac38 <__sflush_r+0x34>
 800acae:	2b1d      	cmp	r3, #29
 800acb0:	d001      	beq.n	800acb6 <__sflush_r+0xb2>
 800acb2:	2b16      	cmp	r3, #22
 800acb4:	d101      	bne.n	800acba <__sflush_r+0xb6>
 800acb6:	602f      	str	r7, [r5, #0]
 800acb8:	e7b1      	b.n	800ac1e <__sflush_r+0x1a>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc0:	81a3      	strh	r3, [r4, #12]
 800acc2:	e7ad      	b.n	800ac20 <__sflush_r+0x1c>
 800acc4:	690f      	ldr	r7, [r1, #16]
 800acc6:	2f00      	cmp	r7, #0
 800acc8:	d0a9      	beq.n	800ac1e <__sflush_r+0x1a>
 800acca:	0793      	lsls	r3, r2, #30
 800accc:	680e      	ldr	r6, [r1, #0]
 800acce:	bf08      	it	eq
 800acd0:	694b      	ldreq	r3, [r1, #20]
 800acd2:	600f      	str	r7, [r1, #0]
 800acd4:	bf18      	it	ne
 800acd6:	2300      	movne	r3, #0
 800acd8:	eba6 0807 	sub.w	r8, r6, r7
 800acdc:	608b      	str	r3, [r1, #8]
 800acde:	f1b8 0f00 	cmp.w	r8, #0
 800ace2:	dd9c      	ble.n	800ac1e <__sflush_r+0x1a>
 800ace4:	6a21      	ldr	r1, [r4, #32]
 800ace6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ace8:	4643      	mov	r3, r8
 800acea:	463a      	mov	r2, r7
 800acec:	4628      	mov	r0, r5
 800acee:	47b0      	blx	r6
 800acf0:	2800      	cmp	r0, #0
 800acf2:	dc06      	bgt.n	800ad02 <__sflush_r+0xfe>
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e78e      	b.n	800ac20 <__sflush_r+0x1c>
 800ad02:	4407      	add	r7, r0
 800ad04:	eba8 0800 	sub.w	r8, r8, r0
 800ad08:	e7e9      	b.n	800acde <__sflush_r+0xda>
 800ad0a:	bf00      	nop
 800ad0c:	20400001 	.word	0x20400001

0800ad10 <_fflush_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	690b      	ldr	r3, [r1, #16]
 800ad14:	4605      	mov	r5, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	b913      	cbnz	r3, 800ad20 <_fflush_r+0x10>
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	b118      	cbz	r0, 800ad2a <_fflush_r+0x1a>
 800ad22:	6983      	ldr	r3, [r0, #24]
 800ad24:	b90b      	cbnz	r3, 800ad2a <_fflush_r+0x1a>
 800ad26:	f000 f887 	bl	800ae38 <__sinit>
 800ad2a:	4b14      	ldr	r3, [pc, #80]	; (800ad7c <_fflush_r+0x6c>)
 800ad2c:	429c      	cmp	r4, r3
 800ad2e:	d11b      	bne.n	800ad68 <_fflush_r+0x58>
 800ad30:	686c      	ldr	r4, [r5, #4]
 800ad32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0ef      	beq.n	800ad1a <_fflush_r+0xa>
 800ad3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad3c:	07d0      	lsls	r0, r2, #31
 800ad3e:	d404      	bmi.n	800ad4a <_fflush_r+0x3a>
 800ad40:	0599      	lsls	r1, r3, #22
 800ad42:	d402      	bmi.n	800ad4a <_fflush_r+0x3a>
 800ad44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad46:	f000 f927 	bl	800af98 <__retarget_lock_acquire_recursive>
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f7ff ff59 	bl	800ac04 <__sflush_r>
 800ad52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad54:	07da      	lsls	r2, r3, #31
 800ad56:	4605      	mov	r5, r0
 800ad58:	d4e0      	bmi.n	800ad1c <_fflush_r+0xc>
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	059b      	lsls	r3, r3, #22
 800ad5e:	d4dd      	bmi.n	800ad1c <_fflush_r+0xc>
 800ad60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad62:	f000 f91a 	bl	800af9a <__retarget_lock_release_recursive>
 800ad66:	e7d9      	b.n	800ad1c <_fflush_r+0xc>
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <_fflush_r+0x70>)
 800ad6a:	429c      	cmp	r4, r3
 800ad6c:	d101      	bne.n	800ad72 <_fflush_r+0x62>
 800ad6e:	68ac      	ldr	r4, [r5, #8]
 800ad70:	e7df      	b.n	800ad32 <_fflush_r+0x22>
 800ad72:	4b04      	ldr	r3, [pc, #16]	; (800ad84 <_fflush_r+0x74>)
 800ad74:	429c      	cmp	r4, r3
 800ad76:	bf08      	it	eq
 800ad78:	68ec      	ldreq	r4, [r5, #12]
 800ad7a:	e7da      	b.n	800ad32 <_fflush_r+0x22>
 800ad7c:	0800cce4 	.word	0x0800cce4
 800ad80:	0800cd04 	.word	0x0800cd04
 800ad84:	0800ccc4 	.word	0x0800ccc4

0800ad88 <std>:
 800ad88:	2300      	movs	r3, #0
 800ad8a:	b510      	push	{r4, lr}
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad96:	6083      	str	r3, [r0, #8]
 800ad98:	8181      	strh	r1, [r0, #12]
 800ad9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad9c:	81c2      	strh	r2, [r0, #14]
 800ad9e:	6183      	str	r3, [r0, #24]
 800ada0:	4619      	mov	r1, r3
 800ada2:	2208      	movs	r2, #8
 800ada4:	305c      	adds	r0, #92	; 0x5c
 800ada6:	f7ff fccf 	bl	800a748 <memset>
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <std+0x38>)
 800adac:	6263      	str	r3, [r4, #36]	; 0x24
 800adae:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <std+0x3c>)
 800adb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <std+0x40>)
 800adb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adb6:	4b05      	ldr	r3, [pc, #20]	; (800adcc <std+0x44>)
 800adb8:	6224      	str	r4, [r4, #32]
 800adba:	6323      	str	r3, [r4, #48]	; 0x30
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	bf00      	nop
 800adc0:	0800ba7d 	.word	0x0800ba7d
 800adc4:	0800ba9f 	.word	0x0800ba9f
 800adc8:	0800bad7 	.word	0x0800bad7
 800adcc:	0800bafb 	.word	0x0800bafb

0800add0 <_cleanup_r>:
 800add0:	4901      	ldr	r1, [pc, #4]	; (800add8 <_cleanup_r+0x8>)
 800add2:	f000 b8c1 	b.w	800af58 <_fwalk_reent>
 800add6:	bf00      	nop
 800add8:	0800ad11 	.word	0x0800ad11

0800addc <__sfmoreglue>:
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	1e4a      	subs	r2, r1, #1
 800ade0:	2568      	movs	r5, #104	; 0x68
 800ade2:	4355      	muls	r5, r2
 800ade4:	460e      	mov	r6, r1
 800ade6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adea:	f000 f993 	bl	800b114 <_malloc_r>
 800adee:	4604      	mov	r4, r0
 800adf0:	b140      	cbz	r0, 800ae04 <__sfmoreglue+0x28>
 800adf2:	2100      	movs	r1, #0
 800adf4:	e9c0 1600 	strd	r1, r6, [r0]
 800adf8:	300c      	adds	r0, #12
 800adfa:	60a0      	str	r0, [r4, #8]
 800adfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae00:	f7ff fca2 	bl	800a748 <memset>
 800ae04:	4620      	mov	r0, r4
 800ae06:	bd70      	pop	{r4, r5, r6, pc}

0800ae08 <__sfp_lock_acquire>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__sfp_lock_acquire+0x8>)
 800ae0a:	f000 b8c5 	b.w	800af98 <__retarget_lock_acquire_recursive>
 800ae0e:	bf00      	nop
 800ae10:	200029d4 	.word	0x200029d4

0800ae14 <__sfp_lock_release>:
 800ae14:	4801      	ldr	r0, [pc, #4]	; (800ae1c <__sfp_lock_release+0x8>)
 800ae16:	f000 b8c0 	b.w	800af9a <__retarget_lock_release_recursive>
 800ae1a:	bf00      	nop
 800ae1c:	200029d4 	.word	0x200029d4

0800ae20 <__sinit_lock_acquire>:
 800ae20:	4801      	ldr	r0, [pc, #4]	; (800ae28 <__sinit_lock_acquire+0x8>)
 800ae22:	f000 b8b9 	b.w	800af98 <__retarget_lock_acquire_recursive>
 800ae26:	bf00      	nop
 800ae28:	200029cf 	.word	0x200029cf

0800ae2c <__sinit_lock_release>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	; (800ae34 <__sinit_lock_release+0x8>)
 800ae2e:	f000 b8b4 	b.w	800af9a <__retarget_lock_release_recursive>
 800ae32:	bf00      	nop
 800ae34:	200029cf 	.word	0x200029cf

0800ae38 <__sinit>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	f7ff fff0 	bl	800ae20 <__sinit_lock_acquire>
 800ae40:	69a3      	ldr	r3, [r4, #24]
 800ae42:	b11b      	cbz	r3, 800ae4c <__sinit+0x14>
 800ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae48:	f7ff bff0 	b.w	800ae2c <__sinit_lock_release>
 800ae4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae50:	6523      	str	r3, [r4, #80]	; 0x50
 800ae52:	4b13      	ldr	r3, [pc, #76]	; (800aea0 <__sinit+0x68>)
 800ae54:	4a13      	ldr	r2, [pc, #76]	; (800aea4 <__sinit+0x6c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	bf04      	itt	eq
 800ae5e:	2301      	moveq	r3, #1
 800ae60:	61a3      	streq	r3, [r4, #24]
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 f820 	bl	800aea8 <__sfp>
 800ae68:	6060      	str	r0, [r4, #4]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f81c 	bl	800aea8 <__sfp>
 800ae70:	60a0      	str	r0, [r4, #8]
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 f818 	bl	800aea8 <__sfp>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	60e0      	str	r0, [r4, #12]
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	6860      	ldr	r0, [r4, #4]
 800ae80:	f7ff ff82 	bl	800ad88 <std>
 800ae84:	68a0      	ldr	r0, [r4, #8]
 800ae86:	2201      	movs	r2, #1
 800ae88:	2109      	movs	r1, #9
 800ae8a:	f7ff ff7d 	bl	800ad88 <std>
 800ae8e:	68e0      	ldr	r0, [r4, #12]
 800ae90:	2202      	movs	r2, #2
 800ae92:	2112      	movs	r1, #18
 800ae94:	f7ff ff78 	bl	800ad88 <std>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	61a3      	str	r3, [r4, #24]
 800ae9c:	e7d2      	b.n	800ae44 <__sinit+0xc>
 800ae9e:	bf00      	nop
 800aea0:	0800cc0c 	.word	0x0800cc0c
 800aea4:	0800add1 	.word	0x0800add1

0800aea8 <__sfp>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	4607      	mov	r7, r0
 800aeac:	f7ff ffac 	bl	800ae08 <__sfp_lock_acquire>
 800aeb0:	4b1e      	ldr	r3, [pc, #120]	; (800af2c <__sfp+0x84>)
 800aeb2:	681e      	ldr	r6, [r3, #0]
 800aeb4:	69b3      	ldr	r3, [r6, #24]
 800aeb6:	b913      	cbnz	r3, 800aebe <__sfp+0x16>
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f7ff ffbd 	bl	800ae38 <__sinit>
 800aebe:	3648      	adds	r6, #72	; 0x48
 800aec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	d503      	bpl.n	800aed0 <__sfp+0x28>
 800aec8:	6833      	ldr	r3, [r6, #0]
 800aeca:	b30b      	cbz	r3, 800af10 <__sfp+0x68>
 800aecc:	6836      	ldr	r6, [r6, #0]
 800aece:	e7f7      	b.n	800aec0 <__sfp+0x18>
 800aed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aed4:	b9d5      	cbnz	r5, 800af0c <__sfp+0x64>
 800aed6:	4b16      	ldr	r3, [pc, #88]	; (800af30 <__sfp+0x88>)
 800aed8:	60e3      	str	r3, [r4, #12]
 800aeda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aede:	6665      	str	r5, [r4, #100]	; 0x64
 800aee0:	f000 f859 	bl	800af96 <__retarget_lock_init_recursive>
 800aee4:	f7ff ff96 	bl	800ae14 <__sfp_lock_release>
 800aee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aeec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aef0:	6025      	str	r5, [r4, #0]
 800aef2:	61a5      	str	r5, [r4, #24]
 800aef4:	2208      	movs	r2, #8
 800aef6:	4629      	mov	r1, r5
 800aef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aefc:	f7ff fc24 	bl	800a748 <memset>
 800af00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af08:	4620      	mov	r0, r4
 800af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0c:	3468      	adds	r4, #104	; 0x68
 800af0e:	e7d9      	b.n	800aec4 <__sfp+0x1c>
 800af10:	2104      	movs	r1, #4
 800af12:	4638      	mov	r0, r7
 800af14:	f7ff ff62 	bl	800addc <__sfmoreglue>
 800af18:	4604      	mov	r4, r0
 800af1a:	6030      	str	r0, [r6, #0]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1d5      	bne.n	800aecc <__sfp+0x24>
 800af20:	f7ff ff78 	bl	800ae14 <__sfp_lock_release>
 800af24:	230c      	movs	r3, #12
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	e7ee      	b.n	800af08 <__sfp+0x60>
 800af2a:	bf00      	nop
 800af2c:	0800cc0c 	.word	0x0800cc0c
 800af30:	ffff0001 	.word	0xffff0001

0800af34 <fiprintf>:
 800af34:	b40e      	push	{r1, r2, r3}
 800af36:	b503      	push	{r0, r1, lr}
 800af38:	4601      	mov	r1, r0
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	4805      	ldr	r0, [pc, #20]	; (800af54 <fiprintf+0x20>)
 800af3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af42:	6800      	ldr	r0, [r0, #0]
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	f000 fac5 	bl	800b4d4 <_vfiprintf_r>
 800af4a:	b002      	add	sp, #8
 800af4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af50:	b003      	add	sp, #12
 800af52:	4770      	bx	lr
 800af54:	20000074 	.word	0x20000074

0800af58 <_fwalk_reent>:
 800af58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af5c:	4606      	mov	r6, r0
 800af5e:	4688      	mov	r8, r1
 800af60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af64:	2700      	movs	r7, #0
 800af66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af6a:	f1b9 0901 	subs.w	r9, r9, #1
 800af6e:	d505      	bpl.n	800af7c <_fwalk_reent+0x24>
 800af70:	6824      	ldr	r4, [r4, #0]
 800af72:	2c00      	cmp	r4, #0
 800af74:	d1f7      	bne.n	800af66 <_fwalk_reent+0xe>
 800af76:	4638      	mov	r0, r7
 800af78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7c:	89ab      	ldrh	r3, [r5, #12]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d907      	bls.n	800af92 <_fwalk_reent+0x3a>
 800af82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af86:	3301      	adds	r3, #1
 800af88:	d003      	beq.n	800af92 <_fwalk_reent+0x3a>
 800af8a:	4629      	mov	r1, r5
 800af8c:	4630      	mov	r0, r6
 800af8e:	47c0      	blx	r8
 800af90:	4307      	orrs	r7, r0
 800af92:	3568      	adds	r5, #104	; 0x68
 800af94:	e7e9      	b.n	800af6a <_fwalk_reent+0x12>

0800af96 <__retarget_lock_init_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__retarget_lock_acquire_recursive>:
 800af98:	4770      	bx	lr

0800af9a <__retarget_lock_release_recursive>:
 800af9a:	4770      	bx	lr

0800af9c <__swhatbuf_r>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	460e      	mov	r6, r1
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	2900      	cmp	r1, #0
 800afa6:	b096      	sub	sp, #88	; 0x58
 800afa8:	4614      	mov	r4, r2
 800afaa:	461d      	mov	r5, r3
 800afac:	da07      	bge.n	800afbe <__swhatbuf_r+0x22>
 800afae:	2300      	movs	r3, #0
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	89b3      	ldrh	r3, [r6, #12]
 800afb4:	061a      	lsls	r2, r3, #24
 800afb6:	d410      	bmi.n	800afda <__swhatbuf_r+0x3e>
 800afb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afbc:	e00e      	b.n	800afdc <__swhatbuf_r+0x40>
 800afbe:	466a      	mov	r2, sp
 800afc0:	f000 fdca 	bl	800bb58 <_fstat_r>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	dbf2      	blt.n	800afae <__swhatbuf_r+0x12>
 800afc8:	9a01      	ldr	r2, [sp, #4]
 800afca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afd2:	425a      	negs	r2, r3
 800afd4:	415a      	adcs	r2, r3
 800afd6:	602a      	str	r2, [r5, #0]
 800afd8:	e7ee      	b.n	800afb8 <__swhatbuf_r+0x1c>
 800afda:	2340      	movs	r3, #64	; 0x40
 800afdc:	2000      	movs	r0, #0
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	b016      	add	sp, #88	; 0x58
 800afe2:	bd70      	pop	{r4, r5, r6, pc}

0800afe4 <__smakebuf_r>:
 800afe4:	898b      	ldrh	r3, [r1, #12]
 800afe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afe8:	079d      	lsls	r5, r3, #30
 800afea:	4606      	mov	r6, r0
 800afec:	460c      	mov	r4, r1
 800afee:	d507      	bpl.n	800b000 <__smakebuf_r+0x1c>
 800aff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	6123      	str	r3, [r4, #16]
 800aff8:	2301      	movs	r3, #1
 800affa:	6163      	str	r3, [r4, #20]
 800affc:	b002      	add	sp, #8
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	ab01      	add	r3, sp, #4
 800b002:	466a      	mov	r2, sp
 800b004:	f7ff ffca 	bl	800af9c <__swhatbuf_r>
 800b008:	9900      	ldr	r1, [sp, #0]
 800b00a:	4605      	mov	r5, r0
 800b00c:	4630      	mov	r0, r6
 800b00e:	f000 f881 	bl	800b114 <_malloc_r>
 800b012:	b948      	cbnz	r0, 800b028 <__smakebuf_r+0x44>
 800b014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b018:	059a      	lsls	r2, r3, #22
 800b01a:	d4ef      	bmi.n	800affc <__smakebuf_r+0x18>
 800b01c:	f023 0303 	bic.w	r3, r3, #3
 800b020:	f043 0302 	orr.w	r3, r3, #2
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	e7e3      	b.n	800aff0 <__smakebuf_r+0xc>
 800b028:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <__smakebuf_r+0x7c>)
 800b02a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	6020      	str	r0, [r4, #0]
 800b030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	9b00      	ldr	r3, [sp, #0]
 800b038:	6163      	str	r3, [r4, #20]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	6120      	str	r0, [r4, #16]
 800b03e:	b15b      	cbz	r3, 800b058 <__smakebuf_r+0x74>
 800b040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b044:	4630      	mov	r0, r6
 800b046:	f000 fd99 	bl	800bb7c <_isatty_r>
 800b04a:	b128      	cbz	r0, 800b058 <__smakebuf_r+0x74>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f023 0303 	bic.w	r3, r3, #3
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	89a0      	ldrh	r0, [r4, #12]
 800b05a:	4305      	orrs	r5, r0
 800b05c:	81a5      	strh	r5, [r4, #12]
 800b05e:	e7cd      	b.n	800affc <__smakebuf_r+0x18>
 800b060:	0800add1 	.word	0x0800add1

0800b064 <malloc>:
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <malloc+0xc>)
 800b066:	4601      	mov	r1, r0
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	f000 b853 	b.w	800b114 <_malloc_r>
 800b06e:	bf00      	nop
 800b070:	20000074 	.word	0x20000074

0800b074 <_free_r>:
 800b074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b076:	2900      	cmp	r1, #0
 800b078:	d048      	beq.n	800b10c <_free_r+0x98>
 800b07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b07e:	9001      	str	r0, [sp, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f1a1 0404 	sub.w	r4, r1, #4
 800b086:	bfb8      	it	lt
 800b088:	18e4      	addlt	r4, r4, r3
 800b08a:	f000 fdb3 	bl	800bbf4 <__malloc_lock>
 800b08e:	4a20      	ldr	r2, [pc, #128]	; (800b110 <_free_r+0x9c>)
 800b090:	9801      	ldr	r0, [sp, #4]
 800b092:	6813      	ldr	r3, [r2, #0]
 800b094:	4615      	mov	r5, r2
 800b096:	b933      	cbnz	r3, 800b0a6 <_free_r+0x32>
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	6014      	str	r4, [r2, #0]
 800b09c:	b003      	add	sp, #12
 800b09e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0a2:	f000 bdad 	b.w	800bc00 <__malloc_unlock>
 800b0a6:	42a3      	cmp	r3, r4
 800b0a8:	d90b      	bls.n	800b0c2 <_free_r+0x4e>
 800b0aa:	6821      	ldr	r1, [r4, #0]
 800b0ac:	1862      	adds	r2, r4, r1
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	bf04      	itt	eq
 800b0b2:	681a      	ldreq	r2, [r3, #0]
 800b0b4:	685b      	ldreq	r3, [r3, #4]
 800b0b6:	6063      	str	r3, [r4, #4]
 800b0b8:	bf04      	itt	eq
 800b0ba:	1852      	addeq	r2, r2, r1
 800b0bc:	6022      	streq	r2, [r4, #0]
 800b0be:	602c      	str	r4, [r5, #0]
 800b0c0:	e7ec      	b.n	800b09c <_free_r+0x28>
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b10b      	cbz	r3, 800b0cc <_free_r+0x58>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d9fa      	bls.n	800b0c2 <_free_r+0x4e>
 800b0cc:	6811      	ldr	r1, [r2, #0]
 800b0ce:	1855      	adds	r5, r2, r1
 800b0d0:	42a5      	cmp	r5, r4
 800b0d2:	d10b      	bne.n	800b0ec <_free_r+0x78>
 800b0d4:	6824      	ldr	r4, [r4, #0]
 800b0d6:	4421      	add	r1, r4
 800b0d8:	1854      	adds	r4, r2, r1
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	6011      	str	r1, [r2, #0]
 800b0de:	d1dd      	bne.n	800b09c <_free_r+0x28>
 800b0e0:	681c      	ldr	r4, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	6053      	str	r3, [r2, #4]
 800b0e6:	4421      	add	r1, r4
 800b0e8:	6011      	str	r1, [r2, #0]
 800b0ea:	e7d7      	b.n	800b09c <_free_r+0x28>
 800b0ec:	d902      	bls.n	800b0f4 <_free_r+0x80>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	e7d3      	b.n	800b09c <_free_r+0x28>
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	1961      	adds	r1, r4, r5
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	bf04      	itt	eq
 800b0fc:	6819      	ldreq	r1, [r3, #0]
 800b0fe:	685b      	ldreq	r3, [r3, #4]
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	bf04      	itt	eq
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	6054      	str	r4, [r2, #4]
 800b10a:	e7c7      	b.n	800b09c <_free_r+0x28>
 800b10c:	b003      	add	sp, #12
 800b10e:	bd30      	pop	{r4, r5, pc}
 800b110:	2000204c 	.word	0x2000204c

0800b114 <_malloc_r>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	1ccd      	adds	r5, r1, #3
 800b118:	f025 0503 	bic.w	r5, r5, #3
 800b11c:	3508      	adds	r5, #8
 800b11e:	2d0c      	cmp	r5, #12
 800b120:	bf38      	it	cc
 800b122:	250c      	movcc	r5, #12
 800b124:	2d00      	cmp	r5, #0
 800b126:	4606      	mov	r6, r0
 800b128:	db01      	blt.n	800b12e <_malloc_r+0x1a>
 800b12a:	42a9      	cmp	r1, r5
 800b12c:	d903      	bls.n	800b136 <_malloc_r+0x22>
 800b12e:	230c      	movs	r3, #12
 800b130:	6033      	str	r3, [r6, #0]
 800b132:	2000      	movs	r0, #0
 800b134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b136:	f000 fd5d 	bl	800bbf4 <__malloc_lock>
 800b13a:	4921      	ldr	r1, [pc, #132]	; (800b1c0 <_malloc_r+0xac>)
 800b13c:	680a      	ldr	r2, [r1, #0]
 800b13e:	4614      	mov	r4, r2
 800b140:	b99c      	cbnz	r4, 800b16a <_malloc_r+0x56>
 800b142:	4f20      	ldr	r7, [pc, #128]	; (800b1c4 <_malloc_r+0xb0>)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	b923      	cbnz	r3, 800b152 <_malloc_r+0x3e>
 800b148:	4621      	mov	r1, r4
 800b14a:	4630      	mov	r0, r6
 800b14c:	f000 fc86 	bl	800ba5c <_sbrk_r>
 800b150:	6038      	str	r0, [r7, #0]
 800b152:	4629      	mov	r1, r5
 800b154:	4630      	mov	r0, r6
 800b156:	f000 fc81 	bl	800ba5c <_sbrk_r>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	d123      	bne.n	800b1a6 <_malloc_r+0x92>
 800b15e:	230c      	movs	r3, #12
 800b160:	6033      	str	r3, [r6, #0]
 800b162:	4630      	mov	r0, r6
 800b164:	f000 fd4c 	bl	800bc00 <__malloc_unlock>
 800b168:	e7e3      	b.n	800b132 <_malloc_r+0x1e>
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	1b5b      	subs	r3, r3, r5
 800b16e:	d417      	bmi.n	800b1a0 <_malloc_r+0x8c>
 800b170:	2b0b      	cmp	r3, #11
 800b172:	d903      	bls.n	800b17c <_malloc_r+0x68>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	441c      	add	r4, r3
 800b178:	6025      	str	r5, [r4, #0]
 800b17a:	e004      	b.n	800b186 <_malloc_r+0x72>
 800b17c:	6863      	ldr	r3, [r4, #4]
 800b17e:	42a2      	cmp	r2, r4
 800b180:	bf0c      	ite	eq
 800b182:	600b      	streq	r3, [r1, #0]
 800b184:	6053      	strne	r3, [r2, #4]
 800b186:	4630      	mov	r0, r6
 800b188:	f000 fd3a 	bl	800bc00 <__malloc_unlock>
 800b18c:	f104 000b 	add.w	r0, r4, #11
 800b190:	1d23      	adds	r3, r4, #4
 800b192:	f020 0007 	bic.w	r0, r0, #7
 800b196:	1ac2      	subs	r2, r0, r3
 800b198:	d0cc      	beq.n	800b134 <_malloc_r+0x20>
 800b19a:	1a1b      	subs	r3, r3, r0
 800b19c:	50a3      	str	r3, [r4, r2]
 800b19e:	e7c9      	b.n	800b134 <_malloc_r+0x20>
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	6864      	ldr	r4, [r4, #4]
 800b1a4:	e7cc      	b.n	800b140 <_malloc_r+0x2c>
 800b1a6:	1cc4      	adds	r4, r0, #3
 800b1a8:	f024 0403 	bic.w	r4, r4, #3
 800b1ac:	42a0      	cmp	r0, r4
 800b1ae:	d0e3      	beq.n	800b178 <_malloc_r+0x64>
 800b1b0:	1a21      	subs	r1, r4, r0
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f000 fc52 	bl	800ba5c <_sbrk_r>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d1dd      	bne.n	800b178 <_malloc_r+0x64>
 800b1bc:	e7cf      	b.n	800b15e <_malloc_r+0x4a>
 800b1be:	bf00      	nop
 800b1c0:	2000204c 	.word	0x2000204c
 800b1c4:	20002050 	.word	0x20002050

0800b1c8 <__ssputs_r>:
 800b1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1cc:	688e      	ldr	r6, [r1, #8]
 800b1ce:	429e      	cmp	r6, r3
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	4690      	mov	r8, r2
 800b1d6:	461f      	mov	r7, r3
 800b1d8:	d838      	bhi.n	800b24c <__ssputs_r+0x84>
 800b1da:	898a      	ldrh	r2, [r1, #12]
 800b1dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1e0:	d032      	beq.n	800b248 <__ssputs_r+0x80>
 800b1e2:	6825      	ldr	r5, [r4, #0]
 800b1e4:	6909      	ldr	r1, [r1, #16]
 800b1e6:	eba5 0901 	sub.w	r9, r5, r1
 800b1ea:	6965      	ldr	r5, [r4, #20]
 800b1ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	444b      	add	r3, r9
 800b1f8:	106d      	asrs	r5, r5, #1
 800b1fa:	429d      	cmp	r5, r3
 800b1fc:	bf38      	it	cc
 800b1fe:	461d      	movcc	r5, r3
 800b200:	0553      	lsls	r3, r2, #21
 800b202:	d531      	bpl.n	800b268 <__ssputs_r+0xa0>
 800b204:	4629      	mov	r1, r5
 800b206:	f7ff ff85 	bl	800b114 <_malloc_r>
 800b20a:	4606      	mov	r6, r0
 800b20c:	b950      	cbnz	r0, 800b224 <__ssputs_r+0x5c>
 800b20e:	230c      	movs	r3, #12
 800b210:	f8ca 3000 	str.w	r3, [sl]
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b21a:	81a3      	strh	r3, [r4, #12]
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295
 800b220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b224:	6921      	ldr	r1, [r4, #16]
 800b226:	464a      	mov	r2, r9
 800b228:	f7ff fa80 	bl	800a72c <memcpy>
 800b22c:	89a3      	ldrh	r3, [r4, #12]
 800b22e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b236:	81a3      	strh	r3, [r4, #12]
 800b238:	6126      	str	r6, [r4, #16]
 800b23a:	6165      	str	r5, [r4, #20]
 800b23c:	444e      	add	r6, r9
 800b23e:	eba5 0509 	sub.w	r5, r5, r9
 800b242:	6026      	str	r6, [r4, #0]
 800b244:	60a5      	str	r5, [r4, #8]
 800b246:	463e      	mov	r6, r7
 800b248:	42be      	cmp	r6, r7
 800b24a:	d900      	bls.n	800b24e <__ssputs_r+0x86>
 800b24c:	463e      	mov	r6, r7
 800b24e:	4632      	mov	r2, r6
 800b250:	6820      	ldr	r0, [r4, #0]
 800b252:	4641      	mov	r1, r8
 800b254:	f000 fcb4 	bl	800bbc0 <memmove>
 800b258:	68a3      	ldr	r3, [r4, #8]
 800b25a:	6822      	ldr	r2, [r4, #0]
 800b25c:	1b9b      	subs	r3, r3, r6
 800b25e:	4432      	add	r2, r6
 800b260:	60a3      	str	r3, [r4, #8]
 800b262:	6022      	str	r2, [r4, #0]
 800b264:	2000      	movs	r0, #0
 800b266:	e7db      	b.n	800b220 <__ssputs_r+0x58>
 800b268:	462a      	mov	r2, r5
 800b26a:	f000 fccf 	bl	800bc0c <_realloc_r>
 800b26e:	4606      	mov	r6, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d1e1      	bne.n	800b238 <__ssputs_r+0x70>
 800b274:	6921      	ldr	r1, [r4, #16]
 800b276:	4650      	mov	r0, sl
 800b278:	f7ff fefc 	bl	800b074 <_free_r>
 800b27c:	e7c7      	b.n	800b20e <__ssputs_r+0x46>
	...

0800b280 <_svfiprintf_r>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	4698      	mov	r8, r3
 800b286:	898b      	ldrh	r3, [r1, #12]
 800b288:	061b      	lsls	r3, r3, #24
 800b28a:	b09d      	sub	sp, #116	; 0x74
 800b28c:	4607      	mov	r7, r0
 800b28e:	460d      	mov	r5, r1
 800b290:	4614      	mov	r4, r2
 800b292:	d50e      	bpl.n	800b2b2 <_svfiprintf_r+0x32>
 800b294:	690b      	ldr	r3, [r1, #16]
 800b296:	b963      	cbnz	r3, 800b2b2 <_svfiprintf_r+0x32>
 800b298:	2140      	movs	r1, #64	; 0x40
 800b29a:	f7ff ff3b 	bl	800b114 <_malloc_r>
 800b29e:	6028      	str	r0, [r5, #0]
 800b2a0:	6128      	str	r0, [r5, #16]
 800b2a2:	b920      	cbnz	r0, 800b2ae <_svfiprintf_r+0x2e>
 800b2a4:	230c      	movs	r3, #12
 800b2a6:	603b      	str	r3, [r7, #0]
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	e0d1      	b.n	800b452 <_svfiprintf_r+0x1d2>
 800b2ae:	2340      	movs	r3, #64	; 0x40
 800b2b0:	616b      	str	r3, [r5, #20]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b6:	2320      	movs	r3, #32
 800b2b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2c0:	2330      	movs	r3, #48	; 0x30
 800b2c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b46c <_svfiprintf_r+0x1ec>
 800b2c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ca:	f04f 0901 	mov.w	r9, #1
 800b2ce:	4623      	mov	r3, r4
 800b2d0:	469a      	mov	sl, r3
 800b2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d6:	b10a      	cbz	r2, 800b2dc <_svfiprintf_r+0x5c>
 800b2d8:	2a25      	cmp	r2, #37	; 0x25
 800b2da:	d1f9      	bne.n	800b2d0 <_svfiprintf_r+0x50>
 800b2dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b2e0:	d00b      	beq.n	800b2fa <_svfiprintf_r+0x7a>
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff ff6d 	bl	800b1c8 <__ssputs_r>
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f000 80aa 	beq.w	800b448 <_svfiprintf_r+0x1c8>
 800b2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f6:	445a      	add	r2, fp
 800b2f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80a2 	beq.w	800b448 <_svfiprintf_r+0x1c8>
 800b304:	2300      	movs	r3, #0
 800b306:	f04f 32ff 	mov.w	r2, #4294967295
 800b30a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30e:	f10a 0a01 	add.w	sl, sl, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	9307      	str	r3, [sp, #28]
 800b316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b31a:	931a      	str	r3, [sp, #104]	; 0x68
 800b31c:	4654      	mov	r4, sl
 800b31e:	2205      	movs	r2, #5
 800b320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b324:	4851      	ldr	r0, [pc, #324]	; (800b46c <_svfiprintf_r+0x1ec>)
 800b326:	f7f4 ff5b 	bl	80001e0 <memchr>
 800b32a:	9a04      	ldr	r2, [sp, #16]
 800b32c:	b9d8      	cbnz	r0, 800b366 <_svfiprintf_r+0xe6>
 800b32e:	06d0      	lsls	r0, r2, #27
 800b330:	bf44      	itt	mi
 800b332:	2320      	movmi	r3, #32
 800b334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b338:	0711      	lsls	r1, r2, #28
 800b33a:	bf44      	itt	mi
 800b33c:	232b      	movmi	r3, #43	; 0x2b
 800b33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b342:	f89a 3000 	ldrb.w	r3, [sl]
 800b346:	2b2a      	cmp	r3, #42	; 0x2a
 800b348:	d015      	beq.n	800b376 <_svfiprintf_r+0xf6>
 800b34a:	9a07      	ldr	r2, [sp, #28]
 800b34c:	4654      	mov	r4, sl
 800b34e:	2000      	movs	r0, #0
 800b350:	f04f 0c0a 	mov.w	ip, #10
 800b354:	4621      	mov	r1, r4
 800b356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b35a:	3b30      	subs	r3, #48	; 0x30
 800b35c:	2b09      	cmp	r3, #9
 800b35e:	d94e      	bls.n	800b3fe <_svfiprintf_r+0x17e>
 800b360:	b1b0      	cbz	r0, 800b390 <_svfiprintf_r+0x110>
 800b362:	9207      	str	r2, [sp, #28]
 800b364:	e014      	b.n	800b390 <_svfiprintf_r+0x110>
 800b366:	eba0 0308 	sub.w	r3, r0, r8
 800b36a:	fa09 f303 	lsl.w	r3, r9, r3
 800b36e:	4313      	orrs	r3, r2
 800b370:	9304      	str	r3, [sp, #16]
 800b372:	46a2      	mov	sl, r4
 800b374:	e7d2      	b.n	800b31c <_svfiprintf_r+0x9c>
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	1d19      	adds	r1, r3, #4
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	9103      	str	r1, [sp, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bfbb      	ittet	lt
 800b382:	425b      	neglt	r3, r3
 800b384:	f042 0202 	orrlt.w	r2, r2, #2
 800b388:	9307      	strge	r3, [sp, #28]
 800b38a:	9307      	strlt	r3, [sp, #28]
 800b38c:	bfb8      	it	lt
 800b38e:	9204      	strlt	r2, [sp, #16]
 800b390:	7823      	ldrb	r3, [r4, #0]
 800b392:	2b2e      	cmp	r3, #46	; 0x2e
 800b394:	d10c      	bne.n	800b3b0 <_svfiprintf_r+0x130>
 800b396:	7863      	ldrb	r3, [r4, #1]
 800b398:	2b2a      	cmp	r3, #42	; 0x2a
 800b39a:	d135      	bne.n	800b408 <_svfiprintf_r+0x188>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	1d1a      	adds	r2, r3, #4
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	9203      	str	r2, [sp, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bfb8      	it	lt
 800b3a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3ac:	3402      	adds	r4, #2
 800b3ae:	9305      	str	r3, [sp, #20]
 800b3b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b47c <_svfiprintf_r+0x1fc>
 800b3b4:	7821      	ldrb	r1, [r4, #0]
 800b3b6:	2203      	movs	r2, #3
 800b3b8:	4650      	mov	r0, sl
 800b3ba:	f7f4 ff11 	bl	80001e0 <memchr>
 800b3be:	b140      	cbz	r0, 800b3d2 <_svfiprintf_r+0x152>
 800b3c0:	2340      	movs	r3, #64	; 0x40
 800b3c2:	eba0 000a 	sub.w	r0, r0, sl
 800b3c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ca:	9b04      	ldr	r3, [sp, #16]
 800b3cc:	4303      	orrs	r3, r0
 800b3ce:	3401      	adds	r4, #1
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d6:	4826      	ldr	r0, [pc, #152]	; (800b470 <_svfiprintf_r+0x1f0>)
 800b3d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3dc:	2206      	movs	r2, #6
 800b3de:	f7f4 feff 	bl	80001e0 <memchr>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d038      	beq.n	800b458 <_svfiprintf_r+0x1d8>
 800b3e6:	4b23      	ldr	r3, [pc, #140]	; (800b474 <_svfiprintf_r+0x1f4>)
 800b3e8:	bb1b      	cbnz	r3, 800b432 <_svfiprintf_r+0x1b2>
 800b3ea:	9b03      	ldr	r3, [sp, #12]
 800b3ec:	3307      	adds	r3, #7
 800b3ee:	f023 0307 	bic.w	r3, r3, #7
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	9303      	str	r3, [sp, #12]
 800b3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f8:	4433      	add	r3, r6
 800b3fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b3fc:	e767      	b.n	800b2ce <_svfiprintf_r+0x4e>
 800b3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b402:	460c      	mov	r4, r1
 800b404:	2001      	movs	r0, #1
 800b406:	e7a5      	b.n	800b354 <_svfiprintf_r+0xd4>
 800b408:	2300      	movs	r3, #0
 800b40a:	3401      	adds	r4, #1
 800b40c:	9305      	str	r3, [sp, #20]
 800b40e:	4619      	mov	r1, r3
 800b410:	f04f 0c0a 	mov.w	ip, #10
 800b414:	4620      	mov	r0, r4
 800b416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b41a:	3a30      	subs	r2, #48	; 0x30
 800b41c:	2a09      	cmp	r2, #9
 800b41e:	d903      	bls.n	800b428 <_svfiprintf_r+0x1a8>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0c5      	beq.n	800b3b0 <_svfiprintf_r+0x130>
 800b424:	9105      	str	r1, [sp, #20]
 800b426:	e7c3      	b.n	800b3b0 <_svfiprintf_r+0x130>
 800b428:	fb0c 2101 	mla	r1, ip, r1, r2
 800b42c:	4604      	mov	r4, r0
 800b42e:	2301      	movs	r3, #1
 800b430:	e7f0      	b.n	800b414 <_svfiprintf_r+0x194>
 800b432:	ab03      	add	r3, sp, #12
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	462a      	mov	r2, r5
 800b438:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <_svfiprintf_r+0x1f8>)
 800b43a:	a904      	add	r1, sp, #16
 800b43c:	4638      	mov	r0, r7
 800b43e:	f3af 8000 	nop.w
 800b442:	1c42      	adds	r2, r0, #1
 800b444:	4606      	mov	r6, r0
 800b446:	d1d6      	bne.n	800b3f6 <_svfiprintf_r+0x176>
 800b448:	89ab      	ldrh	r3, [r5, #12]
 800b44a:	065b      	lsls	r3, r3, #25
 800b44c:	f53f af2c 	bmi.w	800b2a8 <_svfiprintf_r+0x28>
 800b450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b452:	b01d      	add	sp, #116	; 0x74
 800b454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b458:	ab03      	add	r3, sp, #12
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	462a      	mov	r2, r5
 800b45e:	4b06      	ldr	r3, [pc, #24]	; (800b478 <_svfiprintf_r+0x1f8>)
 800b460:	a904      	add	r1, sp, #16
 800b462:	4638      	mov	r0, r7
 800b464:	f000 f9d4 	bl	800b810 <_printf_i>
 800b468:	e7eb      	b.n	800b442 <_svfiprintf_r+0x1c2>
 800b46a:	bf00      	nop
 800b46c:	0800cd24 	.word	0x0800cd24
 800b470:	0800cd2e 	.word	0x0800cd2e
 800b474:	00000000 	.word	0x00000000
 800b478:	0800b1c9 	.word	0x0800b1c9
 800b47c:	0800cd2a 	.word	0x0800cd2a

0800b480 <__sfputc_r>:
 800b480:	6893      	ldr	r3, [r2, #8]
 800b482:	3b01      	subs	r3, #1
 800b484:	2b00      	cmp	r3, #0
 800b486:	b410      	push	{r4}
 800b488:	6093      	str	r3, [r2, #8]
 800b48a:	da08      	bge.n	800b49e <__sfputc_r+0x1e>
 800b48c:	6994      	ldr	r4, [r2, #24]
 800b48e:	42a3      	cmp	r3, r4
 800b490:	db01      	blt.n	800b496 <__sfputc_r+0x16>
 800b492:	290a      	cmp	r1, #10
 800b494:	d103      	bne.n	800b49e <__sfputc_r+0x1e>
 800b496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b49a:	f7ff bad5 	b.w	800aa48 <__swbuf_r>
 800b49e:	6813      	ldr	r3, [r2, #0]
 800b4a0:	1c58      	adds	r0, r3, #1
 800b4a2:	6010      	str	r0, [r2, #0]
 800b4a4:	7019      	strb	r1, [r3, #0]
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <__sfputs_r>:
 800b4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	460f      	mov	r7, r1
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	18d5      	adds	r5, r2, r3
 800b4b8:	42ac      	cmp	r4, r5
 800b4ba:	d101      	bne.n	800b4c0 <__sfputs_r+0x12>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e007      	b.n	800b4d0 <__sfputs_r+0x22>
 800b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c4:	463a      	mov	r2, r7
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ffda 	bl	800b480 <__sfputc_r>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d1f3      	bne.n	800b4b8 <__sfputs_r+0xa>
 800b4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4d4 <_vfiprintf_r>:
 800b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	460d      	mov	r5, r1
 800b4da:	b09d      	sub	sp, #116	; 0x74
 800b4dc:	4614      	mov	r4, r2
 800b4de:	4698      	mov	r8, r3
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	b118      	cbz	r0, 800b4ec <_vfiprintf_r+0x18>
 800b4e4:	6983      	ldr	r3, [r0, #24]
 800b4e6:	b90b      	cbnz	r3, 800b4ec <_vfiprintf_r+0x18>
 800b4e8:	f7ff fca6 	bl	800ae38 <__sinit>
 800b4ec:	4b89      	ldr	r3, [pc, #548]	; (800b714 <_vfiprintf_r+0x240>)
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	d11b      	bne.n	800b52a <_vfiprintf_r+0x56>
 800b4f2:	6875      	ldr	r5, [r6, #4]
 800b4f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4f6:	07d9      	lsls	r1, r3, #31
 800b4f8:	d405      	bmi.n	800b506 <_vfiprintf_r+0x32>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	059a      	lsls	r2, r3, #22
 800b4fe:	d402      	bmi.n	800b506 <_vfiprintf_r+0x32>
 800b500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b502:	f7ff fd49 	bl	800af98 <__retarget_lock_acquire_recursive>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	071b      	lsls	r3, r3, #28
 800b50a:	d501      	bpl.n	800b510 <_vfiprintf_r+0x3c>
 800b50c:	692b      	ldr	r3, [r5, #16]
 800b50e:	b9eb      	cbnz	r3, 800b54c <_vfiprintf_r+0x78>
 800b510:	4629      	mov	r1, r5
 800b512:	4630      	mov	r0, r6
 800b514:	f7ff faea 	bl	800aaec <__swsetup_r>
 800b518:	b1c0      	cbz	r0, 800b54c <_vfiprintf_r+0x78>
 800b51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b51c:	07dc      	lsls	r4, r3, #31
 800b51e:	d50e      	bpl.n	800b53e <_vfiprintf_r+0x6a>
 800b520:	f04f 30ff 	mov.w	r0, #4294967295
 800b524:	b01d      	add	sp, #116	; 0x74
 800b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52a:	4b7b      	ldr	r3, [pc, #492]	; (800b718 <_vfiprintf_r+0x244>)
 800b52c:	429d      	cmp	r5, r3
 800b52e:	d101      	bne.n	800b534 <_vfiprintf_r+0x60>
 800b530:	68b5      	ldr	r5, [r6, #8]
 800b532:	e7df      	b.n	800b4f4 <_vfiprintf_r+0x20>
 800b534:	4b79      	ldr	r3, [pc, #484]	; (800b71c <_vfiprintf_r+0x248>)
 800b536:	429d      	cmp	r5, r3
 800b538:	bf08      	it	eq
 800b53a:	68f5      	ldreq	r5, [r6, #12]
 800b53c:	e7da      	b.n	800b4f4 <_vfiprintf_r+0x20>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	0598      	lsls	r0, r3, #22
 800b542:	d4ed      	bmi.n	800b520 <_vfiprintf_r+0x4c>
 800b544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b546:	f7ff fd28 	bl	800af9a <__retarget_lock_release_recursive>
 800b54a:	e7e9      	b.n	800b520 <_vfiprintf_r+0x4c>
 800b54c:	2300      	movs	r3, #0
 800b54e:	9309      	str	r3, [sp, #36]	; 0x24
 800b550:	2320      	movs	r3, #32
 800b552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b556:	f8cd 800c 	str.w	r8, [sp, #12]
 800b55a:	2330      	movs	r3, #48	; 0x30
 800b55c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b720 <_vfiprintf_r+0x24c>
 800b560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b564:	f04f 0901 	mov.w	r9, #1
 800b568:	4623      	mov	r3, r4
 800b56a:	469a      	mov	sl, r3
 800b56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b570:	b10a      	cbz	r2, 800b576 <_vfiprintf_r+0xa2>
 800b572:	2a25      	cmp	r2, #37	; 0x25
 800b574:	d1f9      	bne.n	800b56a <_vfiprintf_r+0x96>
 800b576:	ebba 0b04 	subs.w	fp, sl, r4
 800b57a:	d00b      	beq.n	800b594 <_vfiprintf_r+0xc0>
 800b57c:	465b      	mov	r3, fp
 800b57e:	4622      	mov	r2, r4
 800b580:	4629      	mov	r1, r5
 800b582:	4630      	mov	r0, r6
 800b584:	f7ff ff93 	bl	800b4ae <__sfputs_r>
 800b588:	3001      	adds	r0, #1
 800b58a:	f000 80aa 	beq.w	800b6e2 <_vfiprintf_r+0x20e>
 800b58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b590:	445a      	add	r2, fp
 800b592:	9209      	str	r2, [sp, #36]	; 0x24
 800b594:	f89a 3000 	ldrb.w	r3, [sl]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 80a2 	beq.w	800b6e2 <_vfiprintf_r+0x20e>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a8:	f10a 0a01 	add.w	sl, sl, #1
 800b5ac:	9304      	str	r3, [sp, #16]
 800b5ae:	9307      	str	r3, [sp, #28]
 800b5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5b6:	4654      	mov	r4, sl
 800b5b8:	2205      	movs	r2, #5
 800b5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5be:	4858      	ldr	r0, [pc, #352]	; (800b720 <_vfiprintf_r+0x24c>)
 800b5c0:	f7f4 fe0e 	bl	80001e0 <memchr>
 800b5c4:	9a04      	ldr	r2, [sp, #16]
 800b5c6:	b9d8      	cbnz	r0, 800b600 <_vfiprintf_r+0x12c>
 800b5c8:	06d1      	lsls	r1, r2, #27
 800b5ca:	bf44      	itt	mi
 800b5cc:	2320      	movmi	r3, #32
 800b5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d2:	0713      	lsls	r3, r2, #28
 800b5d4:	bf44      	itt	mi
 800b5d6:	232b      	movmi	r3, #43	; 0x2b
 800b5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e2:	d015      	beq.n	800b610 <_vfiprintf_r+0x13c>
 800b5e4:	9a07      	ldr	r2, [sp, #28]
 800b5e6:	4654      	mov	r4, sl
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f04f 0c0a 	mov.w	ip, #10
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5f4:	3b30      	subs	r3, #48	; 0x30
 800b5f6:	2b09      	cmp	r3, #9
 800b5f8:	d94e      	bls.n	800b698 <_vfiprintf_r+0x1c4>
 800b5fa:	b1b0      	cbz	r0, 800b62a <_vfiprintf_r+0x156>
 800b5fc:	9207      	str	r2, [sp, #28]
 800b5fe:	e014      	b.n	800b62a <_vfiprintf_r+0x156>
 800b600:	eba0 0308 	sub.w	r3, r0, r8
 800b604:	fa09 f303 	lsl.w	r3, r9, r3
 800b608:	4313      	orrs	r3, r2
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	46a2      	mov	sl, r4
 800b60e:	e7d2      	b.n	800b5b6 <_vfiprintf_r+0xe2>
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	1d19      	adds	r1, r3, #4
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	9103      	str	r1, [sp, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bfbb      	ittet	lt
 800b61c:	425b      	neglt	r3, r3
 800b61e:	f042 0202 	orrlt.w	r2, r2, #2
 800b622:	9307      	strge	r3, [sp, #28]
 800b624:	9307      	strlt	r3, [sp, #28]
 800b626:	bfb8      	it	lt
 800b628:	9204      	strlt	r2, [sp, #16]
 800b62a:	7823      	ldrb	r3, [r4, #0]
 800b62c:	2b2e      	cmp	r3, #46	; 0x2e
 800b62e:	d10c      	bne.n	800b64a <_vfiprintf_r+0x176>
 800b630:	7863      	ldrb	r3, [r4, #1]
 800b632:	2b2a      	cmp	r3, #42	; 0x2a
 800b634:	d135      	bne.n	800b6a2 <_vfiprintf_r+0x1ce>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	1d1a      	adds	r2, r3, #4
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	9203      	str	r2, [sp, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	bfb8      	it	lt
 800b642:	f04f 33ff 	movlt.w	r3, #4294967295
 800b646:	3402      	adds	r4, #2
 800b648:	9305      	str	r3, [sp, #20]
 800b64a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b730 <_vfiprintf_r+0x25c>
 800b64e:	7821      	ldrb	r1, [r4, #0]
 800b650:	2203      	movs	r2, #3
 800b652:	4650      	mov	r0, sl
 800b654:	f7f4 fdc4 	bl	80001e0 <memchr>
 800b658:	b140      	cbz	r0, 800b66c <_vfiprintf_r+0x198>
 800b65a:	2340      	movs	r3, #64	; 0x40
 800b65c:	eba0 000a 	sub.w	r0, r0, sl
 800b660:	fa03 f000 	lsl.w	r0, r3, r0
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	4303      	orrs	r3, r0
 800b668:	3401      	adds	r4, #1
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b670:	482c      	ldr	r0, [pc, #176]	; (800b724 <_vfiprintf_r+0x250>)
 800b672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b676:	2206      	movs	r2, #6
 800b678:	f7f4 fdb2 	bl	80001e0 <memchr>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d03f      	beq.n	800b700 <_vfiprintf_r+0x22c>
 800b680:	4b29      	ldr	r3, [pc, #164]	; (800b728 <_vfiprintf_r+0x254>)
 800b682:	bb1b      	cbnz	r3, 800b6cc <_vfiprintf_r+0x1f8>
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	3307      	adds	r3, #7
 800b688:	f023 0307 	bic.w	r3, r3, #7
 800b68c:	3308      	adds	r3, #8
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b692:	443b      	add	r3, r7
 800b694:	9309      	str	r3, [sp, #36]	; 0x24
 800b696:	e767      	b.n	800b568 <_vfiprintf_r+0x94>
 800b698:	fb0c 3202 	mla	r2, ip, r2, r3
 800b69c:	460c      	mov	r4, r1
 800b69e:	2001      	movs	r0, #1
 800b6a0:	e7a5      	b.n	800b5ee <_vfiprintf_r+0x11a>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	3401      	adds	r4, #1
 800b6a6:	9305      	str	r3, [sp, #20]
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	f04f 0c0a 	mov.w	ip, #10
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6b4:	3a30      	subs	r2, #48	; 0x30
 800b6b6:	2a09      	cmp	r2, #9
 800b6b8:	d903      	bls.n	800b6c2 <_vfiprintf_r+0x1ee>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d0c5      	beq.n	800b64a <_vfiprintf_r+0x176>
 800b6be:	9105      	str	r1, [sp, #20]
 800b6c0:	e7c3      	b.n	800b64a <_vfiprintf_r+0x176>
 800b6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e7f0      	b.n	800b6ae <_vfiprintf_r+0x1da>
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	4b16      	ldr	r3, [pc, #88]	; (800b72c <_vfiprintf_r+0x258>)
 800b6d4:	a904      	add	r1, sp, #16
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f3af 8000 	nop.w
 800b6dc:	4607      	mov	r7, r0
 800b6de:	1c78      	adds	r0, r7, #1
 800b6e0:	d1d6      	bne.n	800b690 <_vfiprintf_r+0x1bc>
 800b6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6e4:	07d9      	lsls	r1, r3, #31
 800b6e6:	d405      	bmi.n	800b6f4 <_vfiprintf_r+0x220>
 800b6e8:	89ab      	ldrh	r3, [r5, #12]
 800b6ea:	059a      	lsls	r2, r3, #22
 800b6ec:	d402      	bmi.n	800b6f4 <_vfiprintf_r+0x220>
 800b6ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6f0:	f7ff fc53 	bl	800af9a <__retarget_lock_release_recursive>
 800b6f4:	89ab      	ldrh	r3, [r5, #12]
 800b6f6:	065b      	lsls	r3, r3, #25
 800b6f8:	f53f af12 	bmi.w	800b520 <_vfiprintf_r+0x4c>
 800b6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6fe:	e711      	b.n	800b524 <_vfiprintf_r+0x50>
 800b700:	ab03      	add	r3, sp, #12
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	462a      	mov	r2, r5
 800b706:	4b09      	ldr	r3, [pc, #36]	; (800b72c <_vfiprintf_r+0x258>)
 800b708:	a904      	add	r1, sp, #16
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 f880 	bl	800b810 <_printf_i>
 800b710:	e7e4      	b.n	800b6dc <_vfiprintf_r+0x208>
 800b712:	bf00      	nop
 800b714:	0800cce4 	.word	0x0800cce4
 800b718:	0800cd04 	.word	0x0800cd04
 800b71c:	0800ccc4 	.word	0x0800ccc4
 800b720:	0800cd24 	.word	0x0800cd24
 800b724:	0800cd2e 	.word	0x0800cd2e
 800b728:	00000000 	.word	0x00000000
 800b72c:	0800b4af 	.word	0x0800b4af
 800b730:	0800cd2a 	.word	0x0800cd2a

0800b734 <_printf_common>:
 800b734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b738:	4616      	mov	r6, r2
 800b73a:	4699      	mov	r9, r3
 800b73c:	688a      	ldr	r2, [r1, #8]
 800b73e:	690b      	ldr	r3, [r1, #16]
 800b740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b744:	4293      	cmp	r3, r2
 800b746:	bfb8      	it	lt
 800b748:	4613      	movlt	r3, r2
 800b74a:	6033      	str	r3, [r6, #0]
 800b74c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b750:	4607      	mov	r7, r0
 800b752:	460c      	mov	r4, r1
 800b754:	b10a      	cbz	r2, 800b75a <_printf_common+0x26>
 800b756:	3301      	adds	r3, #1
 800b758:	6033      	str	r3, [r6, #0]
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	0699      	lsls	r1, r3, #26
 800b75e:	bf42      	ittt	mi
 800b760:	6833      	ldrmi	r3, [r6, #0]
 800b762:	3302      	addmi	r3, #2
 800b764:	6033      	strmi	r3, [r6, #0]
 800b766:	6825      	ldr	r5, [r4, #0]
 800b768:	f015 0506 	ands.w	r5, r5, #6
 800b76c:	d106      	bne.n	800b77c <_printf_common+0x48>
 800b76e:	f104 0a19 	add.w	sl, r4, #25
 800b772:	68e3      	ldr	r3, [r4, #12]
 800b774:	6832      	ldr	r2, [r6, #0]
 800b776:	1a9b      	subs	r3, r3, r2
 800b778:	42ab      	cmp	r3, r5
 800b77a:	dc26      	bgt.n	800b7ca <_printf_common+0x96>
 800b77c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b780:	1e13      	subs	r3, r2, #0
 800b782:	6822      	ldr	r2, [r4, #0]
 800b784:	bf18      	it	ne
 800b786:	2301      	movne	r3, #1
 800b788:	0692      	lsls	r2, r2, #26
 800b78a:	d42b      	bmi.n	800b7e4 <_printf_common+0xb0>
 800b78c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b790:	4649      	mov	r1, r9
 800b792:	4638      	mov	r0, r7
 800b794:	47c0      	blx	r8
 800b796:	3001      	adds	r0, #1
 800b798:	d01e      	beq.n	800b7d8 <_printf_common+0xa4>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	68e5      	ldr	r5, [r4, #12]
 800b79e:	6832      	ldr	r2, [r6, #0]
 800b7a0:	f003 0306 	and.w	r3, r3, #6
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	bf08      	it	eq
 800b7a8:	1aad      	subeq	r5, r5, r2
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	6922      	ldr	r2, [r4, #16]
 800b7ae:	bf0c      	ite	eq
 800b7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7b4:	2500      	movne	r5, #0
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	bfc4      	itt	gt
 800b7ba:	1a9b      	subgt	r3, r3, r2
 800b7bc:	18ed      	addgt	r5, r5, r3
 800b7be:	2600      	movs	r6, #0
 800b7c0:	341a      	adds	r4, #26
 800b7c2:	42b5      	cmp	r5, r6
 800b7c4:	d11a      	bne.n	800b7fc <_printf_common+0xc8>
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	e008      	b.n	800b7dc <_printf_common+0xa8>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4652      	mov	r2, sl
 800b7ce:	4649      	mov	r1, r9
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	47c0      	blx	r8
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d103      	bne.n	800b7e0 <_printf_common+0xac>
 800b7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e0:	3501      	adds	r5, #1
 800b7e2:	e7c6      	b.n	800b772 <_printf_common+0x3e>
 800b7e4:	18e1      	adds	r1, r4, r3
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	2030      	movs	r0, #48	; 0x30
 800b7ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7ee:	4422      	add	r2, r4
 800b7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7f8:	3302      	adds	r3, #2
 800b7fa:	e7c7      	b.n	800b78c <_printf_common+0x58>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	4622      	mov	r2, r4
 800b800:	4649      	mov	r1, r9
 800b802:	4638      	mov	r0, r7
 800b804:	47c0      	blx	r8
 800b806:	3001      	adds	r0, #1
 800b808:	d0e6      	beq.n	800b7d8 <_printf_common+0xa4>
 800b80a:	3601      	adds	r6, #1
 800b80c:	e7d9      	b.n	800b7c2 <_printf_common+0x8e>
	...

0800b810 <_printf_i>:
 800b810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b814:	460c      	mov	r4, r1
 800b816:	4691      	mov	r9, r2
 800b818:	7e27      	ldrb	r7, [r4, #24]
 800b81a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b81c:	2f78      	cmp	r7, #120	; 0x78
 800b81e:	4680      	mov	r8, r0
 800b820:	469a      	mov	sl, r3
 800b822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b826:	d807      	bhi.n	800b838 <_printf_i+0x28>
 800b828:	2f62      	cmp	r7, #98	; 0x62
 800b82a:	d80a      	bhi.n	800b842 <_printf_i+0x32>
 800b82c:	2f00      	cmp	r7, #0
 800b82e:	f000 80d8 	beq.w	800b9e2 <_printf_i+0x1d2>
 800b832:	2f58      	cmp	r7, #88	; 0x58
 800b834:	f000 80a3 	beq.w	800b97e <_printf_i+0x16e>
 800b838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b83c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b840:	e03a      	b.n	800b8b8 <_printf_i+0xa8>
 800b842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b846:	2b15      	cmp	r3, #21
 800b848:	d8f6      	bhi.n	800b838 <_printf_i+0x28>
 800b84a:	a001      	add	r0, pc, #4	; (adr r0, 800b850 <_printf_i+0x40>)
 800b84c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b850:	0800b8a9 	.word	0x0800b8a9
 800b854:	0800b8bd 	.word	0x0800b8bd
 800b858:	0800b839 	.word	0x0800b839
 800b85c:	0800b839 	.word	0x0800b839
 800b860:	0800b839 	.word	0x0800b839
 800b864:	0800b839 	.word	0x0800b839
 800b868:	0800b8bd 	.word	0x0800b8bd
 800b86c:	0800b839 	.word	0x0800b839
 800b870:	0800b839 	.word	0x0800b839
 800b874:	0800b839 	.word	0x0800b839
 800b878:	0800b839 	.word	0x0800b839
 800b87c:	0800b9c9 	.word	0x0800b9c9
 800b880:	0800b8ed 	.word	0x0800b8ed
 800b884:	0800b9ab 	.word	0x0800b9ab
 800b888:	0800b839 	.word	0x0800b839
 800b88c:	0800b839 	.word	0x0800b839
 800b890:	0800b9eb 	.word	0x0800b9eb
 800b894:	0800b839 	.word	0x0800b839
 800b898:	0800b8ed 	.word	0x0800b8ed
 800b89c:	0800b839 	.word	0x0800b839
 800b8a0:	0800b839 	.word	0x0800b839
 800b8a4:	0800b9b3 	.word	0x0800b9b3
 800b8a8:	680b      	ldr	r3, [r1, #0]
 800b8aa:	1d1a      	adds	r2, r3, #4
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	600a      	str	r2, [r1, #0]
 800b8b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e0a3      	b.n	800ba04 <_printf_i+0x1f4>
 800b8bc:	6825      	ldr	r5, [r4, #0]
 800b8be:	6808      	ldr	r0, [r1, #0]
 800b8c0:	062e      	lsls	r6, r5, #24
 800b8c2:	f100 0304 	add.w	r3, r0, #4
 800b8c6:	d50a      	bpl.n	800b8de <_printf_i+0xce>
 800b8c8:	6805      	ldr	r5, [r0, #0]
 800b8ca:	600b      	str	r3, [r1, #0]
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	da03      	bge.n	800b8d8 <_printf_i+0xc8>
 800b8d0:	232d      	movs	r3, #45	; 0x2d
 800b8d2:	426d      	negs	r5, r5
 800b8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d8:	485e      	ldr	r0, [pc, #376]	; (800ba54 <_printf_i+0x244>)
 800b8da:	230a      	movs	r3, #10
 800b8dc:	e019      	b.n	800b912 <_printf_i+0x102>
 800b8de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b8e2:	6805      	ldr	r5, [r0, #0]
 800b8e4:	600b      	str	r3, [r1, #0]
 800b8e6:	bf18      	it	ne
 800b8e8:	b22d      	sxthne	r5, r5
 800b8ea:	e7ef      	b.n	800b8cc <_printf_i+0xbc>
 800b8ec:	680b      	ldr	r3, [r1, #0]
 800b8ee:	6825      	ldr	r5, [r4, #0]
 800b8f0:	1d18      	adds	r0, r3, #4
 800b8f2:	6008      	str	r0, [r1, #0]
 800b8f4:	0628      	lsls	r0, r5, #24
 800b8f6:	d501      	bpl.n	800b8fc <_printf_i+0xec>
 800b8f8:	681d      	ldr	r5, [r3, #0]
 800b8fa:	e002      	b.n	800b902 <_printf_i+0xf2>
 800b8fc:	0669      	lsls	r1, r5, #25
 800b8fe:	d5fb      	bpl.n	800b8f8 <_printf_i+0xe8>
 800b900:	881d      	ldrh	r5, [r3, #0]
 800b902:	4854      	ldr	r0, [pc, #336]	; (800ba54 <_printf_i+0x244>)
 800b904:	2f6f      	cmp	r7, #111	; 0x6f
 800b906:	bf0c      	ite	eq
 800b908:	2308      	moveq	r3, #8
 800b90a:	230a      	movne	r3, #10
 800b90c:	2100      	movs	r1, #0
 800b90e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b912:	6866      	ldr	r6, [r4, #4]
 800b914:	60a6      	str	r6, [r4, #8]
 800b916:	2e00      	cmp	r6, #0
 800b918:	bfa2      	ittt	ge
 800b91a:	6821      	ldrge	r1, [r4, #0]
 800b91c:	f021 0104 	bicge.w	r1, r1, #4
 800b920:	6021      	strge	r1, [r4, #0]
 800b922:	b90d      	cbnz	r5, 800b928 <_printf_i+0x118>
 800b924:	2e00      	cmp	r6, #0
 800b926:	d04d      	beq.n	800b9c4 <_printf_i+0x1b4>
 800b928:	4616      	mov	r6, r2
 800b92a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b92e:	fb03 5711 	mls	r7, r3, r1, r5
 800b932:	5dc7      	ldrb	r7, [r0, r7]
 800b934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b938:	462f      	mov	r7, r5
 800b93a:	42bb      	cmp	r3, r7
 800b93c:	460d      	mov	r5, r1
 800b93e:	d9f4      	bls.n	800b92a <_printf_i+0x11a>
 800b940:	2b08      	cmp	r3, #8
 800b942:	d10b      	bne.n	800b95c <_printf_i+0x14c>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	07df      	lsls	r7, r3, #31
 800b948:	d508      	bpl.n	800b95c <_printf_i+0x14c>
 800b94a:	6923      	ldr	r3, [r4, #16]
 800b94c:	6861      	ldr	r1, [r4, #4]
 800b94e:	4299      	cmp	r1, r3
 800b950:	bfde      	ittt	le
 800b952:	2330      	movle	r3, #48	; 0x30
 800b954:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b95c:	1b92      	subs	r2, r2, r6
 800b95e:	6122      	str	r2, [r4, #16]
 800b960:	f8cd a000 	str.w	sl, [sp]
 800b964:	464b      	mov	r3, r9
 800b966:	aa03      	add	r2, sp, #12
 800b968:	4621      	mov	r1, r4
 800b96a:	4640      	mov	r0, r8
 800b96c:	f7ff fee2 	bl	800b734 <_printf_common>
 800b970:	3001      	adds	r0, #1
 800b972:	d14c      	bne.n	800ba0e <_printf_i+0x1fe>
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	b004      	add	sp, #16
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97e:	4835      	ldr	r0, [pc, #212]	; (800ba54 <_printf_i+0x244>)
 800b980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	680e      	ldr	r6, [r1, #0]
 800b988:	061f      	lsls	r7, r3, #24
 800b98a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b98e:	600e      	str	r6, [r1, #0]
 800b990:	d514      	bpl.n	800b9bc <_printf_i+0x1ac>
 800b992:	07d9      	lsls	r1, r3, #31
 800b994:	bf44      	itt	mi
 800b996:	f043 0320 	orrmi.w	r3, r3, #32
 800b99a:	6023      	strmi	r3, [r4, #0]
 800b99c:	b91d      	cbnz	r5, 800b9a6 <_printf_i+0x196>
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	f023 0320 	bic.w	r3, r3, #32
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	2310      	movs	r3, #16
 800b9a8:	e7b0      	b.n	800b90c <_printf_i+0xfc>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	2378      	movs	r3, #120	; 0x78
 800b9b4:	4828      	ldr	r0, [pc, #160]	; (800ba58 <_printf_i+0x248>)
 800b9b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9ba:	e7e3      	b.n	800b984 <_printf_i+0x174>
 800b9bc:	065e      	lsls	r6, r3, #25
 800b9be:	bf48      	it	mi
 800b9c0:	b2ad      	uxthmi	r5, r5
 800b9c2:	e7e6      	b.n	800b992 <_printf_i+0x182>
 800b9c4:	4616      	mov	r6, r2
 800b9c6:	e7bb      	b.n	800b940 <_printf_i+0x130>
 800b9c8:	680b      	ldr	r3, [r1, #0]
 800b9ca:	6826      	ldr	r6, [r4, #0]
 800b9cc:	6960      	ldr	r0, [r4, #20]
 800b9ce:	1d1d      	adds	r5, r3, #4
 800b9d0:	600d      	str	r5, [r1, #0]
 800b9d2:	0635      	lsls	r5, r6, #24
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	d501      	bpl.n	800b9dc <_printf_i+0x1cc>
 800b9d8:	6018      	str	r0, [r3, #0]
 800b9da:	e002      	b.n	800b9e2 <_printf_i+0x1d2>
 800b9dc:	0671      	lsls	r1, r6, #25
 800b9de:	d5fb      	bpl.n	800b9d8 <_printf_i+0x1c8>
 800b9e0:	8018      	strh	r0, [r3, #0]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	6123      	str	r3, [r4, #16]
 800b9e6:	4616      	mov	r6, r2
 800b9e8:	e7ba      	b.n	800b960 <_printf_i+0x150>
 800b9ea:	680b      	ldr	r3, [r1, #0]
 800b9ec:	1d1a      	adds	r2, r3, #4
 800b9ee:	600a      	str	r2, [r1, #0]
 800b9f0:	681e      	ldr	r6, [r3, #0]
 800b9f2:	6862      	ldr	r2, [r4, #4]
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7f4 fbf2 	bl	80001e0 <memchr>
 800b9fc:	b108      	cbz	r0, 800ba02 <_printf_i+0x1f2>
 800b9fe:	1b80      	subs	r0, r0, r6
 800ba00:	6060      	str	r0, [r4, #4]
 800ba02:	6863      	ldr	r3, [r4, #4]
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	2300      	movs	r3, #0
 800ba08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba0c:	e7a8      	b.n	800b960 <_printf_i+0x150>
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	4632      	mov	r2, r6
 800ba12:	4649      	mov	r1, r9
 800ba14:	4640      	mov	r0, r8
 800ba16:	47d0      	blx	sl
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d0ab      	beq.n	800b974 <_printf_i+0x164>
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	079b      	lsls	r3, r3, #30
 800ba20:	d413      	bmi.n	800ba4a <_printf_i+0x23a>
 800ba22:	68e0      	ldr	r0, [r4, #12]
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	4298      	cmp	r0, r3
 800ba28:	bfb8      	it	lt
 800ba2a:	4618      	movlt	r0, r3
 800ba2c:	e7a4      	b.n	800b978 <_printf_i+0x168>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4632      	mov	r2, r6
 800ba32:	4649      	mov	r1, r9
 800ba34:	4640      	mov	r0, r8
 800ba36:	47d0      	blx	sl
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d09b      	beq.n	800b974 <_printf_i+0x164>
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	68e3      	ldr	r3, [r4, #12]
 800ba40:	9903      	ldr	r1, [sp, #12]
 800ba42:	1a5b      	subs	r3, r3, r1
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dcf2      	bgt.n	800ba2e <_printf_i+0x21e>
 800ba48:	e7eb      	b.n	800ba22 <_printf_i+0x212>
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	f104 0619 	add.w	r6, r4, #25
 800ba50:	e7f5      	b.n	800ba3e <_printf_i+0x22e>
 800ba52:	bf00      	nop
 800ba54:	0800cd35 	.word	0x0800cd35
 800ba58:	0800cd46 	.word	0x0800cd46

0800ba5c <_sbrk_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d06      	ldr	r5, [pc, #24]	; (800ba78 <_sbrk_r+0x1c>)
 800ba60:	2300      	movs	r3, #0
 800ba62:	4604      	mov	r4, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	602b      	str	r3, [r5, #0]
 800ba68:	f7f7 fa2a 	bl	8002ec0 <_sbrk>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_sbrk_r+0x1a>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_sbrk_r+0x1a>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	200029d8 	.word	0x200029d8

0800ba7c <__sread>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	460c      	mov	r4, r1
 800ba80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba84:	f000 f8e8 	bl	800bc58 <_read_r>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	bfab      	itete	ge
 800ba8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba90:	181b      	addge	r3, r3, r0
 800ba92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba96:	bfac      	ite	ge
 800ba98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba9a:	81a3      	strhlt	r3, [r4, #12]
 800ba9c:	bd10      	pop	{r4, pc}

0800ba9e <__swrite>:
 800ba9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa2:	461f      	mov	r7, r3
 800baa4:	898b      	ldrh	r3, [r1, #12]
 800baa6:	05db      	lsls	r3, r3, #23
 800baa8:	4605      	mov	r5, r0
 800baaa:	460c      	mov	r4, r1
 800baac:	4616      	mov	r6, r2
 800baae:	d505      	bpl.n	800babc <__swrite+0x1e>
 800bab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab4:	2302      	movs	r3, #2
 800bab6:	2200      	movs	r2, #0
 800bab8:	f000 f870 	bl	800bb9c <_lseek_r>
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	4632      	mov	r2, r6
 800baca:	463b      	mov	r3, r7
 800bacc:	4628      	mov	r0, r5
 800bace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bad2:	f000 b817 	b.w	800bb04 <_write_r>

0800bad6 <__sseek>:
 800bad6:	b510      	push	{r4, lr}
 800bad8:	460c      	mov	r4, r1
 800bada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bade:	f000 f85d 	bl	800bb9c <_lseek_r>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	bf15      	itete	ne
 800bae8:	6560      	strne	r0, [r4, #84]	; 0x54
 800baea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800baee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baf2:	81a3      	strheq	r3, [r4, #12]
 800baf4:	bf18      	it	ne
 800baf6:	81a3      	strhne	r3, [r4, #12]
 800baf8:	bd10      	pop	{r4, pc}

0800bafa <__sclose>:
 800bafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafe:	f000 b81b 	b.w	800bb38 <_close_r>
	...

0800bb04 <_write_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4d07      	ldr	r5, [pc, #28]	; (800bb24 <_write_r+0x20>)
 800bb08:	4604      	mov	r4, r0
 800bb0a:	4608      	mov	r0, r1
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	2200      	movs	r2, #0
 800bb10:	602a      	str	r2, [r5, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	f7f6 fbba 	bl	800228c <_write>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_write_r+0x1e>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_write_r+0x1e>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	200029d8 	.word	0x200029d8

0800bb28 <abort>:
 800bb28:	b508      	push	{r3, lr}
 800bb2a:	2006      	movs	r0, #6
 800bb2c:	f000 f8ce 	bl	800bccc <raise>
 800bb30:	2001      	movs	r0, #1
 800bb32:	f000 fb05 	bl	800c140 <_exit>
	...

0800bb38 <_close_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d06      	ldr	r5, [pc, #24]	; (800bb54 <_close_r+0x1c>)
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	f000 fac4 	bl	800c0d0 <_close>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_close_r+0x1a>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_close_r+0x1a>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	200029d8 	.word	0x200029d8

0800bb58 <_fstat_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d07      	ldr	r5, [pc, #28]	; (800bb78 <_fstat_r+0x20>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	4611      	mov	r1, r2
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	f000 fabb 	bl	800c0e0 <_fstat>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	d102      	bne.n	800bb74 <_fstat_r+0x1c>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	b103      	cbz	r3, 800bb74 <_fstat_r+0x1c>
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	bd38      	pop	{r3, r4, r5, pc}
 800bb76:	bf00      	nop
 800bb78:	200029d8 	.word	0x200029d8

0800bb7c <_isatty_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d06      	ldr	r5, [pc, #24]	; (800bb98 <_isatty_r+0x1c>)
 800bb80:	2300      	movs	r3, #0
 800bb82:	4604      	mov	r4, r0
 800bb84:	4608      	mov	r0, r1
 800bb86:	602b      	str	r3, [r5, #0]
 800bb88:	f000 faba 	bl	800c100 <_isatty>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_isatty_r+0x1a>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_isatty_r+0x1a>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	200029d8 	.word	0x200029d8

0800bb9c <_lseek_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d07      	ldr	r5, [pc, #28]	; (800bbbc <_lseek_r+0x20>)
 800bba0:	4604      	mov	r4, r0
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	2200      	movs	r2, #0
 800bba8:	602a      	str	r2, [r5, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f000 fab8 	bl	800c120 <_lseek>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_lseek_r+0x1e>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_lseek_r+0x1e>
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	200029d8 	.word	0x200029d8

0800bbc0 <memmove>:
 800bbc0:	4288      	cmp	r0, r1
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	eb01 0402 	add.w	r4, r1, r2
 800bbc8:	d902      	bls.n	800bbd0 <memmove+0x10>
 800bbca:	4284      	cmp	r4, r0
 800bbcc:	4623      	mov	r3, r4
 800bbce:	d807      	bhi.n	800bbe0 <memmove+0x20>
 800bbd0:	1e43      	subs	r3, r0, #1
 800bbd2:	42a1      	cmp	r1, r4
 800bbd4:	d008      	beq.n	800bbe8 <memmove+0x28>
 800bbd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbde:	e7f8      	b.n	800bbd2 <memmove+0x12>
 800bbe0:	4402      	add	r2, r0
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	428a      	cmp	r2, r1
 800bbe6:	d100      	bne.n	800bbea <memmove+0x2a>
 800bbe8:	bd10      	pop	{r4, pc}
 800bbea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbf2:	e7f7      	b.n	800bbe4 <memmove+0x24>

0800bbf4 <__malloc_lock>:
 800bbf4:	4801      	ldr	r0, [pc, #4]	; (800bbfc <__malloc_lock+0x8>)
 800bbf6:	f7ff b9cf 	b.w	800af98 <__retarget_lock_acquire_recursive>
 800bbfa:	bf00      	nop
 800bbfc:	200029d0 	.word	0x200029d0

0800bc00 <__malloc_unlock>:
 800bc00:	4801      	ldr	r0, [pc, #4]	; (800bc08 <__malloc_unlock+0x8>)
 800bc02:	f7ff b9ca 	b.w	800af9a <__retarget_lock_release_recursive>
 800bc06:	bf00      	nop
 800bc08:	200029d0 	.word	0x200029d0

0800bc0c <_realloc_r>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	4607      	mov	r7, r0
 800bc10:	4614      	mov	r4, r2
 800bc12:	460e      	mov	r6, r1
 800bc14:	b921      	cbnz	r1, 800bc20 <_realloc_r+0x14>
 800bc16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	f7ff ba7a 	b.w	800b114 <_malloc_r>
 800bc20:	b922      	cbnz	r2, 800bc2c <_realloc_r+0x20>
 800bc22:	f7ff fa27 	bl	800b074 <_free_r>
 800bc26:	4625      	mov	r5, r4
 800bc28:	4628      	mov	r0, r5
 800bc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc2c:	f000 f86a 	bl	800bd04 <_malloc_usable_size_r>
 800bc30:	42a0      	cmp	r0, r4
 800bc32:	d20f      	bcs.n	800bc54 <_realloc_r+0x48>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7ff fa6c 	bl	800b114 <_malloc_r>
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d0f2      	beq.n	800bc28 <_realloc_r+0x1c>
 800bc42:	4631      	mov	r1, r6
 800bc44:	4622      	mov	r2, r4
 800bc46:	f7fe fd71 	bl	800a72c <memcpy>
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f7ff fa11 	bl	800b074 <_free_r>
 800bc52:	e7e9      	b.n	800bc28 <_realloc_r+0x1c>
 800bc54:	4635      	mov	r5, r6
 800bc56:	e7e7      	b.n	800bc28 <_realloc_r+0x1c>

0800bc58 <_read_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d07      	ldr	r5, [pc, #28]	; (800bc78 <_read_r+0x20>)
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	4608      	mov	r0, r1
 800bc60:	4611      	mov	r1, r2
 800bc62:	2200      	movs	r2, #0
 800bc64:	602a      	str	r2, [r5, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	f000 fa62 	bl	800c130 <_read>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	d102      	bne.n	800bc76 <_read_r+0x1e>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	b103      	cbz	r3, 800bc76 <_read_r+0x1e>
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	200029d8 	.word	0x200029d8

0800bc7c <_raise_r>:
 800bc7c:	291f      	cmp	r1, #31
 800bc7e:	b538      	push	{r3, r4, r5, lr}
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	d904      	bls.n	800bc90 <_raise_r+0x14>
 800bc86:	2316      	movs	r3, #22
 800bc88:	6003      	str	r3, [r0, #0]
 800bc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc92:	b112      	cbz	r2, 800bc9a <_raise_r+0x1e>
 800bc94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc98:	b94b      	cbnz	r3, 800bcae <_raise_r+0x32>
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 f830 	bl	800bd00 <_getpid_r>
 800bca0:	462a      	mov	r2, r5
 800bca2:	4601      	mov	r1, r0
 800bca4:	4620      	mov	r0, r4
 800bca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcaa:	f000 b817 	b.w	800bcdc <_kill_r>
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d00a      	beq.n	800bcc8 <_raise_r+0x4c>
 800bcb2:	1c59      	adds	r1, r3, #1
 800bcb4:	d103      	bne.n	800bcbe <_raise_r+0x42>
 800bcb6:	2316      	movs	r3, #22
 800bcb8:	6003      	str	r3, [r0, #0]
 800bcba:	2001      	movs	r0, #1
 800bcbc:	e7e7      	b.n	800bc8e <_raise_r+0x12>
 800bcbe:	2400      	movs	r4, #0
 800bcc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	4798      	blx	r3
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e7e0      	b.n	800bc8e <_raise_r+0x12>

0800bccc <raise>:
 800bccc:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <raise+0xc>)
 800bcce:	4601      	mov	r1, r0
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	f7ff bfd3 	b.w	800bc7c <_raise_r>
 800bcd6:	bf00      	nop
 800bcd8:	20000074 	.word	0x20000074

0800bcdc <_kill_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d07      	ldr	r5, [pc, #28]	; (800bcfc <_kill_r+0x20>)
 800bce0:	2300      	movs	r3, #0
 800bce2:	4604      	mov	r4, r0
 800bce4:	4608      	mov	r0, r1
 800bce6:	4611      	mov	r1, r2
 800bce8:	602b      	str	r3, [r5, #0]
 800bcea:	f000 fa11 	bl	800c110 <_kill>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	d102      	bne.n	800bcf8 <_kill_r+0x1c>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	b103      	cbz	r3, 800bcf8 <_kill_r+0x1c>
 800bcf6:	6023      	str	r3, [r4, #0]
 800bcf8:	bd38      	pop	{r3, r4, r5, pc}
 800bcfa:	bf00      	nop
 800bcfc:	200029d8 	.word	0x200029d8

0800bd00 <_getpid_r>:
 800bd00:	f000 b9f6 	b.w	800c0f0 <_getpid>

0800bd04 <_malloc_usable_size_r>:
 800bd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd08:	1f18      	subs	r0, r3, #4
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	bfbc      	itt	lt
 800bd0e:	580b      	ldrlt	r3, [r1, r0]
 800bd10:	18c0      	addlt	r0, r0, r3
 800bd12:	4770      	bx	lr
 800bd14:	0000      	movs	r0, r0
	...

0800bd18 <atan>:
 800bd18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	ec55 4b10 	vmov	r4, r5, d0
 800bd20:	4bc3      	ldr	r3, [pc, #780]	; (800c030 <atan+0x318>)
 800bd22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd26:	429e      	cmp	r6, r3
 800bd28:	46ab      	mov	fp, r5
 800bd2a:	dd18      	ble.n	800bd5e <atan+0x46>
 800bd2c:	4bc1      	ldr	r3, [pc, #772]	; (800c034 <atan+0x31c>)
 800bd2e:	429e      	cmp	r6, r3
 800bd30:	dc01      	bgt.n	800bd36 <atan+0x1e>
 800bd32:	d109      	bne.n	800bd48 <atan+0x30>
 800bd34:	b144      	cbz	r4, 800bd48 <atan+0x30>
 800bd36:	4622      	mov	r2, r4
 800bd38:	462b      	mov	r3, r5
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 faa5 	bl	800028c <__adddf3>
 800bd42:	4604      	mov	r4, r0
 800bd44:	460d      	mov	r5, r1
 800bd46:	e006      	b.n	800bd56 <atan+0x3e>
 800bd48:	f1bb 0f00 	cmp.w	fp, #0
 800bd4c:	f300 8131 	bgt.w	800bfb2 <atan+0x29a>
 800bd50:	a59b      	add	r5, pc, #620	; (adr r5, 800bfc0 <atan+0x2a8>)
 800bd52:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd56:	ec45 4b10 	vmov	d0, r4, r5
 800bd5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5e:	4bb6      	ldr	r3, [pc, #728]	; (800c038 <atan+0x320>)
 800bd60:	429e      	cmp	r6, r3
 800bd62:	dc14      	bgt.n	800bd8e <atan+0x76>
 800bd64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bd68:	429e      	cmp	r6, r3
 800bd6a:	dc0d      	bgt.n	800bd88 <atan+0x70>
 800bd6c:	a396      	add	r3, pc, #600	; (adr r3, 800bfc8 <atan+0x2b0>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	ee10 0a10 	vmov	r0, s0
 800bd76:	4629      	mov	r1, r5
 800bd78:	f7f4 fa88 	bl	800028c <__adddf3>
 800bd7c:	4baf      	ldr	r3, [pc, #700]	; (800c03c <atan+0x324>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f7f4 feca 	bl	8000b18 <__aeabi_dcmpgt>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d1e6      	bne.n	800bd56 <atan+0x3e>
 800bd88:	f04f 3aff 	mov.w	sl, #4294967295
 800bd8c:	e02b      	b.n	800bde6 <atan+0xce>
 800bd8e:	f000 f963 	bl	800c058 <fabs>
 800bd92:	4bab      	ldr	r3, [pc, #684]	; (800c040 <atan+0x328>)
 800bd94:	429e      	cmp	r6, r3
 800bd96:	ec55 4b10 	vmov	r4, r5, d0
 800bd9a:	f300 80bf 	bgt.w	800bf1c <atan+0x204>
 800bd9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bda2:	429e      	cmp	r6, r3
 800bda4:	f300 80a0 	bgt.w	800bee8 <atan+0x1d0>
 800bda8:	ee10 2a10 	vmov	r2, s0
 800bdac:	ee10 0a10 	vmov	r0, s0
 800bdb0:	462b      	mov	r3, r5
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f7f4 fa6a 	bl	800028c <__adddf3>
 800bdb8:	4ba0      	ldr	r3, [pc, #640]	; (800c03c <atan+0x324>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f7f4 fa64 	bl	8000288 <__aeabi_dsub>
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4629      	mov	r1, r5
 800bdce:	f7f4 fa5d 	bl	800028c <__adddf3>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	4639      	mov	r1, r7
 800bdda:	f7f4 fd37 	bl	800084c <__aeabi_ddiv>
 800bdde:	f04f 0a00 	mov.w	sl, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	460d      	mov	r5, r1
 800bde6:	4622      	mov	r2, r4
 800bde8:	462b      	mov	r3, r5
 800bdea:	4620      	mov	r0, r4
 800bdec:	4629      	mov	r1, r5
 800bdee:	f7f4 fc03 	bl	80005f8 <__aeabi_dmul>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	4689      	mov	r9, r1
 800bdfa:	f7f4 fbfd 	bl	80005f8 <__aeabi_dmul>
 800bdfe:	a374      	add	r3, pc, #464	; (adr r3, 800bfd0 <atan+0x2b8>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	f7f4 fbf6 	bl	80005f8 <__aeabi_dmul>
 800be0c:	a372      	add	r3, pc, #456	; (adr r3, 800bfd8 <atan+0x2c0>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 fa3b 	bl	800028c <__adddf3>
 800be16:	4632      	mov	r2, r6
 800be18:	463b      	mov	r3, r7
 800be1a:	f7f4 fbed 	bl	80005f8 <__aeabi_dmul>
 800be1e:	a370      	add	r3, pc, #448	; (adr r3, 800bfe0 <atan+0x2c8>)
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	f7f4 fa32 	bl	800028c <__adddf3>
 800be28:	4632      	mov	r2, r6
 800be2a:	463b      	mov	r3, r7
 800be2c:	f7f4 fbe4 	bl	80005f8 <__aeabi_dmul>
 800be30:	a36d      	add	r3, pc, #436	; (adr r3, 800bfe8 <atan+0x2d0>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	f7f4 fa29 	bl	800028c <__adddf3>
 800be3a:	4632      	mov	r2, r6
 800be3c:	463b      	mov	r3, r7
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	a36b      	add	r3, pc, #428	; (adr r3, 800bff0 <atan+0x2d8>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f7f4 fa20 	bl	800028c <__adddf3>
 800be4c:	4632      	mov	r2, r6
 800be4e:	463b      	mov	r3, r7
 800be50:	f7f4 fbd2 	bl	80005f8 <__aeabi_dmul>
 800be54:	a368      	add	r3, pc, #416	; (adr r3, 800bff8 <atan+0x2e0>)
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f7f4 fa17 	bl	800028c <__adddf3>
 800be5e:	4642      	mov	r2, r8
 800be60:	464b      	mov	r3, r9
 800be62:	f7f4 fbc9 	bl	80005f8 <__aeabi_dmul>
 800be66:	a366      	add	r3, pc, #408	; (adr r3, 800c000 <atan+0x2e8>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	4680      	mov	r8, r0
 800be6e:	4689      	mov	r9, r1
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	f7f4 fbc0 	bl	80005f8 <__aeabi_dmul>
 800be78:	a363      	add	r3, pc, #396	; (adr r3, 800c008 <atan+0x2f0>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	f7f4 fa03 	bl	8000288 <__aeabi_dsub>
 800be82:	4632      	mov	r2, r6
 800be84:	463b      	mov	r3, r7
 800be86:	f7f4 fbb7 	bl	80005f8 <__aeabi_dmul>
 800be8a:	a361      	add	r3, pc, #388	; (adr r3, 800c010 <atan+0x2f8>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	f7f4 f9fa 	bl	8000288 <__aeabi_dsub>
 800be94:	4632      	mov	r2, r6
 800be96:	463b      	mov	r3, r7
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	a35e      	add	r3, pc, #376	; (adr r3, 800c018 <atan+0x300>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 f9f1 	bl	8000288 <__aeabi_dsub>
 800bea6:	4632      	mov	r2, r6
 800bea8:	463b      	mov	r3, r7
 800beaa:	f7f4 fba5 	bl	80005f8 <__aeabi_dmul>
 800beae:	a35c      	add	r3, pc, #368	; (adr r3, 800c020 <atan+0x308>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	4632      	mov	r2, r6
 800beba:	463b      	mov	r3, r7
 800bebc:	f7f4 fb9c 	bl	80005f8 <__aeabi_dmul>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 f9e0 	bl	800028c <__adddf3>
 800becc:	4622      	mov	r2, r4
 800bece:	462b      	mov	r3, r5
 800bed0:	f7f4 fb92 	bl	80005f8 <__aeabi_dmul>
 800bed4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	d14b      	bne.n	800bf76 <atan+0x25e>
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 f9d1 	bl	8000288 <__aeabi_dsub>
 800bee6:	e72c      	b.n	800bd42 <atan+0x2a>
 800bee8:	ee10 0a10 	vmov	r0, s0
 800beec:	4b53      	ldr	r3, [pc, #332]	; (800c03c <atan+0x324>)
 800beee:	2200      	movs	r2, #0
 800bef0:	4629      	mov	r1, r5
 800bef2:	f7f4 f9c9 	bl	8000288 <__aeabi_dsub>
 800bef6:	4b51      	ldr	r3, [pc, #324]	; (800c03c <atan+0x324>)
 800bef8:	4606      	mov	r6, r0
 800befa:	460f      	mov	r7, r1
 800befc:	2200      	movs	r2, #0
 800befe:	4620      	mov	r0, r4
 800bf00:	4629      	mov	r1, r5
 800bf02:	f7f4 f9c3 	bl	800028c <__adddf3>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	f7f4 fc9d 	bl	800084c <__aeabi_ddiv>
 800bf12:	f04f 0a01 	mov.w	sl, #1
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	e764      	b.n	800bde6 <atan+0xce>
 800bf1c:	4b49      	ldr	r3, [pc, #292]	; (800c044 <atan+0x32c>)
 800bf1e:	429e      	cmp	r6, r3
 800bf20:	da1d      	bge.n	800bf5e <atan+0x246>
 800bf22:	ee10 0a10 	vmov	r0, s0
 800bf26:	4b48      	ldr	r3, [pc, #288]	; (800c048 <atan+0x330>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f7f4 f9ac 	bl	8000288 <__aeabi_dsub>
 800bf30:	4b45      	ldr	r3, [pc, #276]	; (800c048 <atan+0x330>)
 800bf32:	4606      	mov	r6, r0
 800bf34:	460f      	mov	r7, r1
 800bf36:	2200      	movs	r2, #0
 800bf38:	4620      	mov	r0, r4
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7f4 fb5c 	bl	80005f8 <__aeabi_dmul>
 800bf40:	4b3e      	ldr	r3, [pc, #248]	; (800c03c <atan+0x324>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	f7f4 f9a2 	bl	800028c <__adddf3>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 fc7c 	bl	800084c <__aeabi_ddiv>
 800bf54:	f04f 0a02 	mov.w	sl, #2
 800bf58:	4604      	mov	r4, r0
 800bf5a:	460d      	mov	r5, r1
 800bf5c:	e743      	b.n	800bde6 <atan+0xce>
 800bf5e:	462b      	mov	r3, r5
 800bf60:	ee10 2a10 	vmov	r2, s0
 800bf64:	4939      	ldr	r1, [pc, #228]	; (800c04c <atan+0x334>)
 800bf66:	2000      	movs	r0, #0
 800bf68:	f7f4 fc70 	bl	800084c <__aeabi_ddiv>
 800bf6c:	f04f 0a03 	mov.w	sl, #3
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	e737      	b.n	800bde6 <atan+0xce>
 800bf76:	4b36      	ldr	r3, [pc, #216]	; (800c050 <atan+0x338>)
 800bf78:	4e36      	ldr	r6, [pc, #216]	; (800c054 <atan+0x33c>)
 800bf7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bf7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bf82:	e9da 2300 	ldrd	r2, r3, [sl]
 800bf86:	f7f4 f97f 	bl	8000288 <__aeabi_dsub>
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	f7f4 f97b 	bl	8000288 <__aeabi_dsub>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bf9a:	f7f4 f975 	bl	8000288 <__aeabi_dsub>
 800bf9e:	f1bb 0f00 	cmp.w	fp, #0
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	f6bf aed6 	bge.w	800bd56 <atan+0x3e>
 800bfaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfae:	461d      	mov	r5, r3
 800bfb0:	e6d1      	b.n	800bd56 <atan+0x3e>
 800bfb2:	a51d      	add	r5, pc, #116	; (adr r5, 800c028 <atan+0x310>)
 800bfb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfb8:	e6cd      	b.n	800bd56 <atan+0x3e>
 800bfba:	bf00      	nop
 800bfbc:	f3af 8000 	nop.w
 800bfc0:	54442d18 	.word	0x54442d18
 800bfc4:	bff921fb 	.word	0xbff921fb
 800bfc8:	8800759c 	.word	0x8800759c
 800bfcc:	7e37e43c 	.word	0x7e37e43c
 800bfd0:	e322da11 	.word	0xe322da11
 800bfd4:	3f90ad3a 	.word	0x3f90ad3a
 800bfd8:	24760deb 	.word	0x24760deb
 800bfdc:	3fa97b4b 	.word	0x3fa97b4b
 800bfe0:	a0d03d51 	.word	0xa0d03d51
 800bfe4:	3fb10d66 	.word	0x3fb10d66
 800bfe8:	c54c206e 	.word	0xc54c206e
 800bfec:	3fb745cd 	.word	0x3fb745cd
 800bff0:	920083ff 	.word	0x920083ff
 800bff4:	3fc24924 	.word	0x3fc24924
 800bff8:	5555550d 	.word	0x5555550d
 800bffc:	3fd55555 	.word	0x3fd55555
 800c000:	2c6a6c2f 	.word	0x2c6a6c2f
 800c004:	bfa2b444 	.word	0xbfa2b444
 800c008:	52defd9a 	.word	0x52defd9a
 800c00c:	3fadde2d 	.word	0x3fadde2d
 800c010:	af749a6d 	.word	0xaf749a6d
 800c014:	3fb3b0f2 	.word	0x3fb3b0f2
 800c018:	fe231671 	.word	0xfe231671
 800c01c:	3fbc71c6 	.word	0x3fbc71c6
 800c020:	9998ebc4 	.word	0x9998ebc4
 800c024:	3fc99999 	.word	0x3fc99999
 800c028:	54442d18 	.word	0x54442d18
 800c02c:	3ff921fb 	.word	0x3ff921fb
 800c030:	440fffff 	.word	0x440fffff
 800c034:	7ff00000 	.word	0x7ff00000
 800c038:	3fdbffff 	.word	0x3fdbffff
 800c03c:	3ff00000 	.word	0x3ff00000
 800c040:	3ff2ffff 	.word	0x3ff2ffff
 800c044:	40038000 	.word	0x40038000
 800c048:	3ff80000 	.word	0x3ff80000
 800c04c:	bff00000 	.word	0xbff00000
 800c050:	0800cd78 	.word	0x0800cd78
 800c054:	0800cd58 	.word	0x0800cd58

0800c058 <fabs>:
 800c058:	ec51 0b10 	vmov	r0, r1, d0
 800c05c:	ee10 2a10 	vmov	r2, s0
 800c060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c064:	ec43 2b10 	vmov	d0, r2, r3
 800c068:	4770      	bx	lr
	...

0800c06c <trunc>:
 800c06c:	ec51 0b10 	vmov	r0, r1, d0
 800c070:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c074:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c078:	2b13      	cmp	r3, #19
 800c07a:	b5d0      	push	{r4, r6, r7, lr}
 800c07c:	460c      	mov	r4, r1
 800c07e:	dc10      	bgt.n	800c0a2 <trunc+0x36>
 800c080:	2b00      	cmp	r3, #0
 800c082:	bfa5      	ittet	ge
 800c084:	4a11      	ldrge	r2, [pc, #68]	; (800c0cc <trunc+0x60>)
 800c086:	fa42 f303 	asrge.w	r3, r2, r3
 800c08a:	2100      	movlt	r1, #0
 800c08c:	2100      	movge	r1, #0
 800c08e:	bfb9      	ittee	lt
 800c090:	2000      	movlt	r0, #0
 800c092:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800c096:	2000      	movge	r0, #0
 800c098:	ea24 0103 	bicge.w	r1, r4, r3
 800c09c:	ec41 0b10 	vmov	d0, r0, r1
 800c0a0:	bdd0      	pop	{r4, r6, r7, pc}
 800c0a2:	2b33      	cmp	r3, #51	; 0x33
 800c0a4:	dd08      	ble.n	800c0b8 <trunc+0x4c>
 800c0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0aa:	d1f7      	bne.n	800c09c <trunc+0x30>
 800c0ac:	ee10 2a10 	vmov	r2, s0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	f7f4 f8eb 	bl	800028c <__adddf3>
 800c0b6:	e7f1      	b.n	800c09c <trunc+0x30>
 800c0b8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c0:	fa23 f202 	lsr.w	r2, r3, r2
 800c0c4:	ea20 0602 	bic.w	r6, r0, r2
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	e7e7      	b.n	800c09c <trunc+0x30>
 800c0cc:	000fffff 	.word	0x000fffff

0800c0d0 <_close>:
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <_close+0xc>)
 800c0d2:	2258      	movs	r2, #88	; 0x58
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0da:	4770      	bx	lr
 800c0dc:	200029d8 	.word	0x200029d8

0800c0e0 <_fstat>:
 800c0e0:	4b02      	ldr	r3, [pc, #8]	; (800c0ec <_fstat+0xc>)
 800c0e2:	2258      	movs	r2, #88	; 0x58
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ea:	4770      	bx	lr
 800c0ec:	200029d8 	.word	0x200029d8

0800c0f0 <_getpid>:
 800c0f0:	4b02      	ldr	r3, [pc, #8]	; (800c0fc <_getpid+0xc>)
 800c0f2:	2258      	movs	r2, #88	; 0x58
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fa:	4770      	bx	lr
 800c0fc:	200029d8 	.word	0x200029d8

0800c100 <_isatty>:
 800c100:	4b02      	ldr	r3, [pc, #8]	; (800c10c <_isatty+0xc>)
 800c102:	2258      	movs	r2, #88	; 0x58
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	2000      	movs	r0, #0
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	200029d8 	.word	0x200029d8

0800c110 <_kill>:
 800c110:	4b02      	ldr	r3, [pc, #8]	; (800c11c <_kill+0xc>)
 800c112:	2258      	movs	r2, #88	; 0x58
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	f04f 30ff 	mov.w	r0, #4294967295
 800c11a:	4770      	bx	lr
 800c11c:	200029d8 	.word	0x200029d8

0800c120 <_lseek>:
 800c120:	4b02      	ldr	r3, [pc, #8]	; (800c12c <_lseek+0xc>)
 800c122:	2258      	movs	r2, #88	; 0x58
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	f04f 30ff 	mov.w	r0, #4294967295
 800c12a:	4770      	bx	lr
 800c12c:	200029d8 	.word	0x200029d8

0800c130 <_read>:
 800c130:	4b02      	ldr	r3, [pc, #8]	; (800c13c <_read+0xc>)
 800c132:	2258      	movs	r2, #88	; 0x58
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	f04f 30ff 	mov.w	r0, #4294967295
 800c13a:	4770      	bx	lr
 800c13c:	200029d8 	.word	0x200029d8

0800c140 <_exit>:
 800c140:	e7fe      	b.n	800c140 <_exit>
	...

0800c144 <_init>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	bf00      	nop
 800c148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14a:	bc08      	pop	{r3}
 800c14c:	469e      	mov	lr, r3
 800c14e:	4770      	bx	lr

0800c150 <_fini>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	bf00      	nop
 800c154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c156:	bc08      	pop	{r3}
 800c158:	469e      	mov	lr, r3
 800c15a:	4770      	bx	lr
