
WeatherStation2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c17c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800c310  0800c310  0001c310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbb0  0800cbb0  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbb0  0800cbb0  0001cbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbb8  0800cbb8  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbb8  0800cbb8  0001cbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800cbc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  2000023c  0800cdfc  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002120  0800cdfc  00022120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029557  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515a  00000000  00000000  000497c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a0  00000000  00000000  0004e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002068  00000000  00000000  00050bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d203  00000000  00000000  00052c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002646c  00000000  00000000  0007fe2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bb73  00000000  00000000  000a6297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1e0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4a0  00000000  00000000  001b1e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001bc300  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001bc3b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2f4 	.word	0x0800c2f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	0800c2f4 	.word	0x0800c2f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <vApplicationGetIdleTaskMemory+0x30>)
 8000f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000258 	.word	0x20000258
 8000f70:	200002ac 	.word	0x200002ac

08000f74 <_write>:
uint8_t _sum(uint8_t *written_data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	230a      	movs	r3, #10
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <_write+0x24>)
 8000f8a:	f006 f8ed 	bl	8007168 <HAL_UART_Transmit>
	return len;
 8000f8e:	687b      	ldr	r3, [r7, #4]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20001e2c 	.word	0x20001e2c

08000f9c <_SPI_receive_delay>:

void _SPI_receive_delay(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
	// TODO: find a way to set this up with an interrupt
	HAL_StatusTypeDef status = HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	71fb      	strb	r3, [r7, #7]
	union{
		uint8_t uint8_delay[2];
		uint16_t uint16_delay;
	} new_delay;
	uint8_t read_counter = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	71bb      	strb	r3, [r7, #6]

	printf("ReceiveDelay: Waiting for a new delay...\r");
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <_SPI_receive_delay+0x6c>)
 8000fac:	f008 ff72 	bl	8009e94 <iprintf>

	while(status != HAL_OK && read_counter < 2){
 8000fb0:	e016      	b.n	8000fe0 <_SPI_receive_delay+0x44>

		status = HAL_SPI_Receive(&hspi1, &new_delay.uint8_delay[read_counter], sizeof(uint8_t), delay*2);
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	1d3a      	adds	r2, r7, #4
 8000fb6:	18d1      	adds	r1, r2, r3
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <_SPI_receive_delay+0x70>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <_SPI_receive_delay+0x74>)
 8000fc2:	f005 f8b6 	bl	8006132 <HAL_SPI_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]

		if(status == HAL_OK)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <_SPI_receive_delay+0x3c>
			read_counter ++;
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	71bb      	strb	r3, [r7, #6]
 8000fd6:	e003      	b.n	8000fe0 <_SPI_receive_delay+0x44>
		else
			// Allow preemption
			osDelay(500);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f007 f81d 	bl	800801a <osDelay>
	while(status != HAL_OK && read_counter < 2){
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <_SPI_receive_delay+0x50>
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d9e2      	bls.n	8000fb2 <_SPI_receive_delay+0x16>
	}

	printf("ReceiveDelay: Received new delay: %d\r", new_delay.uint16_delay);
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <_SPI_receive_delay+0x78>)
 8000ff2:	f008 ff4f 	bl	8009e94 <iprintf>
	_set_delay(new_delay.uint16_delay);
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f8a9 	bl	8001150 <_set_delay>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800c364 	.word	0x0800c364
 800100c:	20001eb8 	.word	0x20001eb8
 8001010:	20001f48 	.word	0x20001f48
 8001014:	0800c390 	.word	0x0800c390

08001018 <_sum>:

uint8_t _sum(uint8_t *written_data){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	uint8_t sum = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i<sizeof(written_data); i++)
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	e009      	b.n	800103e <_sum+0x26>
		sum += written_data[i];
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4413      	add	r3, r2
 8001036:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<sizeof(written_data); i++)
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	3301      	adds	r3, #1
 800103c:	73bb      	strb	r3, [r7, #14]
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d9f2      	bls.n	800102a <_sum+0x12>

	return sum;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_UART_send_sensor_data>:

void _UART_send_sensor_data(){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t *sensor_data_bytes = (uint8_t *)&sensor_data;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <_UART_send_sensor_data+0xd0>)
 800105c:	603b      	str	r3, [r7, #0]

	printf("SendData: Sending data: \r");
 800105e:	4832      	ldr	r0, [pc, #200]	; (8001128 <_UART_send_sensor_data+0xd4>)
 8001060:	f008 ff18 	bl	8009e94 <iprintf>
	printf("SendData: Temperature = %.02f°C\r", sensor_data.temperature);
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <_UART_send_sensor_data+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	482e      	ldr	r0, [pc, #184]	; (800112c <_UART_send_sensor_data+0xd8>)
 8001074:	f008 ff0e 	bl	8009e94 <iprintf>
	printf("SendData: Humidity = %.02f%% \r", sensor_data.humidity);
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <_UART_send_sensor_data+0xd0>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa63 	bl	8000548 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	482a      	ldr	r0, [pc, #168]	; (8001130 <_UART_send_sensor_data+0xdc>)
 8001088:	f008 ff04 	bl	8009e94 <iprintf>
	printf("SendData: Pressure = %.02f hPa\r", sensor_data.pressure);
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <_UART_send_sensor_data+0xd0>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa59 	bl	8000548 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4826      	ldr	r0, [pc, #152]	; (8001134 <_UART_send_sensor_data+0xe0>)
 800109c:	f008 fefa 	bl	8009e94 <iprintf>
	printf("SendData: North direction = %.02f°\r\r", sensor_data.north_direction);
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <_UART_send_sensor_data+0xd0>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa4f 	bl	8000548 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4822      	ldr	r0, [pc, #136]	; (8001138 <_UART_send_sensor_data+0xe4>)
 80010b0:	f008 fef0 	bl	8009e94 <iprintf>

	for(uint8_t i=0; i<sizeof(sensor_data_t); i++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	71bb      	strb	r3, [r7, #6]
 80010b8:	e017      	b.n	80010ea <_UART_send_sensor_data+0x96>
		status = HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	71fb      	strb	r3, [r7, #7]
		while(status != HAL_OK){
 80010be:	e00e      	b.n	80010de <_UART_send_sensor_data+0x8a>
			status = HAL_UART_Transmit(&huart4, sensor_data_bytes + i, sizeof(uint8_t), delay*2);
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	18d1      	adds	r1, r2, r3
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <_UART_send_sensor_data+0xe8>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2201      	movs	r2, #1
 80010ce:	481c      	ldr	r0, [pc, #112]	; (8001140 <_UART_send_sensor_data+0xec>)
 80010d0:	f006 f84a 	bl	8007168 <HAL_UART_Transmit>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
			printf(".");
 80010d8:	202e      	movs	r0, #46	; 0x2e
 80010da:	f008 fef3 	bl	8009ec4 <putchar>
		while(status != HAL_OK){
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ed      	bne.n	80010c0 <_UART_send_sensor_data+0x6c>
	for(uint8_t i=0; i<sizeof(sensor_data_t); i++){
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	3301      	adds	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d9e4      	bls.n	80010ba <_UART_send_sensor_data+0x66>
		}
	}

	printf("\rSendData: Sensor data sent.\r");
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <_UART_send_sensor_data+0xf0>)
 80010f2:	f008 fecf 	bl	8009e94 <iprintf>

	// reset of written_data
	for(uint8_t i=0; i<sizeof(written_data); i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	717b      	strb	r3, [r7, #5]
 80010fa:	e008      	b.n	800110e <_UART_send_sensor_data+0xba>
		written_data[i] = 0;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <_UART_send_sensor_data+0xf4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	797b      	ldrb	r3, [r7, #5]
 8001102:	4413      	add	r3, r2
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<sizeof(written_data); i++)
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	3301      	adds	r3, #1
 800110c:	717b      	strb	r3, [r7, #5]
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d9f3      	bls.n	80010fc <_UART_send_sensor_data+0xa8>

	printf("SendData: Reset written_data counters.\r");
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <_UART_send_sensor_data+0xf8>)
 8001116:	f008 febd 	bl	8009e94 <iprintf>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200019cc 	.word	0x200019cc
 8001128:	0800c3b8 	.word	0x0800c3b8
 800112c:	0800c3d4 	.word	0x0800c3d4
 8001130:	0800c3f8 	.word	0x0800c3f8
 8001134:	0800c418 	.word	0x0800c418
 8001138:	0800c438 	.word	0x0800c438
 800113c:	20001eb8 	.word	0x20001eb8
 8001140:	20001ec4 	.word	0x20001ec4
 8001144:	0800c460 	.word	0x0800c460
 8001148:	20001e28 	.word	0x20001e28
 800114c:	0800c480 	.word	0x0800c480

08001150 <_set_delay>:

void _set_delay(const uint16_t new_delay){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
	switch(new_delay){
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001160:	4293      	cmp	r3, r2
 8001162:	d02e      	beq.n	80011c2 <_set_delay+0x72>
 8001164:	f242 7210 	movw	r2, #10000	; 0x2710
 8001168:	4293      	cmp	r3, r2
 800116a:	dc2f      	bgt.n	80011cc <_set_delay+0x7c>
 800116c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d021      	beq.n	80011b8 <_set_delay+0x68>
 8001174:	f241 3288 	movw	r2, #5000	; 0x1388
 8001178:	4293      	cmp	r3, r2
 800117a:	dc27      	bgt.n	80011cc <_set_delay+0x7c>
 800117c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001180:	4293      	cmp	r3, r2
 8001182:	d014      	beq.n	80011ae <_set_delay+0x5e>
 8001184:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001188:	4293      	cmp	r3, r2
 800118a:	dc1f      	bgt.n	80011cc <_set_delay+0x7c>
 800118c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001190:	d003      	beq.n	800119a <_set_delay+0x4a>
 8001192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001196:	d005      	beq.n	80011a4 <_set_delay+0x54>
 8001198:	e018      	b.n	80011cc <_set_delay+0x7c>
		case 500:
			delay = FAST;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <_set_delay+0xa8>)
 800119c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011a0:	801a      	strh	r2, [r3, #0]
			break;
 80011a2:	e024      	b.n	80011ee <_set_delay+0x9e>
		case 1000:
			delay = MEDIUM;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <_set_delay+0xa8>)
 80011a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011aa:	801a      	strh	r2, [r3, #0]
			break;
 80011ac:	e01f      	b.n	80011ee <_set_delay+0x9e>
		case 2500:
			delay = SLOW;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <_set_delay+0xa8>)
 80011b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80011b4:	801a      	strh	r2, [r3, #0]
			break;
 80011b6:	e01a      	b.n	80011ee <_set_delay+0x9e>
		case 5000:
			delay = VERY_SLOW;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <_set_delay+0xa8>)
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	801a      	strh	r2, [r3, #0]
			break;
 80011c0:	e015      	b.n	80011ee <_set_delay+0x9e>
		case 10000:
			delay = TAKE_A_BREAK;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <_set_delay+0xa8>)
 80011c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80011c8:	801a      	strh	r2, [r3, #0]
			break;
 80011ca:	e010      	b.n	80011ee <_set_delay+0x9e>
		default:
			// Blink LED to say there was a problem, maybe transmission?
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <_set_delay+0xac>)
 80011d4:	f002 fbf4 	bl	80039c0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80011d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011dc:	f002 f834 	bl	8003248 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <_set_delay+0xac>)
 80011e8:	f002 fbea 	bl	80039c0 <HAL_GPIO_WritePin>
			break;
 80011ec:	bf00      	nop
	}
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20001eb8 	.word	0x20001eb8
 80011fc:	48000400 	.word	0x48000400

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b0b2      	sub	sp, #200	; 0xc8
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	written_data = malloc(sizeof(uint8_t) * 4);
 8001206:	2004      	movs	r0, #4
 8001208:	f008 f912 	bl	8009430 <malloc>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b58      	ldr	r3, [pc, #352]	; (8001374 <main+0x174>)
 8001212:	601a      	str	r2, [r3, #0]

	for(uint8_t i=0; i<sizeof(written_data); i++)
 8001214:	2300      	movs	r3, #0
 8001216:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800121a:	e00b      	b.n	8001234 <main+0x34>
		written_data[i] = 0;
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <main+0x174>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001224:	4413      	add	r3, r2
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<sizeof(written_data); i++)
 800122a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800122e:	3301      	adds	r3, #1
 8001230:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8001234:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001238:	2b03      	cmp	r3, #3
 800123a:	d9ef      	bls.n	800121c <main+0x1c>

	delay = FAST;
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <main+0x178>)
 800123e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001242:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f001 ffc7 	bl	80031d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f8b4 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f000 fa7e 	bl	800174c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001250:	f000 f952 	bl	80014f8 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8001254:	f000 f988 	bl	8001568 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8001258:	f000 fa18 	bl	800168c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800125c:	f000 fa48 	bl	80016f0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001260:	f000 f9a8 	bl	80015b4 <MX_SPI1_Init>
  MX_UART4_Init();
 8001264:	f000 f9e0 	bl	8001628 <MX_UART4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <main+0x17c>)
 800126a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800126e:	461d      	mov	r5, r3
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800127c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f006 fe7d 	bl	8007f82 <osThreadCreate>
 8001288:	4603      	mov	r3, r0
 800128a:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <main+0x180>)
 800128c:	6013      	str	r3, [r2, #0]

  /* definition and creation of readTemp */
  osThreadDef(readTemp, StartReadTemp, osPriorityNormal, 0, 128);
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <main+0x184>)
 8001290:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001294:	461d      	mov	r5, r3
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800129e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTempHandle = osThreadCreate(osThread(readTemp), NULL);
 80012a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 fe6a 	bl	8007f82 <osThreadCreate>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a35      	ldr	r2, [pc, #212]	; (8001388 <main+0x188>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of readHum */
  osThreadDef(readHum, StartReadHum, osPriorityNormal, 0, 128);
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <main+0x18c>)
 80012b6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012ba:	461d      	mov	r5, r3
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readHumHandle = osThreadCreate(osThread(readHum), NULL);
 80012c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f006 fe57 	bl	8007f82 <osThreadCreate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a2e      	ldr	r2, [pc, #184]	; (8001390 <main+0x190>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of readPress */
  osThreadDef(readPress, StartReadPressure, osPriorityNormal, 0, 128);
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <main+0x194>)
 80012dc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80012e0:	461d      	mov	r5, r3
 80012e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readPressHandle = osThreadCreate(osThread(readPress), NULL);
 80012ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fe44 	bl	8007f82 <osThreadCreate>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <main+0x198>)
 80012fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of readMagneto */
  osThreadDef(readMagneto, StartReadMagnetometer, osPriorityNormal, 0, 128);
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <main+0x19c>)
 8001302:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readMagnetoHandle = osThreadCreate(osThread(readMagneto), NULL);
 8001314:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fe31 	bl	8007f82 <osThreadCreate>
 8001320:	4603      	mov	r3, r0
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <main+0x1a0>)
 8001324:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendData */
  osThreadDef(sendData, StartSendData, osPriorityAboveNormal, 0, 128);
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <main+0x1a4>)
 8001328:	f107 041c 	add.w	r4, r7, #28
 800132c:	461d      	mov	r5, r3
 800132e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendDataHandle = osThreadCreate(osThread(sendData), NULL);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fe1e 	bl	8007f82 <osThreadCreate>
 8001346:	4603      	mov	r3, r0
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <main+0x1a8>)
 800134a:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveDelay */
  osThreadDef(receiveDelay, StartReceiveDelay, osPriorityAboveNormal, 0, 128);
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <main+0x1ac>)
 800134e:	463c      	mov	r4, r7
 8001350:	461d      	mov	r5, r3
 8001352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveDelayHandle = osThreadCreate(osThread(receiveDelay), NULL);
 800135e:	463b      	mov	r3, r7
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f006 fe0d 	bl	8007f82 <osThreadCreate>
 8001368:	4603      	mov	r3, r0
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <main+0x1b0>)
 800136c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800136e:	f006 fe01 	bl	8007f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001372:	e7fe      	b.n	8001372 <main+0x172>
 8001374:	20001e28 	.word	0x20001e28
 8001378:	20001eb8 	.word	0x20001eb8
 800137c:	0800c4a8 	.word	0x0800c4a8
 8001380:	20001a14 	.word	0x20001a14
 8001384:	0800c4c4 	.word	0x0800c4c4
 8001388:	20001a18 	.word	0x20001a18
 800138c:	0800c4e0 	.word	0x0800c4e0
 8001390:	20001ebc 	.word	0x20001ebc
 8001394:	0800c4fc 	.word	0x0800c4fc
 8001398:	20001e24 	.word	0x20001e24
 800139c:	0800c518 	.word	0x0800c518
 80013a0:	20001eb0 	.word	0x20001eb0
 80013a4:	0800c534 	.word	0x0800c534
 80013a8:	20001ec0 	.word	0x20001ec0
 80013ac:	0800c550 	.word	0x0800c550
 80013b0:	20001eb4 	.word	0x20001eb4

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0b8      	sub	sp, #224	; 0xe0
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013be:	2244      	movs	r2, #68	; 0x44
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 f84a 	bl	800945c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2288      	movs	r2, #136	; 0x88
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 f83c 	bl	800945c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013e4:	f003 f9d8 	bl	8004798 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013e8:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <SystemClock_Config+0x13c>)
 80013ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ee:	4a40      	ldr	r2, [pc, #256]	; (80014f0 <SystemClock_Config+0x13c>)
 80013f0:	f023 0318 	bic.w	r3, r3, #24
 80013f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013f8:	2314      	movs	r3, #20
 80013fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013fe:	2301      	movs	r3, #1
 8001400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800141c:	2301      	movs	r3, #1
 800141e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001428:	2328      	movs	r3, #40	; 0x28
 800142a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800142e:	2307      	movs	r3, #7
 8001430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fae7 	bl	8004a18 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001450:	f000 fe20 	bl	8002094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001472:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001476:	2104      	movs	r1, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f003 feb3 	bl	80051e4 <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001484:	f000 fe06 	bl	8002094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <SystemClock_Config+0x140>)
 800148a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800148c:	2300      	movs	r3, #0
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001490:	2300      	movs	r3, #0
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800149a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800149e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014a0:	2301      	movs	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014a8:	2318      	movs	r3, #24
 80014aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014ac:	2307      	movs	r3, #7
 80014ae:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014bc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 f8c7 	bl	8005654 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80014cc:	f000 fde2 	bl	8002094 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014d4:	f003 f97e 	bl	80047d4 <HAL_PWREx_ControlVoltageScaling>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80014de:	f000 fdd9 	bl	8002094 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014e2:	f004 fba1 	bl	8005c28 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014e6:	bf00      	nop
 80014e8:	37e0      	adds	r7, #224	; 0xe0
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	00012009 	.word	0x00012009

080014f8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_DFSDM1_Init+0x68>)
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <MX_DFSDM1_Init+0x6c>)
 8001500:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001504:	2201      	movs	r2, #1
 8001506:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_DFSDM1_Init+0x68>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001510:	2202      	movs	r2, #2
 8001512:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_DFSDM1_Init+0x68>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001526:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_DFSDM1_Init+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001530:	2204      	movs	r2, #4
 8001532:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_DFSDM1_Init+0x68>)
 800153c:	2201      	movs	r2, #1
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_DFSDM1_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_DFSDM1_Init+0x68>)
 800154e:	f001 ff81 	bl	8003454 <HAL_DFSDM_ChannelInit>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001558:	f000 fd9c 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200019dc 	.word	0x200019dc
 8001564:	40016020 	.word	0x40016020

08001568 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_QUADSPI_Init+0x44>)
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <MX_QUADSPI_Init+0x48>)
 8001570:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_QUADSPI_Init+0x44>)
 8001574:	2202      	movs	r2, #2
 8001576:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_QUADSPI_Init+0x44>)
 800157a:	2204      	movs	r2, #4
 800157c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_QUADSPI_Init+0x44>)
 8001580:	2210      	movs	r2, #16
 8001582:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_QUADSPI_Init+0x44>)
 8001586:	2217      	movs	r2, #23
 8001588:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_QUADSPI_Init+0x44>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_QUADSPI_Init+0x44>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_QUADSPI_Init+0x44>)
 8001598:	f003 f982 	bl	80048a0 <HAL_QSPI_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80015a2:	f000 fd77 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20001fac 	.word	0x20001fac
 80015b0:	a0001000 	.word	0xa0001000

080015b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <MX_SPI1_Init+0x70>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015fa:	2207      	movs	r2, #7
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_SPI1_Init+0x6c>)
 8001600:	2200      	movs	r2, #0
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_SPI1_Init+0x6c>)
 8001606:	2200      	movs	r2, #0
 8001608:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_SPI1_Init+0x6c>)
 800160c:	f004 fcee 	bl	8005fec <HAL_SPI_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8001616:	f000 fd3d 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20001f48 	.word	0x20001f48
 8001624:	40013000 	.word	0x40013000

08001628 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_UART4_Init+0x5c>)
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <MX_UART4_Init+0x60>)
 8001630:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_UART4_Init+0x5c>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_UART4_Init+0x5c>)
 800163c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001640:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_UART4_Init+0x5c>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_UART4_Init+0x5c>)
 800164a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_UART4_Init+0x5c>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_UART4_Init+0x5c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_UART4_Init+0x5c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_UART4_Init+0x5c>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_UART4_Init+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_UART4_Init+0x5c>)
 8001670:	f005 fd2c 	bl	80070cc <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800167a:	f000 fd0b 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001ec4 	.word	0x20001ec4
 8001688:	40004c00 	.word	0x40004c00

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <MX_USART1_UART_Init+0x60>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 80016d4:	f005 fcfa 	bl	80070cc <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80016de:	f000 fcd9 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20001e2c 	.word	0x20001e2c
 80016ec:	40013800 	.word	0x40013800

080016f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fe:	2206      	movs	r2, #6
 8001700:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001704:	2202      	movs	r2, #2
 8001706:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800170a:	2202      	movs	r2, #2
 800170c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001734:	f002 fee7 	bl	8004506 <HAL_PCD_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fca9 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001a1c 	.word	0x20001a1c

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	4bb8      	ldr	r3, [pc, #736]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4ab7      	ldr	r2, [pc, #732]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4bb5      	ldr	r3, [pc, #724]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	4bb2      	ldr	r3, [pc, #712]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4ab1      	ldr	r2, [pc, #708]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4baf      	ldr	r3, [pc, #700]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4bac      	ldr	r3, [pc, #688]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4aab      	ldr	r2, [pc, #684]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4ba9      	ldr	r3, [pc, #676]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4ba6      	ldr	r3, [pc, #664]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4aa5      	ldr	r2, [pc, #660]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4ba3      	ldr	r3, [pc, #652]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4ba0      	ldr	r3, [pc, #640]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a9f      	ldr	r2, [pc, #636]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b9d      	ldr	r3, [pc, #628]	; (8001a44 <MX_GPIO_Init+0x2f8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80017e0:	4899      	ldr	r0, [pc, #612]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 80017e2:	f002 f8ed 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f248 1104 	movw	r1, #33028	; 0x8104
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 f8e6 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80017f4:	2200      	movs	r2, #0
 80017f6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80017fa:	4894      	ldr	r0, [pc, #592]	; (8001a4c <MX_GPIO_Init+0x300>)
 80017fc:	f002 f8e0 	bl	80039c0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f241 0181 	movw	r1, #4225	; 0x1081
 8001806:	4892      	ldr	r0, [pc, #584]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001808:	f002 f8da 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001812:	488f      	ldr	r0, [pc, #572]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001814:	f002 f8d4 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800181e:	488d      	ldr	r0, [pc, #564]	; (8001a54 <MX_GPIO_Init+0x308>)
 8001820:	f002 f8ce 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2120      	movs	r1, #32
 8001828:	4888      	ldr	r0, [pc, #544]	; (8001a4c <MX_GPIO_Init+0x300>)
 800182a:	f002 f8c9 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2101      	movs	r1, #1
 8001832:	4885      	ldr	r0, [pc, #532]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 8001834:	f002 f8c4 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001838:	f240 1315 	movw	r3, #277	; 0x115
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	487d      	ldr	r0, [pc, #500]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 8001852:	f001 ff0b 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001856:	236a      	movs	r3, #106	; 0x6a
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185a:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <MX_GPIO_Init+0x30c>)
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4877      	ldr	r0, [pc, #476]	; (8001a48 <MX_GPIO_Init+0x2fc>)
 800186a:	f001 feff 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800186e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001874:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <MX_GPIO_Init+0x310>)
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4874      	ldr	r0, [pc, #464]	; (8001a54 <MX_GPIO_Init+0x308>)
 8001884:	f001 fef2 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001888:	233f      	movs	r3, #63	; 0x3f
 800188a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800188c:	230b      	movs	r3, #11
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	486e      	ldr	r0, [pc, #440]	; (8001a54 <MX_GPIO_Init+0x308>)
 800189c:	f001 fee6 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80018a0:	f248 1304 	movw	r3, #33028	; 0x8104
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f001 fed6 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80018c0:	2308      	movs	r3, #8
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d0:	2301      	movs	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f001 fec5 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <MX_GPIO_Init+0x30c>)
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4855      	ldr	r0, [pc, #340]	; (8001a4c <MX_GPIO_Init+0x300>)
 80018f6:	f001 feb9 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80018fa:	2302      	movs	r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018fe:	230b      	movs	r3, #11
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	484f      	ldr	r0, [pc, #316]	; (8001a4c <MX_GPIO_Init+0x300>)
 800190e:	f001 fead 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001912:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001916:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4848      	ldr	r0, [pc, #288]	; (8001a4c <MX_GPIO_Init+0x300>)
 800192c:	f001 fe9e 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001930:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001936:	2312      	movs	r3, #18
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193a:	2301      	movs	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001942:	2304      	movs	r3, #4
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	483f      	ldr	r0, [pc, #252]	; (8001a4c <MX_GPIO_Init+0x300>)
 800194e:	f001 fe8d 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001952:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001964:	2307      	movs	r3, #7
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4838      	ldr	r0, [pc, #224]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001970:	f001 fe7c 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001974:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001978:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <MX_GPIO_Init+0x30c>)
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4831      	ldr	r0, [pc, #196]	; (8001a50 <MX_GPIO_Init+0x304>)
 800198a:	f001 fe6f 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800198e:	f243 0381 	movw	r3, #12417	; 0x3081
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	482a      	ldr	r0, [pc, #168]	; (8001a50 <MX_GPIO_Init+0x304>)
 80019a8:	f001 fe60 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80019ac:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4823      	ldr	r0, [pc, #140]	; (8001a54 <MX_GPIO_Init+0x308>)
 80019c6:	f001 fe51 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80019ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_GPIO_Init+0x30c>)
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	481d      	ldr	r0, [pc, #116]	; (8001a54 <MX_GPIO_Init+0x308>)
 80019e0:	f001 fe44 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80019e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019f6:	2306      	movs	r3, #6
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_GPIO_Init+0x308>)
 8001a02:	f001 fe33 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a06:	2302      	movs	r3, #2
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a16:	2305      	movs	r3, #5
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <MX_GPIO_Init+0x304>)
 8001a22:	f001 fe23 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a26:	2378      	movs	r3, #120	; 0x78
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a36:	2307      	movs	r3, #7
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	e00e      	b.n	8001a60 <MX_GPIO_Init+0x314>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000c00 	.word	0x48000c00
 8001a54:	48000800 	.word	0x48000800
 8001a58:	10110000 	.word	0x10110000
 8001a5c:	10210000 	.word	0x10210000
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <MX_GPIO_Init+0x364>)
 8001a62:	f001 fe03 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_GPIO_Init+0x368>)
 8001a84:	f001 fdf2 	bl	800366c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	2017      	movs	r0, #23
 8001a8e:	f001 fcb7 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a92:	2017      	movs	r0, #23
 8001a94:	f001 fcd0 	bl	8003438 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2105      	movs	r1, #5
 8001a9c:	2028      	movs	r0, #40	; 0x28
 8001a9e:	f001 fcaf 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aa2:	2028      	movs	r0, #40	; 0x28
 8001aa4:	f001 fcc8 	bl	8003438 <HAL_NVIC_EnableIRQ>

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	48000c00 	.word	0x48000c00
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(HAL_MAX_DELAY);
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f006 faa9 	bl	800801a <osDelay>
 8001ac8:	e7fa      	b.n	8001ac0 <StartDefaultTask+0x8>
	...

08001acc <StartReadTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTemp */
void StartReadTemp(void const * argument)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadTemp */
	float temp_value = 0;
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
	int tmpInt1, tmpInt2;
	float tmpFrac;
	uint32_t ret;

		do{
			 ret = BSP_TSENSOR_Init();
 8001ada:	f001 f801 	bl	8002ae0 <BSP_TSENSOR_Init>
 8001ade:	61b8      	str	r0, [r7, #24]

			if(ret == TSENSOR_ERROR){
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10f      	bne.n	8001b06 <StartReadTemp+0x3a>
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aec:	482d      	ldr	r0, [pc, #180]	; (8001ba4 <StartReadTemp+0xd8>)
 8001aee:	f001 ff67 	bl	80039c0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8001af2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af6:	f001 fba7 	bl	8003248 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b00:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <StartReadTemp+0xd8>)
 8001b02:	f001 ff5d 	bl	80039c0 <HAL_GPIO_WritePin>
			}

		}while(ret == TSENSOR_ERROR);
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d0e6      	beq.n	8001ada <StartReadTemp+0xe>

	printf("ReadTemp: Temperature sensor initialized.\r");
 8001b0c:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <StartReadTemp+0xdc>)
 8001b0e:	f008 f9c1 	bl	8009e94 <iprintf>
	/* Infinite loop */
	for(;;)
	{
		if(written_data[0] == 0){
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <StartReadTemp+0xe0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13a      	bne.n	8001b92 <StartReadTemp+0xc6>
			temp_value = BSP_TSENSOR_ReadTemp();
 8001b1c:	f000 fffc 	bl	8002b18 <BSP_TSENSOR_ReadTemp>
 8001b20:	ed87 0a07 	vstr	s0, [r7, #28]
			tmpInt1 = temp_value;
 8001b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	617b      	str	r3, [r7, #20]
			tmpFrac = temp_value - tmpInt1;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	edc7 7a04 	vstr	s15, [r7, #16]
			tmpInt2 = trunc(tmpFrac * 100);
 8001b48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b4c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001bb0 <StartReadTemp+0xe4>
 8001b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b54:	ee17 0a90 	vmov	r0, s15
 8001b58:	f7fe fcf6 	bl	8000548 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	ec43 2b10 	vmov	d0, r2, r3
 8001b64:	f00a fb5a 	bl	800c21c <trunc>
 8001b68:	ec53 2b10 	vmov	r2, r3, d0
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe fff2 	bl	8000b58 <__aeabi_d2iz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]
			// snprintf(output_str, sizeof(output_str), str_tmp, tmpInt1, tmpInt2);
			// HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
			printf("ReadTemp: Temperatura = %d.%02d°C\r", tmpInt1, tmpInt2);
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <StartReadTemp+0xe8>)
 8001b7e:	f008 f989 	bl	8009e94 <iprintf>

			sensor_data.temperature = temp_value;
 8001b82:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <StartReadTemp+0xec>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	6013      	str	r3, [r2, #0]
			written_data[0] = 1;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <StartReadTemp+0xe0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e002      	b.n	8001b98 <StartReadTemp+0xcc>

			// if(_sum(written_data) >= 4)
				// xTaskNotifyGive(sendDataHandle);
		}
		else
			printf("ReadTemp: written_data is still 1. Sleeping.\r");
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <StartReadTemp+0xf0>)
 8001b94:	f008 f97e 	bl	8009e94 <iprintf>

		osDelay(delay);
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <StartReadTemp+0xf4>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fa3c 	bl	800801a <osDelay>
		if(written_data[0] == 0){
 8001ba2:	e7b6      	b.n	8001b12 <StartReadTemp+0x46>
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	0800c56c 	.word	0x0800c56c
 8001bac:	20001e28 	.word	0x20001e28
 8001bb0:	42c80000 	.word	0x42c80000
 8001bb4:	0800c598 	.word	0x0800c598
 8001bb8:	200019cc 	.word	0x200019cc
 8001bbc:	0800c5bc 	.word	0x0800c5bc
 8001bc0:	20001eb8 	.word	0x20001eb8

08001bc4 <StartReadHum>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadHum */
void StartReadHum(void const * argument)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadHum */
	/* Infinite loop */
	float hum_value = 0;
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
	int humInt1, humInt2;
	float humFrac;
	uint32_t ret;

		do{
			 ret = BSP_HSENSOR_Init();
 8001bd2:	f000 fee5 	bl	80029a0 <BSP_HSENSOR_Init>
 8001bd6:	61b8      	str	r0, [r7, #24]

			if(ret == HSENSOR_ERROR){
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d10f      	bne.n	8001bfe <StartReadHum+0x3a>
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be4:	482e      	ldr	r0, [pc, #184]	; (8001ca0 <StartReadHum+0xdc>)
 8001be6:	f001 feeb 	bl	80039c0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8001bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bee:	f001 fb2b 	bl	8003248 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf8:	4829      	ldr	r0, [pc, #164]	; (8001ca0 <StartReadHum+0xdc>)
 8001bfa:	f001 fee1 	bl	80039c0 <HAL_GPIO_WritePin>
			}

		}while(ret == HSENSOR_ERROR);
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d0e6      	beq.n	8001bd2 <StartReadHum+0xe>

	printf("ReadHum: Humidity sensor initialized.\r");
 8001c04:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <StartReadHum+0xe0>)
 8001c06:	f008 f945 	bl	8009e94 <iprintf>
	/* Infinite loop */
	for(;;)
	{
		if(written_data[1] == 0){
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <StartReadHum+0xe4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13b      	bne.n	8001c8e <StartReadHum+0xca>
			hum_value = BSP_HSENSOR_ReadHumidity();
 8001c16:	f000 fee3 	bl	80029e0 <BSP_HSENSOR_ReadHumidity>
 8001c1a:	ed87 0a07 	vstr	s0, [r7, #28]
			humInt1 = hum_value;
 8001c1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c26:	ee17 3a90 	vmov	r3, s15
 8001c2a:	617b      	str	r3, [r7, #20]
			humFrac = hum_value - humInt1;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3e:	edc7 7a04 	vstr	s15, [r7, #16]
			humInt2 = trunc(humFrac * 100);
 8001c42:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c46:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001cac <StartReadHum+0xe8>
 8001c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4e:	ee17 0a90 	vmov	r0, s15
 8001c52:	f7fe fc79 	bl	8000548 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b10 	vmov	d0, r2, r3
 8001c5e:	f00a fadd 	bl	800c21c <trunc>
 8001c62:	ec53 2b10 	vmov	r2, r3, d0
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff75 	bl	8000b58 <__aeabi_d2iz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	60fb      	str	r3, [r7, #12]
			// snprintf(output_str, sizeof(output_str), str_hum, humInt1, humInt2);
			// HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_hum), 1000);
			printf("ReadHum: Umidita' = %d.%02d\r", humInt1, humInt2);
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	6979      	ldr	r1, [r7, #20]
 8001c76:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <StartReadHum+0xec>)
 8001c78:	f008 f90c 	bl	8009e94 <iprintf>

			sensor_data.humidity = hum_value;
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <StartReadHum+0xf0>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	6093      	str	r3, [r2, #8]
			written_data[1] = 1;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <StartReadHum+0xe4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e002      	b.n	8001c94 <StartReadHum+0xd0>

			// if(_sum(written_data) >= 4)
				// xTaskNotifyGive(sendDataHandle);
		}
		else
			printf("ReadHum: written_data is still 1. Sleeping.\r");
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <StartReadHum+0xf4>)
 8001c90:	f008 f900 	bl	8009e94 <iprintf>

		osDelay(delay);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <StartReadHum+0xf8>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 f9be 	bl	800801a <osDelay>
		if(written_data[1] == 0){
 8001c9e:	e7b4      	b.n	8001c0a <StartReadHum+0x46>
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	0800c5ec 	.word	0x0800c5ec
 8001ca8:	20001e28 	.word	0x20001e28
 8001cac:	42c80000 	.word	0x42c80000
 8001cb0:	0800c614 	.word	0x0800c614
 8001cb4:	200019cc 	.word	0x200019cc
 8001cb8:	0800c634 	.word	0x0800c634
 8001cbc:	20001eb8 	.word	0x20001eb8

08001cc0 <StartReadPressure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadPressure */
void StartReadPressure(void const * argument)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReadPressure */
	float pres_value = 0;
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
	int presInt1, presInt2;
	float presFrac;
	uint32_t ret;

	do{
		 ret = BSP_PSENSOR_Init();
 8001cce:	f000 fed9 	bl	8002a84 <BSP_PSENSOR_Init>
 8001cd2:	61b8      	str	r0, [r7, #24]

		if(ret == PSENSOR_ERROR){
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10f      	bne.n	8001cfa <StartReadPressure+0x3a>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce0:	482e      	ldr	r0, [pc, #184]	; (8001d9c <StartReadPressure+0xdc>)
 8001ce2:	f001 fe6d 	bl	80039c0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8001ce6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cea:	f001 faad 	bl	8003248 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf4:	4829      	ldr	r0, [pc, #164]	; (8001d9c <StartReadPressure+0xdc>)
 8001cf6:	f001 fe63 	bl	80039c0 <HAL_GPIO_WritePin>
		}

	}while(ret == PSENSOR_ERROR);
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d0e6      	beq.n	8001cce <StartReadPressure+0xe>

	printf("ReadPress: Pressure sensor initialized.\r");
 8001d00:	4827      	ldr	r0, [pc, #156]	; (8001da0 <StartReadPressure+0xe0>)
 8001d02:	f008 f8c7 	bl	8009e94 <iprintf>
	/* Infinite loop */
	for(;;)
	{
		if(written_data[2] == 0){
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <StartReadPressure+0xe4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d13b      	bne.n	8001d8a <StartReadPressure+0xca>
			pres_value = BSP_PSENSOR_ReadPressure();
 8001d12:	f000 fed7 	bl	8002ac4 <BSP_PSENSOR_ReadPressure>
 8001d16:	ed87 0a07 	vstr	s0, [r7, #28]
			presInt1 = pres_value;
 8001d1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	617b      	str	r3, [r7, #20]
			presFrac = pres_value - presInt1;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3a:	edc7 7a04 	vstr	s15, [r7, #16]
			presInt2 = trunc(presFrac * 100);
 8001d3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d42:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001da8 <StartReadPressure+0xe8>
 8001d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fbfb 	bl	8000548 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	ec43 2b10 	vmov	d0, r2, r3
 8001d5a:	f00a fa5f 	bl	800c21c <trunc>
 8001d5e:	ec53 2b10 	vmov	r2, r3, d0
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe fef7 	bl	8000b58 <__aeabi_d2iz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	60fb      	str	r3, [r7, #12]
			// snprintf(output_str, sizeof(output_str), str_pres, presInt1, presInt2);
			// HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_pres), 1000);
			printf("ReadPress: Pressione = %d.%02d hPa\r", presInt1, presInt2);
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <StartReadPressure+0xec>)
 8001d74:	f008 f88e 	bl	8009e94 <iprintf>

			sensor_data.pressure = pres_value;
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <StartReadPressure+0xf0>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	6053      	str	r3, [r2, #4]
			written_data[2] = 1;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <StartReadPressure+0xe4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3302      	adds	r3, #2
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e002      	b.n	8001d90 <StartReadPressure+0xd0>

			// if(_sum(written_data) >= 4)
				// xTaskNotifyGive(sendDataHandle);
		}
		else
			printf("ReadPress: written_data is still 1. Sleeping.\r");
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <StartReadPressure+0xf4>)
 8001d8c:	f008 f882 	bl	8009e94 <iprintf>

		osDelay(delay);
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <StartReadPressure+0xf8>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f006 f940 	bl	800801a <osDelay>
		if(written_data[2] == 0){
 8001d9a:	e7b4      	b.n	8001d06 <StartReadPressure+0x46>
 8001d9c:	48000400 	.word	0x48000400
 8001da0:	0800c664 	.word	0x0800c664
 8001da4:	20001e28 	.word	0x20001e28
 8001da8:	42c80000 	.word	0x42c80000
 8001dac:	0800c690 	.word	0x0800c690
 8001db0:	200019cc 	.word	0x200019cc
 8001db4:	0800c6b4 	.word	0x0800c6b4
 8001db8:	20001eb8 	.word	0x20001eb8
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <StartReadMagnetometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadMagnetometer */
void StartReadMagnetometer(void const * argument)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b090      	sub	sp, #64	; 0x40
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	int16_t x, y;
	// char *str_tmp = "Direzione del nord = %d.%02d°\r";
	// char output_str[sizeof(str_tmp)];
	double direction, magnFrac;
	int magnInt1, magnInt2;
	double declination_angle = 3.45;
 8001dc8:	a396      	add	r3, pc, #600	; (adr r3, 8002024 <StartReadMagnetometer+0x264>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	MAGNETO_StatusTypeDef ret;

	do{
		 ret = BSP_MAGNETO_Init();
 8001dd2:	f000 fe13 	bl	80029fc <BSP_MAGNETO_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(ret != MAGNETO_OK){
 8001ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00f      	beq.n	8001e04 <StartReadMagnetometer+0x44>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 8001de4:	2201      	movs	r2, #1
 8001de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dea:	4883      	ldr	r0, [pc, #524]	; (8001ff8 <StartReadMagnetometer+0x238>)
 8001dec:	f001 fde8 	bl	80039c0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8001df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df4:	f001 fa28 	bl	8003248 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dfe:	487e      	ldr	r0, [pc, #504]	; (8001ff8 <StartReadMagnetometer+0x238>)
 8001e00:	f001 fdde 	bl	80039c0 <HAL_GPIO_WritePin>
		}

	}while(ret != MAGNETO_OK);
 8001e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e2      	bne.n	8001dd2 <StartReadMagnetometer+0x12>

	printf("ReadMagn: Magnetometer initialized.\r");
 8001e0c:	487b      	ldr	r0, [pc, #492]	; (8001ffc <StartReadMagnetometer+0x23c>)
 8001e0e:	f008 f841 	bl	8009e94 <iprintf>
	/* Infinite loop */
	for(;;)
	{
		if(written_data[3] == 0){
 8001e12:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <StartReadMagnetometer+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3303      	adds	r3, #3
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 80db 	bne.w	8001fd6 <StartReadMagnetometer+0x216>
			BSP_MAGNETO_GetXYZ(xyz);
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fe15 	bl	8002a54 <BSP_MAGNETO_GetXYZ>
			x = xyz[0];
 8001e2a:	89bb      	ldrh	r3, [r7, #12]
 8001e2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
			y = xyz[1];
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	857b      	strh	r3, [r7, #42]	; 0x2a

			if(y > 0)
 8001e32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	dd2a      	ble.n	8001e90 <StartReadMagnetometer+0xd0>
				direction = 90 - (atan(x/y) * 180/M_PI);
 8001e3a:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001e3e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb6c 	bl	8000524 <__aeabi_i2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	ec43 2b10 	vmov	d0, r2, r3
 8001e54:	f00a f838 	bl	800bec8 <atan>
 8001e58:	ec51 0b10 	vmov	r0, r1, d0
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <StartReadMagnetometer+0x244>)
 8001e62:	f7fe fbc9 	bl	80005f8 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	a35e      	add	r3, pc, #376	; (adr r3, 8001fe8 <StartReadMagnetometer+0x228>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fcea 	bl	800084c <__aeabi_ddiv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	4961      	ldr	r1, [pc, #388]	; (8002008 <StartReadMagnetometer+0x248>)
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001e8e:	e050      	b.n	8001f32 <StartReadMagnetometer+0x172>
			else if(y < 0)
 8001e90:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da2a      	bge.n	8001eee <StartReadMagnetometer+0x12e>
				direction = 270 - (atan(x/y) * 180/M_PI);
 8001e98:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001e9c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ea0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb3d 	bl	8000524 <__aeabi_i2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	f00a f809 	bl	800bec8 <atan>
 8001eb6:	ec51 0b10 	vmov	r0, r1, d0
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <StartReadMagnetometer+0x244>)
 8001ec0:	f7fe fb9a 	bl	80005f8 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a346      	add	r3, pc, #280	; (adr r3, 8001fe8 <StartReadMagnetometer+0x228>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fcbb 	bl	800084c <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	a145      	add	r1, pc, #276	; (adr r1, 8001ff0 <StartReadMagnetometer+0x230>)
 8001edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee0:	f7fe f9d2 	bl	8000288 <__aeabi_dsub>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001eec:	e021      	b.n	8001f32 <StartReadMagnetometer+0x172>
			else if(y == 0 && x < 0)
 8001eee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <StartReadMagnetometer+0x14a>
 8001ef6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da05      	bge.n	8001f0a <StartReadMagnetometer+0x14a>
				direction = 180.0;
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b40      	ldr	r3, [pc, #256]	; (8002004 <StartReadMagnetometer+0x244>)
 8001f04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001f08:	e013      	b.n	8001f32 <StartReadMagnetometer+0x172>
			else if(y == 0 && x > 0)
 8001f0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <StartReadMagnetometer+0x168>
 8001f12:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	dd06      	ble.n	8001f28 <StartReadMagnetometer+0x168>
				direction = 0.0;
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001f26:	e004      	b.n	8001f32 <StartReadMagnetometer+0x172>
			else
				direction = -1.0;
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b37      	ldr	r3, [pc, #220]	; (800200c <StartReadMagnetometer+0x24c>)
 8001f2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if(direction != -1.0){
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <StartReadMagnetometer+0x24c>)
 8001f38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f3c:	f7fe fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d14a      	bne.n	8001fdc <StartReadMagnetometer+0x21c>
				direction += declination_angle;
 8001f46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f4e:	f7fe f99d 	bl	800028c <__adddf3>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				magnInt1 = direction;
 8001f5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f5e:	f7fe fdfb 	bl	8000b58 <__aeabi_d2iz>
 8001f62:	4603      	mov	r3, r0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
				magnFrac = direction - magnInt1;
 8001f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f68:	f7fe fadc 	bl	8000524 <__aeabi_i2d>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f74:	f7fe f988 	bl	8000288 <__aeabi_dsub>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
				magnInt2 = trunc(magnFrac * 100);
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <StartReadMagnetometer+0x250>)
 8001f86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	ec43 2b17 	vmov	d7, r2, r3
 8001f96:	eeb0 0a47 	vmov.f32	s0, s14
 8001f9a:	eef0 0a67 	vmov.f32	s1, s15
 8001f9e:	f00a f93d 	bl	800c21c <trunc>
 8001fa2:	ec53 2b10 	vmov	r2, r3, d0
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fdd5 	bl	8000b58 <__aeabi_d2iz>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	617b      	str	r3, [r7, #20]
				// snprintf(output_str, sizeof(output_str), str_tmp, magnInt1, magnInt2);
				// HAL_UART_Transmit(&huart1, (uint8_t *)output_str, sizeof(str_tmp), 1000);
				printf("ReadMagn: Direzione del nord = %d.%02d°\r", magnInt1, magnInt2);
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb6:	4817      	ldr	r0, [pc, #92]	; (8002014 <StartReadMagnetometer+0x254>)
 8001fb8:	f007 ff6c 	bl	8009e94 <iprintf>

				sensor_data.north_direction = direction;
 8001fbc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fc0:	f7fe fdf2 	bl	8000ba8 <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <StartReadMagnetometer+0x258>)
 8001fc8:	60d3      	str	r3, [r2, #12]
				written_data[3] = 1;
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <StartReadMagnetometer+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3303      	adds	r3, #3
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e002      	b.n	8001fdc <StartReadMagnetometer+0x21c>
				// if(_sum(written_data) >= 4)
					// xTaskNotifyGive(sendDataHandle);
			}
		}
		else
			printf("ReadHum: written_data is still 1. Sleeping.\r");
 8001fd6:	4811      	ldr	r0, [pc, #68]	; (800201c <StartReadMagnetometer+0x25c>)
 8001fd8:	f007 ff5c 	bl	8009e94 <iprintf>

		osDelay(delay);
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <StartReadMagnetometer+0x260>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f006 f81a 	bl	800801a <osDelay>
		if(written_data[3] == 0){
 8001fe6:	e714      	b.n	8001e12 <StartReadMagnetometer+0x52>
 8001fe8:	54442d18 	.word	0x54442d18
 8001fec:	400921fb 	.word	0x400921fb
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	4070e000 	.word	0x4070e000
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	0800c6e4 	.word	0x0800c6e4
 8002000:	20001e28 	.word	0x20001e28
 8002004:	40668000 	.word	0x40668000
 8002008:	40568000 	.word	0x40568000
 800200c:	bff00000 	.word	0xbff00000
 8002010:	40590000 	.word	0x40590000
 8002014:	0800c70c 	.word	0x0800c70c
 8002018:	200019cc 	.word	0x200019cc
 800201c:	0800c634 	.word	0x0800c634
 8002020:	20001eb8 	.word	0x20001eb8
 8002024:	9999999a 	.word	0x9999999a
 8002028:	400b9999 	.word	0x400b9999

0800202c <StartSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendData */
void StartSendData(void const * argument)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	  // printf("SendData: waiting for a notification...\r");
	  // ulTaskNotifyTake(pdTRUE, xBlockTime);
	  // printf("SendData: woke up.\r");
	  // if(_sum(written_data) >= 4)
		  // _UART_send_sensor_data();
	  if(_sum(written_data) >= 4)
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <StartSendData+0x2c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe ffed 	bl	8001018 <_sum>
 800203e:	4603      	mov	r3, r0
 8002040:	2b03      	cmp	r3, #3
 8002042:	d902      	bls.n	800204a <StartSendData+0x1e>
		  _UART_send_sensor_data();
 8002044:	f7ff f806 	bl	8001054 <_UART_send_sensor_data>
 8002048:	e7f4      	b.n	8002034 <StartSendData+0x8>
	  else
		  osDelay(delay);
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <StartSendData+0x30>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f005 ffe3 	bl	800801a <osDelay>
	  if(_sum(written_data) >= 4)
 8002054:	e7ee      	b.n	8002034 <StartSendData+0x8>
 8002056:	bf00      	nop
 8002058:	20001e28 	.word	0x20001e28
 800205c:	20001eb8 	.word	0x20001eb8

08002060 <StartReceiveDelay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveDelay */
void StartReceiveDelay(void const * argument)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveDelay */
  /* Infinite loop */
  for(;;)
  {
	  _SPI_receive_delay();
 8002068:	f7fe ff98 	bl	8000f9c <_SPI_receive_delay>
 800206c:	e7fc      	b.n	8002068 <StartReceiveDelay+0x8>
	...

08002070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002082:	f001 f8c1 	bl	8003208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40001000 	.word	0x40001000

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>
	...

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_MspInit+0x4c>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_MspInit+0x4c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_MspInit+0x4c>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_MspInit+0x4c>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_MspInit+0x4c>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_MspInit+0x4c>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	210f      	movs	r1, #15
 80020da:	f06f 0001 	mvn.w	r0, #1
 80020de:	f001 f98f 	bl	8003400 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_DFSDM_ChannelMspInit+0x84>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12d      	bne.n	800216c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211a:	6613      	str	r3, [r2, #96]	; 0x60
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_DFSDM_ChannelMspInit+0x88>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_DFSDM_ChannelMspInit+0x88>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_DFSDM_ChannelMspInit+0x88>)
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002140:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002152:	2306      	movs	r3, #6
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4807      	ldr	r0, [pc, #28]	; (800217c <HAL_DFSDM_ChannelMspInit+0x8c>)
 800215e:	f001 fa85 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_DFSDM_ChannelMspInit+0x84>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a02      	ldr	r2, [pc, #8]	; (8002174 <HAL_DFSDM_ChannelMspInit+0x84>)
 800216a:	6013      	str	r3, [r2, #0]
  }

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200004ac 	.word	0x200004ac
 8002178:	40021000 	.word	0x40021000
 800217c:	48001000 	.word	0x48001000

08002180 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_QSPI_MspInit+0x7c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d128      	bne.n	80021f4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_QSPI_MspInit+0x80>)
 80021a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a6:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_QSPI_MspInit+0x80>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6513      	str	r3, [r2, #80]	; 0x50
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_QSPI_MspInit+0x80>)
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_QSPI_MspInit+0x80>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_QSPI_MspInit+0x80>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_QSPI_MspInit+0x80>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80021d2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80021d6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021e4:	230a      	movs	r3, #10
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <HAL_QSPI_MspInit+0x84>)
 80021f0:	f001 fa3c 	bl	800366c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	3728      	adds	r7, #40	; 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	a0001000 	.word	0xa0001000
 8002200:	40021000 	.word	0x40021000
 8002204:	48001000 	.word	0x48001000

08002208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_SPI_MspInit+0x7c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d128      	bne.n	800227c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_SPI_MspInit+0x80>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002234:	6613      	str	r3, [r2, #96]	; 0x60
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_SPI_MspInit+0x80>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800225a:	23f0      	movs	r3, #240	; 0xf0
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800226a:	2305      	movs	r3, #5
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f001 f9f8 	bl	800366c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40013000 	.word	0x40013000
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <HAL_UART_MspInit+0xd8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d129      	bne.n	8002302 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_UART_MspInit+0xdc>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a2d      	ldr	r2, [pc, #180]	; (8002368 <HAL_UART_MspInit+0xdc>)
 80022b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_UART_MspInit+0xdc>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_UART_MspInit+0xdc>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_UART_MspInit+0xdc>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_UART_MspInit+0xdc>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80022de:	2303      	movs	r3, #3
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022ee:	2308      	movs	r3, #8
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fc:	f001 f9b6 	bl	800366c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002300:	e02c      	b.n	800235c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_UART_MspInit+0xe0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d127      	bne.n	800235c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_UART_MspInit+0xdc>)
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_UART_MspInit+0xdc>)
 8002312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002316:	6613      	str	r3, [r2, #96]	; 0x60
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_UART_MspInit+0xdc>)
 800231a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_UART_MspInit+0xdc>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <HAL_UART_MspInit+0xdc>)
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_UART_MspInit+0xdc>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800233c:	23c0      	movs	r3, #192	; 0xc0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800234c:	2307      	movs	r3, #7
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	4619      	mov	r1, r3
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <HAL_UART_MspInit+0xe4>)
 8002358:	f001 f988 	bl	800366c <HAL_GPIO_Init>
}
 800235c:	bf00      	nop
 800235e:	3730      	adds	r7, #48	; 0x30
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40004c00 	.word	0x40004c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40013800 	.word	0x40013800
 8002370:	48000400 	.word	0x48000400

08002374 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002394:	d154      	bne.n	8002440 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b2c      	ldr	r3, [pc, #176]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f001 f951 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80023ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023dc:	230a      	movs	r3, #10
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ea:	f001 f93f 	bl	800366c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 80023f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d114      	bne.n	800243c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800242a:	f002 fa29 	bl	8004880 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <HAL_PCD_MspInit+0xd4>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800243a:	e001      	b.n	8002440 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800243c:	f002 fa20 	bl	8004880 <HAL_PWREx_EnableVddUSB>
}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800245c:	2200      	movs	r2, #0
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	2036      	movs	r0, #54	; 0x36
 8002462:	f000 ffcd 	bl	8003400 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002466:	2036      	movs	r0, #54	; 0x36
 8002468:	f000 ffe6 	bl	8003438 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_InitTick+0x9c>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a1d      	ldr	r2, [pc, #116]	; (80024e8 <HAL_InitTick+0x9c>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_InitTick+0x9c>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002484:	f107 0210 	add.w	r2, r7, #16
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f003 f84e 	bl	8005530 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002494:	f003 f820 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8002498:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	4a13      	ldr	r2, [pc, #76]	; (80024ec <HAL_InitTick+0xa0>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	3b01      	subs	r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_InitTick+0xa4>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_InitTick+0xa8>)
 80024ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_InitTick+0xa4>)
 80024b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_InitTick+0xa4>)
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_InitTick+0xa4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_InitTick+0xa4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <HAL_InitTick+0xa4>)
 80024ca:	f004 fb2d 	bl	8006b28 <HAL_TIM_Base_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d104      	bne.n	80024de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <HAL_InitTick+0xa4>)
 80024d6:	f004 fb89 	bl	8006bec <HAL_TIM_Base_Start_IT>
 80024da:	4603      	mov	r3, r0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3730      	adds	r7, #48	; 0x30
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	20001ff0 	.word	0x20001ff0
 80024f4:	40001000 	.word	0x40001000

080024f8 <prvGetRegistersFromStack>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void prvGetRegistersFromStack(uint32_t *pulFaultStackAddress)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b08b      	sub	sp, #44	; 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
volatile uint32_t r12;
volatile uint32_t lr; /* Link register. */
volatile uint32_t pc; /* Program counter. */
volatile uint32_t psr;/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
    r1 = pulFaultStackAddress[ 1 ];
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	623b      	str	r3, [r7, #32]
    r2 = pulFaultStackAddress[ 2 ];
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	61fb      	str	r3, [r7, #28]
    r3 = pulFaultStackAddress[ 3 ];
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	61bb      	str	r3, [r7, #24]

    r12 = pulFaultStackAddress[ 4 ];
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	617b      	str	r3, [r7, #20]
    lr = pulFaultStackAddress[ 5 ];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	613b      	str	r3, [r7, #16]
    pc = pulFaultStackAddress[ 6 ];
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	60fb      	str	r3, [r7, #12]
    psr = pulFaultStackAddress[ 7 ];
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	60bb      	str	r3, [r7, #8]

    /* When the following line is hit, the variables contain the register values. */
    for( ;; );
 8002530:	e7fe      	b.n	8002530 <prvGetRegistersFromStack+0x38>

08002532 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <NMI_Handler+0x4>

08002538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm volatile
 800253c:	f01e 0f04 	tst.w	lr, #4
 8002540:	bf0c      	ite	eq
 8002542:	f3ef 8008 	mrseq	r0, MSP
 8002546:	f3ef 8009 	mrsne	r0, PSP
 800254a:	6981      	ldr	r1, [r0, #24]
 800254c:	4a00      	ldr	r2, [pc, #0]	; (8002550 <handler2_address_const>)
 800254e:	4710      	bx	r2

08002550 <handler2_address_const>:
 8002550:	080024f9 	.word	0x080024f9
		        " ldr r2, handler2_address_const                            \n"
		        " bx r2                                                     \n"
		        " handler2_address_const: .word prvGetRegistersFromStack    \n"
		    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <handler2_address_const+0x4>

08002556 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <MemManage_Handler+0x4>

0800255c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <BusFault_Handler+0x4>

08002562 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <UsageFault_Handler+0x4>

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800257a:	2020      	movs	r0, #32
 800257c:	f001 fa38 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002580:	2040      	movs	r0, #64	; 0x40
 8002582:	f001 fa35 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002586:	2080      	movs	r0, #128	; 0x80
 8002588:	f001 fa32 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800258c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002590:	f001 fa2e 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800259c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025a0:	f001 fa26 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80025a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80025a8:	f001 fa22 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025b0:	f001 fa1e 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80025b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025b8:	f001 fa1a 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80025bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025c0:	f001 fa16 	bl	80039f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM6_DAC_IRQHandler+0x10>)
 80025ce:	f004 fb7d 	bl	8006ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20001ff0 	.word	0x20001ff0

080025dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <_sbrk+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <_sbrk+0x60>)
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x64>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <_sbrk+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800260c:	f006 fee6 	bl	80093dc <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e009      	b.n	8002630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <_sbrk+0x64>)
 800262c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20018000 	.word	0x20018000
 800263c:	00000400 	.word	0x00000400
 8002640:	200004b0 	.word	0x200004b0
 8002644:	20002120 	.word	0x20002120

08002648 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <SystemInit+0x5c>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <SystemInit+0x5c>)
 8002654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <SystemInit+0x60>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <SystemInit+0x60>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <SystemInit+0x60>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <SystemInit+0x60>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <SystemInit+0x60>)
 8002674:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002678:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800267c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <SystemInit+0x60>)
 8002680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002684:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <SystemInit+0x60>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <SystemInit+0x60>)
 800268c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SystemInit+0x60>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00
 80026a8:	40021000 	.word	0x40021000

080026ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026b0:	f7ff ffca 	bl	8002648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026b6:	e003      	b.n	80026c0 <LoopCopyDataInit>

080026b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026be:	3104      	adds	r1, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80026c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026c8:	d3f6      	bcc.n	80026b8 <CopyDataInit>
	ldr	r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80026cc:	e002      	b.n	80026d4 <LoopFillZerobss>

080026ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026d0:	f842 3b04 	str.w	r3, [r2], #4

080026d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <LoopForever+0x16>)
	cmp	r2, r3
 80026d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026d8:	d3f9      	bcc.n	80026ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026da:	f006 fe85 	bl	80093e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026de:	f7fe fd8f 	bl	8001200 <main>

080026e2 <LoopForever>:

LoopForever:
    b LoopForever
 80026e2:	e7fe      	b.n	80026e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026e4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80026e8:	0800cbc0 	.word	0x0800cbc0
	ldr	r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026f0:	2000023c 	.word	0x2000023c
	ldr	r2, =_sbss
 80026f4:	2000023c 	.word	0x2000023c
	ldr	r3, = _ebss
 80026f8:	20002120 	.word	0x20002120

080026fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_2_IRQHandler>
	...

08002700 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <I2Cx_MspInit+0xa8>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <I2Cx_MspInit+0xa8>)
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <I2Cx_MspInit+0xa8>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002720:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002724:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002726:	2312      	movs	r3, #18
 8002728:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800272a:	2301      	movs	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002732:	2304      	movs	r3, #4
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	481b      	ldr	r0, [pc, #108]	; (80027ac <I2Cx_MspInit+0xac>)
 800273e:	f000 ff95 	bl	800366c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	4818      	ldr	r0, [pc, #96]	; (80027ac <I2Cx_MspInit+0xac>)
 800274a:	f000 ff8f 	bl	800366c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <I2Cx_MspInit+0xa8>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <I2Cx_MspInit+0xa8>)
 8002754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <I2Cx_MspInit+0xa8>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <I2Cx_MspInit+0xa8>)
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <I2Cx_MspInit+0xa8>)
 800276c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002770:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <I2Cx_MspInit+0xa8>)
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <I2Cx_MspInit+0xa8>)
 8002778:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800277c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	210f      	movs	r1, #15
 8002782:	2021      	movs	r0, #33	; 0x21
 8002784:	f000 fe3c 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002788:	2021      	movs	r0, #33	; 0x21
 800278a:	f000 fe55 	bl	8003438 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	210f      	movs	r1, #15
 8002792:	2022      	movs	r0, #34	; 0x22
 8002794:	f000 fe34 	bl	8003400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002798:	2022      	movs	r0, #34	; 0x22
 800279a:	f000 fe4d 	bl	8003438 <HAL_NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	48000400 	.word	0x48000400

080027b0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <I2Cx_Init+0x54>)
 80027bc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <I2Cx_Init+0x58>)
 80027c2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff89 	bl	8002700 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f001 f921 	bl	8003a36 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80027f4:	2100      	movs	r1, #0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f001 fe3a 	bl	8004470 <HAL_I2CEx_ConfigAnalogFilter>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40005800 	.word	0x40005800
 8002808:	00702681 	.word	0x00702681

0800280c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af04      	add	r7, sp, #16
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	4608      	mov	r0, r1
 8002816:	4611      	mov	r1, r2
 8002818:	461a      	mov	r2, r3
 800281a:	4603      	mov	r3, r0
 800281c:	72fb      	strb	r3, [r7, #11]
 800281e:	460b      	mov	r3, r1
 8002820:	813b      	strh	r3, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	b299      	uxth	r1, r3
 800282e:	88f8      	ldrh	r0, [r7, #6]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4603      	mov	r3, r0
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f001 fade 	bl	8003e04 <HAL_I2C_Mem_Read>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	4619      	mov	r1, r3
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f832 	bl	80028c0 <I2Cx_Error>
  }
  return status;
 800285c:	7dfb      	ldrb	r3, [r7, #23]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b08a      	sub	sp, #40	; 0x28
 800286a:	af04      	add	r7, sp, #16
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	4608      	mov	r0, r1
 8002870:	4611      	mov	r1, r2
 8002872:	461a      	mov	r2, r3
 8002874:	4603      	mov	r3, r0
 8002876:	72fb      	strb	r3, [r7, #11]
 8002878:	460b      	mov	r3, r1
 800287a:	813b      	strh	r3, [r7, #8]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	b299      	uxth	r1, r3
 8002888:	88f8      	ldrh	r0, [r7, #6]
 800288a:	893a      	ldrh	r2, [r7, #8]
 800288c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4603      	mov	r3, r0
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f001 f99d 	bl	8003bdc <HAL_I2C_Mem_Write>
 80028a2:	4603      	mov	r3, r0
 80028a4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	4619      	mov	r1, r3
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f805 	bl	80028c0 <I2Cx_Error>
  }
  return status;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 f941 	bl	8003b54 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff6c 	bl	80027b0 <I2Cx_Init>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80028e4:	4802      	ldr	r0, [pc, #8]	; (80028f0 <SENSOR_IO_Init+0x10>)
 80028e6:	f7ff ff63 	bl	80027b0 <I2Cx_Init>
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	200020c0 	.word	0x200020c0

080028f4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	460b      	mov	r3, r1
 8002900:	71bb      	strb	r3, [r7, #6]
 8002902:	4613      	mov	r3, r2
 8002904:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	b29a      	uxth	r2, r3
 800290a:	79f9      	ldrb	r1, [r7, #7]
 800290c:	2301      	movs	r3, #1
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	1d7b      	adds	r3, r7, #5
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <SENSOR_IO_Write+0x30>)
 8002918:	f7ff ffa5 	bl	8002866 <I2Cx_WriteMultiple>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200020c0 	.word	0x200020c0

08002928 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	4603      	mov	r3, r0
 8002930:	460a      	mov	r2, r1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	4613      	mov	r3, r2
 8002936:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800293c:	79bb      	ldrb	r3, [r7, #6]
 800293e:	b29a      	uxth	r2, r3
 8002940:	79f9      	ldrb	r1, [r7, #7]
 8002942:	2301      	movs	r3, #1
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	f107 030f 	add.w	r3, r7, #15
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	4804      	ldr	r0, [pc, #16]	; (8002960 <SENSOR_IO_Read+0x38>)
 8002950:	f7ff ff5c 	bl	800280c <I2Cx_ReadMultiple>

  return read_value;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200020c0 	.word	0x200020c0

08002964 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af02      	add	r7, sp, #8
 800296a:	603a      	str	r2, [r7, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
 8002972:	460b      	mov	r3, r1
 8002974:	71bb      	strb	r3, [r7, #6]
 8002976:	4613      	mov	r3, r2
 8002978:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	b29a      	uxth	r2, r3
 800297e:	79f9      	ldrb	r1, [r7, #7]
 8002980:	88bb      	ldrh	r3, [r7, #4]
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2301      	movs	r3, #1
 800298a:	4804      	ldr	r0, [pc, #16]	; (800299c <SENSOR_IO_ReadMultiple+0x38>)
 800298c:	f7ff ff3e 	bl	800280c <I2Cx_ReadMultiple>
 8002990:	4603      	mov	r3, r0
 8002992:	b29b      	uxth	r3, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200020c0 	.word	0x200020c0

080029a0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <BSP_HSENSOR_Init+0x38>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	20be      	movs	r0, #190	; 0xbe
 80029ac:	4798      	blx	r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	2bbc      	cmp	r3, #188	; 0xbc
 80029b2:	d002      	beq.n	80029ba <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	e009      	b.n	80029ce <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <BSP_HSENSOR_Init+0x3c>)
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <BSP_HSENSOR_Init+0x38>)
 80029be:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <BSP_HSENSOR_Init+0x3c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	20be      	movs	r0, #190	; 0xbe
 80029c8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80029ce:	687b      	ldr	r3, [r7, #4]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000004 	.word	0x20000004
 80029dc:	200004b4 	.word	0x200004b4

080029e0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	20be      	movs	r0, #190	; 0xbe
 80029ec:	4798      	blx	r3
 80029ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200004b4 	.word	0x200004b4

080029fc <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <BSP_MAGNETO_Init+0x50>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4798      	blx	r3
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b3d      	cmp	r3, #61	; 0x3d
 8002a10:	d002      	beq.n	8002a18 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	71fb      	strb	r3, [r7, #7]
 8002a16:	e013      	b.n	8002a40 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <BSP_MAGNETO_Init+0x54>)
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <BSP_MAGNETO_Init+0x50>)
 8002a1c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002a1e:	2358      	movs	r3, #88	; 0x58
 8002a20:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002a22:	2300      	movs	r3, #0
 8002a24:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <BSP_MAGNETO_Init+0x54>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	463a      	mov	r2, r7
 8002a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a3e:	4798      	blx	r3
  } 

  return ret;  
 8002a40:	79fb      	ldrb	r3, [r7, #7]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000020 	.word	0x20000020
 8002a50:	200004b8 	.word	0x200004b8

08002a54 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200004b8 	.word	0x200004b8

08002a84 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <BSP_PSENSOR_Init+0x38>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	20ba      	movs	r0, #186	; 0xba
 8002a90:	4798      	blx	r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	2bb1      	cmp	r3, #177	; 0xb1
 8002a96:	d002      	beq.n	8002a9e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	e009      	b.n	8002ab2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <BSP_PSENSOR_Init+0x3c>)
 8002aa0:	4a06      	ldr	r2, [pc, #24]	; (8002abc <BSP_PSENSOR_Init+0x38>)
 8002aa2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <BSP_PSENSOR_Init+0x3c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	20ba      	movs	r0, #186	; 0xba
 8002aac:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000054 	.word	0x20000054
 8002ac0:	200004bc 	.word	0x200004bc

08002ac4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <BSP_PSENSOR_ReadPressure+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	20ba      	movs	r0, #186	; 0xba
 8002ad0:	4798      	blx	r3
 8002ad2:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200004bc 	.word	0x200004bc

08002ae0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  uint32_t ret = TSENSOR_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <BSP_TSENSOR_Init+0x30>)
 8002aec:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <BSP_TSENSOR_Init+0x34>)
 8002aee:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002af0:	f7ff fef6 	bl	80028e0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <BSP_TSENSOR_Init+0x30>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	20be      	movs	r0, #190	; 0xbe
 8002afe:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	607b      	str	r3, [r7, #4]
  
  return ret;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200004c0 	.word	0x200004c0
 8002b14:	20000010 	.word	0x20000010

08002b18 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <BSP_TSENSOR_ReadTemp+0x18>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	20be      	movs	r0, #190	; 0xbe
 8002b24:	4798      	blx	r3
 8002b26:	eef0 7a40 	vmov.f32	s15, s0
}
 8002b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200004c0 	.word	0x200004c0

08002b34 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2120      	movs	r1, #32
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff feef 	bl	8002928 <SENSOR_IO_Read>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	f023 0303 	bic.w	r3, r3, #3
 8002b64:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b74:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff feb8 	bl	80028f4 <SENSOR_IO_Write>
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002b9a:	f7ff fea1 	bl	80028e0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff febf 	bl	8002928 <SENSOR_IO_Read>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	f107 020c 	add.w	r2, r7, #12
 8002bca:	2302      	movs	r3, #2
 8002bcc:	21b0      	movs	r1, #176	; 0xb0
 8002bce:	f7ff fec9 	bl	8002964 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002bd2:	7b3b      	ldrb	r3, [r7, #12]
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002bda:	7b7b      	ldrb	r3, [r7, #13]
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	b2d8      	uxtb	r0, r3
 8002be6:	f107 020c 	add.w	r2, r7, #12
 8002bea:	2302      	movs	r3, #2
 8002bec:	21b6      	movs	r1, #182	; 0xb6
 8002bee:	f7ff feb9 	bl	8002964 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002bf2:	7b7b      	ldrb	r3, [r7, #13]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	7b3b      	ldrb	r3, [r7, #12]
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	b2d8      	uxtb	r0, r3
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	2302      	movs	r3, #2
 8002c0a:	21ba      	movs	r1, #186	; 0xba
 8002c0c:	f7ff feaa 	bl	8002964 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c10:	7b7b      	ldrb	r3, [r7, #13]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	7b3b      	ldrb	r3, [r7, #12]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	b2d8      	uxtb	r0, r3
 8002c22:	f107 020c 	add.w	r2, r7, #12
 8002c26:	2302      	movs	r3, #2
 8002c28:	21a8      	movs	r1, #168	; 0xa8
 8002c2a:	f7ff fe9b 	bl	8002964 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c2e:	7b7b      	ldrb	r3, [r7, #13]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	7b3b      	ldrb	r3, [r7, #12]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002c3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002c52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002c9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ca2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ce8 <HTS221_H_ReadHumidity+0x130>
 8002ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cae:	dd01      	ble.n	8002cb4 <HTS221_H_ReadHumidity+0xfc>
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HTS221_H_ReadHumidity+0x134>)
 8002cb2:	e00a      	b.n	8002cca <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d502      	bpl.n	8002cc8 <HTS221_H_ReadHumidity+0x110>
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e000      	b.n	8002cca <HTS221_H_ReadHumidity+0x112>
 8002cc8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002cca:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd8:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	447a0000 	.word	0x447a0000
 8002cec:	447a0000 	.word	0x447a0000

08002cf0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2120      	movs	r1, #32
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fe10 	bl	8002928 <SENSOR_IO_Read>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d32:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fdd9 	bl	80028f4 <SENSOR_IO_Write>
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b088      	sub	sp, #32
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	b2d8      	uxtb	r0, r3
 8002d58:	f107 0208 	add.w	r2, r7, #8
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	21b2      	movs	r1, #178	; 0xb2
 8002d60:	f7ff fe00 	bl	8002964 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2135      	movs	r1, #53	; 0x35
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fddc 	bl	8002928 <SENSOR_IO_Read>
 8002d70:	4603      	mov	r3, r0
 8002d72:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	7a3b      	ldrb	r3, [r7, #8]
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	7a7b      	ldrb	r3, [r7, #9]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002d9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002da0:	10db      	asrs	r3, r3, #3
 8002da2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002da4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002da8:	10db      	asrs	r3, r3, #3
 8002daa:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	b2d8      	uxtb	r0, r3
 8002db0:	f107 0208 	add.w	r2, r7, #8
 8002db4:	2304      	movs	r3, #4
 8002db6:	21bc      	movs	r1, #188	; 0xbc
 8002db8:	f7ff fdd4 	bl	8002964 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002dbc:	7a7b      	ldrb	r3, [r7, #9]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	b21a      	sxth	r2, r3
 8002dc2:	7a3b      	ldrb	r3, [r7, #8]
 8002dc4:	b21b      	sxth	r3, r3
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	b21a      	sxth	r2, r3
 8002dd0:	7abb      	ldrb	r3, [r7, #10]
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	f107 0208 	add.w	r2, r7, #8
 8002de0:	2302      	movs	r3, #2
 8002de2:	21aa      	movs	r1, #170	; 0xaa
 8002de4:	f7ff fdbe 	bl	8002964 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002de8:	7a7b      	ldrb	r3, [r7, #9]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	7a3b      	ldrb	r3, [r7, #8]
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002df6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002dfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e0c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e44:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	ee07 3a90 	vmov	s15, r3
}
 8002e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	463b      	mov	r3, r7
 8002e60:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002e64:	783b      	ldrb	r3, [r7, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	2120      	movs	r1, #32
 8002e6a:	203c      	movs	r0, #60	; 0x3c
 8002e6c:	f7ff fd42 	bl	80028f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	461a      	mov	r2, r3
 8002e74:	2121      	movs	r1, #33	; 0x21
 8002e76:	203c      	movs	r0, #60	; 0x3c
 8002e78:	f7ff fd3c 	bl	80028f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002e7c:	78bb      	ldrb	r3, [r7, #2]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2122      	movs	r1, #34	; 0x22
 8002e82:	203c      	movs	r0, #60	; 0x3c
 8002e84:	f7ff fd36 	bl	80028f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2123      	movs	r1, #35	; 0x23
 8002e8e:	203c      	movs	r0, #60	; 0x3c
 8002e90:	f7ff fd30 	bl	80028f4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002e94:	793b      	ldrb	r3, [r7, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	2124      	movs	r1, #36	; 0x24
 8002e9a:	203c      	movs	r0, #60	; 0x3c
 8002e9c:	f7ff fd2a 	bl	80028f4 <SENSOR_IO_Write>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002eb2:	2122      	movs	r1, #34	; 0x22
 8002eb4:	203c      	movs	r0, #60	; 0x3c
 8002eb6:	f7ff fd37 	bl	8002928 <SENSOR_IO_Read>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	f023 0303 	bic.w	r3, r3, #3
 8002ec4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f043 0303 	orr.w	r3, r3, #3
 8002ecc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2122      	movs	r1, #34	; 0x22
 8002ed4:	203c      	movs	r0, #60	; 0x3c
 8002ed6:	f7ff fd0d 	bl	80028f4 <SENSOR_IO_Write>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002ee6:	f7ff fcfb 	bl	80028e0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002eea:	210f      	movs	r1, #15
 8002eec:	203c      	movs	r0, #60	; 0x3c
 8002eee:	f7ff fd1b 	bl	8002928 <SENSOR_IO_Read>
 8002ef2:	4603      	mov	r3, r0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002f06:	2122      	movs	r1, #34	; 0x22
 8002f08:	203c      	movs	r0, #60	; 0x3c
 8002f0a:	f7ff fd0d 	bl	8002928 <SENSOR_IO_Read>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	f023 0320 	bic.w	r3, r3, #32
 8002f18:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	f043 0320 	orr.w	r3, r3, #32
 8002f26:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2122      	movs	r1, #34	; 0x22
 8002f2e:	203c      	movs	r0, #60	; 0x3c
 8002f30:	f7ff fce0 	bl	80028f4 <SENSOR_IO_Write>
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002f52:	2121      	movs	r1, #33	; 0x21
 8002f54:	203c      	movs	r0, #60	; 0x3c
 8002f56:	f7ff fce7 	bl	8002928 <SENSOR_IO_Read>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002f5e:	f107 0208 	add.w	r2, r7, #8
 8002f62:	2306      	movs	r3, #6
 8002f64:	21a8      	movs	r1, #168	; 0xa8
 8002f66:	203c      	movs	r0, #60	; 0x3c
 8002f68:	f7ff fcfc 	bl	8002964 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e01f      	b.n	8002fb2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002f72:	7ffb      	ldrb	r3, [r7, #31]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	3301      	adds	r3, #1
 8002f78:	f107 0220 	add.w	r2, r7, #32
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	f107 0120 	add.w	r1, r7, #32
 8002f90:	440b      	add	r3, r1
 8002f92:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	7ffb      	ldrb	r3, [r7, #31]
 8002f9e:	b212      	sxth	r2, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	f107 0120 	add.w	r1, r7, #32
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d9dc      	bls.n	8002f72 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002fbe:	2b60      	cmp	r3, #96	; 0x60
 8002fc0:	d013      	beq.n	8002fea <LIS3MDL_MagReadXYZ+0xae>
 8002fc2:	2b60      	cmp	r3, #96	; 0x60
 8002fc4:	dc14      	bgt.n	8002ff0 <LIS3MDL_MagReadXYZ+0xb4>
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d00c      	beq.n	8002fe4 <LIS3MDL_MagReadXYZ+0xa8>
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	dc10      	bgt.n	8002ff0 <LIS3MDL_MagReadXYZ+0xb4>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <LIS3MDL_MagReadXYZ+0x9c>
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d003      	beq.n	8002fde <LIS3MDL_MagReadXYZ+0xa2>
 8002fd6:	e00b      	b.n	8002ff0 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <LIS3MDL_MagReadXYZ+0x104>)
 8002fda:	61bb      	str	r3, [r7, #24]
    break;
 8002fdc:	e008      	b.n	8002ff0 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <LIS3MDL_MagReadXYZ+0x108>)
 8002fe0:	61bb      	str	r3, [r7, #24]
    break;
 8002fe2:	e005      	b.n	8002ff0 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <LIS3MDL_MagReadXYZ+0x10c>)
 8002fe6:	61bb      	str	r3, [r7, #24]
    break;
 8002fe8:	e002      	b.n	8002ff0 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <LIS3MDL_MagReadXYZ+0x110>)
 8002fec:	61bb      	str	r3, [r7, #24]
    break;    
 8002fee:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e01b      	b.n	800302e <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	f107 0220 	add.w	r2, r7, #32
 8002ffe:	4413      	add	r3, r2
 8003000:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	7ffb      	ldrb	r3, [r7, #31]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003020:	ee17 2a90 	vmov	r2, s15
 8003024:	b212      	sxth	r2, r2
 8003026:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	3301      	adds	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d9e0      	bls.n	8002ff6 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	3e0f5c29 	.word	0x3e0f5c29
 8003044:	3e947ae1 	.word	0x3e947ae1
 8003048:	3edc28f6 	.word	0x3edc28f6
 800304c:	3f147ae1 	.word	0x3f147ae1

08003050 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f87b 	bl	8003158 <LPS22HB_Init>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003078:	f7ff fc32 	bl	80028e0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	210f      	movs	r1, #15
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fc50 	bl	8002928 <SENSOR_IO_Read>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	74fb      	strb	r3, [r7, #19]
 80030aa:	e013      	b.n	80030d4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	3328      	adds	r3, #40	; 0x28
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	7cfc      	ldrb	r4, [r7, #19]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7ff fc34 	bl	8002928 <SENSOR_IO_Read>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	4423      	add	r3, r4
 80030ca:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	3301      	adds	r3, #1
 80030d2:	74fb      	strb	r3, [r7, #19]
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d9e8      	bls.n	80030ac <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	74fb      	strb	r3, [r7, #19]
 80030de:	e010      	b.n	8003102 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	f107 0218 	add.w	r2, r7, #24
 80030e6:	4413      	add	r3, r2
 80030e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030ec:	461a      	mov	r2, r3
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	3301      	adds	r3, #1
 8003100:	74fb      	strb	r3, [r7, #19]
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d9eb      	bls.n	80030e0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003118:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2264      	movs	r2, #100	; 0x64
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	da01      	bge.n	800312e <LPS22HB_P_ReadPressure+0x96>
 800312a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800312e:	131b      	asrs	r3, r3, #12
 8003130:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003154 <LPS22HB_P_ReadPressure+0xbc>
 8003140:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003144:	eef0 7a66 	vmov.f32	s15, s13
}
 8003148:	eeb0 0a67 	vmov.f32	s0, s15
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	bf00      	nop
 8003154:	42c80000 	.word	0x42c80000

08003158 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	211a      	movs	r1, #26
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fbdd 	bl	8002928 <SENSOR_IO_Read>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	211a      	movs	r1, #26
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fbb2 	bl	80028f4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2110      	movs	r1, #16
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fbc6 	bl	8002928 <SENSOR_IO_Read>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80031ae:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	f023 0302 	bic.w	r3, r3, #2
 80031b6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	2110      	movs	r1, #16
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fb93 	bl	80028f4 <SENSOR_IO_Write>
}  
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e0:	2003      	movs	r0, #3
 80031e2:	f000 f902 	bl	80033ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7ff f930 	bl	800244c <HAL_InitTick>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	71fb      	strb	r3, [r7, #7]
 80031f6:	e001      	b.n	80031fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031f8:	f7fe ff52 	bl	80020a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031fc:	79fb      	ldrb	r3, [r7, #7]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_IncTick+0x20>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x24>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_IncTick+0x24>)
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000064 	.word	0x20000064
 800322c:	2000210c 	.word	0x2000210c

08003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return uwTick;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_GetTick+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000210c 	.word	0x2000210c

08003248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff ffee 	bl	8003230 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d005      	beq.n	800326e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_Delay+0x44>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800326e:	bf00      	nop
 8003270:	f7ff ffde 	bl	8003230 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d8f7      	bhi.n	8003270 <HAL_Delay+0x28>
  {
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000064 	.word	0x20000064

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	; (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff4c 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003412:	f7ff ff61 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 8003416:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	6978      	ldr	r0, [r7, #20]
 800341e:	f7ff ffb1 	bl	8003384 <NVIC_EncodePriority>
 8003422:	4602      	mov	r2, r0
 8003424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ff80 	bl	8003330 <__NVIC_SetPriority>
}
 8003430:	bf00      	nop
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff54 	bl	80032f4 <__NVIC_EnableIRQ>
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0ac      	b.n	80035c0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f8b2 	bl	80035d4 <DFSDM_GetChannelFromInstance>
 8003470:	4603      	mov	r3, r0
 8003472:	4a55      	ldr	r2, [pc, #340]	; (80035c8 <HAL_DFSDM_ChannelInit+0x174>)
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e09f      	b.n	80035c0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fe fe35 	bl	80020f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003486:	4b51      	ldr	r3, [pc, #324]	; (80035cc <HAL_DFSDM_ChannelInit+0x178>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a4f      	ldr	r2, [pc, #316]	; (80035cc <HAL_DFSDM_ChannelInit+0x178>)
 800348e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003490:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <HAL_DFSDM_ChannelInit+0x178>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d125      	bne.n	80034e4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003498:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a4c      	ldr	r2, [pc, #304]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800349e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034a2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80034a4:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4948      	ldr	r1, [pc, #288]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80034bc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80034c6:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	493f      	ldr	r1, [pc, #252]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80034d8:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80034de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034e2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80034f2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003502:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003508:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 020f 	bic.w	r2, r2, #15
 8003520:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003548:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f002 0207 	and.w	r2, r2, #7
 8003574:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f810 	bl	80035d4 <DFSDM_GetChannelFromInstance>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4904      	ldr	r1, [pc, #16]	; (80035c8 <HAL_DFSDM_ChannelInit+0x174>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200004c8 	.word	0x200004c8
 80035cc:	200004c4 	.word	0x200004c4
 80035d0:	40016000 	.word	0x40016000

080035d4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <DFSDM_GetChannelFromInstance+0x7c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d102      	bne.n	80035ea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e02b      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a19      	ldr	r2, [pc, #100]	; (8003654 <DFSDM_GetChannelFromInstance+0x80>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d102      	bne.n	80035f8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e024      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a17      	ldr	r2, [pc, #92]	; (8003658 <DFSDM_GetChannelFromInstance+0x84>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d102      	bne.n	8003606 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003600:	2302      	movs	r3, #2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e01d      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <DFSDM_GetChannelFromInstance+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d102      	bne.n	8003614 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800360e:	2304      	movs	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e016      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a12      	ldr	r2, [pc, #72]	; (8003660 <DFSDM_GetChannelFromInstance+0x8c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d102      	bne.n	8003622 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800361c:	2305      	movs	r3, #5
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e00f      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <DFSDM_GetChannelFromInstance+0x90>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d102      	bne.n	8003630 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800362a:	2306      	movs	r3, #6
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e008      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <DFSDM_GetChannelFromInstance+0x94>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d102      	bne.n	800363e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003638:	2307      	movs	r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e001      	b.n	8003642 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800363e:	2303      	movs	r3, #3
 8003640:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40016000 	.word	0x40016000
 8003654:	40016020 	.word	0x40016020
 8003658:	40016040 	.word	0x40016040
 800365c:	40016080 	.word	0x40016080
 8003660:	400160a0 	.word	0x400160a0
 8003664:	400160c0 	.word	0x400160c0
 8003668:	400160e0 	.word	0x400160e0

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800367a:	e17f      	b.n	800397c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	4013      	ands	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8171 	beq.w	8003976 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d00b      	beq.n	80036b4 <HAL_GPIO_Init+0x48>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d007      	beq.n	80036b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a8:	2b11      	cmp	r3, #17
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b12      	cmp	r3, #18
 80036b2:	d130      	bne.n	8003716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ea:	2201      	movs	r2, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0201 	and.w	r2, r3, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b03      	cmp	r3, #3
 8003720:	d118      	bne.n	8003754 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003728:	2201      	movs	r2, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	08db      	lsrs	r3, r3, #3
 800373e:	f003 0201 	and.w	r2, r3, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x128>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b12      	cmp	r3, #18
 8003792:	d123      	bne.n	80037dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	08da      	lsrs	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3208      	adds	r2, #8
 800379c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	220f      	movs	r2, #15
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	08da      	lsrs	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3208      	adds	r2, #8
 80037d6:	6939      	ldr	r1, [r7, #16]
 80037d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0203 	and.w	r2, r3, #3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80ac 	beq.w	8003976 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_GPIO_Init+0x330>)
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_GPIO_Init+0x330>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6613      	str	r3, [r2, #96]	; 0x60
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_GPIO_Init+0x330>)
 800382c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003836:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	3302      	adds	r3, #2
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003860:	d025      	beq.n	80038ae <HAL_GPIO_Init+0x242>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4f      	ldr	r2, [pc, #316]	; (80039a4 <HAL_GPIO_Init+0x338>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01f      	beq.n	80038aa <HAL_GPIO_Init+0x23e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4e      	ldr	r2, [pc, #312]	; (80039a8 <HAL_GPIO_Init+0x33c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d019      	beq.n	80038a6 <HAL_GPIO_Init+0x23a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a4d      	ldr	r2, [pc, #308]	; (80039ac <HAL_GPIO_Init+0x340>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_GPIO_Init+0x236>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4c      	ldr	r2, [pc, #304]	; (80039b0 <HAL_GPIO_Init+0x344>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00d      	beq.n	800389e <HAL_GPIO_Init+0x232>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <HAL_GPIO_Init+0x348>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <HAL_GPIO_Init+0x22e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <HAL_GPIO_Init+0x34c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_GPIO_Init+0x22a>
 8003892:	2306      	movs	r3, #6
 8003894:	e00c      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 8003896:	2307      	movs	r3, #7
 8003898:	e00a      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 800389a:	2305      	movs	r3, #5
 800389c:	e008      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 800389e:	2304      	movs	r3, #4
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e004      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e002      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_GPIO_Init+0x244>
 80038ae:	2300      	movs	r3, #0
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	f002 0203 	and.w	r2, r2, #3
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	4093      	lsls	r3, r2
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038c0:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3302      	adds	r3, #2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_GPIO_Init+0x350>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f2:	4a32      	ldr	r2, [pc, #200]	; (80039bc <HAL_GPIO_Init+0x350>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <HAL_GPIO_Init+0x350>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_GPIO_Init+0x350>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <HAL_GPIO_Init+0x350>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_GPIO_Init+0x350>)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_GPIO_Init+0x350>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	43db      	mvns	r3, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003970:	4a12      	ldr	r2, [pc, #72]	; (80039bc <HAL_GPIO_Init+0x350>)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	f47f ae78 	bne.w	800367c <HAL_GPIO_Init+0x10>
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	48000400 	.word	0x48000400
 80039a8:	48000800 	.word	0x48000800
 80039ac:	48000c00 	.word	0x48000c00
 80039b0:	48001000 	.word	0x48001000
 80039b4:	48001400 	.word	0x48001400
 80039b8:	48001800 	.word	0x48001800
 80039bc:	40010400 	.word	0x40010400

080039c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039dc:	e002      	b.n	80039e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f806 	bl	8003a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40010400 	.word	0x40010400

08003a20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e081      	b.n	8003b4c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f8a8 	bl	8003bb2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2224      	movs	r2, #36	; 0x24
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d107      	bne.n	8003ab0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	e006      	b.n	8003abe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003abc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d104      	bne.n	8003ad0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ace:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	ea42 0103 	orr.w	r1, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69d9      	ldr	r1, [r3, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1a      	ldr	r2, [r3, #32]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e021      	b.n	8003baa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2224      	movs	r2, #36	; 0x24
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f821 	bl	8003bc6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	f040 80f9 	bne.w	8003df6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x34>
 8003c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0ed      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Mem_Write+0x4e>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0e6      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c32:	f7ff fafd 	bl	8003230 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2319      	movs	r3, #25
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fac3 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0d1      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2221      	movs	r2, #33	; 0x21
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c7c:	88f8      	ldrh	r0, [r7, #6]
 8003c7e:	893a      	ldrh	r2, [r7, #8]
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f9d3 	bl	8004038 <I2C_RequestMemoryWrite>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0a9      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2bff      	cmp	r3, #255	; 0xff
 8003cac:	d90e      	bls.n	8003ccc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fba5 	bl	8004414 <I2C_TransferConfig>
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb94 	bl	8004414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 faad 	bl	8004250 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e07b      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d034      	beq.n	8003da4 <HAL_I2C_Mem_Write+0x1c8>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d130      	bne.n	8003da4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2180      	movs	r1, #128	; 0x80
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fa3f 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e04d      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2bff      	cmp	r3, #255	; 0xff
 8003d64:	d90e      	bls.n	8003d84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	22ff      	movs	r2, #255	; 0xff
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb49 	bl	8004414 <I2C_TransferConfig>
 8003d82:	e00f      	b.n	8003da4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	8979      	ldrh	r1, [r7, #10]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fb38 	bl	8004414 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d19e      	bne.n	8003cec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fa8c 	bl	80042d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e01a      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <HAL_I2C_Mem_Write+0x224>)
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	fe00e800 	.word	0xfe00e800

08003e04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	460b      	mov	r3, r1
 8003e18:	813b      	strh	r3, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	f040 80fd 	bne.w	8004026 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_I2C_Mem_Read+0x34>
 8003e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0f1      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x4e>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0ea      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e5a:	f7ff f9e9 	bl	8003230 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2319      	movs	r3, #25
 8003e66:	2201      	movs	r2, #1
 8003e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f9af 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d5      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2222      	movs	r2, #34	; 0x22
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ea4:	88f8      	ldrh	r0, [r7, #6]
 8003ea6:	893a      	ldrh	r2, [r7, #8]
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f913 	bl	80040e0 <I2C_RequestMemoryRead>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0ad      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2bff      	cmp	r3, #255	; 0xff
 8003ed4:	d90e      	bls.n	8003ef4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	4b52      	ldr	r3, [pc, #328]	; (8004030 <HAL_I2C_Mem_Read+0x22c>)
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fa91 	bl	8004414 <I2C_TransferConfig>
 8003ef2:	e00f      	b.n	8003f14 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	8979      	ldrh	r1, [r7, #10]
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <HAL_I2C_Mem_Read+0x22c>)
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa80 	bl	8004414 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f956 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07c      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d034      	beq.n	8003fd4 <HAL_I2C_Mem_Read+0x1d0>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d130      	bne.n	8003fd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f927 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04d      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2bff      	cmp	r3, #255	; 0xff
 8003f94:	d90e      	bls.n	8003fb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	8979      	ldrh	r1, [r7, #10]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa31 	bl	8004414 <I2C_TransferConfig>
 8003fb2:	e00f      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	8979      	ldrh	r1, [r7, #10]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa20 	bl	8004414 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d19a      	bne.n	8003f14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f974 	bl	80042d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e01a      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_I2C_Mem_Read+0x230>)
 8004006:	400b      	ands	r3, r1
 8004008:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	80002400 	.word	0x80002400
 8004034:	fe00e800 	.word	0xfe00e800

08004038 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	4603      	mov	r3, r0
 8004048:	817b      	strh	r3, [r7, #10]
 800404a:	460b      	mov	r3, r1
 800404c:	813b      	strh	r3, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	8979      	ldrh	r1, [r7, #10]
 8004058:	4b20      	ldr	r3, [pc, #128]	; (80040dc <I2C_RequestMemoryWrite+0xa4>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f9d7 	bl	8004414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f8f0 	bl	8004250 <I2C_WaitOnTXISFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e02c      	b.n	80040d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
 800408a:	e015      	b.n	80040b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b29b      	uxth	r3, r3
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	69b9      	ldr	r1, [r7, #24]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f8d6 	bl	8004250 <I2C_WaitOnTXISFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e012      	b.n	80040d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040ae:	893b      	ldrh	r3, [r7, #8]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2200      	movs	r2, #0
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f884 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	80002000 	.word	0x80002000

080040e0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	8979      	ldrh	r1, [r7, #10]
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <I2C_RequestMemoryRead+0xa4>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f984 	bl	8004414 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f89d 	bl	8004250 <I2C_WaitOnTXISFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e02c      	b.n	800417a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d105      	bne.n	8004132 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
 8004130:	e015      	b.n	800415e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004132:	893b      	ldrh	r3, [r7, #8]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	b29b      	uxth	r3, r3
 8004138:	b2da      	uxtb	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f883 	bl	8004250 <I2C_WaitOnTXISFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e012      	b.n	800417a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004154:	893b      	ldrh	r3, [r7, #8]
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2200      	movs	r2, #0
 8004166:	2140      	movs	r1, #64	; 0x40
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f831 	bl	80041d0 <I2C_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	80002000 	.word	0x80002000

08004188 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d103      	bne.n	80041a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d007      	beq.n	80041c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	619a      	str	r2, [r3, #24]
  }
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e0:	e022      	b.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d01e      	beq.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ea:	f7ff f821 	bl	8003230 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d113      	bne.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e00f      	b.n	8004248 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	429a      	cmp	r2, r3
 8004244:	d0cd      	beq.n	80041e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800425c:	e02c      	b.n	80042b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f870 	bl	8004348 <I2C_IsAcknowledgeFailed>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e02a      	b.n	80042c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d01e      	beq.n	80042b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427a:	f7fe ffd9 	bl	8003230 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d113      	bne.n	80042b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e007      	b.n	80042c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d1cb      	bne.n	800425e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042dc:	e028      	b.n	8004330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f830 	bl	8004348 <I2C_IsAcknowledgeFailed>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e026      	b.n	8004340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f2:	f7fe ff9d 	bl	8003230 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d113      	bne.n	8004330 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e007      	b.n	8004340 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	d1cf      	bne.n	80042de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b10      	cmp	r3, #16
 8004360:	d151      	bne.n	8004406 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004362:	e022      	b.n	80043aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d01e      	beq.n	80043aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436c:	f7fe ff60 	bl	8003230 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <I2C_IsAcknowledgeFailed+0x3a>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d113      	bne.n	80043aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e02e      	b.n	8004408 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d1d5      	bne.n	8004364 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2210      	movs	r2, #16
 80043be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2220      	movs	r2, #32
 80043c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f7ff fedd 	bl	8004188 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <I2C_IsAcknowledgeFailed+0xc8>)
 80043da:	400b      	ands	r3, r1
 80043dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	fe00e800 	.word	0xfe00e800

08004414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	817b      	strh	r3, [r7, #10]
 8004422:	4613      	mov	r3, r2
 8004424:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	0d5b      	lsrs	r3, r3, #21
 8004430:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <I2C_TransferConfig+0x58>)
 8004436:	430b      	orrs	r3, r1
 8004438:	43db      	mvns	r3, r3
 800443a:	ea02 0103 	and.w	r1, r2, r3
 800443e:	897b      	ldrh	r3, [r7, #10]
 8004440:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004444:	7a7b      	ldrb	r3, [r7, #9]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	431a      	orrs	r2, r3
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	03ff63ff 	.word	0x03ff63ff

08004470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d138      	bne.n	80044f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004490:	2302      	movs	r3, #2
 8004492:	e032      	b.n	80044fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	; 0x24
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004508:	b08f      	sub	sp, #60	; 0x3c
 800450a:	af0a      	add	r7, sp, #40	; 0x28
 800450c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e116      	b.n	8004746 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd ff1e 	bl	8002374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2203      	movs	r2, #3
 800453c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f003 fab7 	bl	8007aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	687e      	ldr	r6, [r7, #4]
 8004564:	466d      	mov	r5, sp
 8004566:	f106 0410 	add.w	r4, r6, #16
 800456a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004572:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004576:	e885 0003 	stmia.w	r5, {r0, r1}
 800457a:	1d33      	adds	r3, r6, #4
 800457c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800457e:	6838      	ldr	r0, [r7, #0]
 8004580:	f003 fa77 	bl	8007a72 <USB_CoreInit>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0d7      	b.n	8004746 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f003 faa5 	bl	8007aec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
 80045a6:	e04a      	b.n	800463e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	333d      	adds	r3, #61	; 0x3d
 80045b8:	2201      	movs	r2, #1
 80045ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	333c      	adds	r3, #60	; 0x3c
 80045cc:	7bfa      	ldrb	r2, [r7, #15]
 80045ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045d0:	7bfa      	ldrb	r2, [r7, #15]
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	b298      	uxth	r0, r3
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	3342      	adds	r3, #66	; 0x42
 80045e4:	4602      	mov	r2, r0
 80045e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	333f      	adds	r3, #63	; 0x3f
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3344      	adds	r3, #68	; 0x44
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3348      	adds	r3, #72	; 0x48
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	3350      	adds	r3, #80	; 0x50
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	3301      	adds	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	7bfa      	ldrb	r2, [r7, #15]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d3af      	bcc.n	80045a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004648:	2300      	movs	r3, #0
 800464a:	73fb      	strb	r3, [r7, #15]
 800464c:	e044      	b.n	80046d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800464e:	7bfa      	ldrb	r2, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	3301      	adds	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3b5      	bcc.n	800464e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	687e      	ldr	r6, [r7, #4]
 80046ea:	466d      	mov	r5, sp
 80046ec:	f106 0410 	add.w	r4, r6, #16
 80046f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004700:	1d33      	adds	r3, r6, #4
 8004702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004704:	6838      	ldr	r0, [r7, #0]
 8004706:	f003 fa1b 	bl	8007b40 <USB_DevInit>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e014      	b.n	8004746 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f80a 	bl	800474e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f003 fbab 	bl	8007e9a <USB_DevDisconnect>

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800474e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	f043 0303 	orr.w	r3, r3, #3
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a6:	6013      	str	r3, [r2, #0]
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40007000 	.word	0x40007000

080047b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e2:	d130      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047e4:	4b23      	ldr	r3, [pc, #140]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d038      	beq.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047fa:	4a1e      	ldr	r2, [pc, #120]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2232      	movs	r2, #50	; 0x32
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	4a1b      	ldr	r2, [pc, #108]	; (800487c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0c9b      	lsrs	r3, r3, #18
 8004814:	3301      	adds	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004818:	e002      	b.n	8004820 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b01      	subs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482c:	d102      	bne.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x60>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f2      	bne.n	800481a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d110      	bne.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e00f      	b.n	8004866 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800484e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004852:	d007      	beq.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800485c:	4a05      	ldr	r2, [pc, #20]	; (8004874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004862:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40007000 	.word	0x40007000
 8004878:	20000000 	.word	0x20000000
 800487c:	431bde83 	.word	0x431bde83

08004880 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_PWREx_EnableVddUSB+0x1c>)
 800488a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488e:	6053      	str	r3, [r2, #4]
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40007000 	.word	0x40007000

080048a0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80048a8:	f7fe fcc2 	bl	8003230 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e063      	b.n	8004980 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fd fc57 	bl	8002180 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80048d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f858 	bl	800498c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	021a      	lsls	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	2120      	movs	r1, #32
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f850 	bl	80049a8 <QSPI_WaitFlagStateUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800490c:	7afb      	ldrb	r3, [r7, #11]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d131      	bne.n	8004976 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800491c:	f023 0310 	bic.w	r3, r3, #16
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	0611      	lsls	r1, r2, #24
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68d2      	ldr	r2, [r2, #12]
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	430b      	orrs	r3, r1
 8004932:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_QSPI_Init+0xe8>)
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6912      	ldr	r2, [r2, #16]
 8004942:	0411      	lsls	r1, r2, #16
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6952      	ldr	r2, [r2, #20]
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6992      	ldr	r2, [r2, #24]
 800494e:	4311      	orrs	r1, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	430b      	orrs	r3, r1
 8004956:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800497e:	7afb      	ldrb	r3, [r7, #11]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	ffe0f8fe 	.word	0xffe0f8fe

0800498c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049b8:	e01a      	b.n	80049f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d016      	beq.n	80049f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fe fc35 	bl	8003230 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2204      	movs	r2, #4
 80049dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	f043 0201 	orr.w	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e00e      	b.n	8004a0e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf14      	ite	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2300      	moveq	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1d6      	bne.n	80049ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e3d4      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2a:	4ba1      	ldr	r3, [pc, #644]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a34:	4b9e      	ldr	r3, [pc, #632]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80e4 	beq.w	8004c14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <HAL_RCC_OscConfig+0x4a>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	f040 808b 	bne.w	8004b70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f040 8087 	bne.w	8004b70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a62:	4b93      	ldr	r3, [pc, #588]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_RCC_OscConfig+0x62>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e3ac      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	4b8c      	ldr	r3, [pc, #560]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <HAL_RCC_OscConfig+0x7c>
 8004a8a:	4b89      	ldr	r3, [pc, #548]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a92:	e005      	b.n	8004aa0 <HAL_RCC_OscConfig+0x88>
 8004a94:	4b86      	ldr	r3, [pc, #536]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d223      	bcs.n	8004aec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fd73 	bl	8005594 <RCC_SetFlashLatencyFromMSIRange>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e38d      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab8:	4b7d      	ldr	r3, [pc, #500]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a7c      	ldr	r2, [pc, #496]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004abe:	f043 0308 	orr.w	r3, r3, #8
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	4977      	ldr	r1, [pc, #476]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad6:	4b76      	ldr	r3, [pc, #472]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	4972      	ldr	r1, [pc, #456]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
 8004aea:	e025      	b.n	8004b38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aec:	4b70      	ldr	r3, [pc, #448]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6f      	ldr	r2, [pc, #444]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004af2:	f043 0308 	orr.w	r3, r3, #8
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b6d      	ldr	r3, [pc, #436]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	496a      	ldr	r1, [pc, #424]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b0a:	4b69      	ldr	r3, [pc, #420]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	4965      	ldr	r1, [pc, #404]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fd33 	bl	8005594 <RCC_SetFlashLatencyFromMSIRange>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e34d      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b38:	f000 fc36 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b5c      	ldr	r3, [pc, #368]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	495a      	ldr	r1, [pc, #360]	; (8004cb4 <HAL_RCC_OscConfig+0x29c>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	f003 031f 	and.w	r3, r3, #31
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	4a58      	ldr	r2, [pc, #352]	; (8004cb8 <HAL_RCC_OscConfig+0x2a0>)
 8004b56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b58:	4b58      	ldr	r3, [pc, #352]	; (8004cbc <HAL_RCC_OscConfig+0x2a4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fd fc75 	bl	800244c <HAL_InitTick>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d052      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	e331      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d032      	beq.n	8004bde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b78:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4c      	ldr	r2, [pc, #304]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b84:	f7fe fb54 	bl	8003230 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b8c:	f7fe fb50 	bl	8003230 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e31a      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b9e:	4b44      	ldr	r3, [pc, #272]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a40      	ldr	r2, [pc, #256]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004bb0:	f043 0308 	orr.w	r3, r3, #8
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	493b      	ldr	r1, [pc, #236]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bc8:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	4936      	ldr	r1, [pc, #216]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	604b      	str	r3, [r1, #4]
 8004bdc:	e01a      	b.n	8004c14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bde:	4b34      	ldr	r3, [pc, #208]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004be4:	f023 0301 	bic.w	r3, r3, #1
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bea:	f7fe fb21 	bl	8003230 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fb1d 	bl	8003230 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e2e7      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x1da>
 8004c10:	e000      	b.n	8004c14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d074      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d005      	beq.n	8004c32 <HAL_RCC_OscConfig+0x21a>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d10e      	bne.n	8004c4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d10b      	bne.n	8004c4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c32:	4b1f      	ldr	r3, [pc, #124]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d064      	beq.n	8004d08 <HAL_RCC_OscConfig+0x2f0>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d160      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e2c4      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_OscConfig+0x24a>
 8004c54:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e01d      	b.n	8004c9e <HAL_RCC_OscConfig+0x286>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c6a:	d10c      	bne.n	8004c86 <HAL_RCC_OscConfig+0x26e>
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e00b      	b.n	8004c9e <HAL_RCC_OscConfig+0x286>
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <HAL_RCC_OscConfig+0x298>)
 8004c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fe fac3 	bl	8003230 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cac:	e011      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2ba>
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	0800c740 	.word	0x0800c740
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fe fab6 	bl	8003230 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e280      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cd2:	4baf      	ldr	r3, [pc, #700]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x2a8>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fe faa6 	bl	8003230 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fe faa2 	bl	8003230 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	; 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e26c      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cfa:	4ba5      	ldr	r3, [pc, #660]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2d0>
 8004d06:	e000      	b.n	8004d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d060      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_OscConfig+0x310>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d119      	bne.n	8004d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d116      	bne.n	8004d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	4b99      	ldr	r3, [pc, #612]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_OscConfig+0x328>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e249      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b93      	ldr	r3, [pc, #588]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	4990      	ldr	r1, [pc, #576]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d54:	e040      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d023      	beq.n	8004da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d5e:	4b8c      	ldr	r3, [pc, #560]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a8b      	ldr	r2, [pc, #556]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fe fa61 	bl	8003230 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d72:	f7fe fa5d 	bl	8003230 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e227      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d84:	4b82      	ldr	r3, [pc, #520]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b7f      	ldr	r3, [pc, #508]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	497c      	ldr	r1, [pc, #496]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
 8004da4:	e018      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da6:	4b7a      	ldr	r3, [pc, #488]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a79      	ldr	r2, [pc, #484]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fe fa3d 	bl	8003230 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fe fa39 	bl	8003230 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e203      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dcc:	4b70      	ldr	r3, [pc, #448]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d03c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01c      	beq.n	8004e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dec:	4b68      	ldr	r3, [pc, #416]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	4a67      	ldr	r2, [pc, #412]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe fa18 	bl	8003230 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe fa14 	bl	8003230 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e1de      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e16:	4b5e      	ldr	r3, [pc, #376]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ef      	beq.n	8004e04 <HAL_RCC_OscConfig+0x3ec>
 8004e24:	e01b      	b.n	8004e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e26:	4b5a      	ldr	r3, [pc, #360]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e2c:	4a58      	ldr	r2, [pc, #352]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe f9fb 	bl	8003230 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3e:	f7fe f9f7 	bl	8003230 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e1c1      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e50:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ef      	bne.n	8004e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80a6 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e70:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10d      	bne.n	8004e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a43      	ldr	r2, [pc, #268]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
 8004e88:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e94:	2301      	movs	r3, #1
 8004e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <HAL_RCC_OscConfig+0x57c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d118      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCC_OscConfig+0x57c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <HAL_RCC_OscConfig+0x57c>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb0:	f7fe f9be 	bl	8003230 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fe f9ba 	bl	8003230 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e184      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eca:	4b32      	ldr	r3, [pc, #200]	; (8004f94 <HAL_RCC_OscConfig+0x57c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d108      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4d8>
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eee:	e024      	b.n	8004f3a <HAL_RCC_OscConfig+0x522>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	d110      	bne.n	8004f1a <HAL_RCC_OscConfig+0x502>
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f08:	4b21      	ldr	r3, [pc, #132]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f18:	e00f      	b.n	8004f3a <HAL_RCC_OscConfig+0x522>
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f2a:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f32:	f023 0304 	bic.w	r3, r3, #4
 8004f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f42:	f7fe f975 	bl	8003230 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4a:	f7fe f971 	bl	8003230 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e139      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_OscConfig+0x578>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0ed      	beq.n	8004f4a <HAL_RCC_OscConfig+0x532>
 8004f6e:	e01a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fe f95e 	bl	8003230 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f76:	e00f      	b.n	8004f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fe f95a 	bl	8003230 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d906      	bls.n	8004f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e122      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f98:	4b90      	ldr	r3, [pc, #576]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e8      	bne.n	8004f78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fac:	4b8b      	ldr	r3, [pc, #556]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4a8a      	ldr	r2, [pc, #552]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8004fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8108 	beq.w	80051d2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	f040 80d0 	bne.w	800516c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fcc:	4b83      	ldr	r3, [pc, #524]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f003 0203 	and.w	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d130      	bne.n	8005042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	3b01      	subs	r3, #1
 8004fec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d127      	bne.n	8005042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d11f      	bne.n	8005042 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800500c:	2a07      	cmp	r2, #7
 800500e:	bf14      	ite	ne
 8005010:	2201      	movne	r2, #1
 8005012:	2200      	moveq	r2, #0
 8005014:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005016:	4293      	cmp	r3, r2
 8005018:	d113      	bne.n	8005042 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	3b01      	subs	r3, #1
 8005028:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d109      	bne.n	8005042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	3b01      	subs	r3, #1
 800503c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800503e:	429a      	cmp	r2, r3
 8005040:	d06e      	beq.n	8005120 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b0c      	cmp	r3, #12
 8005046:	d069      	beq.n	800511c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005048:	4b64      	ldr	r3, [pc, #400]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005054:	4b61      	ldr	r3, [pc, #388]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b7      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005064:	4b5d      	ldr	r3, [pc, #372]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a5c      	ldr	r2, [pc, #368]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005070:	f7fe f8de 	bl	8003230 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fe f8da 	bl	8003230 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0a4      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800508a:	4b54      	ldr	r3, [pc, #336]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005096:	4b51      	ldr	r3, [pc, #324]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <HAL_RCC_OscConfig+0x7c8>)
 800509c:	4013      	ands	r3, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050a6:	3a01      	subs	r2, #1
 80050a8:	0112      	lsls	r2, r2, #4
 80050aa:	4311      	orrs	r1, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050b0:	0212      	lsls	r2, r2, #8
 80050b2:	4311      	orrs	r1, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050b8:	0852      	lsrs	r2, r2, #1
 80050ba:	3a01      	subs	r2, #1
 80050bc:	0552      	lsls	r2, r2, #21
 80050be:	4311      	orrs	r1, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050c4:	0852      	lsrs	r2, r2, #1
 80050c6:	3a01      	subs	r2, #1
 80050c8:	0652      	lsls	r2, r2, #25
 80050ca:	4311      	orrs	r1, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d0:	0912      	lsrs	r2, r2, #4
 80050d2:	0452      	lsls	r2, r2, #17
 80050d4:	430a      	orrs	r2, r1
 80050d6:	4941      	ldr	r1, [pc, #260]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3e      	ldr	r2, [pc, #248]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 80050e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e8:	4b3c      	ldr	r3, [pc, #240]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 80050ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050f4:	f7fe f89c 	bl	8003230 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fe f898 	bl	8003230 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e062      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510e:	4b33      	ldr	r3, [pc, #204]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800511a:	e05a      	b.n	80051d2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e059      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005120:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d152      	bne.n	80051d2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005138:	4b28      	ldr	r3, [pc, #160]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a27      	ldr	r2, [pc, #156]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005144:	f7fe f874 	bl	8003230 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fe f870 	bl	8003230 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e03a      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515e:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x734>
 800516a:	e032      	b.n	80051d2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d02d      	beq.n	80051ce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800517c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d105      	bne.n	8005196 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005190:	f023 0303 	bic.w	r3, r3, #3
 8005194:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005196:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 800519c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a6:	f7fe f843 	bl	8003230 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fe f83f 	bl	8003230 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e009      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCC_OscConfig+0x7c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCC_OscConfig+0x796>
 80051cc:	e001      	b.n	80051d2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40021000 	.word	0x40021000
 80051e0:	f99d808c 	.word	0xf99d808c

080051e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0c8      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f8:	4b66      	ldr	r3, [pc, #408]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d910      	bls.n	8005228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b63      	ldr	r3, [pc, #396]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 0207 	bic.w	r2, r3, #7
 800520e:	4961      	ldr	r1, [pc, #388]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	4b5f      	ldr	r3, [pc, #380]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0b0      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d04c      	beq.n	80052ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d107      	bne.n	800524c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523c:	4b56      	ldr	r3, [pc, #344]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d121      	bne.n	800528c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e09e      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d107      	bne.n	8005264 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005254:	4b50      	ldr	r3, [pc, #320]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d115      	bne.n	800528c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e092      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800526c:	4b4a      	ldr	r3, [pc, #296]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e086      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800527c:	4b46      	ldr	r3, [pc, #280]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e07e      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800528c:	4b42      	ldr	r3, [pc, #264]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f023 0203 	bic.w	r2, r3, #3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	493f      	ldr	r1, [pc, #252]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529e:	f7fd ffc7 	bl	8003230 <HAL_GetTick>
 80052a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a4:	e00a      	b.n	80052bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a6:	f7fd ffc3 	bl	8003230 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e066      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052bc:	4b36      	ldr	r3, [pc, #216]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 020c 	and.w	r2, r3, #12
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d1eb      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052da:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	492c      	ldr	r1, [pc, #176]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ec:	4b29      	ldr	r3, [pc, #164]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d210      	bcs.n	800531c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b26      	ldr	r3, [pc, #152]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 0207 	bic.w	r2, r3, #7
 8005302:	4924      	ldr	r1, [pc, #144]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b22      	ldr	r3, [pc, #136]	; (8005394 <HAL_RCC_ClockConfig+0x1b0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e036      	b.n	800538a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4918      	ldr	r1, [pc, #96]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4910      	ldr	r1, [pc, #64]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800535a:	f000 f825 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 800535e:	4602      	mov	r2, r0
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <HAL_RCC_ClockConfig+0x1b4>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	490c      	ldr	r1, [pc, #48]	; (800539c <HAL_RCC_ClockConfig+0x1b8>)
 800536c:	5ccb      	ldrb	r3, [r1, r3]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fd f864 	bl	800244c <HAL_InitTick>
 8005384:	4603      	mov	r3, r0
 8005386:	72fb      	strb	r3, [r7, #11]

  return status;
 8005388:	7afb      	ldrb	r3, [r7, #11]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40022000 	.word	0x40022000
 8005398:	40021000 	.word	0x40021000
 800539c:	0800c740 	.word	0x0800c740
 80053a0:	20000000 	.word	0x20000000
 80053a4:	20000060 	.word	0x20000060

080053a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	; 0x24
 80053ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b6:	4b3e      	ldr	r3, [pc, #248]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x34>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d121      	bne.n	800541a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d11e      	bne.n	800541a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053dc:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053e8:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	e005      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005404:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10d      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d102      	bne.n	8005426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	e004      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b08      	cmp	r3, #8
 800542a:	d101      	bne.n	8005430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800542c:	4b23      	ldr	r3, [pc, #140]	; (80054bc <HAL_RCC_GetSysClockFreq+0x114>)
 800542e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b0c      	cmp	r3, #12
 8005434:	d134      	bne.n	80054a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0xa6>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d003      	beq.n	8005454 <HAL_RCC_GetSysClockFreq+0xac>
 800544c:	e005      	b.n	800545a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800544e:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005450:	617b      	str	r3, [r7, #20]
      break;
 8005452:	e005      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <HAL_RCC_GetSysClockFreq+0x114>)
 8005456:	617b      	str	r3, [r7, #20]
      break;
 8005458:	e002      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	617b      	str	r3, [r7, #20]
      break;
 800545e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	3301      	adds	r3, #1
 800546c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	fb02 f203 	mul.w	r2, r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	0e5b      	lsrs	r3, r3, #25
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	3301      	adds	r3, #1
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054a0:	69bb      	ldr	r3, [r7, #24]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3724      	adds	r7, #36	; 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40021000 	.word	0x40021000
 80054b4:	0800c758 	.word	0x0800c758
 80054b8:	00f42400 	.word	0x00f42400
 80054bc:	007a1200 	.word	0x007a1200

080054c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054c6:	681b      	ldr	r3, [r3, #0]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000000 	.word	0x20000000

080054d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054dc:	f7ff fff0 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	4904      	ldr	r1, [pc, #16]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054ee:	5ccb      	ldrb	r3, [r1, r3]
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000
 8005500:	0800c750 	.word	0x0800c750

08005504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005508:	f7ff ffda 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	0adb      	lsrs	r3, r3, #11
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4904      	ldr	r1, [pc, #16]	; (800552c <HAL_RCC_GetPCLK2Freq+0x28>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	0800c750 	.word	0x0800c750

08005530 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	220f      	movs	r2, #15
 800553e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005540:	4b12      	ldr	r3, [pc, #72]	; (800558c <HAL_RCC_GetClockConfig+0x5c>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0203 	and.w	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800554c:	4b0f      	ldr	r3, [pc, #60]	; (800558c <HAL_RCC_GetClockConfig+0x5c>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <HAL_RCC_GetClockConfig+0x5c>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCC_GetClockConfig+0x5c>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005572:	4b07      	ldr	r3, [pc, #28]	; (8005590 <HAL_RCC_GetClockConfig+0x60>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0207 	and.w	r2, r3, #7
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	601a      	str	r2, [r3, #0]
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
 8005590:	40022000 	.word	0x40022000

08005594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055a0:	4b2a      	ldr	r3, [pc, #168]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055ac:	f7ff f904 	bl	80047b8 <HAL_PWREx_GetVoltageRange>
 80055b0:	6178      	str	r0, [r7, #20]
 80055b2:	e014      	b.n	80055de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b8:	4a24      	ldr	r2, [pc, #144]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055be:	6593      	str	r3, [r2, #88]	; 0x58
 80055c0:	4b22      	ldr	r3, [pc, #136]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055cc:	f7ff f8f4 	bl	80047b8 <HAL_PWREx_GetVoltageRange>
 80055d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055d2:	4b1e      	ldr	r3, [pc, #120]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	4a1d      	ldr	r2, [pc, #116]	; (800564c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d10b      	bne.n	80055fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d919      	bls.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2ba0      	cmp	r3, #160	; 0xa0
 80055f0:	d902      	bls.n	80055f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055f2:	2302      	movs	r3, #2
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	e013      	b.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055f8:	2301      	movs	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	e010      	b.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b80      	cmp	r3, #128	; 0x80
 8005602:	d902      	bls.n	800560a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005604:	2303      	movs	r3, #3
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	e00a      	b.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b80      	cmp	r3, #128	; 0x80
 800560e:	d102      	bne.n	8005616 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005610:	2302      	movs	r3, #2
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	e004      	b.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b70      	cmp	r3, #112	; 0x70
 800561a:	d101      	bne.n	8005620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800561c:	2301      	movs	r3, #1
 800561e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f023 0207 	bic.w	r2, r3, #7
 8005628:	4909      	ldr	r1, [pc, #36]	; (8005650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	429a      	cmp	r2, r3
 800563c:	d001      	beq.n	8005642 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000
 8005650:	40022000 	.word	0x40022000

08005654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800565c:	2300      	movs	r3, #0
 800565e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005660:	2300      	movs	r3, #0
 8005662:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d041      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005674:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005678:	d02a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800567a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800567e:	d824      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005684:	d008      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800568a:	d81e      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005694:	d010      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005696:	e018      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005698:	4b86      	ldr	r3, [pc, #536]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a85      	ldr	r2, [pc, #532]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056a4:	e015      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 facb 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056b6:	e00c      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3320      	adds	r3, #32
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fbb6 	bl	8005e30 <RCCEx_PLLSAI2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056c8:	e003      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	74fb      	strb	r3, [r7, #19]
      break;
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d2:	7cfb      	ldrb	r3, [r7, #19]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056d8:	4b76      	ldr	r3, [pc, #472]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e6:	4973      	ldr	r1, [pc, #460]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056ee:	e001      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d041      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005704:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005708:	d02a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800570a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800570e:	d824      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005714:	d008      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800571a:	d81e      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005724:	d010      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005726:	e018      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005728:	4b62      	ldr	r3, [pc, #392]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a61      	ldr	r2, [pc, #388]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005732:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005734:	e015      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3304      	adds	r3, #4
 800573a:	2100      	movs	r1, #0
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fa83 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005746:	e00c      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3320      	adds	r3, #32
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fb6e 	bl	8005e30 <RCCEx_PLLSAI2_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005758:	e003      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	74fb      	strb	r3, [r7, #19]
      break;
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005768:	4b52      	ldr	r3, [pc, #328]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005776:	494f      	ldr	r1, [pc, #316]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800577e:	e001      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80a0 	beq.w	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005796:	4b47      	ldr	r3, [pc, #284]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057a6:	2300      	movs	r3, #0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ac:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	4a40      	ldr	r2, [pc, #256]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6593      	str	r3, [r2, #88]	; 0x58
 80057b8:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c4:	2301      	movs	r3, #1
 80057c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057c8:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d4:	f7fd fd2c 	bl	8003230 <HAL_GetTick>
 80057d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057da:	e009      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057dc:	f7fd fd28 	bl	8003230 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d902      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	74fb      	strb	r3, [r7, #19]
        break;
 80057ee:	e005      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f0:	4b31      	ldr	r3, [pc, #196]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0ef      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d15c      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005802:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01f      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d019      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005820:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	4a20      	ldr	r2, [pc, #128]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800583c:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585e:	f7fd fce7 	bl	8003230 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005864:	e00b      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005866:	f7fd fce3 	bl	8003230 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4293      	cmp	r3, r2
 8005876:	d902      	bls.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	74fb      	strb	r3, [r7, #19]
            break;
 800587c:	e006      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ec      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005892:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058aa:	e009      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	74bb      	strb	r3, [r7, #18]
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c0:	7c7b      	ldrb	r3, [r7, #17]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4b9e      	ldr	r3, [pc, #632]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	4a9d      	ldr	r2, [pc, #628]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058de:	4b98      	ldr	r3, [pc, #608]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 0203 	bic.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	4994      	ldr	r1, [pc, #592]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005900:	4b8f      	ldr	r3, [pc, #572]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005906:	f023 020c 	bic.w	r2, r3, #12
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	498c      	ldr	r1, [pc, #560]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005922:	4b87      	ldr	r3, [pc, #540]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	4983      	ldr	r1, [pc, #524]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005944:	4b7e      	ldr	r3, [pc, #504]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	497b      	ldr	r1, [pc, #492]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005966:	4b76      	ldr	r3, [pc, #472]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	4972      	ldr	r1, [pc, #456]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005988:	4b6d      	ldr	r3, [pc, #436]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	496a      	ldr	r1, [pc, #424]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b65      	ldr	r3, [pc, #404]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b8:	4961      	ldr	r1, [pc, #388]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059cc:	4b5c      	ldr	r3, [pc, #368]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059da:	4959      	ldr	r1, [pc, #356]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ee:	4b54      	ldr	r3, [pc, #336]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	4950      	ldr	r1, [pc, #320]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a10:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	4948      	ldr	r1, [pc, #288]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a32:	4b43      	ldr	r3, [pc, #268]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	493f      	ldr	r1, [pc, #252]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d028      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a54:	4b3a      	ldr	r3, [pc, #232]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a62:	4937      	ldr	r1, [pc, #220]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a72:	d106      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a74:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a31      	ldr	r2, [pc, #196]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7e:	60d3      	str	r3, [r2, #12]
 8005a80:	e011      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f8d8 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005aa2:	7cfb      	ldrb	r3, [r7, #19]
 8005aa4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d028      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ab2:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	491f      	ldr	r1, [pc, #124]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad0:	d106      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005adc:	60d3      	str	r3, [r2, #12]
 8005ade:	e011      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f8a9 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005afa:	7cfb      	ldrb	r3, [r7, #19]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02b      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a02      	ldr	r2, [pc, #8]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b3a:	60d3      	str	r3, [r2, #12]
 8005b3c:	e014      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f877 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02f      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b82:	4928      	ldr	r1, [pc, #160]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b92:	d10d      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f854 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	74bb      	strb	r3, [r7, #18]
 8005bae:	e011      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3320      	adds	r3, #32
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f935 	bl	8005e30 <RCCEx_PLLSAI2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bd0:	7cfb      	ldrb	r3, [r7, #19]
 8005bd2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005be0:	4b10      	ldr	r3, [pc, #64]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bee:	490d      	ldr	r1, [pc, #52]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c12:	4904      	ldr	r1, [pc, #16]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c32:	f043 0304 	orr.w	r3, r3, #4
 8005c36:	6013      	str	r3, [r2, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000

08005c48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c56:	4b75      	ldr	r3, [pc, #468]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c62:	4b72      	ldr	r3, [pc, #456]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0203 	and.w	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d10d      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
       ||
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c7a:	4b6c      	ldr	r3, [pc, #432]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
       ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d047      	beq.n	8005d1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
 8005c92:	e044      	b.n	8005d1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d018      	beq.n	8005cce <RCCEx_PLLSAI1_Config+0x86>
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d825      	bhi.n	8005cec <RCCEx_PLLSAI1_Config+0xa4>
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d002      	beq.n	8005caa <RCCEx_PLLSAI1_Config+0x62>
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d009      	beq.n	8005cbc <RCCEx_PLLSAI1_Config+0x74>
 8005ca8:	e020      	b.n	8005cec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005caa:	4b60      	ldr	r3, [pc, #384]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11d      	bne.n	8005cf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cba:	e01a      	b.n	8005cf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cbc:	4b5b      	ldr	r3, [pc, #364]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ccc:	e013      	b.n	8005cf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cce:	4b57      	ldr	r3, [pc, #348]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10f      	bne.n	8005cfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cda:	4b54      	ldr	r3, [pc, #336]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cea:	e006      	b.n	8005cfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e004      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d02:	4b4a      	ldr	r3, [pc, #296]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	430b      	orrs	r3, r1
 8005d18:	4944      	ldr	r1, [pc, #272]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d17d      	bne.n	8005e20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d24:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a40      	ldr	r2, [pc, #256]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d30:	f7fd fa7e 	bl	8003230 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d36:	e009      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d38:	f7fd fa7a 	bl	8003230 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d902      	bls.n	8005d4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4a:	e005      	b.n	8005d58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d4c:	4b37      	ldr	r3, [pc, #220]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ef      	bne.n	8005d38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d160      	bne.n	8005e20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d111      	bne.n	8005d88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d64:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6892      	ldr	r2, [r2, #8]
 8005d74:	0211      	lsls	r1, r2, #8
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	0912      	lsrs	r2, r2, #4
 8005d7c:	0452      	lsls	r2, r2, #17
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	492a      	ldr	r1, [pc, #168]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	610b      	str	r3, [r1, #16]
 8005d86:	e027      	b.n	8005dd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d112      	bne.n	8005db4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d8e:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6892      	ldr	r2, [r2, #8]
 8005d9e:	0211      	lsls	r1, r2, #8
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6912      	ldr	r2, [r2, #16]
 8005da4:	0852      	lsrs	r2, r2, #1
 8005da6:	3a01      	subs	r2, #1
 8005da8:	0552      	lsls	r2, r2, #21
 8005daa:	430a      	orrs	r2, r1
 8005dac:	491f      	ldr	r1, [pc, #124]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	610b      	str	r3, [r1, #16]
 8005db2:	e011      	b.n	8005dd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6892      	ldr	r2, [r2, #8]
 8005dc4:	0211      	lsls	r1, r2, #8
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6952      	ldr	r2, [r2, #20]
 8005dca:	0852      	lsrs	r2, r2, #1
 8005dcc:	3a01      	subs	r2, #1
 8005dce:	0652      	lsls	r2, r2, #25
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	4916      	ldr	r1, [pc, #88]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005dd8:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fd fa24 	bl	8003230 <HAL_GetTick>
 8005de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dea:	e009      	b.n	8005e00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dec:	f7fd fa20 	bl	8003230 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d902      	bls.n	8005e00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8005dfe:	e005      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ef      	beq.n	8005dec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	4904      	ldr	r1, [pc, #16]	; (8005e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40021000 	.word	0x40021000

08005e30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e3e:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d018      	beq.n	8005e7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e4a:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0203 	and.w	r2, r3, #3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d10d      	bne.n	8005e76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e62:	4b61      	ldr	r3, [pc, #388]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
       ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d047      	beq.n	8005f06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
 8005e7a:	e044      	b.n	8005f06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d018      	beq.n	8005eb6 <RCCEx_PLLSAI2_Config+0x86>
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d825      	bhi.n	8005ed4 <RCCEx_PLLSAI2_Config+0xa4>
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d002      	beq.n	8005e92 <RCCEx_PLLSAI2_Config+0x62>
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d009      	beq.n	8005ea4 <RCCEx_PLLSAI2_Config+0x74>
 8005e90:	e020      	b.n	8005ed4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e92:	4b55      	ldr	r3, [pc, #340]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11d      	bne.n	8005eda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ea2:	e01a      	b.n	8005eda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ea4:	4b50      	ldr	r3, [pc, #320]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d116      	bne.n	8005ede <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eb4:	e013      	b.n	8005ede <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005eb6:	4b4c      	ldr	r3, [pc, #304]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10f      	bne.n	8005ee2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ec2:	4b49      	ldr	r3, [pc, #292]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ed2:	e006      	b.n	8005ee2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	e004      	b.n	8005ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ee2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10d      	bne.n	8005f06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eea:	4b3f      	ldr	r3, [pc, #252]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6819      	ldr	r1, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	430b      	orrs	r3, r1
 8005f00:	4939      	ldr	r1, [pc, #228]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d167      	bne.n	8005fdc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f0c:	4b36      	ldr	r3, [pc, #216]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a35      	ldr	r2, [pc, #212]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f18:	f7fd f98a 	bl	8003230 <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f1e:	e009      	b.n	8005f34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f20:	f7fd f986 	bl	8003230 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d902      	bls.n	8005f34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	73fb      	strb	r3, [r7, #15]
        break;
 8005f32:	e005      	b.n	8005f40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f34:	4b2c      	ldr	r3, [pc, #176]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ef      	bne.n	8005f20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d14a      	bne.n	8005fdc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d111      	bne.n	8005f70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f4c:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6892      	ldr	r2, [r2, #8]
 8005f5c:	0211      	lsls	r1, r2, #8
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68d2      	ldr	r2, [r2, #12]
 8005f62:	0912      	lsrs	r2, r2, #4
 8005f64:	0452      	lsls	r2, r2, #17
 8005f66:	430a      	orrs	r2, r1
 8005f68:	491f      	ldr	r1, [pc, #124]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	614b      	str	r3, [r1, #20]
 8005f6e:	e011      	b.n	8005f94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f70:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6892      	ldr	r2, [r2, #8]
 8005f80:	0211      	lsls	r1, r2, #8
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6912      	ldr	r2, [r2, #16]
 8005f86:	0852      	lsrs	r2, r2, #1
 8005f88:	3a01      	subs	r2, #1
 8005f8a:	0652      	lsls	r2, r2, #25
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	4916      	ldr	r1, [pc, #88]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f94:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa0:	f7fd f946 	bl	8003230 <HAL_GetTick>
 8005fa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fa6:	e009      	b.n	8005fbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fa8:	f7fd f942 	bl	8003230 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d902      	bls.n	8005fbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	73fb      	strb	r3, [r7, #15]
          break;
 8005fba:	e005      	b.n	8005fc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0ef      	beq.n	8005fa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	4904      	ldr	r1, [pc, #16]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40021000 	.word	0x40021000

08005fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e095      	b.n	800612a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d108      	bne.n	8006018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800600e:	d009      	beq.n	8006024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	61da      	str	r2, [r3, #28]
 8006016:	e005      	b.n	8006024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fc f8e2 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006064:	d902      	bls.n	800606c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e002      	b.n	8006072 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800606c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006070:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800607a:	d007      	beq.n	800608c <HAL_SPI_Init+0xa0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006084:	d002      	beq.n	800608c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	ea42 0103 	orr.w	r1, r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	f003 0204 	and.w	r2, r3, #4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006108:	ea42 0103 	orr.w	r1, r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b088      	sub	sp, #32
 8006136:	af02      	add	r7, sp, #8
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614e:	d112      	bne.n	8006176 <HAL_SPI_Receive+0x44>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10e      	bne.n	8006176 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2204      	movs	r2, #4
 800615c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006160:	88fa      	ldrh	r2, [r7, #6]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	4613      	mov	r3, r2
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f910 	bl	8006392 <HAL_SPI_TransmitReceive>
 8006172:	4603      	mov	r3, r0
 8006174:	e109      	b.n	800638a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_SPI_Receive+0x52>
 8006180:	2302      	movs	r3, #2
 8006182:	e102      	b.n	800638a <HAL_SPI_Receive+0x258>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800618c:	f7fd f850 	bl	8003230 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800619e:	2302      	movs	r3, #2
 80061a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061a2:	e0e9      	b.n	8006378 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_Receive+0x7e>
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061b4:	e0e0      	b.n	8006378 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2204      	movs	r2, #4
 80061ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006200:	d908      	bls.n	8006214 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	e007      	b.n	8006224 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006222:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622c:	d10f      	bne.n	800624e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800624c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b40      	cmp	r3, #64	; 0x40
 800625a:	d007      	beq.n	800626c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800626a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006274:	d867      	bhi.n	8006346 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006276:	e030      	b.n	80062da <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b01      	cmp	r3, #1
 8006284:	d117      	bne.n	80062b6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f103 020c 	add.w	r2, r3, #12
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062b4:	e011      	b.n	80062da <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b6:	f7fc ffbb 	bl	8003230 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d803      	bhi.n	80062ce <HAL_SPI_Receive+0x19c>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d102      	bne.n	80062d4 <HAL_SPI_Receive+0x1a2>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062d8:	e04e      	b.n	8006378 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1c8      	bne.n	8006278 <HAL_SPI_Receive+0x146>
 80062e6:	e034      	b.n	8006352 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d115      	bne.n	8006322 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	b292      	uxth	r2, r2
 8006302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006320:	e011      	b.n	8006346 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006322:	f7fc ff85 	bl	8003230 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d803      	bhi.n	800633a <HAL_SPI_Receive+0x208>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d102      	bne.n	8006340 <HAL_SPI_Receive+0x20e>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d102      	bne.n	8006346 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006344:	e018      	b.n	8006378 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ca      	bne.n	80062e8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fb48 	bl	80069ec <SPI_EndRxTransaction>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75fb      	strb	r3, [r7, #23]
 8006374:	e000      	b.n	8006378 <HAL_SPI_Receive+0x246>
  }

error :
 8006376:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b08a      	sub	sp, #40	; 0x28
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_SPI_TransmitReceive+0x26>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e1fb      	b.n	80067b0 <HAL_SPI_TransmitReceive+0x41e>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c0:	f7fc ff36 	bl	8003230 <HAL_GetTick>
 80063c4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063cc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063d4:	887b      	ldrh	r3, [r7, #2]
 80063d6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063d8:	887b      	ldrh	r3, [r7, #2]
 80063da:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063dc:	7efb      	ldrb	r3, [r7, #27]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d00e      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x6e>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e8:	d106      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x66>
 80063f2:	7efb      	ldrb	r3, [r7, #27]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d003      	beq.n	8006400 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063f8:	2302      	movs	r3, #2
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063fe:	e1cd      	b.n	800679c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x80>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x80>
 800640c:	887b      	ldrh	r3, [r7, #2]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d103      	bne.n	800641a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006418:	e1c0      	b.n	800679c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b04      	cmp	r3, #4
 8006424:	d003      	beq.n	800642e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2205      	movs	r2, #5
 800642a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	887a      	ldrh	r2, [r7, #2]
 800643e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	887a      	ldrh	r2, [r7, #2]
 8006446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	887a      	ldrh	r2, [r7, #2]
 8006454:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	887a      	ldrh	r2, [r7, #2]
 800645a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006470:	d802      	bhi.n	8006478 <HAL_SPI_TransmitReceive+0xe6>
 8006472:	8a3b      	ldrh	r3, [r7, #16]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d908      	bls.n	800648a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	e007      	b.n	800649a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006498:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d007      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c0:	d97c      	bls.n	80065bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_SPI_TransmitReceive+0x13e>
 80064ca:	8a7b      	ldrh	r3, [r7, #18]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d169      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	1c9a      	adds	r2, r3, #2
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064f4:	e056      	b.n	80065a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b02      	cmp	r3, #2
 8006502:	d11b      	bne.n	800653c <HAL_SPI_TransmitReceive+0x1aa>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <HAL_SPI_TransmitReceive+0x1aa>
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	2b01      	cmp	r3, #1
 8006512:	d113      	bne.n	800653c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	1c9a      	adds	r2, r3, #2
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d11c      	bne.n	8006584 <HAL_SPI_TransmitReceive+0x1f2>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d016      	beq.n	8006584 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	b292      	uxth	r2, r2
 8006562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	1c9a      	adds	r2, r3, #2
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006580:	2301      	movs	r3, #1
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006584:	f7fc fe54 	bl	8003230 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006590:	429a      	cmp	r2, r3
 8006592:	d807      	bhi.n	80065a4 <HAL_SPI_TransmitReceive+0x212>
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d003      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80065a2:	e0fb      	b.n	800679c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1a3      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x164>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d19d      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x164>
 80065ba:	e0df      	b.n	800677c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_SPI_TransmitReceive+0x23a>
 80065c4:	8a7b      	ldrh	r3, [r7, #18]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	f040 80cb 	bne.w	8006762 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d912      	bls.n	80065fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	1c9a      	adds	r2, r3, #2
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b02      	subs	r3, #2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065fa:	e0b2      	b.n	8006762 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	7812      	ldrb	r2, [r2, #0]
 8006608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006622:	e09e      	b.n	8006762 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b02      	cmp	r3, #2
 8006630:	d134      	bne.n	800669c <HAL_SPI_TransmitReceive+0x30a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d02f      	beq.n	800669c <HAL_SPI_TransmitReceive+0x30a>
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	2b01      	cmp	r3, #1
 8006640:	d12c      	bne.n	800669c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d912      	bls.n	8006672 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	1c9a      	adds	r2, r3, #2
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b02      	subs	r3, #2
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006670:	e012      	b.n	8006698 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d148      	bne.n	800673c <HAL_SPI_TransmitReceive+0x3aa>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d042      	beq.n	800673c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d923      	bls.n	800670a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	b292      	uxth	r2, r2
 80066ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b02      	subs	r3, #2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d81f      	bhi.n	8006738 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	e016      	b.n	8006738 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f103 020c 	add.w	r2, r3, #12
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800673c:	f7fc fd78 	bl	8003230 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006748:	429a      	cmp	r2, r3
 800674a:	d803      	bhi.n	8006754 <HAL_SPI_TransmitReceive+0x3c2>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d102      	bne.n	800675a <HAL_SPI_TransmitReceive+0x3c8>
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2b00      	cmp	r3, #0
 8006758:	d103      	bne.n	8006762 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006760:	e01c      	b.n	800679c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f af5b 	bne.w	8006624 <HAL_SPI_TransmitReceive+0x292>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	f47f af54 	bne.w	8006624 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f98b 	bl	8006a9c <SPI_EndRxTxTransaction>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	661a      	str	r2, [r3, #96]	; 0x60
 8006798:	e000      	b.n	800679c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800679a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3728      	adds	r7, #40	; 0x28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067c8:	f7fc fd32 	bl	8003230 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	4413      	add	r3, r2
 80067d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067d8:	f7fc fd2a 	bl	8003230 <HAL_GetTick>
 80067dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067de:	4b39      	ldr	r3, [pc, #228]	; (80068c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	015b      	lsls	r3, r3, #5
 80067e4:	0d1b      	lsrs	r3, r3, #20
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ee:	e054      	b.n	800689a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	d050      	beq.n	800689a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067f8:	f7fc fd1a 	bl	8003230 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	429a      	cmp	r2, r3
 8006806:	d902      	bls.n	800680e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d13d      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800681c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006826:	d111      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006830:	d004      	beq.n	800683c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683a:	d107      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006854:	d10f      	bne.n	8006876 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e017      	b.n	80068ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	3b01      	subs	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4013      	ands	r3, r2
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d19b      	bne.n	80067f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000000 	.word	0x20000000

080068c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068d6:	f7fc fcab 	bl	8003230 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	4413      	add	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068e6:	f7fc fca3 	bl	8003230 <HAL_GetTick>
 80068ea:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068ec:	4b3e      	ldr	r3, [pc, #248]	; (80069e8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	00da      	lsls	r2, r3, #3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	0d1b      	lsrs	r3, r3, #20
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006904:	e062      	b.n	80069cc <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800690c:	d109      	bne.n	8006922 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006920:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d050      	beq.n	80069cc <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800692a:	f7fc fc81 	bl	8003230 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	429a      	cmp	r2, r3
 8006938:	d902      	bls.n	8006940 <SPI_WaitFifoStateUntilTimeout+0x78>
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d13d      	bne.n	80069bc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800694e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006958:	d111      	bne.n	800697e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006962:	d004      	beq.n	800696e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696c:	d107      	bne.n	800697e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006986:	d10f      	bne.n	80069a8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e010      	b.n	80069de <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689a      	ldr	r2, [r3, #8]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d194      	bne.n	8006906 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000000 	.word	0x20000000

080069ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a00:	d111      	bne.n	8006a26 <SPI_EndRxTransaction+0x3a>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0a:	d004      	beq.n	8006a16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a14:	d107      	bne.n	8006a26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a24:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2180      	movs	r1, #128	; 0x80
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff fec1 	bl	80067b8 <SPI_WaitFlagStateUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e023      	b.n	8006a94 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a54:	d11d      	bne.n	8006a92 <SPI_EndRxTransaction+0xa6>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5e:	d004      	beq.n	8006a6a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a68:	d113      	bne.n	8006a92 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff ff26 	bl	80068c8 <SPI_WaitFifoStateUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e000      	b.n	8006a94 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff ff07 	bl	80068c8 <SPI_WaitFifoStateUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e027      	b.n	8006b20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fe6c 	bl	80067b8 <SPI_WaitFlagStateUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e014      	b.n	8006b20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff fee0 	bl	80068c8 <SPI_WaitFifoStateUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e000      	b.n	8006b20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e049      	b.n	8006bce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f841 	bl	8006bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 f9f8 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d001      	beq.n	8006c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e04f      	b.n	8006ca4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01d      	beq.n	8006c62 <HAL_TIM_Base_Start_IT+0x76>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d018      	beq.n	8006c62 <HAL_TIM_Base_Start_IT+0x76>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1f      	ldr	r2, [pc, #124]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_TIM_Base_Start_IT+0x76>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00e      	beq.n	8006c62 <HAL_TIM_Base_Start_IT+0x76>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d009      	beq.n	8006c62 <HAL_TIM_Base_Start_IT+0x76>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_TIM_Base_Start_IT+0x76>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d115      	bne.n	8006c8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b06      	cmp	r3, #6
 8006c72:	d015      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0xb4>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d011      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8c:	e008      	b.n	8006ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e000      	b.n	8006ca2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	00010007 	.word	0x00010007

08006ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d122      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d11b      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0202 	mvn.w	r2, #2
 8006cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f905 	bl	8006f1e <HAL_TIM_IC_CaptureCallback>
 8006d14:	e005      	b.n	8006d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f8f7 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f908 	bl	8006f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d122      	bne.n	8006d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d11b      	bne.n	8006d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f06f 0204 	mvn.w	r2, #4
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8db 	bl	8006f1e <HAL_TIM_IC_CaptureCallback>
 8006d68:	e005      	b.n	8006d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8cd 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f8de 	bl	8006f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0208 	mvn.w	r2, #8
 8006da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2204      	movs	r2, #4
 8006da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8b1 	bl	8006f1e <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f8a3 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f8b4 	bl	8006f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0210 	mvn.w	r2, #16
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2208      	movs	r2, #8
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f887 	bl	8006f1e <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f879 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f88a 	bl	8006f32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0201 	mvn.w	r2, #1
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb f910 	bl	8002070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d10e      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f914 	bl	80070a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8a:	d10e      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	d107      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f907 	bl	80070b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b40      	cmp	r3, #64	; 0x40
 8006eb6:	d10e      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d107      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f838 	bl	8006f46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d10e      	bne.n	8006f02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d107      	bne.n	8006f02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f06f 0220 	mvn.w	r2, #32
 8006efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8c7 	bl	8007090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7a:	d00f      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3d      	ldr	r2, [pc, #244]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3c      	ldr	r2, [pc, #240]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3b      	ldr	r2, [pc, #236]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3a      	ldr	r2, [pc, #232]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01f      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d01b      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d017      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d013      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00f      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00b      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a28      	ldr	r2, [pc, #160]	; (8007084 <TIM_Base_SetConfig+0x128>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d007      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a27      	ldr	r2, [pc, #156]	; (8007088 <TIM_Base_SetConfig+0x12c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d003      	beq.n	8006ff6 <TIM_Base_SetConfig+0x9a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	; (800708c <TIM_Base_SetConfig+0x130>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d108      	bne.n	8007008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a10      	ldr	r2, [pc, #64]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00f      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a12      	ldr	r2, [pc, #72]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00b      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a11      	ldr	r2, [pc, #68]	; (8007084 <TIM_Base_SetConfig+0x128>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a10      	ldr	r2, [pc, #64]	; (8007088 <TIM_Base_SetConfig+0x12c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0f      	ldr	r2, [pc, #60]	; (800708c <TIM_Base_SetConfig+0x130>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40013400 	.word	0x40013400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800

08007090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e040      	b.n	8007160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fb f8cc 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2224      	movs	r2, #36	; 0x24
 80070f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8c0 	bl	8007290 <UART_SetConfig>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e022      	b.n	8007160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fb3e 	bl	80077a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fbc5 	bl	80078e8 <UART_CheckIdleState>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af02      	add	r7, sp, #8
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717c:	2b20      	cmp	r3, #32
 800717e:	f040 8082 	bne.w	8007286 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_UART_Transmit+0x26>
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e07a      	b.n	8007288 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_UART_Transmit+0x38>
 800719c:	2302      	movs	r3, #2
 800719e:	e073      	b.n	8007288 <HAL_UART_Transmit+0x120>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2221      	movs	r2, #33	; 0x21
 80071b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071b6:	f7fc f83b 	bl	8003230 <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d4:	d108      	bne.n	80071e8 <HAL_UART_Transmit+0x80>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d104      	bne.n	80071e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	e003      	b.n	80071f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80071f8:	e02d      	b.n	8007256 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2200      	movs	r2, #0
 8007202:	2180      	movs	r1, #128	; 0x80
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fbb8 	bl	800797a <UART_WaitOnFlagUntilTimeout>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e039      	b.n	8007288 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10b      	bne.n	8007232 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	881a      	ldrh	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007226:	b292      	uxth	r2, r2
 8007228:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	3302      	adds	r3, #2
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	e008      	b.n	8007244 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	781a      	ldrb	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	b292      	uxth	r2, r2
 800723c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3301      	adds	r3, #1
 8007242:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1cb      	bne.n	80071fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2200      	movs	r2, #0
 800726a:	2140      	movs	r1, #64	; 0x40
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fb84 	bl	800797a <UART_WaitOnFlagUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e005      	b.n	8007288 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e000      	b.n	8007288 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007286:	2302      	movs	r3, #2
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	3720      	adds	r7, #32
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007290:	b5b0      	push	{r4, r5, r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	4bad      	ldr	r3, [pc, #692]	; (8007570 <UART_SetConfig+0x2e0>)
 80072bc:	4013      	ands	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	69f9      	ldr	r1, [r7, #28]
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4aa2      	ldr	r2, [pc, #648]	; (8007574 <UART_SetConfig+0x2e4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	430a      	orrs	r2, r1
 800730a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a99      	ldr	r2, [pc, #612]	; (8007578 <UART_SetConfig+0x2e8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d121      	bne.n	800735a <UART_SetConfig+0xca>
 8007316:	4b99      	ldr	r3, [pc, #612]	; (800757c <UART_SetConfig+0x2ec>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b03      	cmp	r3, #3
 8007322:	d817      	bhi.n	8007354 <UART_SetConfig+0xc4>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x9c>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	0800733d 	.word	0x0800733d
 8007330:	08007349 	.word	0x08007349
 8007334:	08007343 	.word	0x08007343
 8007338:	0800734f 	.word	0x0800734f
 800733c:	2301      	movs	r3, #1
 800733e:	76fb      	strb	r3, [r7, #27]
 8007340:	e0e7      	b.n	8007512 <UART_SetConfig+0x282>
 8007342:	2302      	movs	r3, #2
 8007344:	76fb      	strb	r3, [r7, #27]
 8007346:	e0e4      	b.n	8007512 <UART_SetConfig+0x282>
 8007348:	2304      	movs	r3, #4
 800734a:	76fb      	strb	r3, [r7, #27]
 800734c:	e0e1      	b.n	8007512 <UART_SetConfig+0x282>
 800734e:	2308      	movs	r3, #8
 8007350:	76fb      	strb	r3, [r7, #27]
 8007352:	e0de      	b.n	8007512 <UART_SetConfig+0x282>
 8007354:	2310      	movs	r3, #16
 8007356:	76fb      	strb	r3, [r7, #27]
 8007358:	e0db      	b.n	8007512 <UART_SetConfig+0x282>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a88      	ldr	r2, [pc, #544]	; (8007580 <UART_SetConfig+0x2f0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d132      	bne.n	80073ca <UART_SetConfig+0x13a>
 8007364:	4b85      	ldr	r3, [pc, #532]	; (800757c <UART_SetConfig+0x2ec>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f003 030c 	and.w	r3, r3, #12
 800736e:	2b0c      	cmp	r3, #12
 8007370:	d828      	bhi.n	80073c4 <UART_SetConfig+0x134>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0xe8>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	080073ad 	.word	0x080073ad
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073c5 	.word	0x080073c5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073b9 	.word	0x080073b9
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073c5 	.word	0x080073c5
 8007394:	080073c5 	.word	0x080073c5
 8007398:	080073b3 	.word	0x080073b3
 800739c:	080073c5 	.word	0x080073c5
 80073a0:	080073c5 	.word	0x080073c5
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073bf 	.word	0x080073bf
 80073ac:	2300      	movs	r3, #0
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	e0af      	b.n	8007512 <UART_SetConfig+0x282>
 80073b2:	2302      	movs	r3, #2
 80073b4:	76fb      	strb	r3, [r7, #27]
 80073b6:	e0ac      	b.n	8007512 <UART_SetConfig+0x282>
 80073b8:	2304      	movs	r3, #4
 80073ba:	76fb      	strb	r3, [r7, #27]
 80073bc:	e0a9      	b.n	8007512 <UART_SetConfig+0x282>
 80073be:	2308      	movs	r3, #8
 80073c0:	76fb      	strb	r3, [r7, #27]
 80073c2:	e0a6      	b.n	8007512 <UART_SetConfig+0x282>
 80073c4:	2310      	movs	r3, #16
 80073c6:	76fb      	strb	r3, [r7, #27]
 80073c8:	e0a3      	b.n	8007512 <UART_SetConfig+0x282>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a6d      	ldr	r2, [pc, #436]	; (8007584 <UART_SetConfig+0x2f4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d120      	bne.n	8007416 <UART_SetConfig+0x186>
 80073d4:	4b69      	ldr	r3, [pc, #420]	; (800757c <UART_SetConfig+0x2ec>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073de:	2b30      	cmp	r3, #48	; 0x30
 80073e0:	d013      	beq.n	800740a <UART_SetConfig+0x17a>
 80073e2:	2b30      	cmp	r3, #48	; 0x30
 80073e4:	d814      	bhi.n	8007410 <UART_SetConfig+0x180>
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d009      	beq.n	80073fe <UART_SetConfig+0x16e>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d810      	bhi.n	8007410 <UART_SetConfig+0x180>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <UART_SetConfig+0x168>
 80073f2:	2b10      	cmp	r3, #16
 80073f4:	d006      	beq.n	8007404 <UART_SetConfig+0x174>
 80073f6:	e00b      	b.n	8007410 <UART_SetConfig+0x180>
 80073f8:	2300      	movs	r3, #0
 80073fa:	76fb      	strb	r3, [r7, #27]
 80073fc:	e089      	b.n	8007512 <UART_SetConfig+0x282>
 80073fe:	2302      	movs	r3, #2
 8007400:	76fb      	strb	r3, [r7, #27]
 8007402:	e086      	b.n	8007512 <UART_SetConfig+0x282>
 8007404:	2304      	movs	r3, #4
 8007406:	76fb      	strb	r3, [r7, #27]
 8007408:	e083      	b.n	8007512 <UART_SetConfig+0x282>
 800740a:	2308      	movs	r3, #8
 800740c:	76fb      	strb	r3, [r7, #27]
 800740e:	e080      	b.n	8007512 <UART_SetConfig+0x282>
 8007410:	2310      	movs	r3, #16
 8007412:	76fb      	strb	r3, [r7, #27]
 8007414:	e07d      	b.n	8007512 <UART_SetConfig+0x282>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a5b      	ldr	r2, [pc, #364]	; (8007588 <UART_SetConfig+0x2f8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d120      	bne.n	8007462 <UART_SetConfig+0x1d2>
 8007420:	4b56      	ldr	r3, [pc, #344]	; (800757c <UART_SetConfig+0x2ec>)
 8007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800742a:	2bc0      	cmp	r3, #192	; 0xc0
 800742c:	d013      	beq.n	8007456 <UART_SetConfig+0x1c6>
 800742e:	2bc0      	cmp	r3, #192	; 0xc0
 8007430:	d814      	bhi.n	800745c <UART_SetConfig+0x1cc>
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d009      	beq.n	800744a <UART_SetConfig+0x1ba>
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d810      	bhi.n	800745c <UART_SetConfig+0x1cc>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <UART_SetConfig+0x1b4>
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d006      	beq.n	8007450 <UART_SetConfig+0x1c0>
 8007442:	e00b      	b.n	800745c <UART_SetConfig+0x1cc>
 8007444:	2300      	movs	r3, #0
 8007446:	76fb      	strb	r3, [r7, #27]
 8007448:	e063      	b.n	8007512 <UART_SetConfig+0x282>
 800744a:	2302      	movs	r3, #2
 800744c:	76fb      	strb	r3, [r7, #27]
 800744e:	e060      	b.n	8007512 <UART_SetConfig+0x282>
 8007450:	2304      	movs	r3, #4
 8007452:	76fb      	strb	r3, [r7, #27]
 8007454:	e05d      	b.n	8007512 <UART_SetConfig+0x282>
 8007456:	2308      	movs	r3, #8
 8007458:	76fb      	strb	r3, [r7, #27]
 800745a:	e05a      	b.n	8007512 <UART_SetConfig+0x282>
 800745c:	2310      	movs	r3, #16
 800745e:	76fb      	strb	r3, [r7, #27]
 8007460:	e057      	b.n	8007512 <UART_SetConfig+0x282>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a49      	ldr	r2, [pc, #292]	; (800758c <UART_SetConfig+0x2fc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d125      	bne.n	80074b8 <UART_SetConfig+0x228>
 800746c:	4b43      	ldr	r3, [pc, #268]	; (800757c <UART_SetConfig+0x2ec>)
 800746e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747a:	d017      	beq.n	80074ac <UART_SetConfig+0x21c>
 800747c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007480:	d817      	bhi.n	80074b2 <UART_SetConfig+0x222>
 8007482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007486:	d00b      	beq.n	80074a0 <UART_SetConfig+0x210>
 8007488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800748c:	d811      	bhi.n	80074b2 <UART_SetConfig+0x222>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <UART_SetConfig+0x20a>
 8007492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007496:	d006      	beq.n	80074a6 <UART_SetConfig+0x216>
 8007498:	e00b      	b.n	80074b2 <UART_SetConfig+0x222>
 800749a:	2300      	movs	r3, #0
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e038      	b.n	8007512 <UART_SetConfig+0x282>
 80074a0:	2302      	movs	r3, #2
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	e035      	b.n	8007512 <UART_SetConfig+0x282>
 80074a6:	2304      	movs	r3, #4
 80074a8:	76fb      	strb	r3, [r7, #27]
 80074aa:	e032      	b.n	8007512 <UART_SetConfig+0x282>
 80074ac:	2308      	movs	r3, #8
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	e02f      	b.n	8007512 <UART_SetConfig+0x282>
 80074b2:	2310      	movs	r3, #16
 80074b4:	76fb      	strb	r3, [r7, #27]
 80074b6:	e02c      	b.n	8007512 <UART_SetConfig+0x282>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a2d      	ldr	r2, [pc, #180]	; (8007574 <UART_SetConfig+0x2e4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d125      	bne.n	800750e <UART_SetConfig+0x27e>
 80074c2:	4b2e      	ldr	r3, [pc, #184]	; (800757c <UART_SetConfig+0x2ec>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d0:	d017      	beq.n	8007502 <UART_SetConfig+0x272>
 80074d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074d6:	d817      	bhi.n	8007508 <UART_SetConfig+0x278>
 80074d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074dc:	d00b      	beq.n	80074f6 <UART_SetConfig+0x266>
 80074de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e2:	d811      	bhi.n	8007508 <UART_SetConfig+0x278>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <UART_SetConfig+0x260>
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ec:	d006      	beq.n	80074fc <UART_SetConfig+0x26c>
 80074ee:	e00b      	b.n	8007508 <UART_SetConfig+0x278>
 80074f0:	2300      	movs	r3, #0
 80074f2:	76fb      	strb	r3, [r7, #27]
 80074f4:	e00d      	b.n	8007512 <UART_SetConfig+0x282>
 80074f6:	2302      	movs	r3, #2
 80074f8:	76fb      	strb	r3, [r7, #27]
 80074fa:	e00a      	b.n	8007512 <UART_SetConfig+0x282>
 80074fc:	2304      	movs	r3, #4
 80074fe:	76fb      	strb	r3, [r7, #27]
 8007500:	e007      	b.n	8007512 <UART_SetConfig+0x282>
 8007502:	2308      	movs	r3, #8
 8007504:	76fb      	strb	r3, [r7, #27]
 8007506:	e004      	b.n	8007512 <UART_SetConfig+0x282>
 8007508:	2310      	movs	r3, #16
 800750a:	76fb      	strb	r3, [r7, #27]
 800750c:	e001      	b.n	8007512 <UART_SetConfig+0x282>
 800750e:	2310      	movs	r3, #16
 8007510:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a17      	ldr	r2, [pc, #92]	; (8007574 <UART_SetConfig+0x2e4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	f040 8087 	bne.w	800762c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800751e:	7efb      	ldrb	r3, [r7, #27]
 8007520:	2b08      	cmp	r3, #8
 8007522:	d837      	bhi.n	8007594 <UART_SetConfig+0x304>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x29c>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	08007551 	.word	0x08007551
 8007530:	08007595 	.word	0x08007595
 8007534:	08007559 	.word	0x08007559
 8007538:	08007595 	.word	0x08007595
 800753c:	0800755f 	.word	0x0800755f
 8007540:	08007595 	.word	0x08007595
 8007544:	08007595 	.word	0x08007595
 8007548:	08007595 	.word	0x08007595
 800754c:	08007567 	.word	0x08007567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007550:	f7fd ffc2 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8007554:	6178      	str	r0, [r7, #20]
        break;
 8007556:	e022      	b.n	800759e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007558:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <UART_SetConfig+0x300>)
 800755a:	617b      	str	r3, [r7, #20]
        break;
 800755c:	e01f      	b.n	800759e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800755e:	f7fd ff23 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8007562:	6178      	str	r0, [r7, #20]
        break;
 8007564:	e01b      	b.n	800759e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800756a:	617b      	str	r3, [r7, #20]
        break;
 800756c:	e017      	b.n	800759e <UART_SetConfig+0x30e>
 800756e:	bf00      	nop
 8007570:	efff69f3 	.word	0xefff69f3
 8007574:	40008000 	.word	0x40008000
 8007578:	40013800 	.word	0x40013800
 800757c:	40021000 	.word	0x40021000
 8007580:	40004400 	.word	0x40004400
 8007584:	40004800 	.word	0x40004800
 8007588:	40004c00 	.word	0x40004c00
 800758c:	40005000 	.word	0x40005000
 8007590:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	76bb      	strb	r3, [r7, #26]
        break;
 800759c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 80f1 	beq.w	8007788 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d305      	bcc.n	80075c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d902      	bls.n	80075c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	76bb      	strb	r3, [r7, #26]
 80075c6:	e0df      	b.n	8007788 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f04f 0100 	mov.w	r1, #0
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	020b      	lsls	r3, r1, #8
 80075da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075de:	0202      	lsls	r2, r0, #8
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	6849      	ldr	r1, [r1, #4]
 80075e4:	0849      	lsrs	r1, r1, #1
 80075e6:	4608      	mov	r0, r1
 80075e8:	f04f 0100 	mov.w	r1, #0
 80075ec:	1814      	adds	r4, r2, r0
 80075ee:	eb43 0501 	adc.w	r5, r3, r1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	f7f9 fb22 	bl	8000c48 <__aeabi_uldivmod>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4613      	mov	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007612:	d308      	bcc.n	8007626 <UART_SetConfig+0x396>
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761a:	d204      	bcs.n	8007626 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	e0b0      	b.n	8007788 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	76bb      	strb	r3, [r7, #26]
 800762a:	e0ad      	b.n	8007788 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007634:	d15c      	bne.n	80076f0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007636:	7efb      	ldrb	r3, [r7, #27]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d828      	bhi.n	800768e <UART_SetConfig+0x3fe>
 800763c:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <UART_SetConfig+0x3b4>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	0800768f 	.word	0x0800768f
 8007654:	0800767f 	.word	0x0800767f
 8007658:	0800768f 	.word	0x0800768f
 800765c:	0800768f 	.word	0x0800768f
 8007660:	0800768f 	.word	0x0800768f
 8007664:	08007687 	.word	0x08007687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007668:	f7fd ff36 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 800766c:	6178      	str	r0, [r7, #20]
        break;
 800766e:	e013      	b.n	8007698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007670:	f7fd ff48 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 8007674:	6178      	str	r0, [r7, #20]
        break;
 8007676:	e00f      	b.n	8007698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007678:	4b49      	ldr	r3, [pc, #292]	; (80077a0 <UART_SetConfig+0x510>)
 800767a:	617b      	str	r3, [r7, #20]
        break;
 800767c:	e00c      	b.n	8007698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767e:	f7fd fe93 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8007682:	6178      	str	r0, [r7, #20]
        break;
 8007684:	e008      	b.n	8007698 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768a:	617b      	str	r3, [r7, #20]
        break;
 800768c:	e004      	b.n	8007698 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	76bb      	strb	r3, [r7, #26]
        break;
 8007696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d074      	beq.n	8007788 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	005a      	lsls	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	441a      	add	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b0f      	cmp	r3, #15
 80076ba:	d916      	bls.n	80076ea <UART_SetConfig+0x45a>
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c2:	d212      	bcs.n	80076ea <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f023 030f 	bic.w	r3, r3, #15
 80076cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	b29a      	uxth	r2, r3
 80076da:	89fb      	ldrh	r3, [r7, #14]
 80076dc:	4313      	orrs	r3, r2
 80076de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	89fa      	ldrh	r2, [r7, #14]
 80076e6:	60da      	str	r2, [r3, #12]
 80076e8:	e04e      	b.n	8007788 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	76bb      	strb	r3, [r7, #26]
 80076ee:	e04b      	b.n	8007788 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076f0:	7efb      	ldrb	r3, [r7, #27]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d827      	bhi.n	8007746 <UART_SetConfig+0x4b6>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x46c>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007729 	.word	0x08007729
 8007704:	08007731 	.word	0x08007731
 8007708:	08007747 	.word	0x08007747
 800770c:	08007737 	.word	0x08007737
 8007710:	08007747 	.word	0x08007747
 8007714:	08007747 	.word	0x08007747
 8007718:	08007747 	.word	0x08007747
 800771c:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd feda 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8007724:	6178      	str	r0, [r7, #20]
        break;
 8007726:	e013      	b.n	8007750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007728:	f7fd feec 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 800772c:	6178      	str	r0, [r7, #20]
        break;
 800772e:	e00f      	b.n	8007750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <UART_SetConfig+0x510>)
 8007732:	617b      	str	r3, [r7, #20]
        break;
 8007734:	e00c      	b.n	8007750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd fe37 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 800773a:	6178      	str	r0, [r7, #20]
        break;
 800773c:	e008      	b.n	8007750 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007742:	617b      	str	r3, [r7, #20]
        break;
 8007744:	e004      	b.n	8007750 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	76bb      	strb	r3, [r7, #26]
        break;
 800774e:	bf00      	nop
    }

    if (pclk != 0U)
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	085a      	lsrs	r2, r3, #1
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	b29b      	uxth	r3, r3
 800776a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2b0f      	cmp	r3, #15
 8007770:	d908      	bls.n	8007784 <UART_SetConfig+0x4f4>
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007778:	d204      	bcs.n	8007784 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e001      	b.n	8007788 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007794:	7ebb      	ldrb	r3, [r7, #26]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bdb0      	pop	{r4, r5, r7, pc}
 800779e:	bf00      	nop
 80077a0:	00f42400 	.word	0x00f42400

080077a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00a      	beq.n	80077ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01a      	beq.n	80078ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a2:	d10a      	bne.n	80078ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078f8:	f7fb fc9a 	bl	8003230 <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b08      	cmp	r3, #8
 800790a:	d10e      	bne.n	800792a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800790c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f82d 	bl	800797a <UART_WaitOnFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e023      	b.n	8007972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b04      	cmp	r3, #4
 8007936:	d10e      	bne.n	8007956 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f817 	bl	800797a <UART_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e00d      	b.n	8007972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798a:	e05e      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007992:	d05a      	beq.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007994:	f7fb fc4c 	bl	8003230 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d302      	bcc.n	80079aa <UART_WaitOnFlagUntilTimeout+0x30>
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d11b      	bne.n	80079e2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079b8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e043      	b.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d02c      	beq.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fe:	d124      	bne.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e00f      	b.n	8007a6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4013      	ands	r3, r2
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	bf0c      	ite	eq
 8007a5a:	2301      	moveq	r3, #1
 8007a5c:	2300      	movne	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d091      	beq.n	800798c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a72:	b084      	sub	sp, #16
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	f107 001c 	add.w	r0, r7, #28
 8007a80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa23 	bl	8007edc <USB_CoreReset>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8007aac:	e005      	b.n	8007aba <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ac6:	b004      	add	sp, #16
 8007ac8:	4770      	bx	lr

08007aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 0201 	bic.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d106      	bne.n	8007b18 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	e00b      	b.n	8007b30 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	e001      	b.n	8007b30 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e003      	b.n	8007b38 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b30:	2032      	movs	r0, #50	; 0x32
 8007b32:	f7fb fb89 	bl	8003248 <HAL_Delay>

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b40:	b084      	sub	sp, #16
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	e009      	b.n	8007b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	3340      	adds	r3, #64	; 0x40
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	2b0e      	cmp	r3, #14
 8007b78:	d9f2      	bls.n	8007b60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d11c      	bne.n	8007bba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b8e:	f043 0302 	orr.w	r3, r3, #2
 8007b92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e005      	b.n	8007bc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bcc:	461a      	mov	r2, r3
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd8:	4619      	mov	r1, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be0:	461a      	mov	r2, r3
 8007be2:	680b      	ldr	r3, [r1, #0]
 8007be4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007be6:	2103      	movs	r1, #3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f93d 	bl	8007e68 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bee:	2110      	movs	r1, #16
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f8f1 	bl	8007dd8 <USB_FlushTxFifo>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f90f 	bl	8007e24 <USB_FlushRxFifo>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c16:	461a      	mov	r2, r3
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	461a      	mov	r2, r3
 8007c24:	2300      	movs	r3, #0
 8007c26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2e:	461a      	mov	r2, r3
 8007c30:	2300      	movs	r3, #0
 8007c32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c34:	2300      	movs	r3, #0
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	e043      	b.n	8007cc2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c50:	d118      	bne.n	8007c84 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c64:	461a      	mov	r2, r3
 8007c66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e013      	b.n	8007c96 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	e008      	b.n	8007c96 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d3b7      	bcc.n	8007c3a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cca:	2300      	movs	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	e043      	b.n	8007d58 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ce6:	d118      	bne.n	8007d1a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e013      	b.n	8007d2c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	461a      	mov	r2, r3
 8007d12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e008      	b.n	8007d2c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d26:	461a      	mov	r2, r3
 8007d28:	2300      	movs	r3, #0
 8007d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d38:	461a      	mov	r2, r3
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3301      	adds	r3, #1
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d3b7      	bcc.n	8007cd0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f043 0210 	orr.w	r2, r3, #16
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <USB_DevInit+0x294>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f043 0208 	orr.w	r2, r3, #8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d107      	bne.n	8007dc2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dba:	f043 0304 	orr.w	r3, r3, #4
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dce:	b004      	add	sp, #16
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	803c3800 	.word	0x803c3800

08007dd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	019b      	lsls	r3, r3, #6
 8007dea:	f043 0220 	orr.w	r2, r3, #32
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <USB_FlushTxFifo+0x48>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d901      	bls.n	8007e04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e006      	b.n	8007e12 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d0f0      	beq.n	8007df2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	00030d40 	.word	0x00030d40

08007e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2210      	movs	r2, #16
 8007e34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <USB_FlushRxFifo+0x40>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d901      	bls.n	8007e48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e006      	b.n	8007e56 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	d0f0      	beq.n	8007e36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	00030d40 	.word	0x00030d40

08007e68 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	68f9      	ldr	r1, [r7, #12]
 8007e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ec8:	f043 0302 	orr.w	r3, r3, #2
 8007ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a13      	ldr	r2, [pc, #76]	; (8007f40 <USB_CoreReset+0x64>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e01b      	b.n	8007f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	daf2      	bge.n	8007ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3301      	adds	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <USB_CoreReset+0x64>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d901      	bls.n	8007f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e006      	b.n	8007f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d0f0      	beq.n	8007f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	00030d40 	.word	0x00030d40

08007f44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f56:	2b84      	cmp	r3, #132	; 0x84
 8007f58:	d005      	beq.n	8007f66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	3303      	adds	r3, #3
 8007f64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f66:	68fb      	ldr	r3, [r7, #12]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f78:	f000 fade 	bl	8008538 <vTaskStartScheduler>
  
  return osOK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f84:	b089      	sub	sp, #36	; 0x24
 8007f86:	af04      	add	r7, sp, #16
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d020      	beq.n	8007fd6 <osThreadCreate+0x54>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01c      	beq.n	8007fd6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685c      	ldr	r4, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681d      	ldr	r5, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691e      	ldr	r6, [r3, #16]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff ffc8 	bl	8007f44 <makeFreeRtosPriority>
 8007fb4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fbe:	9202      	str	r2, [sp, #8]
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	9100      	str	r1, [sp, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	4632      	mov	r2, r6
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 f8ed 	bl	80081aa <xTaskCreateStatic>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e01c      	b.n	8008010 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685c      	ldr	r4, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fe2:	b29e      	uxth	r6, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff ffaa 	bl	8007f44 <makeFreeRtosPriority>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	9200      	str	r2, [sp, #0]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4629      	mov	r1, r5
 8008000:	4620      	mov	r0, r4
 8008002:	f000 f92f 	bl	8008264 <xTaskCreate>
 8008006:	4603      	mov	r3, r0
 8008008:	2b01      	cmp	r3, #1
 800800a:	d001      	beq.n	8008010 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	e000      	b.n	8008012 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800801a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <osDelay+0x16>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	e000      	b.n	8008032 <osDelay+0x18>
 8008030:	2301      	movs	r3, #1
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fa4c 	bl	80084d0 <vTaskDelay>
  
  return osOK;
 8008038:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f103 0208 	add.w	r2, r3, #8
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f04f 32ff 	mov.w	r2, #4294967295
 800805a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f103 0208 	add.w	r2, r3, #8
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f103 0208 	add.w	r2, r3, #8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]
}
 80080d8:	bf00      	nop
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fa:	d103      	bne.n	8008104 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	e00c      	b.n	800811e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3308      	adds	r3, #8
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	e002      	b.n	8008112 <vListInsert+0x2e>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	429a      	cmp	r2, r3
 800811c:	d2f6      	bcs.n	800810c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	6892      	ldr	r2, [r2, #8]
 800816c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6852      	ldr	r2, [r2, #4]
 8008176:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	429a      	cmp	r2, r3
 8008180:	d103      	bne.n	800818a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	1e5a      	subs	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b08e      	sub	sp, #56	; 0x38
 80081ae:	af04      	add	r7, sp, #16
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <xTaskCreateStatic+0x46>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	61fb      	str	r3, [r7, #28]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081f0:	2354      	movs	r3, #84	; 0x54
 80081f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2b54      	cmp	r3, #84	; 0x54
 80081f8:	d00a      	beq.n	8008210 <xTaskCreateStatic+0x66>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	61bb      	str	r3, [r7, #24]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008210:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01e      	beq.n	8008256 <xTaskCreateStatic+0xac>
 8008218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821a:	2b00      	cmp	r3, #0
 800821c:	d01b      	beq.n	8008256 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008226:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008230:	2300      	movs	r3, #0
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f850 	bl	80082ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800824e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008250:	f000 f8d4 	bl	80083fc <prvAddNewTaskToReadyList>
 8008254:	e001      	b.n	800825a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800825a:	697b      	ldr	r3, [r7, #20]
	}
 800825c:	4618      	mov	r0, r3
 800825e:	3728      	adds	r7, #40	; 0x28
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	; 0x30
 8008268:	af04      	add	r7, sp, #16
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fec5 	bl	8009008 <pvPortMalloc>
 800827e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008286:	2054      	movs	r0, #84	; 0x54
 8008288:	f000 febe 	bl	8009008 <pvPortMalloc>
 800828c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
 800829a:	e005      	b.n	80082a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800829c:	6978      	ldr	r0, [r7, #20]
 800829e:	f000 ff7f 	bl	80091a0 <vPortFree>
 80082a2:	e001      	b.n	80082a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d017      	beq.n	80082de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082b6:	88fa      	ldrh	r2, [r7, #6]
 80082b8:	2300      	movs	r3, #0
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	9302      	str	r3, [sp, #8]
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f80e 	bl	80082ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082d2:	69f8      	ldr	r0, [r7, #28]
 80082d4:	f000 f892 	bl	80083fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082d8:	2301      	movs	r3, #1
 80082da:	61bb      	str	r3, [r7, #24]
 80082dc:	e002      	b.n	80082e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082e4:	69bb      	ldr	r3, [r7, #24]
	}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3720      	adds	r7, #32
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b088      	sub	sp, #32
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	60b9      	str	r1, [r7, #8]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008306:	3b01      	subs	r3, #1
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f023 0307 	bic.w	r3, r3, #7
 8008314:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	617b      	str	r3, [r7, #20]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01f      	beq.n	800837c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800833c:	2300      	movs	r3, #0
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	e012      	b.n	8008368 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	7819      	ldrb	r1, [r3, #0]
 800834a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	3334      	adds	r3, #52	; 0x34
 8008352:	460a      	mov	r2, r1
 8008354:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	3301      	adds	r3, #1
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d9e9      	bls.n	8008342 <prvInitialiseNewTask+0x54>
 800836e:	e000      	b.n	8008372 <prvInitialiseNewTask+0x84>
			{
				break;
 8008370:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800837a:	e003      	b.n	8008384 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	2b06      	cmp	r3, #6
 8008388:	d901      	bls.n	800838e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800838a:	2306      	movs	r3, #6
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008392:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008398:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	2200      	movs	r2, #0
 800839e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	3304      	adds	r3, #4
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fe6c 	bl	8008082 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	3318      	adds	r3, #24
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7ff fe67 	bl	8008082 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	f1c3 0207 	rsb	r2, r3, #7
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	2200      	movs	r2, #0
 80083ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	68f9      	ldr	r1, [r7, #12]
 80083dc:	69b8      	ldr	r0, [r7, #24]
 80083de:	f000 fc05 	bl	8008bec <pxPortInitialiseStack>
 80083e2:	4602      	mov	r2, r0
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f4:	bf00      	nop
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008404:	f000 fd1e 	bl	8008e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008408:	4b2a      	ldr	r3, [pc, #168]	; (80084b4 <prvAddNewTaskToReadyList+0xb8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3301      	adds	r3, #1
 800840e:	4a29      	ldr	r2, [pc, #164]	; (80084b4 <prvAddNewTaskToReadyList+0xb8>)
 8008410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008412:	4b29      	ldr	r3, [pc, #164]	; (80084b8 <prvAddNewTaskToReadyList+0xbc>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800841a:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <prvAddNewTaskToReadyList+0xbc>)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008420:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <prvAddNewTaskToReadyList+0xb8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d110      	bne.n	800844a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008428:	f000 fabc 	bl	80089a4 <prvInitialiseTaskLists>
 800842c:	e00d      	b.n	800844a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800842e:	4b23      	ldr	r3, [pc, #140]	; (80084bc <prvAddNewTaskToReadyList+0xc0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008436:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <prvAddNewTaskToReadyList+0xbc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	429a      	cmp	r2, r3
 8008442:	d802      	bhi.n	800844a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008444:	4a1c      	ldr	r2, [pc, #112]	; (80084b8 <prvAddNewTaskToReadyList+0xbc>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800844a:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <prvAddNewTaskToReadyList+0xc4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3301      	adds	r3, #1
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <prvAddNewTaskToReadyList+0xc4>)
 8008452:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	2201      	movs	r2, #1
 800845a:	409a      	lsls	r2, r3
 800845c:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <prvAddNewTaskToReadyList+0xc8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4313      	orrs	r3, r2
 8008462:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <prvAddNewTaskToReadyList+0xc8>)
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <prvAddNewTaskToReadyList+0xcc>)
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3304      	adds	r3, #4
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f7ff fe0d 	bl	800809c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008482:	f000 fd0f 	bl	8008ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <prvAddNewTaskToReadyList+0xc0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <prvAddNewTaskToReadyList+0xbc>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	429a      	cmp	r2, r3
 800849a:	d207      	bcs.n	80084ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <prvAddNewTaskToReadyList+0xd0>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	200005e8 	.word	0x200005e8
 80084b8:	200004e8 	.word	0x200004e8
 80084bc:	200005f4 	.word	0x200005f4
 80084c0:	20000604 	.word	0x20000604
 80084c4:	200005f0 	.word	0x200005f0
 80084c8:	200004ec 	.word	0x200004ec
 80084cc:	e000ed04 	.word	0xe000ed04

080084d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d017      	beq.n	8008512 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <vTaskDelay+0x60>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <vTaskDelay+0x30>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	60bb      	str	r3, [r7, #8]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008500:	f000 f87a 	bl	80085f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008504:	2100      	movs	r1, #0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fb0a 	bl	8008b20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800850c:	f000 f882 	bl	8008614 <xTaskResumeAll>
 8008510:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d107      	bne.n	8008528 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <vTaskDelay+0x64>)
 800851a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20000610 	.word	0x20000610
 8008534:	e000ed04 	.word	0xe000ed04

08008538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008546:	463a      	mov	r2, r7
 8008548:	1d39      	adds	r1, r7, #4
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4618      	mov	r0, r3
 8008550:	f7f8 fcf6 	bl	8000f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	9202      	str	r2, [sp, #8]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	2300      	movs	r3, #0
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2300      	movs	r3, #0
 8008564:	460a      	mov	r2, r1
 8008566:	491e      	ldr	r1, [pc, #120]	; (80085e0 <vTaskStartScheduler+0xa8>)
 8008568:	481e      	ldr	r0, [pc, #120]	; (80085e4 <vTaskStartScheduler+0xac>)
 800856a:	f7ff fe1e 	bl	80081aa <xTaskCreateStatic>
 800856e:	4603      	mov	r3, r0
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <vTaskStartScheduler+0xb0>)
 8008572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008574:	4b1c      	ldr	r3, [pc, #112]	; (80085e8 <vTaskStartScheduler+0xb0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800857c:	2301      	movs	r3, #1
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	e001      	b.n	8008586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d116      	bne.n	80085ba <vTaskStartScheduler+0x82>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	613b      	str	r3, [r7, #16]
}
 800859e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085a0:	4b12      	ldr	r3, [pc, #72]	; (80085ec <vTaskStartScheduler+0xb4>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085a8:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <vTaskStartScheduler+0xb8>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085ae:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <vTaskStartScheduler+0xbc>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085b4:	f000 fba4 	bl	8008d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085b8:	e00e      	b.n	80085d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c0:	d10a      	bne.n	80085d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60fb      	str	r3, [r7, #12]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <vTaskStartScheduler+0x9e>
}
 80085d8:	bf00      	nop
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	0800c738 	.word	0x0800c738
 80085e4:	08008975 	.word	0x08008975
 80085e8:	2000060c 	.word	0x2000060c
 80085ec:	20000608 	.word	0x20000608
 80085f0:	200005f4 	.word	0x200005f4
 80085f4:	200005ec 	.word	0x200005ec

080085f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085fc:	4b04      	ldr	r3, [pc, #16]	; (8008610 <vTaskSuspendAll+0x18>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	4a03      	ldr	r2, [pc, #12]	; (8008610 <vTaskSuspendAll+0x18>)
 8008604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008606:	bf00      	nop
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20000610 	.word	0x20000610

08008614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008622:	4b41      	ldr	r3, [pc, #260]	; (8008728 <xTaskResumeAll+0x114>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <xTaskResumeAll+0x2c>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	603b      	str	r3, [r7, #0]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008640:	f000 fc00 	bl	8008e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008644:	4b38      	ldr	r3, [pc, #224]	; (8008728 <xTaskResumeAll+0x114>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3b01      	subs	r3, #1
 800864a:	4a37      	ldr	r2, [pc, #220]	; (8008728 <xTaskResumeAll+0x114>)
 800864c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800864e:	4b36      	ldr	r3, [pc, #216]	; (8008728 <xTaskResumeAll+0x114>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d161      	bne.n	800871a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008656:	4b35      	ldr	r3, [pc, #212]	; (800872c <xTaskResumeAll+0x118>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d05d      	beq.n	800871a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800865e:	e02e      	b.n	80086be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008660:	4b33      	ldr	r3, [pc, #204]	; (8008730 <xTaskResumeAll+0x11c>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3318      	adds	r3, #24
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fd72 	bl	8008156 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fd6d 	bl	8008156 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	2201      	movs	r2, #1
 8008682:	409a      	lsls	r2, r3
 8008684:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <xTaskResumeAll+0x120>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4313      	orrs	r3, r2
 800868a:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <xTaskResumeAll+0x120>)
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4a27      	ldr	r2, [pc, #156]	; (8008738 <xTaskResumeAll+0x124>)
 800869c:	441a      	add	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7ff fcf9 	bl	800809c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ae:	4b23      	ldr	r3, [pc, #140]	; (800873c <xTaskResumeAll+0x128>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d302      	bcc.n	80086be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80086b8:	4b21      	ldr	r3, [pc, #132]	; (8008740 <xTaskResumeAll+0x12c>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086be:	4b1c      	ldr	r3, [pc, #112]	; (8008730 <xTaskResumeAll+0x11c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1cc      	bne.n	8008660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086cc:	f000 fa08 	bl	8008ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086d0:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <xTaskResumeAll+0x130>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d010      	beq.n	80086fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086dc:	f000 f836 	bl	800874c <xTaskIncrementTick>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80086e6:	4b16      	ldr	r3, [pc, #88]	; (8008740 <xTaskResumeAll+0x12c>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1f1      	bne.n	80086dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80086f8:	4b12      	ldr	r3, [pc, #72]	; (8008744 <xTaskResumeAll+0x130>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086fe:	4b10      	ldr	r3, [pc, #64]	; (8008740 <xTaskResumeAll+0x12c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d009      	beq.n	800871a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008706:	2301      	movs	r3, #1
 8008708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800870a:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <xTaskResumeAll+0x134>)
 800870c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800871a:	f000 fbc3 	bl	8008ea4 <vPortExitCritical>

	return xAlreadyYielded;
 800871e:	68bb      	ldr	r3, [r7, #8]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000610 	.word	0x20000610
 800872c:	200005e8 	.word	0x200005e8
 8008730:	200005a8 	.word	0x200005a8
 8008734:	200005f0 	.word	0x200005f0
 8008738:	200004ec 	.word	0x200004ec
 800873c:	200004e8 	.word	0x200004e8
 8008740:	200005fc 	.word	0x200005fc
 8008744:	200005f8 	.word	0x200005f8
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008756:	4b4e      	ldr	r3, [pc, #312]	; (8008890 <xTaskIncrementTick+0x144>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	f040 808e 	bne.w	800887c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008760:	4b4c      	ldr	r3, [pc, #304]	; (8008894 <xTaskIncrementTick+0x148>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3301      	adds	r3, #1
 8008766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008768:	4a4a      	ldr	r2, [pc, #296]	; (8008894 <xTaskIncrementTick+0x148>)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d120      	bne.n	80087b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008774:	4b48      	ldr	r3, [pc, #288]	; (8008898 <xTaskIncrementTick+0x14c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <xTaskIncrementTick+0x48>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	603b      	str	r3, [r7, #0]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <xTaskIncrementTick+0x46>
 8008794:	4b40      	ldr	r3, [pc, #256]	; (8008898 <xTaskIncrementTick+0x14c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	4b40      	ldr	r3, [pc, #256]	; (800889c <xTaskIncrementTick+0x150>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a3e      	ldr	r2, [pc, #248]	; (8008898 <xTaskIncrementTick+0x14c>)
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4a3e      	ldr	r2, [pc, #248]	; (800889c <xTaskIncrementTick+0x150>)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	4b3d      	ldr	r3, [pc, #244]	; (80088a0 <xTaskIncrementTick+0x154>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3301      	adds	r3, #1
 80087ae:	4a3c      	ldr	r2, [pc, #240]	; (80088a0 <xTaskIncrementTick+0x154>)
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	f000 f995 	bl	8008ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087b6:	4b3b      	ldr	r3, [pc, #236]	; (80088a4 <xTaskIncrementTick+0x158>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d348      	bcc.n	8008852 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c0:	4b35      	ldr	r3, [pc, #212]	; (8008898 <xTaskIncrementTick+0x14c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ca:	4b36      	ldr	r3, [pc, #216]	; (80088a4 <xTaskIncrementTick+0x158>)
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	601a      	str	r2, [r3, #0]
					break;
 80087d2:	e03e      	b.n	8008852 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d4:	4b30      	ldr	r3, [pc, #192]	; (8008898 <xTaskIncrementTick+0x14c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d203      	bcs.n	80087f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087ec:	4a2d      	ldr	r2, [pc, #180]	; (80088a4 <xTaskIncrementTick+0x158>)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087f2:	e02e      	b.n	8008852 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff fcac 	bl	8008156 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	3318      	adds	r3, #24
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff fca3 	bl	8008156 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	2201      	movs	r2, #1
 8008816:	409a      	lsls	r2, r3
 8008818:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <xTaskIncrementTick+0x15c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4313      	orrs	r3, r2
 800881e:	4a22      	ldr	r2, [pc, #136]	; (80088a8 <xTaskIncrementTick+0x15c>)
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4a1f      	ldr	r2, [pc, #124]	; (80088ac <xTaskIncrementTick+0x160>)
 8008830:	441a      	add	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7ff fc2f 	bl	800809c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <xTaskIncrementTick+0x164>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	429a      	cmp	r2, r3
 800884a:	d3b9      	bcc.n	80087c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800884c:	2301      	movs	r3, #1
 800884e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008850:	e7b6      	b.n	80087c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <xTaskIncrementTick+0x164>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008858:	4914      	ldr	r1, [pc, #80]	; (80088ac <xTaskIncrementTick+0x160>)
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d901      	bls.n	800886e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800886a:	2301      	movs	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <xTaskIncrementTick+0x168>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008876:	2301      	movs	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e004      	b.n	8008886 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800887c:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <xTaskIncrementTick+0x16c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	4a0d      	ldr	r2, [pc, #52]	; (80088b8 <xTaskIncrementTick+0x16c>)
 8008884:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008886:	697b      	ldr	r3, [r7, #20]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000610 	.word	0x20000610
 8008894:	200005ec 	.word	0x200005ec
 8008898:	200005a0 	.word	0x200005a0
 800889c:	200005a4 	.word	0x200005a4
 80088a0:	20000600 	.word	0x20000600
 80088a4:	20000608 	.word	0x20000608
 80088a8:	200005f0 	.word	0x200005f0
 80088ac:	200004ec 	.word	0x200004ec
 80088b0:	200004e8 	.word	0x200004e8
 80088b4:	200005fc 	.word	0x200005fc
 80088b8:	200005f8 	.word	0x200005f8

080088bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088c2:	4b27      	ldr	r3, [pc, #156]	; (8008960 <vTaskSwitchContext+0xa4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ca:	4b26      	ldr	r3, [pc, #152]	; (8008964 <vTaskSwitchContext+0xa8>)
 80088cc:	2201      	movs	r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088d0:	e03f      	b.n	8008952 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80088d2:	4b24      	ldr	r3, [pc, #144]	; (8008964 <vTaskSwitchContext+0xa8>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d8:	4b23      	ldr	r3, [pc, #140]	; (8008968 <vTaskSwitchContext+0xac>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	fab3 f383 	clz	r3, r3
 80088e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	f1c3 031f 	rsb	r3, r3, #31
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	491f      	ldr	r1, [pc, #124]	; (800896c <vTaskSwitchContext+0xb0>)
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	607b      	str	r3, [r7, #4]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <vTaskSwitchContext+0x5a>
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a12      	ldr	r2, [pc, #72]	; (800896c <vTaskSwitchContext+0xb0>)
 8008924:	4413      	add	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	605a      	str	r2, [r3, #4]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3308      	adds	r3, #8
 800893a:	429a      	cmp	r2, r3
 800893c:	d104      	bne.n	8008948 <vTaskSwitchContext+0x8c>
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	4a08      	ldr	r2, [pc, #32]	; (8008970 <vTaskSwitchContext+0xb4>)
 8008950:	6013      	str	r3, [r2, #0]
}
 8008952:	bf00      	nop
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20000610 	.word	0x20000610
 8008964:	200005fc 	.word	0x200005fc
 8008968:	200005f0 	.word	0x200005f0
 800896c:	200004ec 	.word	0x200004ec
 8008970:	200004e8 	.word	0x200004e8

08008974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800897c:	f000 f852 	bl	8008a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008980:	4b06      	ldr	r3, [pc, #24]	; (800899c <prvIdleTask+0x28>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d9f9      	bls.n	800897c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008988:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <prvIdleTask+0x2c>)
 800898a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008998:	e7f0      	b.n	800897c <prvIdleTask+0x8>
 800899a:	bf00      	nop
 800899c:	200004ec 	.word	0x200004ec
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	e00c      	b.n	80089ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <prvInitialiseTaskLists+0x60>)
 80089bc:	4413      	add	r3, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff fb3f 	bl	8008042 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3301      	adds	r3, #1
 80089c8:	607b      	str	r3, [r7, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d9ef      	bls.n	80089b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089d0:	480d      	ldr	r0, [pc, #52]	; (8008a08 <prvInitialiseTaskLists+0x64>)
 80089d2:	f7ff fb36 	bl	8008042 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089d6:	480d      	ldr	r0, [pc, #52]	; (8008a0c <prvInitialiseTaskLists+0x68>)
 80089d8:	f7ff fb33 	bl	8008042 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089dc:	480c      	ldr	r0, [pc, #48]	; (8008a10 <prvInitialiseTaskLists+0x6c>)
 80089de:	f7ff fb30 	bl	8008042 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089e2:	480c      	ldr	r0, [pc, #48]	; (8008a14 <prvInitialiseTaskLists+0x70>)
 80089e4:	f7ff fb2d 	bl	8008042 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089e8:	480b      	ldr	r0, [pc, #44]	; (8008a18 <prvInitialiseTaskLists+0x74>)
 80089ea:	f7ff fb2a 	bl	8008042 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089ee:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <prvInitialiseTaskLists+0x78>)
 80089f0:	4a05      	ldr	r2, [pc, #20]	; (8008a08 <prvInitialiseTaskLists+0x64>)
 80089f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <prvInitialiseTaskLists+0x7c>)
 80089f6:	4a05      	ldr	r2, [pc, #20]	; (8008a0c <prvInitialiseTaskLists+0x68>)
 80089f8:	601a      	str	r2, [r3, #0]
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200004ec 	.word	0x200004ec
 8008a08:	20000578 	.word	0x20000578
 8008a0c:	2000058c 	.word	0x2000058c
 8008a10:	200005a8 	.word	0x200005a8
 8008a14:	200005bc 	.word	0x200005bc
 8008a18:	200005d4 	.word	0x200005d4
 8008a1c:	200005a0 	.word	0x200005a0
 8008a20:	200005a4 	.word	0x200005a4

08008a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a2a:	e019      	b.n	8008a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a2c:	f000 fa0a 	bl	8008e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a30:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <prvCheckTasksWaitingTermination+0x50>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff fb8a 	bl	8008156 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <prvCheckTasksWaitingTermination+0x54>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	4a0b      	ldr	r2, [pc, #44]	; (8008a78 <prvCheckTasksWaitingTermination+0x54>)
 8008a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <prvCheckTasksWaitingTermination+0x58>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	4a0a      	ldr	r2, [pc, #40]	; (8008a7c <prvCheckTasksWaitingTermination+0x58>)
 8008a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a56:	f000 fa25 	bl	8008ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f810 	bl	8008a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a60:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <prvCheckTasksWaitingTermination+0x58>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e1      	bne.n	8008a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200005bc 	.word	0x200005bc
 8008a78:	200005e8 	.word	0x200005e8
 8008a7c:	200005d0 	.word	0x200005d0

08008a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d108      	bne.n	8008aa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fb82 	bl	80091a0 <vPortFree>
				vPortFree( pxTCB );
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fb7f 	bl	80091a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008aa2:	e018      	b.n	8008ad6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d103      	bne.n	8008ab6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fb76 	bl	80091a0 <vPortFree>
	}
 8008ab4:	e00f      	b.n	8008ad6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d00a      	beq.n	8008ad6 <prvDeleteTCB+0x56>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	60fb      	str	r3, [r7, #12]
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <prvDeleteTCB+0x54>
	}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <prvResetNextTaskUnblockTime+0x38>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d104      	bne.n	8008afa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008af0:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <prvResetNextTaskUnblockTime+0x3c>)
 8008af2:	f04f 32ff 	mov.w	r2, #4294967295
 8008af6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008af8:	e008      	b.n	8008b0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <prvResetNextTaskUnblockTime+0x38>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4a04      	ldr	r2, [pc, #16]	; (8008b1c <prvResetNextTaskUnblockTime+0x3c>)
 8008b0a:	6013      	str	r3, [r2, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	200005a0 	.word	0x200005a0
 8008b1c:	20000608 	.word	0x20000608

08008b20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b2a:	4b29      	ldr	r3, [pc, #164]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b30:	4b28      	ldr	r3, [pc, #160]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff fb0d 	bl	8008156 <uxListRemove>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10b      	bne.n	8008b5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	2201      	movs	r2, #1
 8008b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4e:	43da      	mvns	r2, r3
 8008b50:	4b21      	ldr	r3, [pc, #132]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4013      	ands	r3, r2
 8008b56:	4a20      	ldr	r2, [pc, #128]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d10a      	bne.n	8008b78 <prvAddCurrentTaskToDelayedList+0x58>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d007      	beq.n	8008b78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4619      	mov	r1, r3
 8008b70:	481a      	ldr	r0, [pc, #104]	; (8008bdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b72:	f7ff fa93 	bl	800809c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b76:	e026      	b.n	8008bc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b80:	4b14      	ldr	r3, [pc, #80]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d209      	bcs.n	8008ba4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b90:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7ff faa1 	bl	80080e4 <vListInsert>
}
 8008ba2:	e010      	b.n	8008bc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7ff fa97 	bl	80080e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d202      	bcs.n	8008bc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008bc0:	4a09      	ldr	r2, [pc, #36]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6013      	str	r3, [r2, #0]
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200005ec 	.word	0x200005ec
 8008bd4:	200004e8 	.word	0x200004e8
 8008bd8:	200005f0 	.word	0x200005f0
 8008bdc:	200005d4 	.word	0x200005d4
 8008be0:	200005a4 	.word	0x200005a4
 8008be4:	200005a0 	.word	0x200005a0
 8008be8:	20000608 	.word	0x20000608

08008bec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3b04      	subs	r3, #4
 8008bfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3b04      	subs	r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f023 0201 	bic.w	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c1c:	4a0c      	ldr	r2, [pc, #48]	; (8008c50 <pxPortInitialiseStack+0x64>)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3b14      	subs	r3, #20
 8008c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3b04      	subs	r3, #4
 8008c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f06f 0202 	mvn.w	r2, #2
 8008c3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3b20      	subs	r3, #32
 8008c40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	08008c55 	.word	0x08008c55

08008c54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <prvTaskExitError+0x54>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c66:	d00a      	beq.n	8008c7e <prvTaskExitError+0x2a>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60fb      	str	r3, [r7, #12]
}
 8008c7a:	bf00      	nop
 8008c7c:	e7fe      	b.n	8008c7c <prvTaskExitError+0x28>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	60bb      	str	r3, [r7, #8]
}
 8008c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c92:	bf00      	nop
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0fc      	beq.n	8008c94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000068 	.word	0x20000068
 8008cac:	00000000 	.word	0x00000000

08008cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <pxCurrentTCBConst2>)
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	6808      	ldr	r0, [r1, #0]
 8008cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	f380 8809 	msr	PSP, r0
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8811 	msr	BASEPRI, r0
 8008cca:	4770      	bx	lr
 8008ccc:	f3af 8000 	nop.w

08008cd0 <pxCurrentTCBConst2>:
 8008cd0:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop

08008cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cd8:	4808      	ldr	r0, [pc, #32]	; (8008cfc <prvPortStartFirstTask+0x24>)
 8008cda:	6800      	ldr	r0, [r0, #0]
 8008cdc:	6800      	ldr	r0, [r0, #0]
 8008cde:	f380 8808 	msr	MSP, r0
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	f380 8814 	msr	CONTROL, r0
 8008cea:	b662      	cpsie	i
 8008cec:	b661      	cpsie	f
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	df00      	svc	0
 8008cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cfa:	bf00      	nop
 8008cfc:	e000ed08 	.word	0xe000ed08

08008d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d06:	4b46      	ldr	r3, [pc, #280]	; (8008e20 <xPortStartScheduler+0x120>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a46      	ldr	r2, [pc, #280]	; (8008e24 <xPortStartScheduler+0x124>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10a      	bne.n	8008d26 <xPortStartScheduler+0x26>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d26:	4b3e      	ldr	r3, [pc, #248]	; (8008e20 <xPortStartScheduler+0x120>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a3f      	ldr	r2, [pc, #252]	; (8008e28 <xPortStartScheduler+0x128>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10a      	bne.n	8008d46 <xPortStartScheduler+0x46>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d46:	4b39      	ldr	r3, [pc, #228]	; (8008e2c <xPortStartScheduler+0x12c>)
 8008d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	22ff      	movs	r2, #255	; 0xff
 8008d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <xPortStartScheduler+0x130>)
 8008d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d6e:	4b31      	ldr	r3, [pc, #196]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d74:	e009      	b.n	8008d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d76:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	4a2d      	ldr	r2, [pc, #180]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d0ef      	beq.n	8008d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d96:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f1c3 0307 	rsb	r3, r3, #7
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d00a      	beq.n	8008db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008db8:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dca:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dd6:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <xPortStartScheduler+0x138>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <xPortStartScheduler+0x138>)
 8008ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <xPortStartScheduler+0x138>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <xPortStartScheduler+0x138>)
 8008de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dee:	f000 f8dd 	bl	8008fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <xPortStartScheduler+0x13c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008df8:	f000 f8fc 	bl	8008ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dfc:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <xPortStartScheduler+0x140>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <xPortStartScheduler+0x140>)
 8008e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e08:	f7ff ff66 	bl	8008cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e0c:	f7ff fd56 	bl	80088bc <vTaskSwitchContext>
	prvTaskExitError();
 8008e10:	f7ff ff20 	bl	8008c54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	e000ed00 	.word	0xe000ed00
 8008e24:	410fc271 	.word	0x410fc271
 8008e28:	410fc270 	.word	0x410fc270
 8008e2c:	e000e400 	.word	0xe000e400
 8008e30:	20000614 	.word	0x20000614
 8008e34:	20000618 	.word	0x20000618
 8008e38:	e000ed20 	.word	0xe000ed20
 8008e3c:	20000068 	.word	0x20000068
 8008e40:	e000ef34 	.word	0xe000ef34

08008e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	607b      	str	r3, [r7, #4]
}
 8008e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	4a0d      	ldr	r2, [pc, #52]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10f      	bne.n	8008e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <vPortEnterCritical+0x5c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	e7fe      	b.n	8008e8e <vPortEnterCritical+0x4a>
	}
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20000068 	.word	0x20000068
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <vPortExitCritical+0x50>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <vPortExitCritical+0x24>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	607b      	str	r3, [r7, #4]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <vPortExitCritical+0x50>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <vPortExitCritical+0x50>)
 8008ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ed2:	4b08      	ldr	r3, [pc, #32]	; (8008ef4 <vPortExitCritical+0x50>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d105      	bne.n	8008ee6 <vPortExitCritical+0x42>
 8008eda:	2300      	movs	r3, #0
 8008edc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000068 	.word	0x20000068
	...

08008f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f00:	f3ef 8009 	mrs	r0, PSP
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <pxCurrentTCBConst>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	f01e 0f10 	tst.w	lr, #16
 8008f10:	bf08      	it	eq
 8008f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1a:	6010      	str	r0, [r2, #0]
 8008f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f24:	f380 8811 	msr	BASEPRI, r0
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f7ff fcc4 	bl	80088bc <vTaskSwitchContext>
 8008f34:	f04f 0000 	mov.w	r0, #0
 8008f38:	f380 8811 	msr	BASEPRI, r0
 8008f3c:	bc09      	pop	{r0, r3}
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	6808      	ldr	r0, [r1, #0]
 8008f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f46:	f01e 0f10 	tst.w	lr, #16
 8008f4a:	bf08      	it	eq
 8008f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f50:	f380 8809 	msr	PSP, r0
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w

08008f60 <pxCurrentTCBConst>:
 8008f60:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop

08008f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	607b      	str	r3, [r7, #4]
}
 8008f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f82:	f7ff fbe3 	bl	800874c <xTaskIncrementTick>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <SysTick_Handler+0x40>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f383 8811 	msr	BASEPRI, r3
}
 8008f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <vPortSetupTimerInterrupt+0x34>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fb6:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <vPortSetupTimerInterrupt+0x38>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <vPortSetupTimerInterrupt+0x3c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <vPortSetupTimerInterrupt+0x40>)
 8008fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc6:	099b      	lsrs	r3, r3, #6
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <vPortSetupTimerInterrupt+0x44>)
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <vPortSetupTimerInterrupt+0x34>)
 8008fd0:	2207      	movs	r2, #7
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	e000e010 	.word	0xe000e010
 8008fe4:	e000e018 	.word	0xe000e018
 8008fe8:	20000000 	.word	0x20000000
 8008fec:	10624dd3 	.word	0x10624dd3
 8008ff0:	e000e014 	.word	0xe000e014

08008ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009004 <vPortEnableVFP+0x10>
 8008ff8:	6801      	ldr	r1, [r0, #0]
 8008ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ffe:	6001      	str	r1, [r0, #0]
 8009000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009002:	bf00      	nop
 8009004:	e000ed88 	.word	0xe000ed88

08009008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009014:	f7ff faf0 	bl	80085f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009018:	4b5b      	ldr	r3, [pc, #364]	; (8009188 <pvPortMalloc+0x180>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009020:	f000 f920 	bl	8009264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009024:	4b59      	ldr	r3, [pc, #356]	; (800918c <pvPortMalloc+0x184>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	f040 8093 	bne.w	8009158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01d      	beq.n	8009074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009038:	2208      	movs	r2, #8
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4413      	add	r3, r2
 800903e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f003 0307 	and.w	r3, r3, #7
 8009046:	2b00      	cmp	r3, #0
 8009048:	d014      	beq.n	8009074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f023 0307 	bic.w	r3, r3, #7
 8009050:	3308      	adds	r3, #8
 8009052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <pvPortMalloc+0x6c>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	617b      	str	r3, [r7, #20]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d06e      	beq.n	8009158 <pvPortMalloc+0x150>
 800907a:	4b45      	ldr	r3, [pc, #276]	; (8009190 <pvPortMalloc+0x188>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d869      	bhi.n	8009158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009084:	4b43      	ldr	r3, [pc, #268]	; (8009194 <pvPortMalloc+0x18c>)
 8009086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009088:	4b42      	ldr	r3, [pc, #264]	; (8009194 <pvPortMalloc+0x18c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800908e:	e004      	b.n	800909a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d903      	bls.n	80090ac <pvPortMalloc+0xa4>
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1f1      	bne.n	8009090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090ac:	4b36      	ldr	r3, [pc, #216]	; (8009188 <pvPortMalloc+0x180>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d050      	beq.n	8009158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2208      	movs	r2, #8
 80090bc:	4413      	add	r3, r2
 80090be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	2308      	movs	r3, #8
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d91f      	bls.n	8009118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f003 0307 	and.w	r3, r3, #7
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00a      	beq.n	8009100 <pvPortMalloc+0xf8>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	613b      	str	r3, [r7, #16]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	1ad2      	subs	r2, r2, r3
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009112:	69b8      	ldr	r0, [r7, #24]
 8009114:	f000 f908 	bl	8009328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009118:	4b1d      	ldr	r3, [pc, #116]	; (8009190 <pvPortMalloc+0x188>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <pvPortMalloc+0x188>)
 8009124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <pvPortMalloc+0x188>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b1b      	ldr	r3, [pc, #108]	; (8009198 <pvPortMalloc+0x190>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d203      	bcs.n	800913a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009132:	4b17      	ldr	r3, [pc, #92]	; (8009190 <pvPortMalloc+0x188>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a18      	ldr	r2, [pc, #96]	; (8009198 <pvPortMalloc+0x190>)
 8009138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <pvPortMalloc+0x184>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	431a      	orrs	r2, r3
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800914e:	4b13      	ldr	r3, [pc, #76]	; (800919c <pvPortMalloc+0x194>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a11      	ldr	r2, [pc, #68]	; (800919c <pvPortMalloc+0x194>)
 8009156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009158:	f7ff fa5c 	bl	8008614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <pvPortMalloc+0x174>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	60fb      	str	r3, [r7, #12]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <pvPortMalloc+0x172>
	return pvReturn;
 800917c:	69fb      	ldr	r3, [r7, #28]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3728      	adds	r7, #40	; 0x28
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200019ac 	.word	0x200019ac
 800918c:	200019c0 	.word	0x200019c0
 8009190:	200019b0 	.word	0x200019b0
 8009194:	200019a4 	.word	0x200019a4
 8009198:	200019b4 	.word	0x200019b4
 800919c:	200019b8 	.word	0x200019b8

080091a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d04d      	beq.n	800924e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091b2:	2308      	movs	r3, #8
 80091b4:	425b      	negs	r3, r3
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	4413      	add	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	4b24      	ldr	r3, [pc, #144]	; (8009258 <vPortFree+0xb8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4013      	ands	r3, r2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <vPortFree+0x44>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <vPortFree+0x62>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	60bb      	str	r3, [r7, #8]
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <vPortFree+0xb8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4013      	ands	r3, r2
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01e      	beq.n	800924e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d11a      	bne.n	800924e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <vPortFree+0xb8>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	43db      	mvns	r3, r3
 8009222:	401a      	ands	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009228:	f7ff f9e6 	bl	80085f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <vPortFree+0xbc>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4413      	add	r3, r2
 8009236:	4a09      	ldr	r2, [pc, #36]	; (800925c <vPortFree+0xbc>)
 8009238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800923a:	6938      	ldr	r0, [r7, #16]
 800923c:	f000 f874 	bl	8009328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <vPortFree+0xc0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	4a06      	ldr	r2, [pc, #24]	; (8009260 <vPortFree+0xc0>)
 8009248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800924a:	f7ff f9e3 	bl	8008614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800924e:	bf00      	nop
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	200019c0 	.word	0x200019c0
 800925c:	200019b0 	.word	0x200019b0
 8009260:	200019bc 	.word	0x200019bc

08009264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800926a:	f241 3388 	movw	r3, #5000	; 0x1388
 800926e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009270:	4b27      	ldr	r3, [pc, #156]	; (8009310 <prvHeapInit+0xac>)
 8009272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f003 0307 	and.w	r3, r3, #7
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00c      	beq.n	8009298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3307      	adds	r3, #7
 8009282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0307 	bic.w	r3, r3, #7
 800928a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	4a1f      	ldr	r2, [pc, #124]	; (8009310 <prvHeapInit+0xac>)
 8009294:	4413      	add	r3, r2
 8009296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800929c:	4a1d      	ldr	r2, [pc, #116]	; (8009314 <prvHeapInit+0xb0>)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092a2:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <prvHeapInit+0xb0>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092b0:	2208      	movs	r2, #8
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0307 	bic.w	r3, r3, #7
 80092be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a15      	ldr	r2, [pc, #84]	; (8009318 <prvHeapInit+0xb4>)
 80092c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092c6:	4b14      	ldr	r3, [pc, #80]	; (8009318 <prvHeapInit+0xb4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ce:	4b12      	ldr	r3, [pc, #72]	; (8009318 <prvHeapInit+0xb4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <prvHeapInit+0xb4>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4a0a      	ldr	r2, [pc, #40]	; (800931c <prvHeapInit+0xb8>)
 80092f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a09      	ldr	r2, [pc, #36]	; (8009320 <prvHeapInit+0xbc>)
 80092fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <prvHeapInit+0xc0>)
 80092fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009302:	601a      	str	r2, [r3, #0]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	2000061c 	.word	0x2000061c
 8009314:	200019a4 	.word	0x200019a4
 8009318:	200019ac 	.word	0x200019ac
 800931c:	200019b4 	.word	0x200019b4
 8009320:	200019b0 	.word	0x200019b0
 8009324:	200019c0 	.word	0x200019c0

08009328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <prvInsertBlockIntoFreeList+0xac>)
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e002      	b.n	800933c <prvInsertBlockIntoFreeList+0x14>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d8f7      	bhi.n	8009336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d108      	bne.n	800936a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	441a      	add	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	441a      	add	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d118      	bne.n	80093b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d00d      	beq.n	80093a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	e008      	b.n	80093b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <prvInsertBlockIntoFreeList+0xb0>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	e003      	b.n	80093b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d002      	beq.n	80093c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	200019a4 	.word	0x200019a4
 80093d8:	200019ac 	.word	0x200019ac

080093dc <__errno>:
 80093dc:	4b01      	ldr	r3, [pc, #4]	; (80093e4 <__errno+0x8>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	2000006c 	.word	0x2000006c

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4d0d      	ldr	r5, [pc, #52]	; (8009420 <__libc_init_array+0x38>)
 80093ec:	4c0d      	ldr	r4, [pc, #52]	; (8009424 <__libc_init_array+0x3c>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	2600      	movs	r6, #0
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	4d0b      	ldr	r5, [pc, #44]	; (8009428 <__libc_init_array+0x40>)
 80093fa:	4c0c      	ldr	r4, [pc, #48]	; (800942c <__libc_init_array+0x44>)
 80093fc:	f002 ff7a 	bl	800c2f4 <_init>
 8009400:	1b64      	subs	r4, r4, r5
 8009402:	10a4      	asrs	r4, r4, #2
 8009404:	2600      	movs	r6, #0
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	0800cbb8 	.word	0x0800cbb8
 8009424:	0800cbb8 	.word	0x0800cbb8
 8009428:	0800cbb8 	.word	0x0800cbb8
 800942c:	0800cbbc 	.word	0x0800cbbc

08009430 <malloc>:
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <malloc+0xc>)
 8009432:	4601      	mov	r1, r0
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f000 b869 	b.w	800950c <_malloc_r>
 800943a:	bf00      	nop
 800943c:	2000006c 	.word	0x2000006c

08009440 <memcpy>:
 8009440:	440a      	add	r2, r1
 8009442:	4291      	cmp	r1, r2
 8009444:	f100 33ff 	add.w	r3, r0, #4294967295
 8009448:	d100      	bne.n	800944c <memcpy+0xc>
 800944a:	4770      	bx	lr
 800944c:	b510      	push	{r4, lr}
 800944e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009456:	4291      	cmp	r1, r2
 8009458:	d1f9      	bne.n	800944e <memcpy+0xe>
 800945a:	bd10      	pop	{r4, pc}

0800945c <memset>:
 800945c:	4402      	add	r2, r0
 800945e:	4603      	mov	r3, r0
 8009460:	4293      	cmp	r3, r2
 8009462:	d100      	bne.n	8009466 <memset+0xa>
 8009464:	4770      	bx	lr
 8009466:	f803 1b01 	strb.w	r1, [r3], #1
 800946a:	e7f9      	b.n	8009460 <memset+0x4>

0800946c <_free_r>:
 800946c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800946e:	2900      	cmp	r1, #0
 8009470:	d048      	beq.n	8009504 <_free_r+0x98>
 8009472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009476:	9001      	str	r0, [sp, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f1a1 0404 	sub.w	r4, r1, #4
 800947e:	bfb8      	it	lt
 8009480:	18e4      	addlt	r4, r4, r3
 8009482:	f001 fcbb 	bl	800adfc <__malloc_lock>
 8009486:	4a20      	ldr	r2, [pc, #128]	; (8009508 <_free_r+0x9c>)
 8009488:	9801      	ldr	r0, [sp, #4]
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	4615      	mov	r5, r2
 800948e:	b933      	cbnz	r3, 800949e <_free_r+0x32>
 8009490:	6063      	str	r3, [r4, #4]
 8009492:	6014      	str	r4, [r2, #0]
 8009494:	b003      	add	sp, #12
 8009496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949a:	f001 bcb5 	b.w	800ae08 <__malloc_unlock>
 800949e:	42a3      	cmp	r3, r4
 80094a0:	d90b      	bls.n	80094ba <_free_r+0x4e>
 80094a2:	6821      	ldr	r1, [r4, #0]
 80094a4:	1862      	adds	r2, r4, r1
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bf04      	itt	eq
 80094aa:	681a      	ldreq	r2, [r3, #0]
 80094ac:	685b      	ldreq	r3, [r3, #4]
 80094ae:	6063      	str	r3, [r4, #4]
 80094b0:	bf04      	itt	eq
 80094b2:	1852      	addeq	r2, r2, r1
 80094b4:	6022      	streq	r2, [r4, #0]
 80094b6:	602c      	str	r4, [r5, #0]
 80094b8:	e7ec      	b.n	8009494 <_free_r+0x28>
 80094ba:	461a      	mov	r2, r3
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	b10b      	cbz	r3, 80094c4 <_free_r+0x58>
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	d9fa      	bls.n	80094ba <_free_r+0x4e>
 80094c4:	6811      	ldr	r1, [r2, #0]
 80094c6:	1855      	adds	r5, r2, r1
 80094c8:	42a5      	cmp	r5, r4
 80094ca:	d10b      	bne.n	80094e4 <_free_r+0x78>
 80094cc:	6824      	ldr	r4, [r4, #0]
 80094ce:	4421      	add	r1, r4
 80094d0:	1854      	adds	r4, r2, r1
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	6011      	str	r1, [r2, #0]
 80094d6:	d1dd      	bne.n	8009494 <_free_r+0x28>
 80094d8:	681c      	ldr	r4, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	6053      	str	r3, [r2, #4]
 80094de:	4421      	add	r1, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	e7d7      	b.n	8009494 <_free_r+0x28>
 80094e4:	d902      	bls.n	80094ec <_free_r+0x80>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6003      	str	r3, [r0, #0]
 80094ea:	e7d3      	b.n	8009494 <_free_r+0x28>
 80094ec:	6825      	ldr	r5, [r4, #0]
 80094ee:	1961      	adds	r1, r4, r5
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf04      	itt	eq
 80094f4:	6819      	ldreq	r1, [r3, #0]
 80094f6:	685b      	ldreq	r3, [r3, #4]
 80094f8:	6063      	str	r3, [r4, #4]
 80094fa:	bf04      	itt	eq
 80094fc:	1949      	addeq	r1, r1, r5
 80094fe:	6021      	streq	r1, [r4, #0]
 8009500:	6054      	str	r4, [r2, #4]
 8009502:	e7c7      	b.n	8009494 <_free_r+0x28>
 8009504:	b003      	add	sp, #12
 8009506:	bd30      	pop	{r4, r5, pc}
 8009508:	200019c4 	.word	0x200019c4

0800950c <_malloc_r>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	1ccd      	adds	r5, r1, #3
 8009510:	f025 0503 	bic.w	r5, r5, #3
 8009514:	3508      	adds	r5, #8
 8009516:	2d0c      	cmp	r5, #12
 8009518:	bf38      	it	cc
 800951a:	250c      	movcc	r5, #12
 800951c:	2d00      	cmp	r5, #0
 800951e:	4606      	mov	r6, r0
 8009520:	db01      	blt.n	8009526 <_malloc_r+0x1a>
 8009522:	42a9      	cmp	r1, r5
 8009524:	d903      	bls.n	800952e <_malloc_r+0x22>
 8009526:	230c      	movs	r3, #12
 8009528:	6033      	str	r3, [r6, #0]
 800952a:	2000      	movs	r0, #0
 800952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952e:	f001 fc65 	bl	800adfc <__malloc_lock>
 8009532:	4921      	ldr	r1, [pc, #132]	; (80095b8 <_malloc_r+0xac>)
 8009534:	680a      	ldr	r2, [r1, #0]
 8009536:	4614      	mov	r4, r2
 8009538:	b99c      	cbnz	r4, 8009562 <_malloc_r+0x56>
 800953a:	4f20      	ldr	r7, [pc, #128]	; (80095bc <_malloc_r+0xb0>)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	b923      	cbnz	r3, 800954a <_malloc_r+0x3e>
 8009540:	4621      	mov	r1, r4
 8009542:	4630      	mov	r0, r6
 8009544:	f000 fcd4 	bl	8009ef0 <_sbrk_r>
 8009548:	6038      	str	r0, [r7, #0]
 800954a:	4629      	mov	r1, r5
 800954c:	4630      	mov	r0, r6
 800954e:	f000 fccf 	bl	8009ef0 <_sbrk_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d123      	bne.n	800959e <_malloc_r+0x92>
 8009556:	230c      	movs	r3, #12
 8009558:	6033      	str	r3, [r6, #0]
 800955a:	4630      	mov	r0, r6
 800955c:	f001 fc54 	bl	800ae08 <__malloc_unlock>
 8009560:	e7e3      	b.n	800952a <_malloc_r+0x1e>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	1b5b      	subs	r3, r3, r5
 8009566:	d417      	bmi.n	8009598 <_malloc_r+0x8c>
 8009568:	2b0b      	cmp	r3, #11
 800956a:	d903      	bls.n	8009574 <_malloc_r+0x68>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	441c      	add	r4, r3
 8009570:	6025      	str	r5, [r4, #0]
 8009572:	e004      	b.n	800957e <_malloc_r+0x72>
 8009574:	6863      	ldr	r3, [r4, #4]
 8009576:	42a2      	cmp	r2, r4
 8009578:	bf0c      	ite	eq
 800957a:	600b      	streq	r3, [r1, #0]
 800957c:	6053      	strne	r3, [r2, #4]
 800957e:	4630      	mov	r0, r6
 8009580:	f001 fc42 	bl	800ae08 <__malloc_unlock>
 8009584:	f104 000b 	add.w	r0, r4, #11
 8009588:	1d23      	adds	r3, r4, #4
 800958a:	f020 0007 	bic.w	r0, r0, #7
 800958e:	1ac2      	subs	r2, r0, r3
 8009590:	d0cc      	beq.n	800952c <_malloc_r+0x20>
 8009592:	1a1b      	subs	r3, r3, r0
 8009594:	50a3      	str	r3, [r4, r2]
 8009596:	e7c9      	b.n	800952c <_malloc_r+0x20>
 8009598:	4622      	mov	r2, r4
 800959a:	6864      	ldr	r4, [r4, #4]
 800959c:	e7cc      	b.n	8009538 <_malloc_r+0x2c>
 800959e:	1cc4      	adds	r4, r0, #3
 80095a0:	f024 0403 	bic.w	r4, r4, #3
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d0e3      	beq.n	8009570 <_malloc_r+0x64>
 80095a8:	1a21      	subs	r1, r4, r0
 80095aa:	4630      	mov	r0, r6
 80095ac:	f000 fca0 	bl	8009ef0 <_sbrk_r>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d1dd      	bne.n	8009570 <_malloc_r+0x64>
 80095b4:	e7cf      	b.n	8009556 <_malloc_r+0x4a>
 80095b6:	bf00      	nop
 80095b8:	200019c4 	.word	0x200019c4
 80095bc:	200019c8 	.word	0x200019c8

080095c0 <__cvt>:
 80095c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	ec55 4b10 	vmov	r4, r5, d0
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	460e      	mov	r6, r1
 80095cc:	4619      	mov	r1, r3
 80095ce:	462b      	mov	r3, r5
 80095d0:	bfbb      	ittet	lt
 80095d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095d6:	461d      	movlt	r5, r3
 80095d8:	2300      	movge	r3, #0
 80095da:	232d      	movlt	r3, #45	; 0x2d
 80095dc:	700b      	strb	r3, [r1, #0]
 80095de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095e4:	4691      	mov	r9, r2
 80095e6:	f023 0820 	bic.w	r8, r3, #32
 80095ea:	bfbc      	itt	lt
 80095ec:	4622      	movlt	r2, r4
 80095ee:	4614      	movlt	r4, r2
 80095f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095f4:	d005      	beq.n	8009602 <__cvt+0x42>
 80095f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095fa:	d100      	bne.n	80095fe <__cvt+0x3e>
 80095fc:	3601      	adds	r6, #1
 80095fe:	2102      	movs	r1, #2
 8009600:	e000      	b.n	8009604 <__cvt+0x44>
 8009602:	2103      	movs	r1, #3
 8009604:	ab03      	add	r3, sp, #12
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	ab02      	add	r3, sp, #8
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	ec45 4b10 	vmov	d0, r4, r5
 8009610:	4653      	mov	r3, sl
 8009612:	4632      	mov	r2, r6
 8009614:	f000 fd08 	bl	800a028 <_dtoa_r>
 8009618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800961c:	4607      	mov	r7, r0
 800961e:	d102      	bne.n	8009626 <__cvt+0x66>
 8009620:	f019 0f01 	tst.w	r9, #1
 8009624:	d022      	beq.n	800966c <__cvt+0xac>
 8009626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800962a:	eb07 0906 	add.w	r9, r7, r6
 800962e:	d110      	bne.n	8009652 <__cvt+0x92>
 8009630:	783b      	ldrb	r3, [r7, #0]
 8009632:	2b30      	cmp	r3, #48	; 0x30
 8009634:	d10a      	bne.n	800964c <__cvt+0x8c>
 8009636:	2200      	movs	r2, #0
 8009638:	2300      	movs	r3, #0
 800963a:	4620      	mov	r0, r4
 800963c:	4629      	mov	r1, r5
 800963e:	f7f7 fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 8009642:	b918      	cbnz	r0, 800964c <__cvt+0x8c>
 8009644:	f1c6 0601 	rsb	r6, r6, #1
 8009648:	f8ca 6000 	str.w	r6, [sl]
 800964c:	f8da 3000 	ldr.w	r3, [sl]
 8009650:	4499      	add	r9, r3
 8009652:	2200      	movs	r2, #0
 8009654:	2300      	movs	r3, #0
 8009656:	4620      	mov	r0, r4
 8009658:	4629      	mov	r1, r5
 800965a:	f7f7 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800965e:	b108      	cbz	r0, 8009664 <__cvt+0xa4>
 8009660:	f8cd 900c 	str.w	r9, [sp, #12]
 8009664:	2230      	movs	r2, #48	; 0x30
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	454b      	cmp	r3, r9
 800966a:	d307      	bcc.n	800967c <__cvt+0xbc>
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009670:	1bdb      	subs	r3, r3, r7
 8009672:	4638      	mov	r0, r7
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	b004      	add	sp, #16
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	1c59      	adds	r1, r3, #1
 800967e:	9103      	str	r1, [sp, #12]
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	e7f0      	b.n	8009666 <__cvt+0xa6>

08009684 <__exponent>:
 8009684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009686:	4603      	mov	r3, r0
 8009688:	2900      	cmp	r1, #0
 800968a:	bfb8      	it	lt
 800968c:	4249      	neglt	r1, r1
 800968e:	f803 2b02 	strb.w	r2, [r3], #2
 8009692:	bfb4      	ite	lt
 8009694:	222d      	movlt	r2, #45	; 0x2d
 8009696:	222b      	movge	r2, #43	; 0x2b
 8009698:	2909      	cmp	r1, #9
 800969a:	7042      	strb	r2, [r0, #1]
 800969c:	dd2a      	ble.n	80096f4 <__exponent+0x70>
 800969e:	f10d 0407 	add.w	r4, sp, #7
 80096a2:	46a4      	mov	ip, r4
 80096a4:	270a      	movs	r7, #10
 80096a6:	46a6      	mov	lr, r4
 80096a8:	460a      	mov	r2, r1
 80096aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80096ae:	fb07 1516 	mls	r5, r7, r6, r1
 80096b2:	3530      	adds	r5, #48	; 0x30
 80096b4:	2a63      	cmp	r2, #99	; 0x63
 80096b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80096ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096be:	4631      	mov	r1, r6
 80096c0:	dcf1      	bgt.n	80096a6 <__exponent+0x22>
 80096c2:	3130      	adds	r1, #48	; 0x30
 80096c4:	f1ae 0502 	sub.w	r5, lr, #2
 80096c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80096cc:	1c44      	adds	r4, r0, #1
 80096ce:	4629      	mov	r1, r5
 80096d0:	4561      	cmp	r1, ip
 80096d2:	d30a      	bcc.n	80096ea <__exponent+0x66>
 80096d4:	f10d 0209 	add.w	r2, sp, #9
 80096d8:	eba2 020e 	sub.w	r2, r2, lr
 80096dc:	4565      	cmp	r5, ip
 80096de:	bf88      	it	hi
 80096e0:	2200      	movhi	r2, #0
 80096e2:	4413      	add	r3, r2
 80096e4:	1a18      	subs	r0, r3, r0
 80096e6:	b003      	add	sp, #12
 80096e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80096f2:	e7ed      	b.n	80096d0 <__exponent+0x4c>
 80096f4:	2330      	movs	r3, #48	; 0x30
 80096f6:	3130      	adds	r1, #48	; 0x30
 80096f8:	7083      	strb	r3, [r0, #2]
 80096fa:	70c1      	strb	r1, [r0, #3]
 80096fc:	1d03      	adds	r3, r0, #4
 80096fe:	e7f1      	b.n	80096e4 <__exponent+0x60>

08009700 <_printf_float>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	ed2d 8b02 	vpush	{d8}
 8009708:	b08d      	sub	sp, #52	; 0x34
 800970a:	460c      	mov	r4, r1
 800970c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009710:	4616      	mov	r6, r2
 8009712:	461f      	mov	r7, r3
 8009714:	4605      	mov	r5, r0
 8009716:	f001 fb69 	bl	800adec <_localeconv_r>
 800971a:	f8d0 a000 	ldr.w	sl, [r0]
 800971e:	4650      	mov	r0, sl
 8009720:	f7f6 fd56 	bl	80001d0 <strlen>
 8009724:	2300      	movs	r3, #0
 8009726:	930a      	str	r3, [sp, #40]	; 0x28
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	9305      	str	r3, [sp, #20]
 800972c:	f8d8 3000 	ldr.w	r3, [r8]
 8009730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009734:	3307      	adds	r3, #7
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	f103 0208 	add.w	r2, r3, #8
 800973e:	f8c8 2000 	str.w	r2, [r8]
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800974a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800974e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009752:	9307      	str	r3, [sp, #28]
 8009754:	f8cd 8018 	str.w	r8, [sp, #24]
 8009758:	ee08 0a10 	vmov	s16, r0
 800975c:	4b9f      	ldr	r3, [pc, #636]	; (80099dc <_printf_float+0x2dc>)
 800975e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	f7f7 f9e1 	bl	8000b2c <__aeabi_dcmpun>
 800976a:	bb88      	cbnz	r0, 80097d0 <_printf_float+0xd0>
 800976c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009770:	4b9a      	ldr	r3, [pc, #616]	; (80099dc <_printf_float+0x2dc>)
 8009772:	f04f 32ff 	mov.w	r2, #4294967295
 8009776:	f7f7 f9bb 	bl	8000af0 <__aeabi_dcmple>
 800977a:	bb48      	cbnz	r0, 80097d0 <_printf_float+0xd0>
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f9aa 	bl	8000adc <__aeabi_dcmplt>
 8009788:	b110      	cbz	r0, 8009790 <_printf_float+0x90>
 800978a:	232d      	movs	r3, #45	; 0x2d
 800978c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009790:	4b93      	ldr	r3, [pc, #588]	; (80099e0 <_printf_float+0x2e0>)
 8009792:	4894      	ldr	r0, [pc, #592]	; (80099e4 <_printf_float+0x2e4>)
 8009794:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009798:	bf94      	ite	ls
 800979a:	4698      	movls	r8, r3
 800979c:	4680      	movhi	r8, r0
 800979e:	2303      	movs	r3, #3
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	9b05      	ldr	r3, [sp, #20]
 80097a4:	f023 0204 	bic.w	r2, r3, #4
 80097a8:	6022      	str	r2, [r4, #0]
 80097aa:	f04f 0900 	mov.w	r9, #0
 80097ae:	9700      	str	r7, [sp, #0]
 80097b0:	4633      	mov	r3, r6
 80097b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80097b4:	4621      	mov	r1, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 f9d8 	bl	8009b6c <_printf_common>
 80097bc:	3001      	adds	r0, #1
 80097be:	f040 8090 	bne.w	80098e2 <_printf_float+0x1e2>
 80097c2:	f04f 30ff 	mov.w	r0, #4294967295
 80097c6:	b00d      	add	sp, #52	; 0x34
 80097c8:	ecbd 8b02 	vpop	{d8}
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	4642      	mov	r2, r8
 80097d2:	464b      	mov	r3, r9
 80097d4:	4640      	mov	r0, r8
 80097d6:	4649      	mov	r1, r9
 80097d8:	f7f7 f9a8 	bl	8000b2c <__aeabi_dcmpun>
 80097dc:	b140      	cbz	r0, 80097f0 <_printf_float+0xf0>
 80097de:	464b      	mov	r3, r9
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bfbc      	itt	lt
 80097e4:	232d      	movlt	r3, #45	; 0x2d
 80097e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097ea:	487f      	ldr	r0, [pc, #508]	; (80099e8 <_printf_float+0x2e8>)
 80097ec:	4b7f      	ldr	r3, [pc, #508]	; (80099ec <_printf_float+0x2ec>)
 80097ee:	e7d1      	b.n	8009794 <_printf_float+0x94>
 80097f0:	6863      	ldr	r3, [r4, #4]
 80097f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097f6:	9206      	str	r2, [sp, #24]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	d13f      	bne.n	800987c <_printf_float+0x17c>
 80097fc:	2306      	movs	r3, #6
 80097fe:	6063      	str	r3, [r4, #4]
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	6861      	ldr	r1, [r4, #4]
 8009804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009808:	2300      	movs	r3, #0
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	ab0a      	add	r3, sp, #40	; 0x28
 800980e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009812:	ab09      	add	r3, sp, #36	; 0x24
 8009814:	ec49 8b10 	vmov	d0, r8, r9
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	6022      	str	r2, [r4, #0]
 800981c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009820:	4628      	mov	r0, r5
 8009822:	f7ff fecd 	bl	80095c0 <__cvt>
 8009826:	9b06      	ldr	r3, [sp, #24]
 8009828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800982a:	2b47      	cmp	r3, #71	; 0x47
 800982c:	4680      	mov	r8, r0
 800982e:	d108      	bne.n	8009842 <_printf_float+0x142>
 8009830:	1cc8      	adds	r0, r1, #3
 8009832:	db02      	blt.n	800983a <_printf_float+0x13a>
 8009834:	6863      	ldr	r3, [r4, #4]
 8009836:	4299      	cmp	r1, r3
 8009838:	dd41      	ble.n	80098be <_printf_float+0x1be>
 800983a:	f1ab 0b02 	sub.w	fp, fp, #2
 800983e:	fa5f fb8b 	uxtb.w	fp, fp
 8009842:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009846:	d820      	bhi.n	800988a <_printf_float+0x18a>
 8009848:	3901      	subs	r1, #1
 800984a:	465a      	mov	r2, fp
 800984c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009850:	9109      	str	r1, [sp, #36]	; 0x24
 8009852:	f7ff ff17 	bl	8009684 <__exponent>
 8009856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009858:	1813      	adds	r3, r2, r0
 800985a:	2a01      	cmp	r2, #1
 800985c:	4681      	mov	r9, r0
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	dc02      	bgt.n	8009868 <_printf_float+0x168>
 8009862:	6822      	ldr	r2, [r4, #0]
 8009864:	07d2      	lsls	r2, r2, #31
 8009866:	d501      	bpl.n	800986c <_printf_float+0x16c>
 8009868:	3301      	adds	r3, #1
 800986a:	6123      	str	r3, [r4, #16]
 800986c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009870:	2b00      	cmp	r3, #0
 8009872:	d09c      	beq.n	80097ae <_printf_float+0xae>
 8009874:	232d      	movs	r3, #45	; 0x2d
 8009876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800987a:	e798      	b.n	80097ae <_printf_float+0xae>
 800987c:	9a06      	ldr	r2, [sp, #24]
 800987e:	2a47      	cmp	r2, #71	; 0x47
 8009880:	d1be      	bne.n	8009800 <_printf_float+0x100>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1bc      	bne.n	8009800 <_printf_float+0x100>
 8009886:	2301      	movs	r3, #1
 8009888:	e7b9      	b.n	80097fe <_printf_float+0xfe>
 800988a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800988e:	d118      	bne.n	80098c2 <_printf_float+0x1c2>
 8009890:	2900      	cmp	r1, #0
 8009892:	6863      	ldr	r3, [r4, #4]
 8009894:	dd0b      	ble.n	80098ae <_printf_float+0x1ae>
 8009896:	6121      	str	r1, [r4, #16]
 8009898:	b913      	cbnz	r3, 80098a0 <_printf_float+0x1a0>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	07d0      	lsls	r0, r2, #31
 800989e:	d502      	bpl.n	80098a6 <_printf_float+0x1a6>
 80098a0:	3301      	adds	r3, #1
 80098a2:	440b      	add	r3, r1
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80098a8:	f04f 0900 	mov.w	r9, #0
 80098ac:	e7de      	b.n	800986c <_printf_float+0x16c>
 80098ae:	b913      	cbnz	r3, 80098b6 <_printf_float+0x1b6>
 80098b0:	6822      	ldr	r2, [r4, #0]
 80098b2:	07d2      	lsls	r2, r2, #31
 80098b4:	d501      	bpl.n	80098ba <_printf_float+0x1ba>
 80098b6:	3302      	adds	r3, #2
 80098b8:	e7f4      	b.n	80098a4 <_printf_float+0x1a4>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e7f2      	b.n	80098a4 <_printf_float+0x1a4>
 80098be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80098c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c4:	4299      	cmp	r1, r3
 80098c6:	db05      	blt.n	80098d4 <_printf_float+0x1d4>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	6121      	str	r1, [r4, #16]
 80098cc:	07d8      	lsls	r0, r3, #31
 80098ce:	d5ea      	bpl.n	80098a6 <_printf_float+0x1a6>
 80098d0:	1c4b      	adds	r3, r1, #1
 80098d2:	e7e7      	b.n	80098a4 <_printf_float+0x1a4>
 80098d4:	2900      	cmp	r1, #0
 80098d6:	bfd4      	ite	le
 80098d8:	f1c1 0202 	rsble	r2, r1, #2
 80098dc:	2201      	movgt	r2, #1
 80098de:	4413      	add	r3, r2
 80098e0:	e7e0      	b.n	80098a4 <_printf_float+0x1a4>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	055a      	lsls	r2, r3, #21
 80098e6:	d407      	bmi.n	80098f8 <_printf_float+0x1f8>
 80098e8:	6923      	ldr	r3, [r4, #16]
 80098ea:	4642      	mov	r2, r8
 80098ec:	4631      	mov	r1, r6
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	d12c      	bne.n	8009950 <_printf_float+0x250>
 80098f6:	e764      	b.n	80097c2 <_printf_float+0xc2>
 80098f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098fc:	f240 80e0 	bls.w	8009ac0 <_printf_float+0x3c0>
 8009900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	f7f7 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800990c:	2800      	cmp	r0, #0
 800990e:	d034      	beq.n	800997a <_printf_float+0x27a>
 8009910:	4a37      	ldr	r2, [pc, #220]	; (80099f0 <_printf_float+0x2f0>)
 8009912:	2301      	movs	r3, #1
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f af51 	beq.w	80097c2 <_printf_float+0xc2>
 8009920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009924:	429a      	cmp	r2, r3
 8009926:	db02      	blt.n	800992e <_printf_float+0x22e>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	07d8      	lsls	r0, r3, #31
 800992c:	d510      	bpl.n	8009950 <_printf_float+0x250>
 800992e:	ee18 3a10 	vmov	r3, s16
 8009932:	4652      	mov	r2, sl
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f af41 	beq.w	80097c2 <_printf_float+0xc2>
 8009940:	f04f 0800 	mov.w	r8, #0
 8009944:	f104 091a 	add.w	r9, r4, #26
 8009948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800994a:	3b01      	subs	r3, #1
 800994c:	4543      	cmp	r3, r8
 800994e:	dc09      	bgt.n	8009964 <_printf_float+0x264>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	079b      	lsls	r3, r3, #30
 8009954:	f100 8105 	bmi.w	8009b62 <_printf_float+0x462>
 8009958:	68e0      	ldr	r0, [r4, #12]
 800995a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800995c:	4298      	cmp	r0, r3
 800995e:	bfb8      	it	lt
 8009960:	4618      	movlt	r0, r3
 8009962:	e730      	b.n	80097c6 <_printf_float+0xc6>
 8009964:	2301      	movs	r3, #1
 8009966:	464a      	mov	r2, r9
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af27 	beq.w	80097c2 <_printf_float+0xc2>
 8009974:	f108 0801 	add.w	r8, r8, #1
 8009978:	e7e6      	b.n	8009948 <_printf_float+0x248>
 800997a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997c:	2b00      	cmp	r3, #0
 800997e:	dc39      	bgt.n	80099f4 <_printf_float+0x2f4>
 8009980:	4a1b      	ldr	r2, [pc, #108]	; (80099f0 <_printf_float+0x2f0>)
 8009982:	2301      	movs	r3, #1
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	f43f af19 	beq.w	80097c2 <_printf_float+0xc2>
 8009990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009994:	4313      	orrs	r3, r2
 8009996:	d102      	bne.n	800999e <_printf_float+0x29e>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	07d9      	lsls	r1, r3, #31
 800999c:	d5d8      	bpl.n	8009950 <_printf_float+0x250>
 800999e:	ee18 3a10 	vmov	r3, s16
 80099a2:	4652      	mov	r2, sl
 80099a4:	4631      	mov	r1, r6
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f af09 	beq.w	80097c2 <_printf_float+0xc2>
 80099b0:	f04f 0900 	mov.w	r9, #0
 80099b4:	f104 0a1a 	add.w	sl, r4, #26
 80099b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ba:	425b      	negs	r3, r3
 80099bc:	454b      	cmp	r3, r9
 80099be:	dc01      	bgt.n	80099c4 <_printf_float+0x2c4>
 80099c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c2:	e792      	b.n	80098ea <_printf_float+0x1ea>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4652      	mov	r2, sl
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f aef7 	beq.w	80097c2 <_printf_float+0xc2>
 80099d4:	f109 0901 	add.w	r9, r9, #1
 80099d8:	e7ee      	b.n	80099b8 <_printf_float+0x2b8>
 80099da:	bf00      	nop
 80099dc:	7fefffff 	.word	0x7fefffff
 80099e0:	0800c78c 	.word	0x0800c78c
 80099e4:	0800c790 	.word	0x0800c790
 80099e8:	0800c798 	.word	0x0800c798
 80099ec:	0800c794 	.word	0x0800c794
 80099f0:	0800c79c 	.word	0x0800c79c
 80099f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099f8:	429a      	cmp	r2, r3
 80099fa:	bfa8      	it	ge
 80099fc:	461a      	movge	r2, r3
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	4691      	mov	r9, r2
 8009a02:	dc37      	bgt.n	8009a74 <_printf_float+0x374>
 8009a04:	f04f 0b00 	mov.w	fp, #0
 8009a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a0c:	f104 021a 	add.w	r2, r4, #26
 8009a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	eba3 0309 	sub.w	r3, r3, r9
 8009a18:	455b      	cmp	r3, fp
 8009a1a:	dc33      	bgt.n	8009a84 <_printf_float+0x384>
 8009a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a20:	429a      	cmp	r2, r3
 8009a22:	db3b      	blt.n	8009a9c <_printf_float+0x39c>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d438      	bmi.n	8009a9c <_printf_float+0x39c>
 8009a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	eba2 0901 	sub.w	r9, r2, r1
 8009a36:	4599      	cmp	r9, r3
 8009a38:	bfa8      	it	ge
 8009a3a:	4699      	movge	r9, r3
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	dc35      	bgt.n	8009aae <_printf_float+0x3ae>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a4a:	f104 0a1a 	add.w	sl, r4, #26
 8009a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	eba3 0309 	sub.w	r3, r3, r9
 8009a58:	4543      	cmp	r3, r8
 8009a5a:	f77f af79 	ble.w	8009950 <_printf_float+0x250>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4652      	mov	r2, sl
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f aeaa 	beq.w	80097c2 <_printf_float+0xc2>
 8009a6e:	f108 0801 	add.w	r8, r8, #1
 8009a72:	e7ec      	b.n	8009a4e <_printf_float+0x34e>
 8009a74:	4613      	mov	r3, r2
 8009a76:	4631      	mov	r1, r6
 8009a78:	4642      	mov	r2, r8
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	47b8      	blx	r7
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d1c0      	bne.n	8009a04 <_printf_float+0x304>
 8009a82:	e69e      	b.n	80097c2 <_printf_float+0xc2>
 8009a84:	2301      	movs	r3, #1
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	9205      	str	r2, [sp, #20]
 8009a8c:	47b8      	blx	r7
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f43f ae97 	beq.w	80097c2 <_printf_float+0xc2>
 8009a94:	9a05      	ldr	r2, [sp, #20]
 8009a96:	f10b 0b01 	add.w	fp, fp, #1
 8009a9a:	e7b9      	b.n	8009a10 <_printf_float+0x310>
 8009a9c:	ee18 3a10 	vmov	r3, s16
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d1be      	bne.n	8009a2a <_printf_float+0x32a>
 8009aac:	e689      	b.n	80097c2 <_printf_float+0xc2>
 8009aae:	9a05      	ldr	r2, [sp, #20]
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	4442      	add	r2, r8
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	d1c1      	bne.n	8009a42 <_printf_float+0x342>
 8009abe:	e680      	b.n	80097c2 <_printf_float+0xc2>
 8009ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac2:	2a01      	cmp	r2, #1
 8009ac4:	dc01      	bgt.n	8009aca <_printf_float+0x3ca>
 8009ac6:	07db      	lsls	r3, r3, #31
 8009ac8:	d538      	bpl.n	8009b3c <_printf_float+0x43c>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4642      	mov	r2, r8
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f43f ae74 	beq.w	80097c2 <_printf_float+0xc2>
 8009ada:	ee18 3a10 	vmov	r3, s16
 8009ade:	4652      	mov	r2, sl
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f43f ae6b 	beq.w	80097c2 <_printf_float+0xc2>
 8009aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009af0:	2200      	movs	r2, #0
 8009af2:	2300      	movs	r3, #0
 8009af4:	f7f6 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af8:	b9d8      	cbnz	r0, 8009b32 <_printf_float+0x432>
 8009afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afc:	f108 0201 	add.w	r2, r8, #1
 8009b00:	3b01      	subs	r3, #1
 8009b02:	4631      	mov	r1, r6
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b8      	blx	r7
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d10e      	bne.n	8009b2a <_printf_float+0x42a>
 8009b0c:	e659      	b.n	80097c2 <_printf_float+0xc2>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4652      	mov	r2, sl
 8009b12:	4631      	mov	r1, r6
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b8      	blx	r7
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f43f ae52 	beq.w	80097c2 <_printf_float+0xc2>
 8009b1e:	f108 0801 	add.w	r8, r8, #1
 8009b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b24:	3b01      	subs	r3, #1
 8009b26:	4543      	cmp	r3, r8
 8009b28:	dcf1      	bgt.n	8009b0e <_printf_float+0x40e>
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b30:	e6dc      	b.n	80098ec <_printf_float+0x1ec>
 8009b32:	f04f 0800 	mov.w	r8, #0
 8009b36:	f104 0a1a 	add.w	sl, r4, #26
 8009b3a:	e7f2      	b.n	8009b22 <_printf_float+0x422>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4642      	mov	r2, r8
 8009b40:	e7df      	b.n	8009b02 <_printf_float+0x402>
 8009b42:	2301      	movs	r3, #1
 8009b44:	464a      	mov	r2, r9
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	f43f ae38 	beq.w	80097c2 <_printf_float+0xc2>
 8009b52:	f108 0801 	add.w	r8, r8, #1
 8009b56:	68e3      	ldr	r3, [r4, #12]
 8009b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b5a:	1a5b      	subs	r3, r3, r1
 8009b5c:	4543      	cmp	r3, r8
 8009b5e:	dcf0      	bgt.n	8009b42 <_printf_float+0x442>
 8009b60:	e6fa      	b.n	8009958 <_printf_float+0x258>
 8009b62:	f04f 0800 	mov.w	r8, #0
 8009b66:	f104 0919 	add.w	r9, r4, #25
 8009b6a:	e7f4      	b.n	8009b56 <_printf_float+0x456>

08009b6c <_printf_common>:
 8009b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	4616      	mov	r6, r2
 8009b72:	4699      	mov	r9, r3
 8009b74:	688a      	ldr	r2, [r1, #8]
 8009b76:	690b      	ldr	r3, [r1, #16]
 8009b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	bfb8      	it	lt
 8009b80:	4613      	movlt	r3, r2
 8009b82:	6033      	str	r3, [r6, #0]
 8009b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b88:	4607      	mov	r7, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b10a      	cbz	r2, 8009b92 <_printf_common+0x26>
 8009b8e:	3301      	adds	r3, #1
 8009b90:	6033      	str	r3, [r6, #0]
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	0699      	lsls	r1, r3, #26
 8009b96:	bf42      	ittt	mi
 8009b98:	6833      	ldrmi	r3, [r6, #0]
 8009b9a:	3302      	addmi	r3, #2
 8009b9c:	6033      	strmi	r3, [r6, #0]
 8009b9e:	6825      	ldr	r5, [r4, #0]
 8009ba0:	f015 0506 	ands.w	r5, r5, #6
 8009ba4:	d106      	bne.n	8009bb4 <_printf_common+0x48>
 8009ba6:	f104 0a19 	add.w	sl, r4, #25
 8009baa:	68e3      	ldr	r3, [r4, #12]
 8009bac:	6832      	ldr	r2, [r6, #0]
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	42ab      	cmp	r3, r5
 8009bb2:	dc26      	bgt.n	8009c02 <_printf_common+0x96>
 8009bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bb8:	1e13      	subs	r3, r2, #0
 8009bba:	6822      	ldr	r2, [r4, #0]
 8009bbc:	bf18      	it	ne
 8009bbe:	2301      	movne	r3, #1
 8009bc0:	0692      	lsls	r2, r2, #26
 8009bc2:	d42b      	bmi.n	8009c1c <_printf_common+0xb0>
 8009bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4638      	mov	r0, r7
 8009bcc:	47c0      	blx	r8
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d01e      	beq.n	8009c10 <_printf_common+0xa4>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	68e5      	ldr	r5, [r4, #12]
 8009bd6:	6832      	ldr	r2, [r6, #0]
 8009bd8:	f003 0306 	and.w	r3, r3, #6
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	bf08      	it	eq
 8009be0:	1aad      	subeq	r5, r5, r2
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	6922      	ldr	r2, [r4, #16]
 8009be6:	bf0c      	ite	eq
 8009be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bec:	2500      	movne	r5, #0
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	bfc4      	itt	gt
 8009bf2:	1a9b      	subgt	r3, r3, r2
 8009bf4:	18ed      	addgt	r5, r5, r3
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	341a      	adds	r4, #26
 8009bfa:	42b5      	cmp	r5, r6
 8009bfc:	d11a      	bne.n	8009c34 <_printf_common+0xc8>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e008      	b.n	8009c14 <_printf_common+0xa8>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4652      	mov	r2, sl
 8009c06:	4649      	mov	r1, r9
 8009c08:	4638      	mov	r0, r7
 8009c0a:	47c0      	blx	r8
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d103      	bne.n	8009c18 <_printf_common+0xac>
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	3501      	adds	r5, #1
 8009c1a:	e7c6      	b.n	8009baa <_printf_common+0x3e>
 8009c1c:	18e1      	adds	r1, r4, r3
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	2030      	movs	r0, #48	; 0x30
 8009c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c26:	4422      	add	r2, r4
 8009c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c30:	3302      	adds	r3, #2
 8009c32:	e7c7      	b.n	8009bc4 <_printf_common+0x58>
 8009c34:	2301      	movs	r3, #1
 8009c36:	4622      	mov	r2, r4
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c0      	blx	r8
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d0e6      	beq.n	8009c10 <_printf_common+0xa4>
 8009c42:	3601      	adds	r6, #1
 8009c44:	e7d9      	b.n	8009bfa <_printf_common+0x8e>
	...

08009c48 <_printf_i>:
 8009c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	4691      	mov	r9, r2
 8009c50:	7e27      	ldrb	r7, [r4, #24]
 8009c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c54:	2f78      	cmp	r7, #120	; 0x78
 8009c56:	4680      	mov	r8, r0
 8009c58:	469a      	mov	sl, r3
 8009c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c5e:	d807      	bhi.n	8009c70 <_printf_i+0x28>
 8009c60:	2f62      	cmp	r7, #98	; 0x62
 8009c62:	d80a      	bhi.n	8009c7a <_printf_i+0x32>
 8009c64:	2f00      	cmp	r7, #0
 8009c66:	f000 80d8 	beq.w	8009e1a <_printf_i+0x1d2>
 8009c6a:	2f58      	cmp	r7, #88	; 0x58
 8009c6c:	f000 80a3 	beq.w	8009db6 <_printf_i+0x16e>
 8009c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c78:	e03a      	b.n	8009cf0 <_printf_i+0xa8>
 8009c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c7e:	2b15      	cmp	r3, #21
 8009c80:	d8f6      	bhi.n	8009c70 <_printf_i+0x28>
 8009c82:	a001      	add	r0, pc, #4	; (adr r0, 8009c88 <_printf_i+0x40>)
 8009c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	08009cf5 	.word	0x08009cf5
 8009c90:	08009c71 	.word	0x08009c71
 8009c94:	08009c71 	.word	0x08009c71
 8009c98:	08009c71 	.word	0x08009c71
 8009c9c:	08009c71 	.word	0x08009c71
 8009ca0:	08009cf5 	.word	0x08009cf5
 8009ca4:	08009c71 	.word	0x08009c71
 8009ca8:	08009c71 	.word	0x08009c71
 8009cac:	08009c71 	.word	0x08009c71
 8009cb0:	08009c71 	.word	0x08009c71
 8009cb4:	08009e01 	.word	0x08009e01
 8009cb8:	08009d25 	.word	0x08009d25
 8009cbc:	08009de3 	.word	0x08009de3
 8009cc0:	08009c71 	.word	0x08009c71
 8009cc4:	08009c71 	.word	0x08009c71
 8009cc8:	08009e23 	.word	0x08009e23
 8009ccc:	08009c71 	.word	0x08009c71
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009c71 	.word	0x08009c71
 8009cd8:	08009c71 	.word	0x08009c71
 8009cdc:	08009deb 	.word	0x08009deb
 8009ce0:	680b      	ldr	r3, [r1, #0]
 8009ce2:	1d1a      	adds	r2, r3, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	600a      	str	r2, [r1, #0]
 8009ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0a3      	b.n	8009e3c <_printf_i+0x1f4>
 8009cf4:	6825      	ldr	r5, [r4, #0]
 8009cf6:	6808      	ldr	r0, [r1, #0]
 8009cf8:	062e      	lsls	r6, r5, #24
 8009cfa:	f100 0304 	add.w	r3, r0, #4
 8009cfe:	d50a      	bpl.n	8009d16 <_printf_i+0xce>
 8009d00:	6805      	ldr	r5, [r0, #0]
 8009d02:	600b      	str	r3, [r1, #0]
 8009d04:	2d00      	cmp	r5, #0
 8009d06:	da03      	bge.n	8009d10 <_printf_i+0xc8>
 8009d08:	232d      	movs	r3, #45	; 0x2d
 8009d0a:	426d      	negs	r5, r5
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	485e      	ldr	r0, [pc, #376]	; (8009e8c <_printf_i+0x244>)
 8009d12:	230a      	movs	r3, #10
 8009d14:	e019      	b.n	8009d4a <_printf_i+0x102>
 8009d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d1a:	6805      	ldr	r5, [r0, #0]
 8009d1c:	600b      	str	r3, [r1, #0]
 8009d1e:	bf18      	it	ne
 8009d20:	b22d      	sxthne	r5, r5
 8009d22:	e7ef      	b.n	8009d04 <_printf_i+0xbc>
 8009d24:	680b      	ldr	r3, [r1, #0]
 8009d26:	6825      	ldr	r5, [r4, #0]
 8009d28:	1d18      	adds	r0, r3, #4
 8009d2a:	6008      	str	r0, [r1, #0]
 8009d2c:	0628      	lsls	r0, r5, #24
 8009d2e:	d501      	bpl.n	8009d34 <_printf_i+0xec>
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	e002      	b.n	8009d3a <_printf_i+0xf2>
 8009d34:	0669      	lsls	r1, r5, #25
 8009d36:	d5fb      	bpl.n	8009d30 <_printf_i+0xe8>
 8009d38:	881d      	ldrh	r5, [r3, #0]
 8009d3a:	4854      	ldr	r0, [pc, #336]	; (8009e8c <_printf_i+0x244>)
 8009d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d3e:	bf0c      	ite	eq
 8009d40:	2308      	moveq	r3, #8
 8009d42:	230a      	movne	r3, #10
 8009d44:	2100      	movs	r1, #0
 8009d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d4a:	6866      	ldr	r6, [r4, #4]
 8009d4c:	60a6      	str	r6, [r4, #8]
 8009d4e:	2e00      	cmp	r6, #0
 8009d50:	bfa2      	ittt	ge
 8009d52:	6821      	ldrge	r1, [r4, #0]
 8009d54:	f021 0104 	bicge.w	r1, r1, #4
 8009d58:	6021      	strge	r1, [r4, #0]
 8009d5a:	b90d      	cbnz	r5, 8009d60 <_printf_i+0x118>
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	d04d      	beq.n	8009dfc <_printf_i+0x1b4>
 8009d60:	4616      	mov	r6, r2
 8009d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d66:	fb03 5711 	mls	r7, r3, r1, r5
 8009d6a:	5dc7      	ldrb	r7, [r0, r7]
 8009d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d70:	462f      	mov	r7, r5
 8009d72:	42bb      	cmp	r3, r7
 8009d74:	460d      	mov	r5, r1
 8009d76:	d9f4      	bls.n	8009d62 <_printf_i+0x11a>
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d10b      	bne.n	8009d94 <_printf_i+0x14c>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	07df      	lsls	r7, r3, #31
 8009d80:	d508      	bpl.n	8009d94 <_printf_i+0x14c>
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	6861      	ldr	r1, [r4, #4]
 8009d86:	4299      	cmp	r1, r3
 8009d88:	bfde      	ittt	le
 8009d8a:	2330      	movle	r3, #48	; 0x30
 8009d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d94:	1b92      	subs	r2, r2, r6
 8009d96:	6122      	str	r2, [r4, #16]
 8009d98:	f8cd a000 	str.w	sl, [sp]
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	aa03      	add	r2, sp, #12
 8009da0:	4621      	mov	r1, r4
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7ff fee2 	bl	8009b6c <_printf_common>
 8009da8:	3001      	adds	r0, #1
 8009daa:	d14c      	bne.n	8009e46 <_printf_i+0x1fe>
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	b004      	add	sp, #16
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	4835      	ldr	r0, [pc, #212]	; (8009e8c <_printf_i+0x244>)
 8009db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	680e      	ldr	r6, [r1, #0]
 8009dc0:	061f      	lsls	r7, r3, #24
 8009dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dc6:	600e      	str	r6, [r1, #0]
 8009dc8:	d514      	bpl.n	8009df4 <_printf_i+0x1ac>
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	bf44      	itt	mi
 8009dce:	f043 0320 	orrmi.w	r3, r3, #32
 8009dd2:	6023      	strmi	r3, [r4, #0]
 8009dd4:	b91d      	cbnz	r5, 8009dde <_printf_i+0x196>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	f023 0320 	bic.w	r3, r3, #32
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	2310      	movs	r3, #16
 8009de0:	e7b0      	b.n	8009d44 <_printf_i+0xfc>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f043 0320 	orr.w	r3, r3, #32
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	2378      	movs	r3, #120	; 0x78
 8009dec:	4828      	ldr	r0, [pc, #160]	; (8009e90 <_printf_i+0x248>)
 8009dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009df2:	e7e3      	b.n	8009dbc <_printf_i+0x174>
 8009df4:	065e      	lsls	r6, r3, #25
 8009df6:	bf48      	it	mi
 8009df8:	b2ad      	uxthmi	r5, r5
 8009dfa:	e7e6      	b.n	8009dca <_printf_i+0x182>
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	e7bb      	b.n	8009d78 <_printf_i+0x130>
 8009e00:	680b      	ldr	r3, [r1, #0]
 8009e02:	6826      	ldr	r6, [r4, #0]
 8009e04:	6960      	ldr	r0, [r4, #20]
 8009e06:	1d1d      	adds	r5, r3, #4
 8009e08:	600d      	str	r5, [r1, #0]
 8009e0a:	0635      	lsls	r5, r6, #24
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	d501      	bpl.n	8009e14 <_printf_i+0x1cc>
 8009e10:	6018      	str	r0, [r3, #0]
 8009e12:	e002      	b.n	8009e1a <_printf_i+0x1d2>
 8009e14:	0671      	lsls	r1, r6, #25
 8009e16:	d5fb      	bpl.n	8009e10 <_printf_i+0x1c8>
 8009e18:	8018      	strh	r0, [r3, #0]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	4616      	mov	r6, r2
 8009e20:	e7ba      	b.n	8009d98 <_printf_i+0x150>
 8009e22:	680b      	ldr	r3, [r1, #0]
 8009e24:	1d1a      	adds	r2, r3, #4
 8009e26:	600a      	str	r2, [r1, #0]
 8009e28:	681e      	ldr	r6, [r3, #0]
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7f6 f9d6 	bl	80001e0 <memchr>
 8009e34:	b108      	cbz	r0, 8009e3a <_printf_i+0x1f2>
 8009e36:	1b80      	subs	r0, r0, r6
 8009e38:	6060      	str	r0, [r4, #4]
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	6123      	str	r3, [r4, #16]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e44:	e7a8      	b.n	8009d98 <_printf_i+0x150>
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	4632      	mov	r2, r6
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	47d0      	blx	sl
 8009e50:	3001      	adds	r0, #1
 8009e52:	d0ab      	beq.n	8009dac <_printf_i+0x164>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	079b      	lsls	r3, r3, #30
 8009e58:	d413      	bmi.n	8009e82 <_printf_i+0x23a>
 8009e5a:	68e0      	ldr	r0, [r4, #12]
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	4298      	cmp	r0, r3
 8009e60:	bfb8      	it	lt
 8009e62:	4618      	movlt	r0, r3
 8009e64:	e7a4      	b.n	8009db0 <_printf_i+0x168>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	47d0      	blx	sl
 8009e70:	3001      	adds	r0, #1
 8009e72:	d09b      	beq.n	8009dac <_printf_i+0x164>
 8009e74:	3501      	adds	r5, #1
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	9903      	ldr	r1, [sp, #12]
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dcf2      	bgt.n	8009e66 <_printf_i+0x21e>
 8009e80:	e7eb      	b.n	8009e5a <_printf_i+0x212>
 8009e82:	2500      	movs	r5, #0
 8009e84:	f104 0619 	add.w	r6, r4, #25
 8009e88:	e7f5      	b.n	8009e76 <_printf_i+0x22e>
 8009e8a:	bf00      	nop
 8009e8c:	0800c79e 	.word	0x0800c79e
 8009e90:	0800c7af 	.word	0x0800c7af

08009e94 <iprintf>:
 8009e94:	b40f      	push	{r0, r1, r2, r3}
 8009e96:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <iprintf+0x2c>)
 8009e98:	b513      	push	{r0, r1, r4, lr}
 8009e9a:	681c      	ldr	r4, [r3, #0]
 8009e9c:	b124      	cbz	r4, 8009ea8 <iprintf+0x14>
 8009e9e:	69a3      	ldr	r3, [r4, #24]
 8009ea0:	b913      	cbnz	r3, 8009ea8 <iprintf+0x14>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 ff04 	bl	800acb0 <__sinit>
 8009ea8:	ab05      	add	r3, sp, #20
 8009eaa:	9a04      	ldr	r2, [sp, #16]
 8009eac:	68a1      	ldr	r1, [r4, #8]
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f001 fb65 	bl	800b580 <_vfiprintf_r>
 8009eb6:	b002      	add	sp, #8
 8009eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ebc:	b004      	add	sp, #16
 8009ebe:	4770      	bx	lr
 8009ec0:	2000006c 	.word	0x2000006c

08009ec4 <putchar>:
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <putchar+0x28>)
 8009ec6:	b513      	push	{r0, r1, r4, lr}
 8009ec8:	681c      	ldr	r4, [r3, #0]
 8009eca:	4601      	mov	r1, r0
 8009ecc:	b134      	cbz	r4, 8009edc <putchar+0x18>
 8009ece:	69a3      	ldr	r3, [r4, #24]
 8009ed0:	b923      	cbnz	r3, 8009edc <putchar+0x18>
 8009ed2:	9001      	str	r0, [sp, #4]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 feeb 	bl	800acb0 <__sinit>
 8009eda:	9901      	ldr	r1, [sp, #4]
 8009edc:	68a2      	ldr	r2, [r4, #8]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	b002      	add	sp, #8
 8009ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee6:	f001 bc7b 	b.w	800b7e0 <_putc_r>
 8009eea:	bf00      	nop
 8009eec:	2000006c 	.word	0x2000006c

08009ef0 <_sbrk_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d06      	ldr	r5, [pc, #24]	; (8009f0c <_sbrk_r+0x1c>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7f8 fb6e 	bl	80025dc <_sbrk>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_sbrk_r+0x1a>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_sbrk_r+0x1a>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	2000211c 	.word	0x2000211c

08009f10 <quorem>:
 8009f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	6903      	ldr	r3, [r0, #16]
 8009f16:	690c      	ldr	r4, [r1, #16]
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	4607      	mov	r7, r0
 8009f1c:	f2c0 8081 	blt.w	800a022 <quorem+0x112>
 8009f20:	3c01      	subs	r4, #1
 8009f22:	f101 0814 	add.w	r8, r1, #20
 8009f26:	f100 0514 	add.w	r5, r0, #20
 8009f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f44:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f48:	d331      	bcc.n	8009fae <quorem+0x9e>
 8009f4a:	f04f 0e00 	mov.w	lr, #0
 8009f4e:	4640      	mov	r0, r8
 8009f50:	46ac      	mov	ip, r5
 8009f52:	46f2      	mov	sl, lr
 8009f54:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f58:	b293      	uxth	r3, r2
 8009f5a:	fb06 e303 	mla	r3, r6, r3, lr
 8009f5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	ebaa 0303 	sub.w	r3, sl, r3
 8009f68:	0c12      	lsrs	r2, r2, #16
 8009f6a:	f8dc a000 	ldr.w	sl, [ip]
 8009f6e:	fb06 e202 	mla	r2, r6, r2, lr
 8009f72:	fa13 f38a 	uxtah	r3, r3, sl
 8009f76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f7a:	fa1f fa82 	uxth.w	sl, r2
 8009f7e:	f8dc 2000 	ldr.w	r2, [ip]
 8009f82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f90:	4581      	cmp	r9, r0
 8009f92:	f84c 3b04 	str.w	r3, [ip], #4
 8009f96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f9a:	d2db      	bcs.n	8009f54 <quorem+0x44>
 8009f9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fa0:	b92b      	cbnz	r3, 8009fae <quorem+0x9e>
 8009fa2:	9b01      	ldr	r3, [sp, #4]
 8009fa4:	3b04      	subs	r3, #4
 8009fa6:	429d      	cmp	r5, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	d32e      	bcc.n	800a00a <quorem+0xfa>
 8009fac:	613c      	str	r4, [r7, #16]
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f001 f9ae 	bl	800b310 <__mcmp>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	db24      	blt.n	800a002 <quorem+0xf2>
 8009fb8:	3601      	adds	r6, #1
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f04f 0c00 	mov.w	ip, #0
 8009fc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8009fc8:	b293      	uxth	r3, r2
 8009fca:	ebac 0303 	sub.w	r3, ip, r3
 8009fce:	0c12      	lsrs	r2, r2, #16
 8009fd0:	fa13 f38e 	uxtah	r3, r3, lr
 8009fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fe2:	45c1      	cmp	r9, r8
 8009fe4:	f840 3b04 	str.w	r3, [r0], #4
 8009fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fec:	d2e8      	bcs.n	8009fc0 <quorem+0xb0>
 8009fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff6:	b922      	cbnz	r2, 800a002 <quorem+0xf2>
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	429d      	cmp	r5, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	d30a      	bcc.n	800a016 <quorem+0x106>
 800a000:	613c      	str	r4, [r7, #16]
 800a002:	4630      	mov	r0, r6
 800a004:	b003      	add	sp, #12
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	3b04      	subs	r3, #4
 800a00e:	2a00      	cmp	r2, #0
 800a010:	d1cc      	bne.n	8009fac <quorem+0x9c>
 800a012:	3c01      	subs	r4, #1
 800a014:	e7c7      	b.n	8009fa6 <quorem+0x96>
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	3b04      	subs	r3, #4
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d1f0      	bne.n	800a000 <quorem+0xf0>
 800a01e:	3c01      	subs	r4, #1
 800a020:	e7eb      	b.n	8009ffa <quorem+0xea>
 800a022:	2000      	movs	r0, #0
 800a024:	e7ee      	b.n	800a004 <quorem+0xf4>
	...

0800a028 <_dtoa_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	ed2d 8b02 	vpush	{d8}
 800a030:	ec57 6b10 	vmov	r6, r7, d0
 800a034:	b095      	sub	sp, #84	; 0x54
 800a036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a042:	4604      	mov	r4, r0
 800a044:	9209      	str	r2, [sp, #36]	; 0x24
 800a046:	930f      	str	r3, [sp, #60]	; 0x3c
 800a048:	b975      	cbnz	r5, 800a068 <_dtoa_r+0x40>
 800a04a:	2010      	movs	r0, #16
 800a04c:	f7ff f9f0 	bl	8009430 <malloc>
 800a050:	4602      	mov	r2, r0
 800a052:	6260      	str	r0, [r4, #36]	; 0x24
 800a054:	b920      	cbnz	r0, 800a060 <_dtoa_r+0x38>
 800a056:	4bb2      	ldr	r3, [pc, #712]	; (800a320 <_dtoa_r+0x2f8>)
 800a058:	21ea      	movs	r1, #234	; 0xea
 800a05a:	48b2      	ldr	r0, [pc, #712]	; (800a324 <_dtoa_r+0x2fc>)
 800a05c:	f001 fd1e 	bl	800ba9c <__assert_func>
 800a060:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a064:	6005      	str	r5, [r0, #0]
 800a066:	60c5      	str	r5, [r0, #12]
 800a068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a06a:	6819      	ldr	r1, [r3, #0]
 800a06c:	b151      	cbz	r1, 800a084 <_dtoa_r+0x5c>
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	604a      	str	r2, [r1, #4]
 800a072:	2301      	movs	r3, #1
 800a074:	4093      	lsls	r3, r2
 800a076:	608b      	str	r3, [r1, #8]
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 ff0b 	bl	800ae94 <_Bfree>
 800a07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	1e3b      	subs	r3, r7, #0
 800a086:	bfb9      	ittee	lt
 800a088:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a08c:	9303      	strlt	r3, [sp, #12]
 800a08e:	2300      	movge	r3, #0
 800a090:	f8c8 3000 	strge.w	r3, [r8]
 800a094:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a098:	4ba3      	ldr	r3, [pc, #652]	; (800a328 <_dtoa_r+0x300>)
 800a09a:	bfbc      	itt	lt
 800a09c:	2201      	movlt	r2, #1
 800a09e:	f8c8 2000 	strlt.w	r2, [r8]
 800a0a2:	ea33 0309 	bics.w	r3, r3, r9
 800a0a6:	d11b      	bne.n	800a0e0 <_dtoa_r+0xb8>
 800a0a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0b4:	4333      	orrs	r3, r6
 800a0b6:	f000 857a 	beq.w	800abae <_dtoa_r+0xb86>
 800a0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0bc:	b963      	cbnz	r3, 800a0d8 <_dtoa_r+0xb0>
 800a0be:	4b9b      	ldr	r3, [pc, #620]	; (800a32c <_dtoa_r+0x304>)
 800a0c0:	e024      	b.n	800a10c <_dtoa_r+0xe4>
 800a0c2:	4b9b      	ldr	r3, [pc, #620]	; (800a330 <_dtoa_r+0x308>)
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	9800      	ldr	r0, [sp, #0]
 800a0ce:	b015      	add	sp, #84	; 0x54
 800a0d0:	ecbd 8b02 	vpop	{d8}
 800a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d8:	4b94      	ldr	r3, [pc, #592]	; (800a32c <_dtoa_r+0x304>)
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	3303      	adds	r3, #3
 800a0de:	e7f3      	b.n	800a0c8 <_dtoa_r+0xa0>
 800a0e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	ec51 0b17 	vmov	r0, r1, d7
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a0f0:	f7f6 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	b158      	cbz	r0, 800a110 <_dtoa_r+0xe8>
 800a0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 8551 	beq.w	800aba8 <_dtoa_r+0xb80>
 800a106:	488b      	ldr	r0, [pc, #556]	; (800a334 <_dtoa_r+0x30c>)
 800a108:	6018      	str	r0, [r3, #0]
 800a10a:	1e43      	subs	r3, r0, #1
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	e7dd      	b.n	800a0cc <_dtoa_r+0xa4>
 800a110:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a114:	aa12      	add	r2, sp, #72	; 0x48
 800a116:	a913      	add	r1, sp, #76	; 0x4c
 800a118:	4620      	mov	r0, r4
 800a11a:	f001 f99d 	bl	800b458 <__d2b>
 800a11e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a122:	4683      	mov	fp, r0
 800a124:	2d00      	cmp	r5, #0
 800a126:	d07c      	beq.n	800a222 <_dtoa_r+0x1fa>
 800a128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a12a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a132:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a136:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a13a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a13e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a142:	4b7d      	ldr	r3, [pc, #500]	; (800a338 <_dtoa_r+0x310>)
 800a144:	2200      	movs	r2, #0
 800a146:	4630      	mov	r0, r6
 800a148:	4639      	mov	r1, r7
 800a14a:	f7f6 f89d 	bl	8000288 <__aeabi_dsub>
 800a14e:	a36e      	add	r3, pc, #440	; (adr r3, 800a308 <_dtoa_r+0x2e0>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 fa50 	bl	80005f8 <__aeabi_dmul>
 800a158:	a36d      	add	r3, pc, #436	; (adr r3, 800a310 <_dtoa_r+0x2e8>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f7f6 f895 	bl	800028c <__adddf3>
 800a162:	4606      	mov	r6, r0
 800a164:	4628      	mov	r0, r5
 800a166:	460f      	mov	r7, r1
 800a168:	f7f6 f9dc 	bl	8000524 <__aeabi_i2d>
 800a16c:	a36a      	add	r3, pc, #424	; (adr r3, 800a318 <_dtoa_r+0x2f0>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 fa41 	bl	80005f8 <__aeabi_dmul>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4630      	mov	r0, r6
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 f885 	bl	800028c <__adddf3>
 800a182:	4606      	mov	r6, r0
 800a184:	460f      	mov	r7, r1
 800a186:	f7f6 fce7 	bl	8000b58 <__aeabi_d2iz>
 800a18a:	2200      	movs	r2, #0
 800a18c:	4682      	mov	sl, r0
 800a18e:	2300      	movs	r3, #0
 800a190:	4630      	mov	r0, r6
 800a192:	4639      	mov	r1, r7
 800a194:	f7f6 fca2 	bl	8000adc <__aeabi_dcmplt>
 800a198:	b148      	cbz	r0, 800a1ae <_dtoa_r+0x186>
 800a19a:	4650      	mov	r0, sl
 800a19c:	f7f6 f9c2 	bl	8000524 <__aeabi_i2d>
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	463b      	mov	r3, r7
 800a1a4:	f7f6 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1a8:	b908      	cbnz	r0, 800a1ae <_dtoa_r+0x186>
 800a1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ae:	f1ba 0f16 	cmp.w	sl, #22
 800a1b2:	d854      	bhi.n	800a25e <_dtoa_r+0x236>
 800a1b4:	4b61      	ldr	r3, [pc, #388]	; (800a33c <_dtoa_r+0x314>)
 800a1b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1c2:	f7f6 fc8b 	bl	8000adc <__aeabi_dcmplt>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d04b      	beq.n	800a262 <_dtoa_r+0x23a>
 800a1ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1d4:	1b5d      	subs	r5, r3, r5
 800a1d6:	1e6b      	subs	r3, r5, #1
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	bf43      	ittte	mi
 800a1dc:	2300      	movmi	r3, #0
 800a1de:	f1c5 0801 	rsbmi	r8, r5, #1
 800a1e2:	9304      	strmi	r3, [sp, #16]
 800a1e4:	f04f 0800 	movpl.w	r8, #0
 800a1e8:	f1ba 0f00 	cmp.w	sl, #0
 800a1ec:	db3b      	blt.n	800a266 <_dtoa_r+0x23e>
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a1f4:	4453      	add	r3, sl
 800a1f6:	9304      	str	r3, [sp, #16]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9306      	str	r3, [sp, #24]
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	2b09      	cmp	r3, #9
 800a200:	d869      	bhi.n	800a2d6 <_dtoa_r+0x2ae>
 800a202:	2b05      	cmp	r3, #5
 800a204:	bfc4      	itt	gt
 800a206:	3b04      	subgt	r3, #4
 800a208:	9305      	strgt	r3, [sp, #20]
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	f1a3 0302 	sub.w	r3, r3, #2
 800a210:	bfcc      	ite	gt
 800a212:	2500      	movgt	r5, #0
 800a214:	2501      	movle	r5, #1
 800a216:	2b03      	cmp	r3, #3
 800a218:	d869      	bhi.n	800a2ee <_dtoa_r+0x2c6>
 800a21a:	e8df f003 	tbb	[pc, r3]
 800a21e:	4e2c      	.short	0x4e2c
 800a220:	5a4c      	.short	0x5a4c
 800a222:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a226:	441d      	add	r5, r3
 800a228:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a22c:	2b20      	cmp	r3, #32
 800a22e:	bfc1      	itttt	gt
 800a230:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a234:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a238:	fa09 f303 	lslgt.w	r3, r9, r3
 800a23c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a240:	bfda      	itte	le
 800a242:	f1c3 0320 	rsble	r3, r3, #32
 800a246:	fa06 f003 	lslle.w	r0, r6, r3
 800a24a:	4318      	orrgt	r0, r3
 800a24c:	f7f6 f95a 	bl	8000504 <__aeabi_ui2d>
 800a250:	2301      	movs	r3, #1
 800a252:	4606      	mov	r6, r0
 800a254:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a258:	3d01      	subs	r5, #1
 800a25a:	9310      	str	r3, [sp, #64]	; 0x40
 800a25c:	e771      	b.n	800a142 <_dtoa_r+0x11a>
 800a25e:	2301      	movs	r3, #1
 800a260:	e7b6      	b.n	800a1d0 <_dtoa_r+0x1a8>
 800a262:	900e      	str	r0, [sp, #56]	; 0x38
 800a264:	e7b5      	b.n	800a1d2 <_dtoa_r+0x1aa>
 800a266:	f1ca 0300 	rsb	r3, sl, #0
 800a26a:	9306      	str	r3, [sp, #24]
 800a26c:	2300      	movs	r3, #0
 800a26e:	eba8 080a 	sub.w	r8, r8, sl
 800a272:	930d      	str	r3, [sp, #52]	; 0x34
 800a274:	e7c2      	b.n	800a1fc <_dtoa_r+0x1d4>
 800a276:	2300      	movs	r3, #0
 800a278:	9308      	str	r3, [sp, #32]
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dc39      	bgt.n	800a2f4 <_dtoa_r+0x2cc>
 800a280:	f04f 0901 	mov.w	r9, #1
 800a284:	f8cd 9004 	str.w	r9, [sp, #4]
 800a288:	464b      	mov	r3, r9
 800a28a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a28e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a290:	2200      	movs	r2, #0
 800a292:	6042      	str	r2, [r0, #4]
 800a294:	2204      	movs	r2, #4
 800a296:	f102 0614 	add.w	r6, r2, #20
 800a29a:	429e      	cmp	r6, r3
 800a29c:	6841      	ldr	r1, [r0, #4]
 800a29e:	d92f      	bls.n	800a300 <_dtoa_r+0x2d8>
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fdb7 	bl	800ae14 <_Balloc>
 800a2a6:	9000      	str	r0, [sp, #0]
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d14b      	bne.n	800a344 <_dtoa_r+0x31c>
 800a2ac:	4b24      	ldr	r3, [pc, #144]	; (800a340 <_dtoa_r+0x318>)
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2b4:	e6d1      	b.n	800a05a <_dtoa_r+0x32>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e7de      	b.n	800a278 <_dtoa_r+0x250>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9308      	str	r3, [sp, #32]
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	eb0a 0903 	add.w	r9, sl, r3
 800a2c4:	f109 0301 	add.w	r3, r9, #1
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	bfb8      	it	lt
 800a2ce:	2301      	movlt	r3, #1
 800a2d0:	e7dd      	b.n	800a28e <_dtoa_r+0x266>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e7f2      	b.n	800a2bc <_dtoa_r+0x294>
 800a2d6:	2501      	movs	r5, #1
 800a2d8:	2300      	movs	r3, #0
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	9508      	str	r5, [sp, #32]
 800a2de:	f04f 39ff 	mov.w	r9, #4294967295
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2e8:	2312      	movs	r3, #18
 800a2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ec:	e7cf      	b.n	800a28e <_dtoa_r+0x266>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	9308      	str	r3, [sp, #32]
 800a2f2:	e7f4      	b.n	800a2de <_dtoa_r+0x2b6>
 800a2f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a2f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	e7c6      	b.n	800a28e <_dtoa_r+0x266>
 800a300:	3101      	adds	r1, #1
 800a302:	6041      	str	r1, [r0, #4]
 800a304:	0052      	lsls	r2, r2, #1
 800a306:	e7c6      	b.n	800a296 <_dtoa_r+0x26e>
 800a308:	636f4361 	.word	0x636f4361
 800a30c:	3fd287a7 	.word	0x3fd287a7
 800a310:	8b60c8b3 	.word	0x8b60c8b3
 800a314:	3fc68a28 	.word	0x3fc68a28
 800a318:	509f79fb 	.word	0x509f79fb
 800a31c:	3fd34413 	.word	0x3fd34413
 800a320:	0800c7cd 	.word	0x0800c7cd
 800a324:	0800c7e4 	.word	0x0800c7e4
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	0800c7c9 	.word	0x0800c7c9
 800a330:	0800c7c0 	.word	0x0800c7c0
 800a334:	0800c79d 	.word	0x0800c79d
 800a338:	3ff80000 	.word	0x3ff80000
 800a33c:	0800c940 	.word	0x0800c940
 800a340:	0800c843 	.word	0x0800c843
 800a344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a346:	9a00      	ldr	r2, [sp, #0]
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	9b01      	ldr	r3, [sp, #4]
 800a34c:	2b0e      	cmp	r3, #14
 800a34e:	f200 80ad 	bhi.w	800a4ac <_dtoa_r+0x484>
 800a352:	2d00      	cmp	r5, #0
 800a354:	f000 80aa 	beq.w	800a4ac <_dtoa_r+0x484>
 800a358:	f1ba 0f00 	cmp.w	sl, #0
 800a35c:	dd36      	ble.n	800a3cc <_dtoa_r+0x3a4>
 800a35e:	4ac3      	ldr	r2, [pc, #780]	; (800a66c <_dtoa_r+0x644>)
 800a360:	f00a 030f 	and.w	r3, sl, #15
 800a364:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a368:	ed93 7b00 	vldr	d7, [r3]
 800a36c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a370:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a374:	eeb0 8a47 	vmov.f32	s16, s14
 800a378:	eef0 8a67 	vmov.f32	s17, s15
 800a37c:	d016      	beq.n	800a3ac <_dtoa_r+0x384>
 800a37e:	4bbc      	ldr	r3, [pc, #752]	; (800a670 <_dtoa_r+0x648>)
 800a380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a388:	f7f6 fa60 	bl	800084c <__aeabi_ddiv>
 800a38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a390:	f007 070f 	and.w	r7, r7, #15
 800a394:	2503      	movs	r5, #3
 800a396:	4eb6      	ldr	r6, [pc, #728]	; (800a670 <_dtoa_r+0x648>)
 800a398:	b957      	cbnz	r7, 800a3b0 <_dtoa_r+0x388>
 800a39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a39e:	ec53 2b18 	vmov	r2, r3, d8
 800a3a2:	f7f6 fa53 	bl	800084c <__aeabi_ddiv>
 800a3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3aa:	e029      	b.n	800a400 <_dtoa_r+0x3d8>
 800a3ac:	2502      	movs	r5, #2
 800a3ae:	e7f2      	b.n	800a396 <_dtoa_r+0x36e>
 800a3b0:	07f9      	lsls	r1, r7, #31
 800a3b2:	d508      	bpl.n	800a3c6 <_dtoa_r+0x39e>
 800a3b4:	ec51 0b18 	vmov	r0, r1, d8
 800a3b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3bc:	f7f6 f91c 	bl	80005f8 <__aeabi_dmul>
 800a3c0:	ec41 0b18 	vmov	d8, r0, r1
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	107f      	asrs	r7, r7, #1
 800a3c8:	3608      	adds	r6, #8
 800a3ca:	e7e5      	b.n	800a398 <_dtoa_r+0x370>
 800a3cc:	f000 80a6 	beq.w	800a51c <_dtoa_r+0x4f4>
 800a3d0:	f1ca 0600 	rsb	r6, sl, #0
 800a3d4:	4ba5      	ldr	r3, [pc, #660]	; (800a66c <_dtoa_r+0x644>)
 800a3d6:	4fa6      	ldr	r7, [pc, #664]	; (800a670 <_dtoa_r+0x648>)
 800a3d8:	f006 020f 	and.w	r2, r6, #15
 800a3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3e8:	f7f6 f906 	bl	80005f8 <__aeabi_dmul>
 800a3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3f0:	1136      	asrs	r6, r6, #4
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2502      	movs	r5, #2
 800a3f6:	2e00      	cmp	r6, #0
 800a3f8:	f040 8085 	bne.w	800a506 <_dtoa_r+0x4de>
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1d2      	bne.n	800a3a6 <_dtoa_r+0x37e>
 800a400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 808c 	beq.w	800a520 <_dtoa_r+0x4f8>
 800a408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a40c:	4b99      	ldr	r3, [pc, #612]	; (800a674 <_dtoa_r+0x64c>)
 800a40e:	2200      	movs	r2, #0
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f6 fb62 	bl	8000adc <__aeabi_dcmplt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f000 8081 	beq.w	800a520 <_dtoa_r+0x4f8>
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d07d      	beq.n	800a520 <_dtoa_r+0x4f8>
 800a424:	f1b9 0f00 	cmp.w	r9, #0
 800a428:	dd3c      	ble.n	800a4a4 <_dtoa_r+0x47c>
 800a42a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a42e:	9307      	str	r3, [sp, #28]
 800a430:	2200      	movs	r2, #0
 800a432:	4b91      	ldr	r3, [pc, #580]	; (800a678 <_dtoa_r+0x650>)
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f6 f8de 	bl	80005f8 <__aeabi_dmul>
 800a43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a440:	3501      	adds	r5, #1
 800a442:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a446:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a44a:	4628      	mov	r0, r5
 800a44c:	f7f6 f86a 	bl	8000524 <__aeabi_i2d>
 800a450:	4632      	mov	r2, r6
 800a452:	463b      	mov	r3, r7
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	4b88      	ldr	r3, [pc, #544]	; (800a67c <_dtoa_r+0x654>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	f7f5 ff16 	bl	800028c <__adddf3>
 800a460:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d15c      	bne.n	800a52a <_dtoa_r+0x502>
 800a470:	4b83      	ldr	r3, [pc, #524]	; (800a680 <_dtoa_r+0x658>)
 800a472:	2200      	movs	r2, #0
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f5 ff06 	bl	8000288 <__aeabi_dsub>
 800a47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a480:	4606      	mov	r6, r0
 800a482:	460f      	mov	r7, r1
 800a484:	f7f6 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 800a488:	2800      	cmp	r0, #0
 800a48a:	f040 8296 	bne.w	800a9ba <_dtoa_r+0x992>
 800a48e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a492:	4630      	mov	r0, r6
 800a494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f6 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f040 8288 	bne.w	800a9b4 <_dtoa_r+0x98c>
 800a4a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f2c0 8158 	blt.w	800a764 <_dtoa_r+0x73c>
 800a4b4:	f1ba 0f0e 	cmp.w	sl, #14
 800a4b8:	f300 8154 	bgt.w	800a764 <_dtoa_r+0x73c>
 800a4bc:	4b6b      	ldr	r3, [pc, #428]	; (800a66c <_dtoa_r+0x644>)
 800a4be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f280 80e3 	bge.w	800a694 <_dtoa_r+0x66c>
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f300 80df 	bgt.w	800a694 <_dtoa_r+0x66c>
 800a4d6:	f040 826d 	bne.w	800a9b4 <_dtoa_r+0x98c>
 800a4da:	4b69      	ldr	r3, [pc, #420]	; (800a680 <_dtoa_r+0x658>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 f889 	bl	80005f8 <__aeabi_dmul>
 800a4e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ea:	f7f6 fb0b 	bl	8000b04 <__aeabi_dcmpge>
 800a4ee:	9e01      	ldr	r6, [sp, #4]
 800a4f0:	4637      	mov	r7, r6
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f040 8243 	bne.w	800a97e <_dtoa_r+0x956>
 800a4f8:	9d00      	ldr	r5, [sp, #0]
 800a4fa:	2331      	movs	r3, #49	; 0x31
 800a4fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a500:	f10a 0a01 	add.w	sl, sl, #1
 800a504:	e23f      	b.n	800a986 <_dtoa_r+0x95e>
 800a506:	07f2      	lsls	r2, r6, #31
 800a508:	d505      	bpl.n	800a516 <_dtoa_r+0x4ee>
 800a50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50e:	f7f6 f873 	bl	80005f8 <__aeabi_dmul>
 800a512:	3501      	adds	r5, #1
 800a514:	2301      	movs	r3, #1
 800a516:	1076      	asrs	r6, r6, #1
 800a518:	3708      	adds	r7, #8
 800a51a:	e76c      	b.n	800a3f6 <_dtoa_r+0x3ce>
 800a51c:	2502      	movs	r5, #2
 800a51e:	e76f      	b.n	800a400 <_dtoa_r+0x3d8>
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	f8cd a01c 	str.w	sl, [sp, #28]
 800a526:	930c      	str	r3, [sp, #48]	; 0x30
 800a528:	e78d      	b.n	800a446 <_dtoa_r+0x41e>
 800a52a:	9900      	ldr	r1, [sp, #0]
 800a52c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a530:	4b4e      	ldr	r3, [pc, #312]	; (800a66c <_dtoa_r+0x644>)
 800a532:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a536:	4401      	add	r1, r0
 800a538:	9102      	str	r1, [sp, #8]
 800a53a:	9908      	ldr	r1, [sp, #32]
 800a53c:	eeb0 8a47 	vmov.f32	s16, s14
 800a540:	eef0 8a67 	vmov.f32	s17, s15
 800a544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a548:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a54c:	2900      	cmp	r1, #0
 800a54e:	d045      	beq.n	800a5dc <_dtoa_r+0x5b4>
 800a550:	494c      	ldr	r1, [pc, #304]	; (800a684 <_dtoa_r+0x65c>)
 800a552:	2000      	movs	r0, #0
 800a554:	f7f6 f97a 	bl	800084c <__aeabi_ddiv>
 800a558:	ec53 2b18 	vmov	r2, r3, d8
 800a55c:	f7f5 fe94 	bl	8000288 <__aeabi_dsub>
 800a560:	9d00      	ldr	r5, [sp, #0]
 800a562:	ec41 0b18 	vmov	d8, r0, r1
 800a566:	4639      	mov	r1, r7
 800a568:	4630      	mov	r0, r6
 800a56a:	f7f6 faf5 	bl	8000b58 <__aeabi_d2iz>
 800a56e:	900c      	str	r0, [sp, #48]	; 0x30
 800a570:	f7f5 ffd8 	bl	8000524 <__aeabi_i2d>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4630      	mov	r0, r6
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f5 fe84 	bl	8000288 <__aeabi_dsub>
 800a580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a582:	3330      	adds	r3, #48	; 0x30
 800a584:	f805 3b01 	strb.w	r3, [r5], #1
 800a588:	ec53 2b18 	vmov	r2, r3, d8
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	f7f6 faa4 	bl	8000adc <__aeabi_dcmplt>
 800a594:	2800      	cmp	r0, #0
 800a596:	d165      	bne.n	800a664 <_dtoa_r+0x63c>
 800a598:	4632      	mov	r2, r6
 800a59a:	463b      	mov	r3, r7
 800a59c:	4935      	ldr	r1, [pc, #212]	; (800a674 <_dtoa_r+0x64c>)
 800a59e:	2000      	movs	r0, #0
 800a5a0:	f7f5 fe72 	bl	8000288 <__aeabi_dsub>
 800a5a4:	ec53 2b18 	vmov	r2, r3, d8
 800a5a8:	f7f6 fa98 	bl	8000adc <__aeabi_dcmplt>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f040 80b9 	bne.w	800a724 <_dtoa_r+0x6fc>
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	429d      	cmp	r5, r3
 800a5b6:	f43f af75 	beq.w	800a4a4 <_dtoa_r+0x47c>
 800a5ba:	4b2f      	ldr	r3, [pc, #188]	; (800a678 <_dtoa_r+0x650>)
 800a5bc:	ec51 0b18 	vmov	r0, r1, d8
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f7f6 f819 	bl	80005f8 <__aeabi_dmul>
 800a5c6:	4b2c      	ldr	r3, [pc, #176]	; (800a678 <_dtoa_r+0x650>)
 800a5c8:	ec41 0b18 	vmov	d8, r0, r1
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f6 f811 	bl	80005f8 <__aeabi_dmul>
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	460f      	mov	r7, r1
 800a5da:	e7c4      	b.n	800a566 <_dtoa_r+0x53e>
 800a5dc:	ec51 0b17 	vmov	r0, r1, d7
 800a5e0:	f7f6 f80a 	bl	80005f8 <__aeabi_dmul>
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	9d00      	ldr	r5, [sp, #0]
 800a5e8:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ea:	ec41 0b18 	vmov	d8, r0, r1
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7f6 fab1 	bl	8000b58 <__aeabi_d2iz>
 800a5f6:	9011      	str	r0, [sp, #68]	; 0x44
 800a5f8:	f7f5 ff94 	bl	8000524 <__aeabi_i2d>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	f7f5 fe40 	bl	8000288 <__aeabi_dsub>
 800a608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a60a:	3330      	adds	r3, #48	; 0x30
 800a60c:	f805 3b01 	strb.w	r3, [r5], #1
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	429d      	cmp	r5, r3
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	f04f 0200 	mov.w	r2, #0
 800a61c:	d134      	bne.n	800a688 <_dtoa_r+0x660>
 800a61e:	4b19      	ldr	r3, [pc, #100]	; (800a684 <_dtoa_r+0x65c>)
 800a620:	ec51 0b18 	vmov	r0, r1, d8
 800a624:	f7f5 fe32 	bl	800028c <__adddf3>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f7f6 fa72 	bl	8000b18 <__aeabi_dcmpgt>
 800a634:	2800      	cmp	r0, #0
 800a636:	d175      	bne.n	800a724 <_dtoa_r+0x6fc>
 800a638:	ec53 2b18 	vmov	r2, r3, d8
 800a63c:	4911      	ldr	r1, [pc, #68]	; (800a684 <_dtoa_r+0x65c>)
 800a63e:	2000      	movs	r0, #0
 800a640:	f7f5 fe22 	bl	8000288 <__aeabi_dsub>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4630      	mov	r0, r6
 800a64a:	4639      	mov	r1, r7
 800a64c:	f7f6 fa46 	bl	8000adc <__aeabi_dcmplt>
 800a650:	2800      	cmp	r0, #0
 800a652:	f43f af27 	beq.w	800a4a4 <_dtoa_r+0x47c>
 800a656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a658:	1e6b      	subs	r3, r5, #1
 800a65a:	930c      	str	r3, [sp, #48]	; 0x30
 800a65c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a660:	2b30      	cmp	r3, #48	; 0x30
 800a662:	d0f8      	beq.n	800a656 <_dtoa_r+0x62e>
 800a664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a668:	e04a      	b.n	800a700 <_dtoa_r+0x6d8>
 800a66a:	bf00      	nop
 800a66c:	0800c940 	.word	0x0800c940
 800a670:	0800c918 	.word	0x0800c918
 800a674:	3ff00000 	.word	0x3ff00000
 800a678:	40240000 	.word	0x40240000
 800a67c:	401c0000 	.word	0x401c0000
 800a680:	40140000 	.word	0x40140000
 800a684:	3fe00000 	.word	0x3fe00000
 800a688:	4baf      	ldr	r3, [pc, #700]	; (800a948 <_dtoa_r+0x920>)
 800a68a:	f7f5 ffb5 	bl	80005f8 <__aeabi_dmul>
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	e7ac      	b.n	800a5ee <_dtoa_r+0x5c6>
 800a694:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a698:	9d00      	ldr	r5, [sp, #0]
 800a69a:	4642      	mov	r2, r8
 800a69c:	464b      	mov	r3, r9
 800a69e:	4630      	mov	r0, r6
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	f7f6 f8d3 	bl	800084c <__aeabi_ddiv>
 800a6a6:	f7f6 fa57 	bl	8000b58 <__aeabi_d2iz>
 800a6aa:	9002      	str	r0, [sp, #8]
 800a6ac:	f7f5 ff3a 	bl	8000524 <__aeabi_i2d>
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	f7f5 ffa0 	bl	80005f8 <__aeabi_dmul>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4630      	mov	r0, r6
 800a6be:	4639      	mov	r1, r7
 800a6c0:	f7f5 fde2 	bl	8000288 <__aeabi_dsub>
 800a6c4:	9e02      	ldr	r6, [sp, #8]
 800a6c6:	9f01      	ldr	r7, [sp, #4]
 800a6c8:	3630      	adds	r6, #48	; 0x30
 800a6ca:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ce:	9e00      	ldr	r6, [sp, #0]
 800a6d0:	1bae      	subs	r6, r5, r6
 800a6d2:	42b7      	cmp	r7, r6
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	d137      	bne.n	800a74a <_dtoa_r+0x722>
 800a6da:	f7f5 fdd7 	bl	800028c <__adddf3>
 800a6de:	4642      	mov	r2, r8
 800a6e0:	464b      	mov	r3, r9
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	f7f6 fa17 	bl	8000b18 <__aeabi_dcmpgt>
 800a6ea:	b9c8      	cbnz	r0, 800a720 <_dtoa_r+0x6f8>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6f8:	b110      	cbz	r0, 800a700 <_dtoa_r+0x6d8>
 800a6fa:	9b02      	ldr	r3, [sp, #8]
 800a6fc:	07d9      	lsls	r1, r3, #31
 800a6fe:	d40f      	bmi.n	800a720 <_dtoa_r+0x6f8>
 800a700:	4620      	mov	r0, r4
 800a702:	4659      	mov	r1, fp
 800a704:	f000 fbc6 	bl	800ae94 <_Bfree>
 800a708:	2300      	movs	r3, #0
 800a70a:	702b      	strb	r3, [r5, #0]
 800a70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a70e:	f10a 0001 	add.w	r0, sl, #1
 800a712:	6018      	str	r0, [r3, #0]
 800a714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a716:	2b00      	cmp	r3, #0
 800a718:	f43f acd8 	beq.w	800a0cc <_dtoa_r+0xa4>
 800a71c:	601d      	str	r5, [r3, #0]
 800a71e:	e4d5      	b.n	800a0cc <_dtoa_r+0xa4>
 800a720:	f8cd a01c 	str.w	sl, [sp, #28]
 800a724:	462b      	mov	r3, r5
 800a726:	461d      	mov	r5, r3
 800a728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a72c:	2a39      	cmp	r2, #57	; 0x39
 800a72e:	d108      	bne.n	800a742 <_dtoa_r+0x71a>
 800a730:	9a00      	ldr	r2, [sp, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d1f7      	bne.n	800a726 <_dtoa_r+0x6fe>
 800a736:	9a07      	ldr	r2, [sp, #28]
 800a738:	9900      	ldr	r1, [sp, #0]
 800a73a:	3201      	adds	r2, #1
 800a73c:	9207      	str	r2, [sp, #28]
 800a73e:	2230      	movs	r2, #48	; 0x30
 800a740:	700a      	strb	r2, [r1, #0]
 800a742:	781a      	ldrb	r2, [r3, #0]
 800a744:	3201      	adds	r2, #1
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	e78c      	b.n	800a664 <_dtoa_r+0x63c>
 800a74a:	4b7f      	ldr	r3, [pc, #508]	; (800a948 <_dtoa_r+0x920>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	f7f5 ff53 	bl	80005f8 <__aeabi_dmul>
 800a752:	2200      	movs	r2, #0
 800a754:	2300      	movs	r3, #0
 800a756:	4606      	mov	r6, r0
 800a758:	460f      	mov	r7, r1
 800a75a:	f7f6 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d09b      	beq.n	800a69a <_dtoa_r+0x672>
 800a762:	e7cd      	b.n	800a700 <_dtoa_r+0x6d8>
 800a764:	9a08      	ldr	r2, [sp, #32]
 800a766:	2a00      	cmp	r2, #0
 800a768:	f000 80c4 	beq.w	800a8f4 <_dtoa_r+0x8cc>
 800a76c:	9a05      	ldr	r2, [sp, #20]
 800a76e:	2a01      	cmp	r2, #1
 800a770:	f300 80a8 	bgt.w	800a8c4 <_dtoa_r+0x89c>
 800a774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a776:	2a00      	cmp	r2, #0
 800a778:	f000 80a0 	beq.w	800a8bc <_dtoa_r+0x894>
 800a77c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a780:	9e06      	ldr	r6, [sp, #24]
 800a782:	4645      	mov	r5, r8
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	2101      	movs	r1, #1
 800a788:	441a      	add	r2, r3
 800a78a:	4620      	mov	r0, r4
 800a78c:	4498      	add	r8, r3
 800a78e:	9204      	str	r2, [sp, #16]
 800a790:	f000 fc3c 	bl	800b00c <__i2b>
 800a794:	4607      	mov	r7, r0
 800a796:	2d00      	cmp	r5, #0
 800a798:	dd0b      	ble.n	800a7b2 <_dtoa_r+0x78a>
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd08      	ble.n	800a7b2 <_dtoa_r+0x78a>
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	9a04      	ldr	r2, [sp, #16]
 800a7a4:	bfa8      	it	ge
 800a7a6:	462b      	movge	r3, r5
 800a7a8:	eba8 0803 	sub.w	r8, r8, r3
 800a7ac:	1aed      	subs	r5, r5, r3
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	b1fb      	cbz	r3, 800a7f6 <_dtoa_r+0x7ce>
 800a7b6:	9b08      	ldr	r3, [sp, #32]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 809f 	beq.w	800a8fc <_dtoa_r+0x8d4>
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	dd11      	ble.n	800a7e6 <_dtoa_r+0x7be>
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fcdc 	bl	800b184 <__pow5mult>
 800a7cc:	465a      	mov	r2, fp
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 fc30 	bl	800b038 <__multiply>
 800a7d8:	4659      	mov	r1, fp
 800a7da:	9007      	str	r0, [sp, #28]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fb59 	bl	800ae94 <_Bfree>
 800a7e2:	9b07      	ldr	r3, [sp, #28]
 800a7e4:	469b      	mov	fp, r3
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	1b9a      	subs	r2, r3, r6
 800a7ea:	d004      	beq.n	800a7f6 <_dtoa_r+0x7ce>
 800a7ec:	4659      	mov	r1, fp
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fcc8 	bl	800b184 <__pow5mult>
 800a7f4:	4683      	mov	fp, r0
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 fc07 	bl	800b00c <__i2b>
 800a7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a800:	2b00      	cmp	r3, #0
 800a802:	4606      	mov	r6, r0
 800a804:	dd7c      	ble.n	800a900 <_dtoa_r+0x8d8>
 800a806:	461a      	mov	r2, r3
 800a808:	4601      	mov	r1, r0
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 fcba 	bl	800b184 <__pow5mult>
 800a810:	9b05      	ldr	r3, [sp, #20]
 800a812:	2b01      	cmp	r3, #1
 800a814:	4606      	mov	r6, r0
 800a816:	dd76      	ble.n	800a906 <_dtoa_r+0x8de>
 800a818:	2300      	movs	r3, #0
 800a81a:	9306      	str	r3, [sp, #24]
 800a81c:	6933      	ldr	r3, [r6, #16]
 800a81e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a822:	6918      	ldr	r0, [r3, #16]
 800a824:	f000 fba2 	bl	800af6c <__hi0bits>
 800a828:	f1c0 0020 	rsb	r0, r0, #32
 800a82c:	9b04      	ldr	r3, [sp, #16]
 800a82e:	4418      	add	r0, r3
 800a830:	f010 001f 	ands.w	r0, r0, #31
 800a834:	f000 8086 	beq.w	800a944 <_dtoa_r+0x91c>
 800a838:	f1c0 0320 	rsb	r3, r0, #32
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	dd7f      	ble.n	800a940 <_dtoa_r+0x918>
 800a840:	f1c0 001c 	rsb	r0, r0, #28
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	4403      	add	r3, r0
 800a848:	4480      	add	r8, r0
 800a84a:	4405      	add	r5, r0
 800a84c:	9304      	str	r3, [sp, #16]
 800a84e:	f1b8 0f00 	cmp.w	r8, #0
 800a852:	dd05      	ble.n	800a860 <_dtoa_r+0x838>
 800a854:	4659      	mov	r1, fp
 800a856:	4642      	mov	r2, r8
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fced 	bl	800b238 <__lshift>
 800a85e:	4683      	mov	fp, r0
 800a860:	9b04      	ldr	r3, [sp, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	dd05      	ble.n	800a872 <_dtoa_r+0x84a>
 800a866:	4631      	mov	r1, r6
 800a868:	461a      	mov	r2, r3
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 fce4 	bl	800b238 <__lshift>
 800a870:	4606      	mov	r6, r0
 800a872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a874:	2b00      	cmp	r3, #0
 800a876:	d069      	beq.n	800a94c <_dtoa_r+0x924>
 800a878:	4631      	mov	r1, r6
 800a87a:	4658      	mov	r0, fp
 800a87c:	f000 fd48 	bl	800b310 <__mcmp>
 800a880:	2800      	cmp	r0, #0
 800a882:	da63      	bge.n	800a94c <_dtoa_r+0x924>
 800a884:	2300      	movs	r3, #0
 800a886:	4659      	mov	r1, fp
 800a888:	220a      	movs	r2, #10
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fb24 	bl	800aed8 <__multadd>
 800a890:	9b08      	ldr	r3, [sp, #32]
 800a892:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a896:	4683      	mov	fp, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 818f 	beq.w	800abbc <_dtoa_r+0xb94>
 800a89e:	4639      	mov	r1, r7
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	220a      	movs	r2, #10
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fb17 	bl	800aed8 <__multadd>
 800a8aa:	f1b9 0f00 	cmp.w	r9, #0
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	f300 808e 	bgt.w	800a9d0 <_dtoa_r+0x9a8>
 800a8b4:	9b05      	ldr	r3, [sp, #20]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	dc50      	bgt.n	800a95c <_dtoa_r+0x934>
 800a8ba:	e089      	b.n	800a9d0 <_dtoa_r+0x9a8>
 800a8bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8c2:	e75d      	b.n	800a780 <_dtoa_r+0x758>
 800a8c4:	9b01      	ldr	r3, [sp, #4]
 800a8c6:	1e5e      	subs	r6, r3, #1
 800a8c8:	9b06      	ldr	r3, [sp, #24]
 800a8ca:	42b3      	cmp	r3, r6
 800a8cc:	bfbf      	itttt	lt
 800a8ce:	9b06      	ldrlt	r3, [sp, #24]
 800a8d0:	9606      	strlt	r6, [sp, #24]
 800a8d2:	1af2      	sublt	r2, r6, r3
 800a8d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a8d6:	bfb6      	itet	lt
 800a8d8:	189b      	addlt	r3, r3, r2
 800a8da:	1b9e      	subge	r6, r3, r6
 800a8dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	bfb8      	it	lt
 800a8e2:	2600      	movlt	r6, #0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bfb5      	itete	lt
 800a8e8:	eba8 0503 	sublt.w	r5, r8, r3
 800a8ec:	9b01      	ldrge	r3, [sp, #4]
 800a8ee:	2300      	movlt	r3, #0
 800a8f0:	4645      	movge	r5, r8
 800a8f2:	e747      	b.n	800a784 <_dtoa_r+0x75c>
 800a8f4:	9e06      	ldr	r6, [sp, #24]
 800a8f6:	9f08      	ldr	r7, [sp, #32]
 800a8f8:	4645      	mov	r5, r8
 800a8fa:	e74c      	b.n	800a796 <_dtoa_r+0x76e>
 800a8fc:	9a06      	ldr	r2, [sp, #24]
 800a8fe:	e775      	b.n	800a7ec <_dtoa_r+0x7c4>
 800a900:	9b05      	ldr	r3, [sp, #20]
 800a902:	2b01      	cmp	r3, #1
 800a904:	dc18      	bgt.n	800a938 <_dtoa_r+0x910>
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	b9b3      	cbnz	r3, 800a938 <_dtoa_r+0x910>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a910:	b9a3      	cbnz	r3, 800a93c <_dtoa_r+0x914>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a918:	0d1b      	lsrs	r3, r3, #20
 800a91a:	051b      	lsls	r3, r3, #20
 800a91c:	b12b      	cbz	r3, 800a92a <_dtoa_r+0x902>
 800a91e:	9b04      	ldr	r3, [sp, #16]
 800a920:	3301      	adds	r3, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	f108 0801 	add.w	r8, r8, #1
 800a928:	2301      	movs	r3, #1
 800a92a:	9306      	str	r3, [sp, #24]
 800a92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f47f af74 	bne.w	800a81c <_dtoa_r+0x7f4>
 800a934:	2001      	movs	r0, #1
 800a936:	e779      	b.n	800a82c <_dtoa_r+0x804>
 800a938:	2300      	movs	r3, #0
 800a93a:	e7f6      	b.n	800a92a <_dtoa_r+0x902>
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	e7f4      	b.n	800a92a <_dtoa_r+0x902>
 800a940:	d085      	beq.n	800a84e <_dtoa_r+0x826>
 800a942:	4618      	mov	r0, r3
 800a944:	301c      	adds	r0, #28
 800a946:	e77d      	b.n	800a844 <_dtoa_r+0x81c>
 800a948:	40240000 	.word	0x40240000
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	dc38      	bgt.n	800a9c4 <_dtoa_r+0x99c>
 800a952:	9b05      	ldr	r3, [sp, #20]
 800a954:	2b02      	cmp	r3, #2
 800a956:	dd35      	ble.n	800a9c4 <_dtoa_r+0x99c>
 800a958:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a95c:	f1b9 0f00 	cmp.w	r9, #0
 800a960:	d10d      	bne.n	800a97e <_dtoa_r+0x956>
 800a962:	4631      	mov	r1, r6
 800a964:	464b      	mov	r3, r9
 800a966:	2205      	movs	r2, #5
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fab5 	bl	800aed8 <__multadd>
 800a96e:	4601      	mov	r1, r0
 800a970:	4606      	mov	r6, r0
 800a972:	4658      	mov	r0, fp
 800a974:	f000 fccc 	bl	800b310 <__mcmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	f73f adbd 	bgt.w	800a4f8 <_dtoa_r+0x4d0>
 800a97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a980:	9d00      	ldr	r5, [sp, #0]
 800a982:	ea6f 0a03 	mvn.w	sl, r3
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	4631      	mov	r1, r6
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 fa81 	bl	800ae94 <_Bfree>
 800a992:	2f00      	cmp	r7, #0
 800a994:	f43f aeb4 	beq.w	800a700 <_dtoa_r+0x6d8>
 800a998:	f1b8 0f00 	cmp.w	r8, #0
 800a99c:	d005      	beq.n	800a9aa <_dtoa_r+0x982>
 800a99e:	45b8      	cmp	r8, r7
 800a9a0:	d003      	beq.n	800a9aa <_dtoa_r+0x982>
 800a9a2:	4641      	mov	r1, r8
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 fa75 	bl	800ae94 <_Bfree>
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 fa71 	bl	800ae94 <_Bfree>
 800a9b2:	e6a5      	b.n	800a700 <_dtoa_r+0x6d8>
 800a9b4:	2600      	movs	r6, #0
 800a9b6:	4637      	mov	r7, r6
 800a9b8:	e7e1      	b.n	800a97e <_dtoa_r+0x956>
 800a9ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a9bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a9c0:	4637      	mov	r7, r6
 800a9c2:	e599      	b.n	800a4f8 <_dtoa_r+0x4d0>
 800a9c4:	9b08      	ldr	r3, [sp, #32]
 800a9c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80fd 	beq.w	800abca <_dtoa_r+0xba2>
 800a9d0:	2d00      	cmp	r5, #0
 800a9d2:	dd05      	ble.n	800a9e0 <_dtoa_r+0x9b8>
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f000 fc2d 	bl	800b238 <__lshift>
 800a9de:	4607      	mov	r7, r0
 800a9e0:	9b06      	ldr	r3, [sp, #24]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d05c      	beq.n	800aaa0 <_dtoa_r+0xa78>
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fa13 	bl	800ae14 <_Balloc>
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	b928      	cbnz	r0, 800a9fe <_dtoa_r+0x9d6>
 800a9f2:	4b80      	ldr	r3, [pc, #512]	; (800abf4 <_dtoa_r+0xbcc>)
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9fa:	f7ff bb2e 	b.w	800a05a <_dtoa_r+0x32>
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	3202      	adds	r2, #2
 800aa02:	0092      	lsls	r2, r2, #2
 800aa04:	f107 010c 	add.w	r1, r7, #12
 800aa08:	300c      	adds	r0, #12
 800aa0a:	f7fe fd19 	bl	8009440 <memcpy>
 800aa0e:	2201      	movs	r2, #1
 800aa10:	4629      	mov	r1, r5
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 fc10 	bl	800b238 <__lshift>
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	444b      	add	r3, r9
 800aa22:	9307      	str	r3, [sp, #28]
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	46b8      	mov	r8, r7
 800aa2c:	9306      	str	r3, [sp, #24]
 800aa2e:	4607      	mov	r7, r0
 800aa30:	9b01      	ldr	r3, [sp, #4]
 800aa32:	4631      	mov	r1, r6
 800aa34:	3b01      	subs	r3, #1
 800aa36:	4658      	mov	r0, fp
 800aa38:	9302      	str	r3, [sp, #8]
 800aa3a:	f7ff fa69 	bl	8009f10 <quorem>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	3330      	adds	r3, #48	; 0x30
 800aa42:	9004      	str	r0, [sp, #16]
 800aa44:	4641      	mov	r1, r8
 800aa46:	4658      	mov	r0, fp
 800aa48:	9308      	str	r3, [sp, #32]
 800aa4a:	f000 fc61 	bl	800b310 <__mcmp>
 800aa4e:	463a      	mov	r2, r7
 800aa50:	4681      	mov	r9, r0
 800aa52:	4631      	mov	r1, r6
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fc77 	bl	800b348 <__mdiff>
 800aa5a:	68c2      	ldr	r2, [r0, #12]
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	4605      	mov	r5, r0
 800aa60:	bb02      	cbnz	r2, 800aaa4 <_dtoa_r+0xa7c>
 800aa62:	4601      	mov	r1, r0
 800aa64:	4658      	mov	r0, fp
 800aa66:	f000 fc53 	bl	800b310 <__mcmp>
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4620      	mov	r0, r4
 800aa72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aa76:	f000 fa0d 	bl	800ae94 <_Bfree>
 800aa7a:	9b05      	ldr	r3, [sp, #20]
 800aa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa7e:	9d01      	ldr	r5, [sp, #4]
 800aa80:	ea43 0102 	orr.w	r1, r3, r2
 800aa84:	9b06      	ldr	r3, [sp, #24]
 800aa86:	430b      	orrs	r3, r1
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	d10d      	bne.n	800aaa8 <_dtoa_r+0xa80>
 800aa8c:	2b39      	cmp	r3, #57	; 0x39
 800aa8e:	d029      	beq.n	800aae4 <_dtoa_r+0xabc>
 800aa90:	f1b9 0f00 	cmp.w	r9, #0
 800aa94:	dd01      	ble.n	800aa9a <_dtoa_r+0xa72>
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	3331      	adds	r3, #49	; 0x31
 800aa9a:	9a02      	ldr	r2, [sp, #8]
 800aa9c:	7013      	strb	r3, [r2, #0]
 800aa9e:	e774      	b.n	800a98a <_dtoa_r+0x962>
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	e7b9      	b.n	800aa18 <_dtoa_r+0x9f0>
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	e7e2      	b.n	800aa6e <_dtoa_r+0xa46>
 800aaa8:	f1b9 0f00 	cmp.w	r9, #0
 800aaac:	db06      	blt.n	800aabc <_dtoa_r+0xa94>
 800aaae:	9905      	ldr	r1, [sp, #20]
 800aab0:	ea41 0909 	orr.w	r9, r1, r9
 800aab4:	9906      	ldr	r1, [sp, #24]
 800aab6:	ea59 0101 	orrs.w	r1, r9, r1
 800aaba:	d120      	bne.n	800aafe <_dtoa_r+0xad6>
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	ddec      	ble.n	800aa9a <_dtoa_r+0xa72>
 800aac0:	4659      	mov	r1, fp
 800aac2:	2201      	movs	r2, #1
 800aac4:	4620      	mov	r0, r4
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	f000 fbb6 	bl	800b238 <__lshift>
 800aacc:	4631      	mov	r1, r6
 800aace:	4683      	mov	fp, r0
 800aad0:	f000 fc1e 	bl	800b310 <__mcmp>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	dc02      	bgt.n	800aae0 <_dtoa_r+0xab8>
 800aada:	d1de      	bne.n	800aa9a <_dtoa_r+0xa72>
 800aadc:	07da      	lsls	r2, r3, #31
 800aade:	d5dc      	bpl.n	800aa9a <_dtoa_r+0xa72>
 800aae0:	2b39      	cmp	r3, #57	; 0x39
 800aae2:	d1d8      	bne.n	800aa96 <_dtoa_r+0xa6e>
 800aae4:	9a02      	ldr	r2, [sp, #8]
 800aae6:	2339      	movs	r3, #57	; 0x39
 800aae8:	7013      	strb	r3, [r2, #0]
 800aaea:	462b      	mov	r3, r5
 800aaec:	461d      	mov	r5, r3
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aaf4:	2a39      	cmp	r2, #57	; 0x39
 800aaf6:	d050      	beq.n	800ab9a <_dtoa_r+0xb72>
 800aaf8:	3201      	adds	r2, #1
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	e745      	b.n	800a98a <_dtoa_r+0x962>
 800aafe:	2a00      	cmp	r2, #0
 800ab00:	dd03      	ble.n	800ab0a <_dtoa_r+0xae2>
 800ab02:	2b39      	cmp	r3, #57	; 0x39
 800ab04:	d0ee      	beq.n	800aae4 <_dtoa_r+0xabc>
 800ab06:	3301      	adds	r3, #1
 800ab08:	e7c7      	b.n	800aa9a <_dtoa_r+0xa72>
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	9907      	ldr	r1, [sp, #28]
 800ab0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab12:	428a      	cmp	r2, r1
 800ab14:	d02a      	beq.n	800ab6c <_dtoa_r+0xb44>
 800ab16:	4659      	mov	r1, fp
 800ab18:	2300      	movs	r3, #0
 800ab1a:	220a      	movs	r2, #10
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 f9db 	bl	800aed8 <__multadd>
 800ab22:	45b8      	cmp	r8, r7
 800ab24:	4683      	mov	fp, r0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	f04f 020a 	mov.w	r2, #10
 800ab2e:	4641      	mov	r1, r8
 800ab30:	4620      	mov	r0, r4
 800ab32:	d107      	bne.n	800ab44 <_dtoa_r+0xb1c>
 800ab34:	f000 f9d0 	bl	800aed8 <__multadd>
 800ab38:	4680      	mov	r8, r0
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	e775      	b.n	800aa30 <_dtoa_r+0xa08>
 800ab44:	f000 f9c8 	bl	800aed8 <__multadd>
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4680      	mov	r8, r0
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	220a      	movs	r2, #10
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f9c1 	bl	800aed8 <__multadd>
 800ab56:	4607      	mov	r7, r0
 800ab58:	e7f0      	b.n	800ab3c <_dtoa_r+0xb14>
 800ab5a:	f1b9 0f00 	cmp.w	r9, #0
 800ab5e:	9a00      	ldr	r2, [sp, #0]
 800ab60:	bfcc      	ite	gt
 800ab62:	464d      	movgt	r5, r9
 800ab64:	2501      	movle	r5, #1
 800ab66:	4415      	add	r5, r2
 800ab68:	f04f 0800 	mov.w	r8, #0
 800ab6c:	4659      	mov	r1, fp
 800ab6e:	2201      	movs	r2, #1
 800ab70:	4620      	mov	r0, r4
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	f000 fb60 	bl	800b238 <__lshift>
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4683      	mov	fp, r0
 800ab7c:	f000 fbc8 	bl	800b310 <__mcmp>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	dcb2      	bgt.n	800aaea <_dtoa_r+0xac2>
 800ab84:	d102      	bne.n	800ab8c <_dtoa_r+0xb64>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	07db      	lsls	r3, r3, #31
 800ab8a:	d4ae      	bmi.n	800aaea <_dtoa_r+0xac2>
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	461d      	mov	r5, r3
 800ab90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab94:	2a30      	cmp	r2, #48	; 0x30
 800ab96:	d0fa      	beq.n	800ab8e <_dtoa_r+0xb66>
 800ab98:	e6f7      	b.n	800a98a <_dtoa_r+0x962>
 800ab9a:	9a00      	ldr	r2, [sp, #0]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d1a5      	bne.n	800aaec <_dtoa_r+0xac4>
 800aba0:	f10a 0a01 	add.w	sl, sl, #1
 800aba4:	2331      	movs	r3, #49	; 0x31
 800aba6:	e779      	b.n	800aa9c <_dtoa_r+0xa74>
 800aba8:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <_dtoa_r+0xbd0>)
 800abaa:	f7ff baaf 	b.w	800a10c <_dtoa_r+0xe4>
 800abae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f47f aa86 	bne.w	800a0c2 <_dtoa_r+0x9a>
 800abb6:	4b11      	ldr	r3, [pc, #68]	; (800abfc <_dtoa_r+0xbd4>)
 800abb8:	f7ff baa8 	b.w	800a10c <_dtoa_r+0xe4>
 800abbc:	f1b9 0f00 	cmp.w	r9, #0
 800abc0:	dc03      	bgt.n	800abca <_dtoa_r+0xba2>
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	f73f aec9 	bgt.w	800a95c <_dtoa_r+0x934>
 800abca:	9d00      	ldr	r5, [sp, #0]
 800abcc:	4631      	mov	r1, r6
 800abce:	4658      	mov	r0, fp
 800abd0:	f7ff f99e 	bl	8009f10 <quorem>
 800abd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abd8:	f805 3b01 	strb.w	r3, [r5], #1
 800abdc:	9a00      	ldr	r2, [sp, #0]
 800abde:	1aaa      	subs	r2, r5, r2
 800abe0:	4591      	cmp	r9, r2
 800abe2:	ddba      	ble.n	800ab5a <_dtoa_r+0xb32>
 800abe4:	4659      	mov	r1, fp
 800abe6:	2300      	movs	r3, #0
 800abe8:	220a      	movs	r2, #10
 800abea:	4620      	mov	r0, r4
 800abec:	f000 f974 	bl	800aed8 <__multadd>
 800abf0:	4683      	mov	fp, r0
 800abf2:	e7eb      	b.n	800abcc <_dtoa_r+0xba4>
 800abf4:	0800c843 	.word	0x0800c843
 800abf8:	0800c79c 	.word	0x0800c79c
 800abfc:	0800c7c0 	.word	0x0800c7c0

0800ac00 <std>:
 800ac00:	2300      	movs	r3, #0
 800ac02:	b510      	push	{r4, lr}
 800ac04:	4604      	mov	r4, r0
 800ac06:	e9c0 3300 	strd	r3, r3, [r0]
 800ac0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac0e:	6083      	str	r3, [r0, #8]
 800ac10:	8181      	strh	r1, [r0, #12]
 800ac12:	6643      	str	r3, [r0, #100]	; 0x64
 800ac14:	81c2      	strh	r2, [r0, #14]
 800ac16:	6183      	str	r3, [r0, #24]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	305c      	adds	r0, #92	; 0x5c
 800ac1e:	f7fe fc1d 	bl	800945c <memset>
 800ac22:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <std+0x38>)
 800ac24:	6263      	str	r3, [r4, #36]	; 0x24
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <std+0x3c>)
 800ac28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac2a:	4b05      	ldr	r3, [pc, #20]	; (800ac40 <std+0x40>)
 800ac2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <std+0x44>)
 800ac30:	6224      	str	r4, [r4, #32]
 800ac32:	6323      	str	r3, [r4, #48]	; 0x30
 800ac34:	bd10      	pop	{r4, pc}
 800ac36:	bf00      	nop
 800ac38:	0800b871 	.word	0x0800b871
 800ac3c:	0800b893 	.word	0x0800b893
 800ac40:	0800b8cb 	.word	0x0800b8cb
 800ac44:	0800b8ef 	.word	0x0800b8ef

0800ac48 <_cleanup_r>:
 800ac48:	4901      	ldr	r1, [pc, #4]	; (800ac50 <_cleanup_r+0x8>)
 800ac4a:	f000 b8af 	b.w	800adac <_fwalk_reent>
 800ac4e:	bf00      	nop
 800ac50:	0800bc05 	.word	0x0800bc05

0800ac54 <__sfmoreglue>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	1e4a      	subs	r2, r1, #1
 800ac58:	2568      	movs	r5, #104	; 0x68
 800ac5a:	4355      	muls	r5, r2
 800ac5c:	460e      	mov	r6, r1
 800ac5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac62:	f7fe fc53 	bl	800950c <_malloc_r>
 800ac66:	4604      	mov	r4, r0
 800ac68:	b140      	cbz	r0, 800ac7c <__sfmoreglue+0x28>
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac70:	300c      	adds	r0, #12
 800ac72:	60a0      	str	r0, [r4, #8]
 800ac74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac78:	f7fe fbf0 	bl	800945c <memset>
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}

0800ac80 <__sfp_lock_acquire>:
 800ac80:	4801      	ldr	r0, [pc, #4]	; (800ac88 <__sfp_lock_acquire+0x8>)
 800ac82:	f000 b8b8 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800ac86:	bf00      	nop
 800ac88:	20002118 	.word	0x20002118

0800ac8c <__sfp_lock_release>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	; (800ac94 <__sfp_lock_release+0x8>)
 800ac8e:	f000 b8b3 	b.w	800adf8 <__retarget_lock_release_recursive>
 800ac92:	bf00      	nop
 800ac94:	20002118 	.word	0x20002118

0800ac98 <__sinit_lock_acquire>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__sinit_lock_acquire+0x8>)
 800ac9a:	f000 b8ac 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20002113 	.word	0x20002113

0800aca4 <__sinit_lock_release>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__sinit_lock_release+0x8>)
 800aca6:	f000 b8a7 	b.w	800adf8 <__retarget_lock_release_recursive>
 800acaa:	bf00      	nop
 800acac:	20002113 	.word	0x20002113

0800acb0 <__sinit>:
 800acb0:	b510      	push	{r4, lr}
 800acb2:	4604      	mov	r4, r0
 800acb4:	f7ff fff0 	bl	800ac98 <__sinit_lock_acquire>
 800acb8:	69a3      	ldr	r3, [r4, #24]
 800acba:	b11b      	cbz	r3, 800acc4 <__sinit+0x14>
 800acbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc0:	f7ff bff0 	b.w	800aca4 <__sinit_lock_release>
 800acc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acc8:	6523      	str	r3, [r4, #80]	; 0x50
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <__sinit+0x68>)
 800accc:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <__sinit+0x6c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	bf04      	itt	eq
 800acd6:	2301      	moveq	r3, #1
 800acd8:	61a3      	streq	r3, [r4, #24]
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f820 	bl	800ad20 <__sfp>
 800ace0:	6060      	str	r0, [r4, #4]
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 f81c 	bl	800ad20 <__sfp>
 800ace8:	60a0      	str	r0, [r4, #8]
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f818 	bl	800ad20 <__sfp>
 800acf0:	2200      	movs	r2, #0
 800acf2:	60e0      	str	r0, [r4, #12]
 800acf4:	2104      	movs	r1, #4
 800acf6:	6860      	ldr	r0, [r4, #4]
 800acf8:	f7ff ff82 	bl	800ac00 <std>
 800acfc:	68a0      	ldr	r0, [r4, #8]
 800acfe:	2201      	movs	r2, #1
 800ad00:	2109      	movs	r1, #9
 800ad02:	f7ff ff7d 	bl	800ac00 <std>
 800ad06:	68e0      	ldr	r0, [r4, #12]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	2112      	movs	r1, #18
 800ad0c:	f7ff ff78 	bl	800ac00 <std>
 800ad10:	2301      	movs	r3, #1
 800ad12:	61a3      	str	r3, [r4, #24]
 800ad14:	e7d2      	b.n	800acbc <__sinit+0xc>
 800ad16:	bf00      	nop
 800ad18:	0800c788 	.word	0x0800c788
 800ad1c:	0800ac49 	.word	0x0800ac49

0800ad20 <__sfp>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	4607      	mov	r7, r0
 800ad24:	f7ff ffac 	bl	800ac80 <__sfp_lock_acquire>
 800ad28:	4b1e      	ldr	r3, [pc, #120]	; (800ada4 <__sfp+0x84>)
 800ad2a:	681e      	ldr	r6, [r3, #0]
 800ad2c:	69b3      	ldr	r3, [r6, #24]
 800ad2e:	b913      	cbnz	r3, 800ad36 <__sfp+0x16>
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7ff ffbd 	bl	800acb0 <__sinit>
 800ad36:	3648      	adds	r6, #72	; 0x48
 800ad38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	d503      	bpl.n	800ad48 <__sfp+0x28>
 800ad40:	6833      	ldr	r3, [r6, #0]
 800ad42:	b30b      	cbz	r3, 800ad88 <__sfp+0x68>
 800ad44:	6836      	ldr	r6, [r6, #0]
 800ad46:	e7f7      	b.n	800ad38 <__sfp+0x18>
 800ad48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad4c:	b9d5      	cbnz	r5, 800ad84 <__sfp+0x64>
 800ad4e:	4b16      	ldr	r3, [pc, #88]	; (800ada8 <__sfp+0x88>)
 800ad50:	60e3      	str	r3, [r4, #12]
 800ad52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad56:	6665      	str	r5, [r4, #100]	; 0x64
 800ad58:	f000 f84c 	bl	800adf4 <__retarget_lock_init_recursive>
 800ad5c:	f7ff ff96 	bl	800ac8c <__sfp_lock_release>
 800ad60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad68:	6025      	str	r5, [r4, #0]
 800ad6a:	61a5      	str	r5, [r4, #24]
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad74:	f7fe fb72 	bl	800945c <memset>
 800ad78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad80:	4620      	mov	r0, r4
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad84:	3468      	adds	r4, #104	; 0x68
 800ad86:	e7d9      	b.n	800ad3c <__sfp+0x1c>
 800ad88:	2104      	movs	r1, #4
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f7ff ff62 	bl	800ac54 <__sfmoreglue>
 800ad90:	4604      	mov	r4, r0
 800ad92:	6030      	str	r0, [r6, #0]
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d1d5      	bne.n	800ad44 <__sfp+0x24>
 800ad98:	f7ff ff78 	bl	800ac8c <__sfp_lock_release>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	e7ee      	b.n	800ad80 <__sfp+0x60>
 800ada2:	bf00      	nop
 800ada4:	0800c788 	.word	0x0800c788
 800ada8:	ffff0001 	.word	0xffff0001

0800adac <_fwalk_reent>:
 800adac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb0:	4606      	mov	r6, r0
 800adb2:	4688      	mov	r8, r1
 800adb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adb8:	2700      	movs	r7, #0
 800adba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adbe:	f1b9 0901 	subs.w	r9, r9, #1
 800adc2:	d505      	bpl.n	800add0 <_fwalk_reent+0x24>
 800adc4:	6824      	ldr	r4, [r4, #0]
 800adc6:	2c00      	cmp	r4, #0
 800adc8:	d1f7      	bne.n	800adba <_fwalk_reent+0xe>
 800adca:	4638      	mov	r0, r7
 800adcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add0:	89ab      	ldrh	r3, [r5, #12]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d907      	bls.n	800ade6 <_fwalk_reent+0x3a>
 800add6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adda:	3301      	adds	r3, #1
 800addc:	d003      	beq.n	800ade6 <_fwalk_reent+0x3a>
 800adde:	4629      	mov	r1, r5
 800ade0:	4630      	mov	r0, r6
 800ade2:	47c0      	blx	r8
 800ade4:	4307      	orrs	r7, r0
 800ade6:	3568      	adds	r5, #104	; 0x68
 800ade8:	e7e9      	b.n	800adbe <_fwalk_reent+0x12>
	...

0800adec <_localeconv_r>:
 800adec:	4800      	ldr	r0, [pc, #0]	; (800adf0 <_localeconv_r+0x4>)
 800adee:	4770      	bx	lr
 800adf0:	200001c0 	.word	0x200001c0

0800adf4 <__retarget_lock_init_recursive>:
 800adf4:	4770      	bx	lr

0800adf6 <__retarget_lock_acquire_recursive>:
 800adf6:	4770      	bx	lr

0800adf8 <__retarget_lock_release_recursive>:
 800adf8:	4770      	bx	lr
	...

0800adfc <__malloc_lock>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__malloc_lock+0x8>)
 800adfe:	f7ff bffa 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800ae02:	bf00      	nop
 800ae04:	20002114 	.word	0x20002114

0800ae08 <__malloc_unlock>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__malloc_unlock+0x8>)
 800ae0a:	f7ff bff5 	b.w	800adf8 <__retarget_lock_release_recursive>
 800ae0e:	bf00      	nop
 800ae10:	20002114 	.word	0x20002114

0800ae14 <_Balloc>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae18:	4604      	mov	r4, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	b976      	cbnz	r6, 800ae3c <_Balloc+0x28>
 800ae1e:	2010      	movs	r0, #16
 800ae20:	f7fe fb06 	bl	8009430 <malloc>
 800ae24:	4602      	mov	r2, r0
 800ae26:	6260      	str	r0, [r4, #36]	; 0x24
 800ae28:	b920      	cbnz	r0, 800ae34 <_Balloc+0x20>
 800ae2a:	4b18      	ldr	r3, [pc, #96]	; (800ae8c <_Balloc+0x78>)
 800ae2c:	4818      	ldr	r0, [pc, #96]	; (800ae90 <_Balloc+0x7c>)
 800ae2e:	2166      	movs	r1, #102	; 0x66
 800ae30:	f000 fe34 	bl	800ba9c <__assert_func>
 800ae34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae38:	6006      	str	r6, [r0, #0]
 800ae3a:	60c6      	str	r6, [r0, #12]
 800ae3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae3e:	68f3      	ldr	r3, [r6, #12]
 800ae40:	b183      	cbz	r3, 800ae64 <_Balloc+0x50>
 800ae42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae4a:	b9b8      	cbnz	r0, 800ae7c <_Balloc+0x68>
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae52:	1d72      	adds	r2, r6, #5
 800ae54:	0092      	lsls	r2, r2, #2
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 fb5a 	bl	800b510 <_calloc_r>
 800ae5c:	b160      	cbz	r0, 800ae78 <_Balloc+0x64>
 800ae5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae62:	e00e      	b.n	800ae82 <_Balloc+0x6e>
 800ae64:	2221      	movs	r2, #33	; 0x21
 800ae66:	2104      	movs	r1, #4
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 fb51 	bl	800b510 <_calloc_r>
 800ae6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae70:	60f0      	str	r0, [r6, #12]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e4      	bne.n	800ae42 <_Balloc+0x2e>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	6802      	ldr	r2, [r0, #0]
 800ae7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae82:	2300      	movs	r3, #0
 800ae84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae88:	e7f7      	b.n	800ae7a <_Balloc+0x66>
 800ae8a:	bf00      	nop
 800ae8c:	0800c7cd 	.word	0x0800c7cd
 800ae90:	0800c8b4 	.word	0x0800c8b4

0800ae94 <_Bfree>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b976      	cbnz	r6, 800aebc <_Bfree+0x28>
 800ae9e:	2010      	movs	r0, #16
 800aea0:	f7fe fac6 	bl	8009430 <malloc>
 800aea4:	4602      	mov	r2, r0
 800aea6:	6268      	str	r0, [r5, #36]	; 0x24
 800aea8:	b920      	cbnz	r0, 800aeb4 <_Bfree+0x20>
 800aeaa:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <_Bfree+0x3c>)
 800aeac:	4809      	ldr	r0, [pc, #36]	; (800aed4 <_Bfree+0x40>)
 800aeae:	218a      	movs	r1, #138	; 0x8a
 800aeb0:	f000 fdf4 	bl	800ba9c <__assert_func>
 800aeb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb8:	6006      	str	r6, [r0, #0]
 800aeba:	60c6      	str	r6, [r0, #12]
 800aebc:	b13c      	cbz	r4, 800aece <_Bfree+0x3a>
 800aebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aec0:	6862      	ldr	r2, [r4, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aec8:	6021      	str	r1, [r4, #0]
 800aeca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	0800c7cd 	.word	0x0800c7cd
 800aed4:	0800c8b4 	.word	0x0800c8b4

0800aed8 <__multadd>:
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	690e      	ldr	r6, [r1, #16]
 800aede:	4607      	mov	r7, r0
 800aee0:	4698      	mov	r8, r3
 800aee2:	460c      	mov	r4, r1
 800aee4:	f101 0014 	add.w	r0, r1, #20
 800aee8:	2300      	movs	r3, #0
 800aeea:	6805      	ldr	r5, [r0, #0]
 800aeec:	b2a9      	uxth	r1, r5
 800aeee:	fb02 8101 	mla	r1, r2, r1, r8
 800aef2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aef6:	0c2d      	lsrs	r5, r5, #16
 800aef8:	fb02 c505 	mla	r5, r2, r5, ip
 800aefc:	b289      	uxth	r1, r1
 800aefe:	3301      	adds	r3, #1
 800af00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af04:	429e      	cmp	r6, r3
 800af06:	f840 1b04 	str.w	r1, [r0], #4
 800af0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af0e:	dcec      	bgt.n	800aeea <__multadd+0x12>
 800af10:	f1b8 0f00 	cmp.w	r8, #0
 800af14:	d022      	beq.n	800af5c <__multadd+0x84>
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	42b3      	cmp	r3, r6
 800af1a:	dc19      	bgt.n	800af50 <__multadd+0x78>
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	4638      	mov	r0, r7
 800af20:	3101      	adds	r1, #1
 800af22:	f7ff ff77 	bl	800ae14 <_Balloc>
 800af26:	4605      	mov	r5, r0
 800af28:	b928      	cbnz	r0, 800af36 <__multadd+0x5e>
 800af2a:	4602      	mov	r2, r0
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <__multadd+0x8c>)
 800af2e:	480e      	ldr	r0, [pc, #56]	; (800af68 <__multadd+0x90>)
 800af30:	21b5      	movs	r1, #181	; 0xb5
 800af32:	f000 fdb3 	bl	800ba9c <__assert_func>
 800af36:	6922      	ldr	r2, [r4, #16]
 800af38:	3202      	adds	r2, #2
 800af3a:	f104 010c 	add.w	r1, r4, #12
 800af3e:	0092      	lsls	r2, r2, #2
 800af40:	300c      	adds	r0, #12
 800af42:	f7fe fa7d 	bl	8009440 <memcpy>
 800af46:	4621      	mov	r1, r4
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff ffa3 	bl	800ae94 <_Bfree>
 800af4e:	462c      	mov	r4, r5
 800af50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af54:	3601      	adds	r6, #1
 800af56:	f8c3 8014 	str.w	r8, [r3, #20]
 800af5a:	6126      	str	r6, [r4, #16]
 800af5c:	4620      	mov	r0, r4
 800af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af62:	bf00      	nop
 800af64:	0800c843 	.word	0x0800c843
 800af68:	0800c8b4 	.word	0x0800c8b4

0800af6c <__hi0bits>:
 800af6c:	0c03      	lsrs	r3, r0, #16
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	b9d3      	cbnz	r3, 800afa8 <__hi0bits+0x3c>
 800af72:	0400      	lsls	r0, r0, #16
 800af74:	2310      	movs	r3, #16
 800af76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af7a:	bf04      	itt	eq
 800af7c:	0200      	lsleq	r0, r0, #8
 800af7e:	3308      	addeq	r3, #8
 800af80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af84:	bf04      	itt	eq
 800af86:	0100      	lsleq	r0, r0, #4
 800af88:	3304      	addeq	r3, #4
 800af8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af8e:	bf04      	itt	eq
 800af90:	0080      	lsleq	r0, r0, #2
 800af92:	3302      	addeq	r3, #2
 800af94:	2800      	cmp	r0, #0
 800af96:	db05      	blt.n	800afa4 <__hi0bits+0x38>
 800af98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af9c:	f103 0301 	add.w	r3, r3, #1
 800afa0:	bf08      	it	eq
 800afa2:	2320      	moveq	r3, #32
 800afa4:	4618      	mov	r0, r3
 800afa6:	4770      	bx	lr
 800afa8:	2300      	movs	r3, #0
 800afaa:	e7e4      	b.n	800af76 <__hi0bits+0xa>

0800afac <__lo0bits>:
 800afac:	6803      	ldr	r3, [r0, #0]
 800afae:	f013 0207 	ands.w	r2, r3, #7
 800afb2:	4601      	mov	r1, r0
 800afb4:	d00b      	beq.n	800afce <__lo0bits+0x22>
 800afb6:	07da      	lsls	r2, r3, #31
 800afb8:	d424      	bmi.n	800b004 <__lo0bits+0x58>
 800afba:	0798      	lsls	r0, r3, #30
 800afbc:	bf49      	itett	mi
 800afbe:	085b      	lsrmi	r3, r3, #1
 800afc0:	089b      	lsrpl	r3, r3, #2
 800afc2:	2001      	movmi	r0, #1
 800afc4:	600b      	strmi	r3, [r1, #0]
 800afc6:	bf5c      	itt	pl
 800afc8:	600b      	strpl	r3, [r1, #0]
 800afca:	2002      	movpl	r0, #2
 800afcc:	4770      	bx	lr
 800afce:	b298      	uxth	r0, r3
 800afd0:	b9b0      	cbnz	r0, 800b000 <__lo0bits+0x54>
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	2010      	movs	r0, #16
 800afd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800afda:	bf04      	itt	eq
 800afdc:	0a1b      	lsreq	r3, r3, #8
 800afde:	3008      	addeq	r0, #8
 800afe0:	071a      	lsls	r2, r3, #28
 800afe2:	bf04      	itt	eq
 800afe4:	091b      	lsreq	r3, r3, #4
 800afe6:	3004      	addeq	r0, #4
 800afe8:	079a      	lsls	r2, r3, #30
 800afea:	bf04      	itt	eq
 800afec:	089b      	lsreq	r3, r3, #2
 800afee:	3002      	addeq	r0, #2
 800aff0:	07da      	lsls	r2, r3, #31
 800aff2:	d403      	bmi.n	800affc <__lo0bits+0x50>
 800aff4:	085b      	lsrs	r3, r3, #1
 800aff6:	f100 0001 	add.w	r0, r0, #1
 800affa:	d005      	beq.n	800b008 <__lo0bits+0x5c>
 800affc:	600b      	str	r3, [r1, #0]
 800affe:	4770      	bx	lr
 800b000:	4610      	mov	r0, r2
 800b002:	e7e8      	b.n	800afd6 <__lo0bits+0x2a>
 800b004:	2000      	movs	r0, #0
 800b006:	4770      	bx	lr
 800b008:	2020      	movs	r0, #32
 800b00a:	4770      	bx	lr

0800b00c <__i2b>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	2101      	movs	r1, #1
 800b012:	f7ff feff 	bl	800ae14 <_Balloc>
 800b016:	4602      	mov	r2, r0
 800b018:	b928      	cbnz	r0, 800b026 <__i2b+0x1a>
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <__i2b+0x24>)
 800b01c:	4805      	ldr	r0, [pc, #20]	; (800b034 <__i2b+0x28>)
 800b01e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b022:	f000 fd3b 	bl	800ba9c <__assert_func>
 800b026:	2301      	movs	r3, #1
 800b028:	6144      	str	r4, [r0, #20]
 800b02a:	6103      	str	r3, [r0, #16]
 800b02c:	bd10      	pop	{r4, pc}
 800b02e:	bf00      	nop
 800b030:	0800c843 	.word	0x0800c843
 800b034:	0800c8b4 	.word	0x0800c8b4

0800b038 <__multiply>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	4614      	mov	r4, r2
 800b03e:	690a      	ldr	r2, [r1, #16]
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	429a      	cmp	r2, r3
 800b044:	bfb8      	it	lt
 800b046:	460b      	movlt	r3, r1
 800b048:	460d      	mov	r5, r1
 800b04a:	bfbc      	itt	lt
 800b04c:	4625      	movlt	r5, r4
 800b04e:	461c      	movlt	r4, r3
 800b050:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b054:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b058:	68ab      	ldr	r3, [r5, #8]
 800b05a:	6869      	ldr	r1, [r5, #4]
 800b05c:	eb0a 0709 	add.w	r7, sl, r9
 800b060:	42bb      	cmp	r3, r7
 800b062:	b085      	sub	sp, #20
 800b064:	bfb8      	it	lt
 800b066:	3101      	addlt	r1, #1
 800b068:	f7ff fed4 	bl	800ae14 <_Balloc>
 800b06c:	b930      	cbnz	r0, 800b07c <__multiply+0x44>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b42      	ldr	r3, [pc, #264]	; (800b17c <__multiply+0x144>)
 800b072:	4843      	ldr	r0, [pc, #268]	; (800b180 <__multiply+0x148>)
 800b074:	f240 115d 	movw	r1, #349	; 0x15d
 800b078:	f000 fd10 	bl	800ba9c <__assert_func>
 800b07c:	f100 0614 	add.w	r6, r0, #20
 800b080:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b084:	4633      	mov	r3, r6
 800b086:	2200      	movs	r2, #0
 800b088:	4543      	cmp	r3, r8
 800b08a:	d31e      	bcc.n	800b0ca <__multiply+0x92>
 800b08c:	f105 0c14 	add.w	ip, r5, #20
 800b090:	f104 0314 	add.w	r3, r4, #20
 800b094:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b098:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b09c:	9202      	str	r2, [sp, #8]
 800b09e:	ebac 0205 	sub.w	r2, ip, r5
 800b0a2:	3a15      	subs	r2, #21
 800b0a4:	f022 0203 	bic.w	r2, r2, #3
 800b0a8:	3204      	adds	r2, #4
 800b0aa:	f105 0115 	add.w	r1, r5, #21
 800b0ae:	458c      	cmp	ip, r1
 800b0b0:	bf38      	it	cc
 800b0b2:	2204      	movcc	r2, #4
 800b0b4:	9201      	str	r2, [sp, #4]
 800b0b6:	9a02      	ldr	r2, [sp, #8]
 800b0b8:	9303      	str	r3, [sp, #12]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d808      	bhi.n	800b0d0 <__multiply+0x98>
 800b0be:	2f00      	cmp	r7, #0
 800b0c0:	dc55      	bgt.n	800b16e <__multiply+0x136>
 800b0c2:	6107      	str	r7, [r0, #16]
 800b0c4:	b005      	add	sp, #20
 800b0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ca:	f843 2b04 	str.w	r2, [r3], #4
 800b0ce:	e7db      	b.n	800b088 <__multiply+0x50>
 800b0d0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0d4:	f1ba 0f00 	cmp.w	sl, #0
 800b0d8:	d020      	beq.n	800b11c <__multiply+0xe4>
 800b0da:	f105 0e14 	add.w	lr, r5, #20
 800b0de:	46b1      	mov	r9, r6
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0e6:	f8d9 b000 	ldr.w	fp, [r9]
 800b0ea:	b2a1      	uxth	r1, r4
 800b0ec:	fa1f fb8b 	uxth.w	fp, fp
 800b0f0:	fb0a b101 	mla	r1, sl, r1, fp
 800b0f4:	4411      	add	r1, r2
 800b0f6:	f8d9 2000 	ldr.w	r2, [r9]
 800b0fa:	0c24      	lsrs	r4, r4, #16
 800b0fc:	0c12      	lsrs	r2, r2, #16
 800b0fe:	fb0a 2404 	mla	r4, sl, r4, r2
 800b102:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b106:	b289      	uxth	r1, r1
 800b108:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b10c:	45f4      	cmp	ip, lr
 800b10e:	f849 1b04 	str.w	r1, [r9], #4
 800b112:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b116:	d8e4      	bhi.n	800b0e2 <__multiply+0xaa>
 800b118:	9901      	ldr	r1, [sp, #4]
 800b11a:	5072      	str	r2, [r6, r1]
 800b11c:	9a03      	ldr	r2, [sp, #12]
 800b11e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b122:	3304      	adds	r3, #4
 800b124:	f1b9 0f00 	cmp.w	r9, #0
 800b128:	d01f      	beq.n	800b16a <__multiply+0x132>
 800b12a:	6834      	ldr	r4, [r6, #0]
 800b12c:	f105 0114 	add.w	r1, r5, #20
 800b130:	46b6      	mov	lr, r6
 800b132:	f04f 0a00 	mov.w	sl, #0
 800b136:	880a      	ldrh	r2, [r1, #0]
 800b138:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b13c:	fb09 b202 	mla	r2, r9, r2, fp
 800b140:	4492      	add	sl, r2
 800b142:	b2a4      	uxth	r4, r4
 800b144:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b148:	f84e 4b04 	str.w	r4, [lr], #4
 800b14c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b150:	f8be 2000 	ldrh.w	r2, [lr]
 800b154:	0c24      	lsrs	r4, r4, #16
 800b156:	fb09 2404 	mla	r4, r9, r4, r2
 800b15a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b15e:	458c      	cmp	ip, r1
 800b160:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b164:	d8e7      	bhi.n	800b136 <__multiply+0xfe>
 800b166:	9a01      	ldr	r2, [sp, #4]
 800b168:	50b4      	str	r4, [r6, r2]
 800b16a:	3604      	adds	r6, #4
 800b16c:	e7a3      	b.n	800b0b6 <__multiply+0x7e>
 800b16e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1a5      	bne.n	800b0c2 <__multiply+0x8a>
 800b176:	3f01      	subs	r7, #1
 800b178:	e7a1      	b.n	800b0be <__multiply+0x86>
 800b17a:	bf00      	nop
 800b17c:	0800c843 	.word	0x0800c843
 800b180:	0800c8b4 	.word	0x0800c8b4

0800b184 <__pow5mult>:
 800b184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b188:	4615      	mov	r5, r2
 800b18a:	f012 0203 	ands.w	r2, r2, #3
 800b18e:	4606      	mov	r6, r0
 800b190:	460f      	mov	r7, r1
 800b192:	d007      	beq.n	800b1a4 <__pow5mult+0x20>
 800b194:	4c25      	ldr	r4, [pc, #148]	; (800b22c <__pow5mult+0xa8>)
 800b196:	3a01      	subs	r2, #1
 800b198:	2300      	movs	r3, #0
 800b19a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b19e:	f7ff fe9b 	bl	800aed8 <__multadd>
 800b1a2:	4607      	mov	r7, r0
 800b1a4:	10ad      	asrs	r5, r5, #2
 800b1a6:	d03d      	beq.n	800b224 <__pow5mult+0xa0>
 800b1a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1aa:	b97c      	cbnz	r4, 800b1cc <__pow5mult+0x48>
 800b1ac:	2010      	movs	r0, #16
 800b1ae:	f7fe f93f 	bl	8009430 <malloc>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b1b6:	b928      	cbnz	r0, 800b1c4 <__pow5mult+0x40>
 800b1b8:	4b1d      	ldr	r3, [pc, #116]	; (800b230 <__pow5mult+0xac>)
 800b1ba:	481e      	ldr	r0, [pc, #120]	; (800b234 <__pow5mult+0xb0>)
 800b1bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1c0:	f000 fc6c 	bl	800ba9c <__assert_func>
 800b1c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c8:	6004      	str	r4, [r0, #0]
 800b1ca:	60c4      	str	r4, [r0, #12]
 800b1cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d4:	b94c      	cbnz	r4, 800b1ea <__pow5mult+0x66>
 800b1d6:	f240 2171 	movw	r1, #625	; 0x271
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff ff16 	bl	800b00c <__i2b>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	f04f 0900 	mov.w	r9, #0
 800b1ee:	07eb      	lsls	r3, r5, #31
 800b1f0:	d50a      	bpl.n	800b208 <__pow5mult+0x84>
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f7ff ff1e 	bl	800b038 <__multiply>
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	4680      	mov	r8, r0
 800b200:	4630      	mov	r0, r6
 800b202:	f7ff fe47 	bl	800ae94 <_Bfree>
 800b206:	4647      	mov	r7, r8
 800b208:	106d      	asrs	r5, r5, #1
 800b20a:	d00b      	beq.n	800b224 <__pow5mult+0xa0>
 800b20c:	6820      	ldr	r0, [r4, #0]
 800b20e:	b938      	cbnz	r0, 800b220 <__pow5mult+0x9c>
 800b210:	4622      	mov	r2, r4
 800b212:	4621      	mov	r1, r4
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ff0f 	bl	800b038 <__multiply>
 800b21a:	6020      	str	r0, [r4, #0]
 800b21c:	f8c0 9000 	str.w	r9, [r0]
 800b220:	4604      	mov	r4, r0
 800b222:	e7e4      	b.n	800b1ee <__pow5mult+0x6a>
 800b224:	4638      	mov	r0, r7
 800b226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22a:	bf00      	nop
 800b22c:	0800ca08 	.word	0x0800ca08
 800b230:	0800c7cd 	.word	0x0800c7cd
 800b234:	0800c8b4 	.word	0x0800c8b4

0800b238 <__lshift>:
 800b238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b23c:	460c      	mov	r4, r1
 800b23e:	6849      	ldr	r1, [r1, #4]
 800b240:	6923      	ldr	r3, [r4, #16]
 800b242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	4607      	mov	r7, r0
 800b24a:	4691      	mov	r9, r2
 800b24c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b250:	f108 0601 	add.w	r6, r8, #1
 800b254:	42b3      	cmp	r3, r6
 800b256:	db0b      	blt.n	800b270 <__lshift+0x38>
 800b258:	4638      	mov	r0, r7
 800b25a:	f7ff fddb 	bl	800ae14 <_Balloc>
 800b25e:	4605      	mov	r5, r0
 800b260:	b948      	cbnz	r0, 800b276 <__lshift+0x3e>
 800b262:	4602      	mov	r2, r0
 800b264:	4b28      	ldr	r3, [pc, #160]	; (800b308 <__lshift+0xd0>)
 800b266:	4829      	ldr	r0, [pc, #164]	; (800b30c <__lshift+0xd4>)
 800b268:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b26c:	f000 fc16 	bl	800ba9c <__assert_func>
 800b270:	3101      	adds	r1, #1
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	e7ee      	b.n	800b254 <__lshift+0x1c>
 800b276:	2300      	movs	r3, #0
 800b278:	f100 0114 	add.w	r1, r0, #20
 800b27c:	f100 0210 	add.w	r2, r0, #16
 800b280:	4618      	mov	r0, r3
 800b282:	4553      	cmp	r3, sl
 800b284:	db33      	blt.n	800b2ee <__lshift+0xb6>
 800b286:	6920      	ldr	r0, [r4, #16]
 800b288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b28c:	f104 0314 	add.w	r3, r4, #20
 800b290:	f019 091f 	ands.w	r9, r9, #31
 800b294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b29c:	d02b      	beq.n	800b2f6 <__lshift+0xbe>
 800b29e:	f1c9 0e20 	rsb	lr, r9, #32
 800b2a2:	468a      	mov	sl, r1
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	6818      	ldr	r0, [r3, #0]
 800b2a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2ac:	4302      	orrs	r2, r0
 800b2ae:	f84a 2b04 	str.w	r2, [sl], #4
 800b2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b6:	459c      	cmp	ip, r3
 800b2b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2bc:	d8f3      	bhi.n	800b2a6 <__lshift+0x6e>
 800b2be:	ebac 0304 	sub.w	r3, ip, r4
 800b2c2:	3b15      	subs	r3, #21
 800b2c4:	f023 0303 	bic.w	r3, r3, #3
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	f104 0015 	add.w	r0, r4, #21
 800b2ce:	4584      	cmp	ip, r0
 800b2d0:	bf38      	it	cc
 800b2d2:	2304      	movcc	r3, #4
 800b2d4:	50ca      	str	r2, [r1, r3]
 800b2d6:	b10a      	cbz	r2, 800b2dc <__lshift+0xa4>
 800b2d8:	f108 0602 	add.w	r6, r8, #2
 800b2dc:	3e01      	subs	r6, #1
 800b2de:	4638      	mov	r0, r7
 800b2e0:	612e      	str	r6, [r5, #16]
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	f7ff fdd6 	bl	800ae94 <_Bfree>
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	e7c5      	b.n	800b282 <__lshift+0x4a>
 800b2f6:	3904      	subs	r1, #4
 800b2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b300:	459c      	cmp	ip, r3
 800b302:	d8f9      	bhi.n	800b2f8 <__lshift+0xc0>
 800b304:	e7ea      	b.n	800b2dc <__lshift+0xa4>
 800b306:	bf00      	nop
 800b308:	0800c843 	.word	0x0800c843
 800b30c:	0800c8b4 	.word	0x0800c8b4

0800b310 <__mcmp>:
 800b310:	b530      	push	{r4, r5, lr}
 800b312:	6902      	ldr	r2, [r0, #16]
 800b314:	690c      	ldr	r4, [r1, #16]
 800b316:	1b12      	subs	r2, r2, r4
 800b318:	d10e      	bne.n	800b338 <__mcmp+0x28>
 800b31a:	f100 0314 	add.w	r3, r0, #20
 800b31e:	3114      	adds	r1, #20
 800b320:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b324:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b328:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b32c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b330:	42a5      	cmp	r5, r4
 800b332:	d003      	beq.n	800b33c <__mcmp+0x2c>
 800b334:	d305      	bcc.n	800b342 <__mcmp+0x32>
 800b336:	2201      	movs	r2, #1
 800b338:	4610      	mov	r0, r2
 800b33a:	bd30      	pop	{r4, r5, pc}
 800b33c:	4283      	cmp	r3, r0
 800b33e:	d3f3      	bcc.n	800b328 <__mcmp+0x18>
 800b340:	e7fa      	b.n	800b338 <__mcmp+0x28>
 800b342:	f04f 32ff 	mov.w	r2, #4294967295
 800b346:	e7f7      	b.n	800b338 <__mcmp+0x28>

0800b348 <__mdiff>:
 800b348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	460c      	mov	r4, r1
 800b34e:	4606      	mov	r6, r0
 800b350:	4611      	mov	r1, r2
 800b352:	4620      	mov	r0, r4
 800b354:	4617      	mov	r7, r2
 800b356:	f7ff ffdb 	bl	800b310 <__mcmp>
 800b35a:	1e05      	subs	r5, r0, #0
 800b35c:	d110      	bne.n	800b380 <__mdiff+0x38>
 800b35e:	4629      	mov	r1, r5
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff fd57 	bl	800ae14 <_Balloc>
 800b366:	b930      	cbnz	r0, 800b376 <__mdiff+0x2e>
 800b368:	4b39      	ldr	r3, [pc, #228]	; (800b450 <__mdiff+0x108>)
 800b36a:	4602      	mov	r2, r0
 800b36c:	f240 2132 	movw	r1, #562	; 0x232
 800b370:	4838      	ldr	r0, [pc, #224]	; (800b454 <__mdiff+0x10c>)
 800b372:	f000 fb93 	bl	800ba9c <__assert_func>
 800b376:	2301      	movs	r3, #1
 800b378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b37c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b380:	bfa4      	itt	ge
 800b382:	463b      	movge	r3, r7
 800b384:	4627      	movge	r7, r4
 800b386:	4630      	mov	r0, r6
 800b388:	6879      	ldr	r1, [r7, #4]
 800b38a:	bfa6      	itte	ge
 800b38c:	461c      	movge	r4, r3
 800b38e:	2500      	movge	r5, #0
 800b390:	2501      	movlt	r5, #1
 800b392:	f7ff fd3f 	bl	800ae14 <_Balloc>
 800b396:	b920      	cbnz	r0, 800b3a2 <__mdiff+0x5a>
 800b398:	4b2d      	ldr	r3, [pc, #180]	; (800b450 <__mdiff+0x108>)
 800b39a:	4602      	mov	r2, r0
 800b39c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3a0:	e7e6      	b.n	800b370 <__mdiff+0x28>
 800b3a2:	693e      	ldr	r6, [r7, #16]
 800b3a4:	60c5      	str	r5, [r0, #12]
 800b3a6:	6925      	ldr	r5, [r4, #16]
 800b3a8:	f107 0114 	add.w	r1, r7, #20
 800b3ac:	f104 0914 	add.w	r9, r4, #20
 800b3b0:	f100 0e14 	add.w	lr, r0, #20
 800b3b4:	f107 0210 	add.w	r2, r7, #16
 800b3b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b3bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b3c0:	46f2      	mov	sl, lr
 800b3c2:	2700      	movs	r7, #0
 800b3c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3cc:	fa1f f883 	uxth.w	r8, r3
 800b3d0:	fa17 f78b 	uxtah	r7, r7, fp
 800b3d4:	0c1b      	lsrs	r3, r3, #16
 800b3d6:	eba7 0808 	sub.w	r8, r7, r8
 800b3da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3e2:	fa1f f888 	uxth.w	r8, r8
 800b3e6:	141f      	asrs	r7, r3, #16
 800b3e8:	454d      	cmp	r5, r9
 800b3ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3ee:	f84a 3b04 	str.w	r3, [sl], #4
 800b3f2:	d8e7      	bhi.n	800b3c4 <__mdiff+0x7c>
 800b3f4:	1b2b      	subs	r3, r5, r4
 800b3f6:	3b15      	subs	r3, #21
 800b3f8:	f023 0303 	bic.w	r3, r3, #3
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	3415      	adds	r4, #21
 800b400:	42a5      	cmp	r5, r4
 800b402:	bf38      	it	cc
 800b404:	2304      	movcc	r3, #4
 800b406:	4419      	add	r1, r3
 800b408:	4473      	add	r3, lr
 800b40a:	469e      	mov	lr, r3
 800b40c:	460d      	mov	r5, r1
 800b40e:	4565      	cmp	r5, ip
 800b410:	d30e      	bcc.n	800b430 <__mdiff+0xe8>
 800b412:	f10c 0203 	add.w	r2, ip, #3
 800b416:	1a52      	subs	r2, r2, r1
 800b418:	f022 0203 	bic.w	r2, r2, #3
 800b41c:	3903      	subs	r1, #3
 800b41e:	458c      	cmp	ip, r1
 800b420:	bf38      	it	cc
 800b422:	2200      	movcc	r2, #0
 800b424:	441a      	add	r2, r3
 800b426:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b42a:	b17b      	cbz	r3, 800b44c <__mdiff+0x104>
 800b42c:	6106      	str	r6, [r0, #16]
 800b42e:	e7a5      	b.n	800b37c <__mdiff+0x34>
 800b430:	f855 8b04 	ldr.w	r8, [r5], #4
 800b434:	fa17 f488 	uxtah	r4, r7, r8
 800b438:	1422      	asrs	r2, r4, #16
 800b43a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b43e:	b2a4      	uxth	r4, r4
 800b440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b444:	f84e 4b04 	str.w	r4, [lr], #4
 800b448:	1417      	asrs	r7, r2, #16
 800b44a:	e7e0      	b.n	800b40e <__mdiff+0xc6>
 800b44c:	3e01      	subs	r6, #1
 800b44e:	e7ea      	b.n	800b426 <__mdiff+0xde>
 800b450:	0800c843 	.word	0x0800c843
 800b454:	0800c8b4 	.word	0x0800c8b4

0800b458 <__d2b>:
 800b458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b45c:	4689      	mov	r9, r1
 800b45e:	2101      	movs	r1, #1
 800b460:	ec57 6b10 	vmov	r6, r7, d0
 800b464:	4690      	mov	r8, r2
 800b466:	f7ff fcd5 	bl	800ae14 <_Balloc>
 800b46a:	4604      	mov	r4, r0
 800b46c:	b930      	cbnz	r0, 800b47c <__d2b+0x24>
 800b46e:	4602      	mov	r2, r0
 800b470:	4b25      	ldr	r3, [pc, #148]	; (800b508 <__d2b+0xb0>)
 800b472:	4826      	ldr	r0, [pc, #152]	; (800b50c <__d2b+0xb4>)
 800b474:	f240 310a 	movw	r1, #778	; 0x30a
 800b478:	f000 fb10 	bl	800ba9c <__assert_func>
 800b47c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b484:	bb35      	cbnz	r5, 800b4d4 <__d2b+0x7c>
 800b486:	2e00      	cmp	r6, #0
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	d028      	beq.n	800b4de <__d2b+0x86>
 800b48c:	4668      	mov	r0, sp
 800b48e:	9600      	str	r6, [sp, #0]
 800b490:	f7ff fd8c 	bl	800afac <__lo0bits>
 800b494:	9900      	ldr	r1, [sp, #0]
 800b496:	b300      	cbz	r0, 800b4da <__d2b+0x82>
 800b498:	9a01      	ldr	r2, [sp, #4]
 800b49a:	f1c0 0320 	rsb	r3, r0, #32
 800b49e:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	40c2      	lsrs	r2, r0
 800b4a6:	6163      	str	r3, [r4, #20]
 800b4a8:	9201      	str	r2, [sp, #4]
 800b4aa:	9b01      	ldr	r3, [sp, #4]
 800b4ac:	61a3      	str	r3, [r4, #24]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bf14      	ite	ne
 800b4b2:	2202      	movne	r2, #2
 800b4b4:	2201      	moveq	r2, #1
 800b4b6:	6122      	str	r2, [r4, #16]
 800b4b8:	b1d5      	cbz	r5, 800b4f0 <__d2b+0x98>
 800b4ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4be:	4405      	add	r5, r0
 800b4c0:	f8c9 5000 	str.w	r5, [r9]
 800b4c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4c8:	f8c8 0000 	str.w	r0, [r8]
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	b003      	add	sp, #12
 800b4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4d8:	e7d5      	b.n	800b486 <__d2b+0x2e>
 800b4da:	6161      	str	r1, [r4, #20]
 800b4dc:	e7e5      	b.n	800b4aa <__d2b+0x52>
 800b4de:	a801      	add	r0, sp, #4
 800b4e0:	f7ff fd64 	bl	800afac <__lo0bits>
 800b4e4:	9b01      	ldr	r3, [sp, #4]
 800b4e6:	6163      	str	r3, [r4, #20]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	6122      	str	r2, [r4, #16]
 800b4ec:	3020      	adds	r0, #32
 800b4ee:	e7e3      	b.n	800b4b8 <__d2b+0x60>
 800b4f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4f8:	f8c9 0000 	str.w	r0, [r9]
 800b4fc:	6918      	ldr	r0, [r3, #16]
 800b4fe:	f7ff fd35 	bl	800af6c <__hi0bits>
 800b502:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b506:	e7df      	b.n	800b4c8 <__d2b+0x70>
 800b508:	0800c843 	.word	0x0800c843
 800b50c:	0800c8b4 	.word	0x0800c8b4

0800b510 <_calloc_r>:
 800b510:	b513      	push	{r0, r1, r4, lr}
 800b512:	434a      	muls	r2, r1
 800b514:	4611      	mov	r1, r2
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	f7fd fff8 	bl	800950c <_malloc_r>
 800b51c:	4604      	mov	r4, r0
 800b51e:	b118      	cbz	r0, 800b528 <_calloc_r+0x18>
 800b520:	9a01      	ldr	r2, [sp, #4]
 800b522:	2100      	movs	r1, #0
 800b524:	f7fd ff9a 	bl	800945c <memset>
 800b528:	4620      	mov	r0, r4
 800b52a:	b002      	add	sp, #8
 800b52c:	bd10      	pop	{r4, pc}

0800b52e <__sfputc_r>:
 800b52e:	6893      	ldr	r3, [r2, #8]
 800b530:	3b01      	subs	r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	b410      	push	{r4}
 800b536:	6093      	str	r3, [r2, #8]
 800b538:	da08      	bge.n	800b54c <__sfputc_r+0x1e>
 800b53a:	6994      	ldr	r4, [r2, #24]
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	db01      	blt.n	800b544 <__sfputc_r+0x16>
 800b540:	290a      	cmp	r1, #10
 800b542:	d103      	bne.n	800b54c <__sfputc_r+0x1e>
 800b544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b548:	f000 b9d6 	b.w	800b8f8 <__swbuf_r>
 800b54c:	6813      	ldr	r3, [r2, #0]
 800b54e:	1c58      	adds	r0, r3, #1
 800b550:	6010      	str	r0, [r2, #0]
 800b552:	7019      	strb	r1, [r3, #0]
 800b554:	4608      	mov	r0, r1
 800b556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <__sfputs_r>:
 800b55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55e:	4606      	mov	r6, r0
 800b560:	460f      	mov	r7, r1
 800b562:	4614      	mov	r4, r2
 800b564:	18d5      	adds	r5, r2, r3
 800b566:	42ac      	cmp	r4, r5
 800b568:	d101      	bne.n	800b56e <__sfputs_r+0x12>
 800b56a:	2000      	movs	r0, #0
 800b56c:	e007      	b.n	800b57e <__sfputs_r+0x22>
 800b56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b572:	463a      	mov	r2, r7
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff ffda 	bl	800b52e <__sfputc_r>
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	d1f3      	bne.n	800b566 <__sfputs_r+0xa>
 800b57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b580 <_vfiprintf_r>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	460d      	mov	r5, r1
 800b586:	b09d      	sub	sp, #116	; 0x74
 800b588:	4614      	mov	r4, r2
 800b58a:	4698      	mov	r8, r3
 800b58c:	4606      	mov	r6, r0
 800b58e:	b118      	cbz	r0, 800b598 <_vfiprintf_r+0x18>
 800b590:	6983      	ldr	r3, [r0, #24]
 800b592:	b90b      	cbnz	r3, 800b598 <_vfiprintf_r+0x18>
 800b594:	f7ff fb8c 	bl	800acb0 <__sinit>
 800b598:	4b89      	ldr	r3, [pc, #548]	; (800b7c0 <_vfiprintf_r+0x240>)
 800b59a:	429d      	cmp	r5, r3
 800b59c:	d11b      	bne.n	800b5d6 <_vfiprintf_r+0x56>
 800b59e:	6875      	ldr	r5, [r6, #4]
 800b5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5a2:	07d9      	lsls	r1, r3, #31
 800b5a4:	d405      	bmi.n	800b5b2 <_vfiprintf_r+0x32>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	059a      	lsls	r2, r3, #22
 800b5aa:	d402      	bmi.n	800b5b2 <_vfiprintf_r+0x32>
 800b5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5ae:	f7ff fc22 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800b5b2:	89ab      	ldrh	r3, [r5, #12]
 800b5b4:	071b      	lsls	r3, r3, #28
 800b5b6:	d501      	bpl.n	800b5bc <_vfiprintf_r+0x3c>
 800b5b8:	692b      	ldr	r3, [r5, #16]
 800b5ba:	b9eb      	cbnz	r3, 800b5f8 <_vfiprintf_r+0x78>
 800b5bc:	4629      	mov	r1, r5
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f000 f9fe 	bl	800b9c0 <__swsetup_r>
 800b5c4:	b1c0      	cbz	r0, 800b5f8 <_vfiprintf_r+0x78>
 800b5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5c8:	07dc      	lsls	r4, r3, #31
 800b5ca:	d50e      	bpl.n	800b5ea <_vfiprintf_r+0x6a>
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	b01d      	add	sp, #116	; 0x74
 800b5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d6:	4b7b      	ldr	r3, [pc, #492]	; (800b7c4 <_vfiprintf_r+0x244>)
 800b5d8:	429d      	cmp	r5, r3
 800b5da:	d101      	bne.n	800b5e0 <_vfiprintf_r+0x60>
 800b5dc:	68b5      	ldr	r5, [r6, #8]
 800b5de:	e7df      	b.n	800b5a0 <_vfiprintf_r+0x20>
 800b5e0:	4b79      	ldr	r3, [pc, #484]	; (800b7c8 <_vfiprintf_r+0x248>)
 800b5e2:	429d      	cmp	r5, r3
 800b5e4:	bf08      	it	eq
 800b5e6:	68f5      	ldreq	r5, [r6, #12]
 800b5e8:	e7da      	b.n	800b5a0 <_vfiprintf_r+0x20>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	0598      	lsls	r0, r3, #22
 800b5ee:	d4ed      	bmi.n	800b5cc <_vfiprintf_r+0x4c>
 800b5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5f2:	f7ff fc01 	bl	800adf8 <__retarget_lock_release_recursive>
 800b5f6:	e7e9      	b.n	800b5cc <_vfiprintf_r+0x4c>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fc:	2320      	movs	r3, #32
 800b5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b602:	f8cd 800c 	str.w	r8, [sp, #12]
 800b606:	2330      	movs	r3, #48	; 0x30
 800b608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7cc <_vfiprintf_r+0x24c>
 800b60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b610:	f04f 0901 	mov.w	r9, #1
 800b614:	4623      	mov	r3, r4
 800b616:	469a      	mov	sl, r3
 800b618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b61c:	b10a      	cbz	r2, 800b622 <_vfiprintf_r+0xa2>
 800b61e:	2a25      	cmp	r2, #37	; 0x25
 800b620:	d1f9      	bne.n	800b616 <_vfiprintf_r+0x96>
 800b622:	ebba 0b04 	subs.w	fp, sl, r4
 800b626:	d00b      	beq.n	800b640 <_vfiprintf_r+0xc0>
 800b628:	465b      	mov	r3, fp
 800b62a:	4622      	mov	r2, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff94 	bl	800b55c <__sfputs_r>
 800b634:	3001      	adds	r0, #1
 800b636:	f000 80aa 	beq.w	800b78e <_vfiprintf_r+0x20e>
 800b63a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b63c:	445a      	add	r2, fp
 800b63e:	9209      	str	r2, [sp, #36]	; 0x24
 800b640:	f89a 3000 	ldrb.w	r3, [sl]
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 80a2 	beq.w	800b78e <_vfiprintf_r+0x20e>
 800b64a:	2300      	movs	r3, #0
 800b64c:	f04f 32ff 	mov.w	r2, #4294967295
 800b650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b654:	f10a 0a01 	add.w	sl, sl, #1
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b660:	931a      	str	r3, [sp, #104]	; 0x68
 800b662:	4654      	mov	r4, sl
 800b664:	2205      	movs	r2, #5
 800b666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66a:	4858      	ldr	r0, [pc, #352]	; (800b7cc <_vfiprintf_r+0x24c>)
 800b66c:	f7f4 fdb8 	bl	80001e0 <memchr>
 800b670:	9a04      	ldr	r2, [sp, #16]
 800b672:	b9d8      	cbnz	r0, 800b6ac <_vfiprintf_r+0x12c>
 800b674:	06d1      	lsls	r1, r2, #27
 800b676:	bf44      	itt	mi
 800b678:	2320      	movmi	r3, #32
 800b67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b67e:	0713      	lsls	r3, r2, #28
 800b680:	bf44      	itt	mi
 800b682:	232b      	movmi	r3, #43	; 0x2b
 800b684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b688:	f89a 3000 	ldrb.w	r3, [sl]
 800b68c:	2b2a      	cmp	r3, #42	; 0x2a
 800b68e:	d015      	beq.n	800b6bc <_vfiprintf_r+0x13c>
 800b690:	9a07      	ldr	r2, [sp, #28]
 800b692:	4654      	mov	r4, sl
 800b694:	2000      	movs	r0, #0
 800b696:	f04f 0c0a 	mov.w	ip, #10
 800b69a:	4621      	mov	r1, r4
 800b69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6a0:	3b30      	subs	r3, #48	; 0x30
 800b6a2:	2b09      	cmp	r3, #9
 800b6a4:	d94e      	bls.n	800b744 <_vfiprintf_r+0x1c4>
 800b6a6:	b1b0      	cbz	r0, 800b6d6 <_vfiprintf_r+0x156>
 800b6a8:	9207      	str	r2, [sp, #28]
 800b6aa:	e014      	b.n	800b6d6 <_vfiprintf_r+0x156>
 800b6ac:	eba0 0308 	sub.w	r3, r0, r8
 800b6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	9304      	str	r3, [sp, #16]
 800b6b8:	46a2      	mov	sl, r4
 800b6ba:	e7d2      	b.n	800b662 <_vfiprintf_r+0xe2>
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	1d19      	adds	r1, r3, #4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	9103      	str	r1, [sp, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfbb      	ittet	lt
 800b6c8:	425b      	neglt	r3, r3
 800b6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b6ce:	9307      	strge	r3, [sp, #28]
 800b6d0:	9307      	strlt	r3, [sp, #28]
 800b6d2:	bfb8      	it	lt
 800b6d4:	9204      	strlt	r2, [sp, #16]
 800b6d6:	7823      	ldrb	r3, [r4, #0]
 800b6d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b6da:	d10c      	bne.n	800b6f6 <_vfiprintf_r+0x176>
 800b6dc:	7863      	ldrb	r3, [r4, #1]
 800b6de:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e0:	d135      	bne.n	800b74e <_vfiprintf_r+0x1ce>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	1d1a      	adds	r2, r3, #4
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	9203      	str	r2, [sp, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	bfb8      	it	lt
 800b6ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6f2:	3402      	adds	r4, #2
 800b6f4:	9305      	str	r3, [sp, #20]
 800b6f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7dc <_vfiprintf_r+0x25c>
 800b6fa:	7821      	ldrb	r1, [r4, #0]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	4650      	mov	r0, sl
 800b700:	f7f4 fd6e 	bl	80001e0 <memchr>
 800b704:	b140      	cbz	r0, 800b718 <_vfiprintf_r+0x198>
 800b706:	2340      	movs	r3, #64	; 0x40
 800b708:	eba0 000a 	sub.w	r0, r0, sl
 800b70c:	fa03 f000 	lsl.w	r0, r3, r0
 800b710:	9b04      	ldr	r3, [sp, #16]
 800b712:	4303      	orrs	r3, r0
 800b714:	3401      	adds	r4, #1
 800b716:	9304      	str	r3, [sp, #16]
 800b718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71c:	482c      	ldr	r0, [pc, #176]	; (800b7d0 <_vfiprintf_r+0x250>)
 800b71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b722:	2206      	movs	r2, #6
 800b724:	f7f4 fd5c 	bl	80001e0 <memchr>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d03f      	beq.n	800b7ac <_vfiprintf_r+0x22c>
 800b72c:	4b29      	ldr	r3, [pc, #164]	; (800b7d4 <_vfiprintf_r+0x254>)
 800b72e:	bb1b      	cbnz	r3, 800b778 <_vfiprintf_r+0x1f8>
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	3307      	adds	r3, #7
 800b734:	f023 0307 	bic.w	r3, r3, #7
 800b738:	3308      	adds	r3, #8
 800b73a:	9303      	str	r3, [sp, #12]
 800b73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b73e:	443b      	add	r3, r7
 800b740:	9309      	str	r3, [sp, #36]	; 0x24
 800b742:	e767      	b.n	800b614 <_vfiprintf_r+0x94>
 800b744:	fb0c 3202 	mla	r2, ip, r2, r3
 800b748:	460c      	mov	r4, r1
 800b74a:	2001      	movs	r0, #1
 800b74c:	e7a5      	b.n	800b69a <_vfiprintf_r+0x11a>
 800b74e:	2300      	movs	r3, #0
 800b750:	3401      	adds	r4, #1
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	4619      	mov	r1, r3
 800b756:	f04f 0c0a 	mov.w	ip, #10
 800b75a:	4620      	mov	r0, r4
 800b75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b760:	3a30      	subs	r2, #48	; 0x30
 800b762:	2a09      	cmp	r2, #9
 800b764:	d903      	bls.n	800b76e <_vfiprintf_r+0x1ee>
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0c5      	beq.n	800b6f6 <_vfiprintf_r+0x176>
 800b76a:	9105      	str	r1, [sp, #20]
 800b76c:	e7c3      	b.n	800b6f6 <_vfiprintf_r+0x176>
 800b76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b772:	4604      	mov	r4, r0
 800b774:	2301      	movs	r3, #1
 800b776:	e7f0      	b.n	800b75a <_vfiprintf_r+0x1da>
 800b778:	ab03      	add	r3, sp, #12
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	462a      	mov	r2, r5
 800b77e:	4b16      	ldr	r3, [pc, #88]	; (800b7d8 <_vfiprintf_r+0x258>)
 800b780:	a904      	add	r1, sp, #16
 800b782:	4630      	mov	r0, r6
 800b784:	f7fd ffbc 	bl	8009700 <_printf_float>
 800b788:	4607      	mov	r7, r0
 800b78a:	1c78      	adds	r0, r7, #1
 800b78c:	d1d6      	bne.n	800b73c <_vfiprintf_r+0x1bc>
 800b78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b790:	07d9      	lsls	r1, r3, #31
 800b792:	d405      	bmi.n	800b7a0 <_vfiprintf_r+0x220>
 800b794:	89ab      	ldrh	r3, [r5, #12]
 800b796:	059a      	lsls	r2, r3, #22
 800b798:	d402      	bmi.n	800b7a0 <_vfiprintf_r+0x220>
 800b79a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b79c:	f7ff fb2c 	bl	800adf8 <__retarget_lock_release_recursive>
 800b7a0:	89ab      	ldrh	r3, [r5, #12]
 800b7a2:	065b      	lsls	r3, r3, #25
 800b7a4:	f53f af12 	bmi.w	800b5cc <_vfiprintf_r+0x4c>
 800b7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7aa:	e711      	b.n	800b5d0 <_vfiprintf_r+0x50>
 800b7ac:	ab03      	add	r3, sp, #12
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	462a      	mov	r2, r5
 800b7b2:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <_vfiprintf_r+0x258>)
 800b7b4:	a904      	add	r1, sp, #16
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7fe fa46 	bl	8009c48 <_printf_i>
 800b7bc:	e7e4      	b.n	800b788 <_vfiprintf_r+0x208>
 800b7be:	bf00      	nop
 800b7c0:	0800c874 	.word	0x0800c874
 800b7c4:	0800c894 	.word	0x0800c894
 800b7c8:	0800c854 	.word	0x0800c854
 800b7cc:	0800ca14 	.word	0x0800ca14
 800b7d0:	0800ca1e 	.word	0x0800ca1e
 800b7d4:	08009701 	.word	0x08009701
 800b7d8:	0800b55d 	.word	0x0800b55d
 800b7dc:	0800ca1a 	.word	0x0800ca1a

0800b7e0 <_putc_r>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	b118      	cbz	r0, 800b7f2 <_putc_r+0x12>
 800b7ea:	6983      	ldr	r3, [r0, #24]
 800b7ec:	b90b      	cbnz	r3, 800b7f2 <_putc_r+0x12>
 800b7ee:	f7ff fa5f 	bl	800acb0 <__sinit>
 800b7f2:	4b1c      	ldr	r3, [pc, #112]	; (800b864 <_putc_r+0x84>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	d124      	bne.n	800b842 <_putc_r+0x62>
 800b7f8:	6874      	ldr	r4, [r6, #4]
 800b7fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7fc:	07d8      	lsls	r0, r3, #31
 800b7fe:	d405      	bmi.n	800b80c <_putc_r+0x2c>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	0599      	lsls	r1, r3, #22
 800b804:	d402      	bmi.n	800b80c <_putc_r+0x2c>
 800b806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b808:	f7ff faf5 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800b80c:	68a3      	ldr	r3, [r4, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	60a3      	str	r3, [r4, #8]
 800b814:	da05      	bge.n	800b822 <_putc_r+0x42>
 800b816:	69a2      	ldr	r2, [r4, #24]
 800b818:	4293      	cmp	r3, r2
 800b81a:	db1c      	blt.n	800b856 <_putc_r+0x76>
 800b81c:	b2eb      	uxtb	r3, r5
 800b81e:	2b0a      	cmp	r3, #10
 800b820:	d019      	beq.n	800b856 <_putc_r+0x76>
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	6022      	str	r2, [r4, #0]
 800b828:	701d      	strb	r5, [r3, #0]
 800b82a:	b2ed      	uxtb	r5, r5
 800b82c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b82e:	07da      	lsls	r2, r3, #31
 800b830:	d405      	bmi.n	800b83e <_putc_r+0x5e>
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	059b      	lsls	r3, r3, #22
 800b836:	d402      	bmi.n	800b83e <_putc_r+0x5e>
 800b838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b83a:	f7ff fadd 	bl	800adf8 <__retarget_lock_release_recursive>
 800b83e:	4628      	mov	r0, r5
 800b840:	bd70      	pop	{r4, r5, r6, pc}
 800b842:	4b09      	ldr	r3, [pc, #36]	; (800b868 <_putc_r+0x88>)
 800b844:	429c      	cmp	r4, r3
 800b846:	d101      	bne.n	800b84c <_putc_r+0x6c>
 800b848:	68b4      	ldr	r4, [r6, #8]
 800b84a:	e7d6      	b.n	800b7fa <_putc_r+0x1a>
 800b84c:	4b07      	ldr	r3, [pc, #28]	; (800b86c <_putc_r+0x8c>)
 800b84e:	429c      	cmp	r4, r3
 800b850:	bf08      	it	eq
 800b852:	68f4      	ldreq	r4, [r6, #12]
 800b854:	e7d1      	b.n	800b7fa <_putc_r+0x1a>
 800b856:	4629      	mov	r1, r5
 800b858:	4622      	mov	r2, r4
 800b85a:	4630      	mov	r0, r6
 800b85c:	f000 f84c 	bl	800b8f8 <__swbuf_r>
 800b860:	4605      	mov	r5, r0
 800b862:	e7e3      	b.n	800b82c <_putc_r+0x4c>
 800b864:	0800c874 	.word	0x0800c874
 800b868:	0800c894 	.word	0x0800c894
 800b86c:	0800c854 	.word	0x0800c854

0800b870 <__sread>:
 800b870:	b510      	push	{r4, lr}
 800b872:	460c      	mov	r4, r1
 800b874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b878:	f000 fa9a 	bl	800bdb0 <_read_r>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	bfab      	itete	ge
 800b880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b882:	89a3      	ldrhlt	r3, [r4, #12]
 800b884:	181b      	addge	r3, r3, r0
 800b886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b88a:	bfac      	ite	ge
 800b88c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b88e:	81a3      	strhlt	r3, [r4, #12]
 800b890:	bd10      	pop	{r4, pc}

0800b892 <__swrite>:
 800b892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b896:	461f      	mov	r7, r3
 800b898:	898b      	ldrh	r3, [r1, #12]
 800b89a:	05db      	lsls	r3, r3, #23
 800b89c:	4605      	mov	r5, r0
 800b89e:	460c      	mov	r4, r1
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	d505      	bpl.n	800b8b0 <__swrite+0x1e>
 800b8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f000 f9f8 	bl	800bca0 <_lseek_r>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	4632      	mov	r2, r6
 800b8be:	463b      	mov	r3, r7
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c6:	f000 b869 	b.w	800b99c <_write_r>

0800b8ca <__sseek>:
 800b8ca:	b510      	push	{r4, lr}
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d2:	f000 f9e5 	bl	800bca0 <_lseek_r>
 800b8d6:	1c43      	adds	r3, r0, #1
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	bf15      	itete	ne
 800b8dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8e6:	81a3      	strheq	r3, [r4, #12]
 800b8e8:	bf18      	it	ne
 800b8ea:	81a3      	strhne	r3, [r4, #12]
 800b8ec:	bd10      	pop	{r4, pc}

0800b8ee <__sclose>:
 800b8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f2:	f000 b8f1 	b.w	800bad8 <_close_r>
	...

0800b8f8 <__swbuf_r>:
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	460e      	mov	r6, r1
 800b8fc:	4614      	mov	r4, r2
 800b8fe:	4605      	mov	r5, r0
 800b900:	b118      	cbz	r0, 800b90a <__swbuf_r+0x12>
 800b902:	6983      	ldr	r3, [r0, #24]
 800b904:	b90b      	cbnz	r3, 800b90a <__swbuf_r+0x12>
 800b906:	f7ff f9d3 	bl	800acb0 <__sinit>
 800b90a:	4b21      	ldr	r3, [pc, #132]	; (800b990 <__swbuf_r+0x98>)
 800b90c:	429c      	cmp	r4, r3
 800b90e:	d12b      	bne.n	800b968 <__swbuf_r+0x70>
 800b910:	686c      	ldr	r4, [r5, #4]
 800b912:	69a3      	ldr	r3, [r4, #24]
 800b914:	60a3      	str	r3, [r4, #8]
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	071a      	lsls	r2, r3, #28
 800b91a:	d52f      	bpl.n	800b97c <__swbuf_r+0x84>
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	b36b      	cbz	r3, 800b97c <__swbuf_r+0x84>
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	6820      	ldr	r0, [r4, #0]
 800b924:	1ac0      	subs	r0, r0, r3
 800b926:	6963      	ldr	r3, [r4, #20]
 800b928:	b2f6      	uxtb	r6, r6
 800b92a:	4283      	cmp	r3, r0
 800b92c:	4637      	mov	r7, r6
 800b92e:	dc04      	bgt.n	800b93a <__swbuf_r+0x42>
 800b930:	4621      	mov	r1, r4
 800b932:	4628      	mov	r0, r5
 800b934:	f000 f966 	bl	800bc04 <_fflush_r>
 800b938:	bb30      	cbnz	r0, 800b988 <__swbuf_r+0x90>
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	60a3      	str	r3, [r4, #8]
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	6022      	str	r2, [r4, #0]
 800b946:	701e      	strb	r6, [r3, #0]
 800b948:	6963      	ldr	r3, [r4, #20]
 800b94a:	3001      	adds	r0, #1
 800b94c:	4283      	cmp	r3, r0
 800b94e:	d004      	beq.n	800b95a <__swbuf_r+0x62>
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	07db      	lsls	r3, r3, #31
 800b954:	d506      	bpl.n	800b964 <__swbuf_r+0x6c>
 800b956:	2e0a      	cmp	r6, #10
 800b958:	d104      	bne.n	800b964 <__swbuf_r+0x6c>
 800b95a:	4621      	mov	r1, r4
 800b95c:	4628      	mov	r0, r5
 800b95e:	f000 f951 	bl	800bc04 <_fflush_r>
 800b962:	b988      	cbnz	r0, 800b988 <__swbuf_r+0x90>
 800b964:	4638      	mov	r0, r7
 800b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <__swbuf_r+0x9c>)
 800b96a:	429c      	cmp	r4, r3
 800b96c:	d101      	bne.n	800b972 <__swbuf_r+0x7a>
 800b96e:	68ac      	ldr	r4, [r5, #8]
 800b970:	e7cf      	b.n	800b912 <__swbuf_r+0x1a>
 800b972:	4b09      	ldr	r3, [pc, #36]	; (800b998 <__swbuf_r+0xa0>)
 800b974:	429c      	cmp	r4, r3
 800b976:	bf08      	it	eq
 800b978:	68ec      	ldreq	r4, [r5, #12]
 800b97a:	e7ca      	b.n	800b912 <__swbuf_r+0x1a>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 f81e 	bl	800b9c0 <__swsetup_r>
 800b984:	2800      	cmp	r0, #0
 800b986:	d0cb      	beq.n	800b920 <__swbuf_r+0x28>
 800b988:	f04f 37ff 	mov.w	r7, #4294967295
 800b98c:	e7ea      	b.n	800b964 <__swbuf_r+0x6c>
 800b98e:	bf00      	nop
 800b990:	0800c874 	.word	0x0800c874
 800b994:	0800c894 	.word	0x0800c894
 800b998:	0800c854 	.word	0x0800c854

0800b99c <_write_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	; (800b9bc <_write_r+0x20>)
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	4608      	mov	r0, r1
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	602a      	str	r2, [r5, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f7f5 fae2 	bl	8000f74 <_write>
 800b9b0:	1c43      	adds	r3, r0, #1
 800b9b2:	d102      	bne.n	800b9ba <_write_r+0x1e>
 800b9b4:	682b      	ldr	r3, [r5, #0]
 800b9b6:	b103      	cbz	r3, 800b9ba <_write_r+0x1e>
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	2000211c 	.word	0x2000211c

0800b9c0 <__swsetup_r>:
 800b9c0:	4b32      	ldr	r3, [pc, #200]	; (800ba8c <__swsetup_r+0xcc>)
 800b9c2:	b570      	push	{r4, r5, r6, lr}
 800b9c4:	681d      	ldr	r5, [r3, #0]
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	b125      	cbz	r5, 800b9d6 <__swsetup_r+0x16>
 800b9cc:	69ab      	ldr	r3, [r5, #24]
 800b9ce:	b913      	cbnz	r3, 800b9d6 <__swsetup_r+0x16>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f7ff f96d 	bl	800acb0 <__sinit>
 800b9d6:	4b2e      	ldr	r3, [pc, #184]	; (800ba90 <__swsetup_r+0xd0>)
 800b9d8:	429c      	cmp	r4, r3
 800b9da:	d10f      	bne.n	800b9fc <__swsetup_r+0x3c>
 800b9dc:	686c      	ldr	r4, [r5, #4]
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9e4:	0719      	lsls	r1, r3, #28
 800b9e6:	d42c      	bmi.n	800ba42 <__swsetup_r+0x82>
 800b9e8:	06dd      	lsls	r5, r3, #27
 800b9ea:	d411      	bmi.n	800ba10 <__swsetup_r+0x50>
 800b9ec:	2309      	movs	r3, #9
 800b9ee:	6033      	str	r3, [r6, #0]
 800b9f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fa:	e03e      	b.n	800ba7a <__swsetup_r+0xba>
 800b9fc:	4b25      	ldr	r3, [pc, #148]	; (800ba94 <__swsetup_r+0xd4>)
 800b9fe:	429c      	cmp	r4, r3
 800ba00:	d101      	bne.n	800ba06 <__swsetup_r+0x46>
 800ba02:	68ac      	ldr	r4, [r5, #8]
 800ba04:	e7eb      	b.n	800b9de <__swsetup_r+0x1e>
 800ba06:	4b24      	ldr	r3, [pc, #144]	; (800ba98 <__swsetup_r+0xd8>)
 800ba08:	429c      	cmp	r4, r3
 800ba0a:	bf08      	it	eq
 800ba0c:	68ec      	ldreq	r4, [r5, #12]
 800ba0e:	e7e6      	b.n	800b9de <__swsetup_r+0x1e>
 800ba10:	0758      	lsls	r0, r3, #29
 800ba12:	d512      	bpl.n	800ba3a <__swsetup_r+0x7a>
 800ba14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba16:	b141      	cbz	r1, 800ba2a <__swsetup_r+0x6a>
 800ba18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba1c:	4299      	cmp	r1, r3
 800ba1e:	d002      	beq.n	800ba26 <__swsetup_r+0x66>
 800ba20:	4630      	mov	r0, r6
 800ba22:	f7fd fd23 	bl	800946c <_free_r>
 800ba26:	2300      	movs	r3, #0
 800ba28:	6363      	str	r3, [r4, #52]	; 0x34
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	2300      	movs	r3, #0
 800ba34:	6063      	str	r3, [r4, #4]
 800ba36:	6923      	ldr	r3, [r4, #16]
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	89a3      	ldrh	r3, [r4, #12]
 800ba3c:	f043 0308 	orr.w	r3, r3, #8
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	6923      	ldr	r3, [r4, #16]
 800ba44:	b94b      	cbnz	r3, 800ba5a <__swsetup_r+0x9a>
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba50:	d003      	beq.n	800ba5a <__swsetup_r+0x9a>
 800ba52:	4621      	mov	r1, r4
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 f959 	bl	800bd0c <__smakebuf_r>
 800ba5a:	89a0      	ldrh	r0, [r4, #12]
 800ba5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba60:	f010 0301 	ands.w	r3, r0, #1
 800ba64:	d00a      	beq.n	800ba7c <__swsetup_r+0xbc>
 800ba66:	2300      	movs	r3, #0
 800ba68:	60a3      	str	r3, [r4, #8]
 800ba6a:	6963      	ldr	r3, [r4, #20]
 800ba6c:	425b      	negs	r3, r3
 800ba6e:	61a3      	str	r3, [r4, #24]
 800ba70:	6923      	ldr	r3, [r4, #16]
 800ba72:	b943      	cbnz	r3, 800ba86 <__swsetup_r+0xc6>
 800ba74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba78:	d1ba      	bne.n	800b9f0 <__swsetup_r+0x30>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	0781      	lsls	r1, r0, #30
 800ba7e:	bf58      	it	pl
 800ba80:	6963      	ldrpl	r3, [r4, #20]
 800ba82:	60a3      	str	r3, [r4, #8]
 800ba84:	e7f4      	b.n	800ba70 <__swsetup_r+0xb0>
 800ba86:	2000      	movs	r0, #0
 800ba88:	e7f7      	b.n	800ba7a <__swsetup_r+0xba>
 800ba8a:	bf00      	nop
 800ba8c:	2000006c 	.word	0x2000006c
 800ba90:	0800c874 	.word	0x0800c874
 800ba94:	0800c894 	.word	0x0800c894
 800ba98:	0800c854 	.word	0x0800c854

0800ba9c <__assert_func>:
 800ba9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba9e:	4614      	mov	r4, r2
 800baa0:	461a      	mov	r2, r3
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <__assert_func+0x2c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4605      	mov	r5, r0
 800baa8:	68d8      	ldr	r0, [r3, #12]
 800baaa:	b14c      	cbz	r4, 800bac0 <__assert_func+0x24>
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <__assert_func+0x30>)
 800baae:	9100      	str	r1, [sp, #0]
 800bab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bab4:	4906      	ldr	r1, [pc, #24]	; (800bad0 <__assert_func+0x34>)
 800bab6:	462b      	mov	r3, r5
 800bab8:	f000 f8e0 	bl	800bc7c <fiprintf>
 800babc:	f000 f997 	bl	800bdee <abort>
 800bac0:	4b04      	ldr	r3, [pc, #16]	; (800bad4 <__assert_func+0x38>)
 800bac2:	461c      	mov	r4, r3
 800bac4:	e7f3      	b.n	800baae <__assert_func+0x12>
 800bac6:	bf00      	nop
 800bac8:	2000006c 	.word	0x2000006c
 800bacc:	0800ca25 	.word	0x0800ca25
 800bad0:	0800ca32 	.word	0x0800ca32
 800bad4:	0800ca60 	.word	0x0800ca60

0800bad8 <_close_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d06      	ldr	r5, [pc, #24]	; (800baf4 <_close_r+0x1c>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	602b      	str	r3, [r5, #0]
 800bae4:	f000 fbcc 	bl	800c280 <_close>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d102      	bne.n	800baf2 <_close_r+0x1a>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	b103      	cbz	r3, 800baf2 <_close_r+0x1a>
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	2000211c 	.word	0x2000211c

0800baf8 <__sflush_r>:
 800baf8:	898a      	ldrh	r2, [r1, #12]
 800bafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafe:	4605      	mov	r5, r0
 800bb00:	0710      	lsls	r0, r2, #28
 800bb02:	460c      	mov	r4, r1
 800bb04:	d458      	bmi.n	800bbb8 <__sflush_r+0xc0>
 800bb06:	684b      	ldr	r3, [r1, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dc05      	bgt.n	800bb18 <__sflush_r+0x20>
 800bb0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc02      	bgt.n	800bb18 <__sflush_r+0x20>
 800bb12:	2000      	movs	r0, #0
 800bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb1a:	2e00      	cmp	r6, #0
 800bb1c:	d0f9      	beq.n	800bb12 <__sflush_r+0x1a>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb24:	682f      	ldr	r7, [r5, #0]
 800bb26:	602b      	str	r3, [r5, #0]
 800bb28:	d032      	beq.n	800bb90 <__sflush_r+0x98>
 800bb2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	075a      	lsls	r2, r3, #29
 800bb30:	d505      	bpl.n	800bb3e <__sflush_r+0x46>
 800bb32:	6863      	ldr	r3, [r4, #4]
 800bb34:	1ac0      	subs	r0, r0, r3
 800bb36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb38:	b10b      	cbz	r3, 800bb3e <__sflush_r+0x46>
 800bb3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb3c:	1ac0      	subs	r0, r0, r3
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4602      	mov	r2, r0
 800bb42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb44:	6a21      	ldr	r1, [r4, #32]
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b0      	blx	r6
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	d106      	bne.n	800bb5e <__sflush_r+0x66>
 800bb50:	6829      	ldr	r1, [r5, #0]
 800bb52:	291d      	cmp	r1, #29
 800bb54:	d82c      	bhi.n	800bbb0 <__sflush_r+0xb8>
 800bb56:	4a2a      	ldr	r2, [pc, #168]	; (800bc00 <__sflush_r+0x108>)
 800bb58:	40ca      	lsrs	r2, r1
 800bb5a:	07d6      	lsls	r6, r2, #31
 800bb5c:	d528      	bpl.n	800bbb0 <__sflush_r+0xb8>
 800bb5e:	2200      	movs	r2, #0
 800bb60:	6062      	str	r2, [r4, #4]
 800bb62:	04d9      	lsls	r1, r3, #19
 800bb64:	6922      	ldr	r2, [r4, #16]
 800bb66:	6022      	str	r2, [r4, #0]
 800bb68:	d504      	bpl.n	800bb74 <__sflush_r+0x7c>
 800bb6a:	1c42      	adds	r2, r0, #1
 800bb6c:	d101      	bne.n	800bb72 <__sflush_r+0x7a>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	b903      	cbnz	r3, 800bb74 <__sflush_r+0x7c>
 800bb72:	6560      	str	r0, [r4, #84]	; 0x54
 800bb74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb76:	602f      	str	r7, [r5, #0]
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	d0ca      	beq.n	800bb12 <__sflush_r+0x1a>
 800bb7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb80:	4299      	cmp	r1, r3
 800bb82:	d002      	beq.n	800bb8a <__sflush_r+0x92>
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7fd fc71 	bl	800946c <_free_r>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb8e:	e7c1      	b.n	800bb14 <__sflush_r+0x1c>
 800bb90:	6a21      	ldr	r1, [r4, #32]
 800bb92:	2301      	movs	r3, #1
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b0      	blx	r6
 800bb98:	1c41      	adds	r1, r0, #1
 800bb9a:	d1c7      	bne.n	800bb2c <__sflush_r+0x34>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d0c4      	beq.n	800bb2c <__sflush_r+0x34>
 800bba2:	2b1d      	cmp	r3, #29
 800bba4:	d001      	beq.n	800bbaa <__sflush_r+0xb2>
 800bba6:	2b16      	cmp	r3, #22
 800bba8:	d101      	bne.n	800bbae <__sflush_r+0xb6>
 800bbaa:	602f      	str	r7, [r5, #0]
 800bbac:	e7b1      	b.n	800bb12 <__sflush_r+0x1a>
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	e7ad      	b.n	800bb14 <__sflush_r+0x1c>
 800bbb8:	690f      	ldr	r7, [r1, #16]
 800bbba:	2f00      	cmp	r7, #0
 800bbbc:	d0a9      	beq.n	800bb12 <__sflush_r+0x1a>
 800bbbe:	0793      	lsls	r3, r2, #30
 800bbc0:	680e      	ldr	r6, [r1, #0]
 800bbc2:	bf08      	it	eq
 800bbc4:	694b      	ldreq	r3, [r1, #20]
 800bbc6:	600f      	str	r7, [r1, #0]
 800bbc8:	bf18      	it	ne
 800bbca:	2300      	movne	r3, #0
 800bbcc:	eba6 0807 	sub.w	r8, r6, r7
 800bbd0:	608b      	str	r3, [r1, #8]
 800bbd2:	f1b8 0f00 	cmp.w	r8, #0
 800bbd6:	dd9c      	ble.n	800bb12 <__sflush_r+0x1a>
 800bbd8:	6a21      	ldr	r1, [r4, #32]
 800bbda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbdc:	4643      	mov	r3, r8
 800bbde:	463a      	mov	r2, r7
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b0      	blx	r6
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	dc06      	bgt.n	800bbf6 <__sflush_r+0xfe>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	e78e      	b.n	800bb14 <__sflush_r+0x1c>
 800bbf6:	4407      	add	r7, r0
 800bbf8:	eba8 0800 	sub.w	r8, r8, r0
 800bbfc:	e7e9      	b.n	800bbd2 <__sflush_r+0xda>
 800bbfe:	bf00      	nop
 800bc00:	20400001 	.word	0x20400001

0800bc04 <_fflush_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	690b      	ldr	r3, [r1, #16]
 800bc08:	4605      	mov	r5, r0
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	b913      	cbnz	r3, 800bc14 <_fflush_r+0x10>
 800bc0e:	2500      	movs	r5, #0
 800bc10:	4628      	mov	r0, r5
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	b118      	cbz	r0, 800bc1e <_fflush_r+0x1a>
 800bc16:	6983      	ldr	r3, [r0, #24]
 800bc18:	b90b      	cbnz	r3, 800bc1e <_fflush_r+0x1a>
 800bc1a:	f7ff f849 	bl	800acb0 <__sinit>
 800bc1e:	4b14      	ldr	r3, [pc, #80]	; (800bc70 <_fflush_r+0x6c>)
 800bc20:	429c      	cmp	r4, r3
 800bc22:	d11b      	bne.n	800bc5c <_fflush_r+0x58>
 800bc24:	686c      	ldr	r4, [r5, #4]
 800bc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0ef      	beq.n	800bc0e <_fflush_r+0xa>
 800bc2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc30:	07d0      	lsls	r0, r2, #31
 800bc32:	d404      	bmi.n	800bc3e <_fflush_r+0x3a>
 800bc34:	0599      	lsls	r1, r3, #22
 800bc36:	d402      	bmi.n	800bc3e <_fflush_r+0x3a>
 800bc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc3a:	f7ff f8dc 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800bc3e:	4628      	mov	r0, r5
 800bc40:	4621      	mov	r1, r4
 800bc42:	f7ff ff59 	bl	800baf8 <__sflush_r>
 800bc46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc48:	07da      	lsls	r2, r3, #31
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	d4e0      	bmi.n	800bc10 <_fflush_r+0xc>
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	059b      	lsls	r3, r3, #22
 800bc52:	d4dd      	bmi.n	800bc10 <_fflush_r+0xc>
 800bc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc56:	f7ff f8cf 	bl	800adf8 <__retarget_lock_release_recursive>
 800bc5a:	e7d9      	b.n	800bc10 <_fflush_r+0xc>
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <_fflush_r+0x70>)
 800bc5e:	429c      	cmp	r4, r3
 800bc60:	d101      	bne.n	800bc66 <_fflush_r+0x62>
 800bc62:	68ac      	ldr	r4, [r5, #8]
 800bc64:	e7df      	b.n	800bc26 <_fflush_r+0x22>
 800bc66:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <_fflush_r+0x74>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	bf08      	it	eq
 800bc6c:	68ec      	ldreq	r4, [r5, #12]
 800bc6e:	e7da      	b.n	800bc26 <_fflush_r+0x22>
 800bc70:	0800c874 	.word	0x0800c874
 800bc74:	0800c894 	.word	0x0800c894
 800bc78:	0800c854 	.word	0x0800c854

0800bc7c <fiprintf>:
 800bc7c:	b40e      	push	{r1, r2, r3}
 800bc7e:	b503      	push	{r0, r1, lr}
 800bc80:	4601      	mov	r1, r0
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	4805      	ldr	r0, [pc, #20]	; (800bc9c <fiprintf+0x20>)
 800bc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8a:	6800      	ldr	r0, [r0, #0]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	f7ff fc77 	bl	800b580 <_vfiprintf_r>
 800bc92:	b002      	add	sp, #8
 800bc94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc98:	b003      	add	sp, #12
 800bc9a:	4770      	bx	lr
 800bc9c:	2000006c 	.word	0x2000006c

0800bca0 <_lseek_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4d07      	ldr	r5, [pc, #28]	; (800bcc0 <_lseek_r+0x20>)
 800bca4:	4604      	mov	r4, r0
 800bca6:	4608      	mov	r0, r1
 800bca8:	4611      	mov	r1, r2
 800bcaa:	2200      	movs	r2, #0
 800bcac:	602a      	str	r2, [r5, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f000 fb0e 	bl	800c2d0 <_lseek>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_lseek_r+0x1e>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_lseek_r+0x1e>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	2000211c 	.word	0x2000211c

0800bcc4 <__swhatbuf_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bccc:	2900      	cmp	r1, #0
 800bcce:	b096      	sub	sp, #88	; 0x58
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	461d      	mov	r5, r3
 800bcd4:	da07      	bge.n	800bce6 <__swhatbuf_r+0x22>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	89b3      	ldrh	r3, [r6, #12]
 800bcdc:	061a      	lsls	r2, r3, #24
 800bcde:	d410      	bmi.n	800bd02 <__swhatbuf_r+0x3e>
 800bce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bce4:	e00e      	b.n	800bd04 <__swhatbuf_r+0x40>
 800bce6:	466a      	mov	r2, sp
 800bce8:	f000 f888 	bl	800bdfc <_fstat_r>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	dbf2      	blt.n	800bcd6 <__swhatbuf_r+0x12>
 800bcf0:	9a01      	ldr	r2, [sp, #4]
 800bcf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bcfa:	425a      	negs	r2, r3
 800bcfc:	415a      	adcs	r2, r3
 800bcfe:	602a      	str	r2, [r5, #0]
 800bd00:	e7ee      	b.n	800bce0 <__swhatbuf_r+0x1c>
 800bd02:	2340      	movs	r3, #64	; 0x40
 800bd04:	2000      	movs	r0, #0
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	b016      	add	sp, #88	; 0x58
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}

0800bd0c <__smakebuf_r>:
 800bd0c:	898b      	ldrh	r3, [r1, #12]
 800bd0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd10:	079d      	lsls	r5, r3, #30
 800bd12:	4606      	mov	r6, r0
 800bd14:	460c      	mov	r4, r1
 800bd16:	d507      	bpl.n	800bd28 <__smakebuf_r+0x1c>
 800bd18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	2301      	movs	r3, #1
 800bd22:	6163      	str	r3, [r4, #20]
 800bd24:	b002      	add	sp, #8
 800bd26:	bd70      	pop	{r4, r5, r6, pc}
 800bd28:	ab01      	add	r3, sp, #4
 800bd2a:	466a      	mov	r2, sp
 800bd2c:	f7ff ffca 	bl	800bcc4 <__swhatbuf_r>
 800bd30:	9900      	ldr	r1, [sp, #0]
 800bd32:	4605      	mov	r5, r0
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7fd fbe9 	bl	800950c <_malloc_r>
 800bd3a:	b948      	cbnz	r0, 800bd50 <__smakebuf_r+0x44>
 800bd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd40:	059a      	lsls	r2, r3, #22
 800bd42:	d4ef      	bmi.n	800bd24 <__smakebuf_r+0x18>
 800bd44:	f023 0303 	bic.w	r3, r3, #3
 800bd48:	f043 0302 	orr.w	r3, r3, #2
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	e7e3      	b.n	800bd18 <__smakebuf_r+0xc>
 800bd50:	4b0d      	ldr	r3, [pc, #52]	; (800bd88 <__smakebuf_r+0x7c>)
 800bd52:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	6020      	str	r0, [r4, #0]
 800bd58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	9b00      	ldr	r3, [sp, #0]
 800bd60:	6163      	str	r3, [r4, #20]
 800bd62:	9b01      	ldr	r3, [sp, #4]
 800bd64:	6120      	str	r0, [r4, #16]
 800bd66:	b15b      	cbz	r3, 800bd80 <__smakebuf_r+0x74>
 800bd68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f000 f857 	bl	800be20 <_isatty_r>
 800bd72:	b128      	cbz	r0, 800bd80 <__smakebuf_r+0x74>
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	f043 0301 	orr.w	r3, r3, #1
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	89a0      	ldrh	r0, [r4, #12]
 800bd82:	4305      	orrs	r5, r0
 800bd84:	81a5      	strh	r5, [r4, #12]
 800bd86:	e7cd      	b.n	800bd24 <__smakebuf_r+0x18>
 800bd88:	0800ac49 	.word	0x0800ac49

0800bd8c <__ascii_mbtowc>:
 800bd8c:	b082      	sub	sp, #8
 800bd8e:	b901      	cbnz	r1, 800bd92 <__ascii_mbtowc+0x6>
 800bd90:	a901      	add	r1, sp, #4
 800bd92:	b142      	cbz	r2, 800bda6 <__ascii_mbtowc+0x1a>
 800bd94:	b14b      	cbz	r3, 800bdaa <__ascii_mbtowc+0x1e>
 800bd96:	7813      	ldrb	r3, [r2, #0]
 800bd98:	600b      	str	r3, [r1, #0]
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	1e10      	subs	r0, r2, #0
 800bd9e:	bf18      	it	ne
 800bda0:	2001      	movne	r0, #1
 800bda2:	b002      	add	sp, #8
 800bda4:	4770      	bx	lr
 800bda6:	4610      	mov	r0, r2
 800bda8:	e7fb      	b.n	800bda2 <__ascii_mbtowc+0x16>
 800bdaa:	f06f 0001 	mvn.w	r0, #1
 800bdae:	e7f8      	b.n	800bda2 <__ascii_mbtowc+0x16>

0800bdb0 <_read_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d07      	ldr	r5, [pc, #28]	; (800bdd0 <_read_r+0x20>)
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	4611      	mov	r1, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	602a      	str	r2, [r5, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f000 fa8e 	bl	800c2e0 <_read>
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	d102      	bne.n	800bdce <_read_r+0x1e>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	b103      	cbz	r3, 800bdce <_read_r+0x1e>
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	2000211c 	.word	0x2000211c

0800bdd4 <__ascii_wctomb>:
 800bdd4:	b149      	cbz	r1, 800bdea <__ascii_wctomb+0x16>
 800bdd6:	2aff      	cmp	r2, #255	; 0xff
 800bdd8:	bf85      	ittet	hi
 800bdda:	238a      	movhi	r3, #138	; 0x8a
 800bddc:	6003      	strhi	r3, [r0, #0]
 800bdde:	700a      	strbls	r2, [r1, #0]
 800bde0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bde4:	bf98      	it	ls
 800bde6:	2001      	movls	r0, #1
 800bde8:	4770      	bx	lr
 800bdea:	4608      	mov	r0, r1
 800bdec:	4770      	bx	lr

0800bdee <abort>:
 800bdee:	b508      	push	{r3, lr}
 800bdf0:	2006      	movs	r0, #6
 800bdf2:	f000 f84d 	bl	800be90 <raise>
 800bdf6:	2001      	movs	r0, #1
 800bdf8:	f000 fa7a 	bl	800c2f0 <_exit>

0800bdfc <_fstat_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_fstat_r+0x20>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	4611      	mov	r1, r2
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	f000 fa41 	bl	800c290 <_fstat>
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	d102      	bne.n	800be18 <_fstat_r+0x1c>
 800be12:	682b      	ldr	r3, [r5, #0]
 800be14:	b103      	cbz	r3, 800be18 <_fstat_r+0x1c>
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	bd38      	pop	{r3, r4, r5, pc}
 800be1a:	bf00      	nop
 800be1c:	2000211c 	.word	0x2000211c

0800be20 <_isatty_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d06      	ldr	r5, [pc, #24]	; (800be3c <_isatty_r+0x1c>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f000 fa40 	bl	800c2b0 <_isatty>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_isatty_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_isatty_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	2000211c 	.word	0x2000211c

0800be40 <_raise_r>:
 800be40:	291f      	cmp	r1, #31
 800be42:	b538      	push	{r3, r4, r5, lr}
 800be44:	4604      	mov	r4, r0
 800be46:	460d      	mov	r5, r1
 800be48:	d904      	bls.n	800be54 <_raise_r+0x14>
 800be4a:	2316      	movs	r3, #22
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be56:	b112      	cbz	r2, 800be5e <_raise_r+0x1e>
 800be58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be5c:	b94b      	cbnz	r3, 800be72 <_raise_r+0x32>
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 f830 	bl	800bec4 <_getpid_r>
 800be64:	462a      	mov	r2, r5
 800be66:	4601      	mov	r1, r0
 800be68:	4620      	mov	r0, r4
 800be6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be6e:	f000 b817 	b.w	800bea0 <_kill_r>
 800be72:	2b01      	cmp	r3, #1
 800be74:	d00a      	beq.n	800be8c <_raise_r+0x4c>
 800be76:	1c59      	adds	r1, r3, #1
 800be78:	d103      	bne.n	800be82 <_raise_r+0x42>
 800be7a:	2316      	movs	r3, #22
 800be7c:	6003      	str	r3, [r0, #0]
 800be7e:	2001      	movs	r0, #1
 800be80:	e7e7      	b.n	800be52 <_raise_r+0x12>
 800be82:	2400      	movs	r4, #0
 800be84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be88:	4628      	mov	r0, r5
 800be8a:	4798      	blx	r3
 800be8c:	2000      	movs	r0, #0
 800be8e:	e7e0      	b.n	800be52 <_raise_r+0x12>

0800be90 <raise>:
 800be90:	4b02      	ldr	r3, [pc, #8]	; (800be9c <raise+0xc>)
 800be92:	4601      	mov	r1, r0
 800be94:	6818      	ldr	r0, [r3, #0]
 800be96:	f7ff bfd3 	b.w	800be40 <_raise_r>
 800be9a:	bf00      	nop
 800be9c:	2000006c 	.word	0x2000006c

0800bea0 <_kill_r>:
 800bea0:	b538      	push	{r3, r4, r5, lr}
 800bea2:	4d07      	ldr	r5, [pc, #28]	; (800bec0 <_kill_r+0x20>)
 800bea4:	2300      	movs	r3, #0
 800bea6:	4604      	mov	r4, r0
 800bea8:	4608      	mov	r0, r1
 800beaa:	4611      	mov	r1, r2
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	f000 fa07 	bl	800c2c0 <_kill>
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	d102      	bne.n	800bebc <_kill_r+0x1c>
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	b103      	cbz	r3, 800bebc <_kill_r+0x1c>
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	bd38      	pop	{r3, r4, r5, pc}
 800bebe:	bf00      	nop
 800bec0:	2000211c 	.word	0x2000211c

0800bec4 <_getpid_r>:
 800bec4:	f000 b9ec 	b.w	800c2a0 <_getpid>

0800bec8 <atan>:
 800bec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	ec55 4b10 	vmov	r4, r5, d0
 800bed0:	4bc3      	ldr	r3, [pc, #780]	; (800c1e0 <atan+0x318>)
 800bed2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bed6:	429e      	cmp	r6, r3
 800bed8:	46ab      	mov	fp, r5
 800beda:	dd18      	ble.n	800bf0e <atan+0x46>
 800bedc:	4bc1      	ldr	r3, [pc, #772]	; (800c1e4 <atan+0x31c>)
 800bede:	429e      	cmp	r6, r3
 800bee0:	dc01      	bgt.n	800bee6 <atan+0x1e>
 800bee2:	d109      	bne.n	800bef8 <atan+0x30>
 800bee4:	b144      	cbz	r4, 800bef8 <atan+0x30>
 800bee6:	4622      	mov	r2, r4
 800bee8:	462b      	mov	r3, r5
 800beea:	4620      	mov	r0, r4
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 f9cd 	bl	800028c <__adddf3>
 800bef2:	4604      	mov	r4, r0
 800bef4:	460d      	mov	r5, r1
 800bef6:	e006      	b.n	800bf06 <atan+0x3e>
 800bef8:	f1bb 0f00 	cmp.w	fp, #0
 800befc:	f300 8131 	bgt.w	800c162 <atan+0x29a>
 800bf00:	a59b      	add	r5, pc, #620	; (adr r5, 800c170 <atan+0x2a8>)
 800bf02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf06:	ec45 4b10 	vmov	d0, r4, r5
 800bf0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0e:	4bb6      	ldr	r3, [pc, #728]	; (800c1e8 <atan+0x320>)
 800bf10:	429e      	cmp	r6, r3
 800bf12:	dc14      	bgt.n	800bf3e <atan+0x76>
 800bf14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	dc0d      	bgt.n	800bf38 <atan+0x70>
 800bf1c:	a396      	add	r3, pc, #600	; (adr r3, 800c178 <atan+0x2b0>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	ee10 0a10 	vmov	r0, s0
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 f9b0 	bl	800028c <__adddf3>
 800bf2c:	4baf      	ldr	r3, [pc, #700]	; (800c1ec <atan+0x324>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f7f4 fdf2 	bl	8000b18 <__aeabi_dcmpgt>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d1e6      	bne.n	800bf06 <atan+0x3e>
 800bf38:	f04f 3aff 	mov.w	sl, #4294967295
 800bf3c:	e02b      	b.n	800bf96 <atan+0xce>
 800bf3e:	f000 f963 	bl	800c208 <fabs>
 800bf42:	4bab      	ldr	r3, [pc, #684]	; (800c1f0 <atan+0x328>)
 800bf44:	429e      	cmp	r6, r3
 800bf46:	ec55 4b10 	vmov	r4, r5, d0
 800bf4a:	f300 80bf 	bgt.w	800c0cc <atan+0x204>
 800bf4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bf52:	429e      	cmp	r6, r3
 800bf54:	f300 80a0 	bgt.w	800c098 <atan+0x1d0>
 800bf58:	ee10 2a10 	vmov	r2, s0
 800bf5c:	ee10 0a10 	vmov	r0, s0
 800bf60:	462b      	mov	r3, r5
 800bf62:	4629      	mov	r1, r5
 800bf64:	f7f4 f992 	bl	800028c <__adddf3>
 800bf68:	4ba0      	ldr	r3, [pc, #640]	; (800c1ec <atan+0x324>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f7f4 f98c 	bl	8000288 <__aeabi_dsub>
 800bf70:	2200      	movs	r2, #0
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	f7f4 f985 	bl	800028c <__adddf3>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4630      	mov	r0, r6
 800bf88:	4639      	mov	r1, r7
 800bf8a:	f7f4 fc5f 	bl	800084c <__aeabi_ddiv>
 800bf8e:	f04f 0a00 	mov.w	sl, #0
 800bf92:	4604      	mov	r4, r0
 800bf94:	460d      	mov	r5, r1
 800bf96:	4622      	mov	r2, r4
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 fb2b 	bl	80005f8 <__aeabi_dmul>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	4689      	mov	r9, r1
 800bfaa:	f7f4 fb25 	bl	80005f8 <__aeabi_dmul>
 800bfae:	a374      	add	r3, pc, #464	; (adr r3, 800c180 <atan+0x2b8>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	460f      	mov	r7, r1
 800bfb8:	f7f4 fb1e 	bl	80005f8 <__aeabi_dmul>
 800bfbc:	a372      	add	r3, pc, #456	; (adr r3, 800c188 <atan+0x2c0>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f7f4 f963 	bl	800028c <__adddf3>
 800bfc6:	4632      	mov	r2, r6
 800bfc8:	463b      	mov	r3, r7
 800bfca:	f7f4 fb15 	bl	80005f8 <__aeabi_dmul>
 800bfce:	a370      	add	r3, pc, #448	; (adr r3, 800c190 <atan+0x2c8>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	f7f4 f95a 	bl	800028c <__adddf3>
 800bfd8:	4632      	mov	r2, r6
 800bfda:	463b      	mov	r3, r7
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	a36d      	add	r3, pc, #436	; (adr r3, 800c198 <atan+0x2d0>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 f951 	bl	800028c <__adddf3>
 800bfea:	4632      	mov	r2, r6
 800bfec:	463b      	mov	r3, r7
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	a36b      	add	r3, pc, #428	; (adr r3, 800c1a0 <atan+0x2d8>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 f948 	bl	800028c <__adddf3>
 800bffc:	4632      	mov	r2, r6
 800bffe:	463b      	mov	r3, r7
 800c000:	f7f4 fafa 	bl	80005f8 <__aeabi_dmul>
 800c004:	a368      	add	r3, pc, #416	; (adr r3, 800c1a8 <atan+0x2e0>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f93f 	bl	800028c <__adddf3>
 800c00e:	4642      	mov	r2, r8
 800c010:	464b      	mov	r3, r9
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	a366      	add	r3, pc, #408	; (adr r3, 800c1b0 <atan+0x2e8>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	4680      	mov	r8, r0
 800c01e:	4689      	mov	r9, r1
 800c020:	4630      	mov	r0, r6
 800c022:	4639      	mov	r1, r7
 800c024:	f7f4 fae8 	bl	80005f8 <__aeabi_dmul>
 800c028:	a363      	add	r3, pc, #396	; (adr r3, 800c1b8 <atan+0x2f0>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f7f4 f92b 	bl	8000288 <__aeabi_dsub>
 800c032:	4632      	mov	r2, r6
 800c034:	463b      	mov	r3, r7
 800c036:	f7f4 fadf 	bl	80005f8 <__aeabi_dmul>
 800c03a:	a361      	add	r3, pc, #388	; (adr r3, 800c1c0 <atan+0x2f8>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	f7f4 f922 	bl	8000288 <__aeabi_dsub>
 800c044:	4632      	mov	r2, r6
 800c046:	463b      	mov	r3, r7
 800c048:	f7f4 fad6 	bl	80005f8 <__aeabi_dmul>
 800c04c:	a35e      	add	r3, pc, #376	; (adr r3, 800c1c8 <atan+0x300>)
 800c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c052:	f7f4 f919 	bl	8000288 <__aeabi_dsub>
 800c056:	4632      	mov	r2, r6
 800c058:	463b      	mov	r3, r7
 800c05a:	f7f4 facd 	bl	80005f8 <__aeabi_dmul>
 800c05e:	a35c      	add	r3, pc, #368	; (adr r3, 800c1d0 <atan+0x308>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 f910 	bl	8000288 <__aeabi_dsub>
 800c068:	4632      	mov	r2, r6
 800c06a:	463b      	mov	r3, r7
 800c06c:	f7f4 fac4 	bl	80005f8 <__aeabi_dmul>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4640      	mov	r0, r8
 800c076:	4649      	mov	r1, r9
 800c078:	f7f4 f908 	bl	800028c <__adddf3>
 800c07c:	4622      	mov	r2, r4
 800c07e:	462b      	mov	r3, r5
 800c080:	f7f4 faba 	bl	80005f8 <__aeabi_dmul>
 800c084:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	d14b      	bne.n	800c126 <atan+0x25e>
 800c08e:	4620      	mov	r0, r4
 800c090:	4629      	mov	r1, r5
 800c092:	f7f4 f8f9 	bl	8000288 <__aeabi_dsub>
 800c096:	e72c      	b.n	800bef2 <atan+0x2a>
 800c098:	ee10 0a10 	vmov	r0, s0
 800c09c:	4b53      	ldr	r3, [pc, #332]	; (800c1ec <atan+0x324>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 f8f1 	bl	8000288 <__aeabi_dsub>
 800c0a6:	4b51      	ldr	r3, [pc, #324]	; (800c1ec <atan+0x324>)
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	f7f4 f8eb 	bl	800028c <__adddf3>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	4639      	mov	r1, r7
 800c0be:	f7f4 fbc5 	bl	800084c <__aeabi_ddiv>
 800c0c2:	f04f 0a01 	mov.w	sl, #1
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	e764      	b.n	800bf96 <atan+0xce>
 800c0cc:	4b49      	ldr	r3, [pc, #292]	; (800c1f4 <atan+0x32c>)
 800c0ce:	429e      	cmp	r6, r3
 800c0d0:	da1d      	bge.n	800c10e <atan+0x246>
 800c0d2:	ee10 0a10 	vmov	r0, s0
 800c0d6:	4b48      	ldr	r3, [pc, #288]	; (800c1f8 <atan+0x330>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	4629      	mov	r1, r5
 800c0dc:	f7f4 f8d4 	bl	8000288 <__aeabi_dsub>
 800c0e0:	4b45      	ldr	r3, [pc, #276]	; (800c1f8 <atan+0x330>)
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	460f      	mov	r7, r1
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	f7f4 fa84 	bl	80005f8 <__aeabi_dmul>
 800c0f0:	4b3e      	ldr	r3, [pc, #248]	; (800c1ec <atan+0x324>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f7f4 f8ca 	bl	800028c <__adddf3>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	4639      	mov	r1, r7
 800c100:	f7f4 fba4 	bl	800084c <__aeabi_ddiv>
 800c104:	f04f 0a02 	mov.w	sl, #2
 800c108:	4604      	mov	r4, r0
 800c10a:	460d      	mov	r5, r1
 800c10c:	e743      	b.n	800bf96 <atan+0xce>
 800c10e:	462b      	mov	r3, r5
 800c110:	ee10 2a10 	vmov	r2, s0
 800c114:	4939      	ldr	r1, [pc, #228]	; (800c1fc <atan+0x334>)
 800c116:	2000      	movs	r0, #0
 800c118:	f7f4 fb98 	bl	800084c <__aeabi_ddiv>
 800c11c:	f04f 0a03 	mov.w	sl, #3
 800c120:	4604      	mov	r4, r0
 800c122:	460d      	mov	r5, r1
 800c124:	e737      	b.n	800bf96 <atan+0xce>
 800c126:	4b36      	ldr	r3, [pc, #216]	; (800c200 <atan+0x338>)
 800c128:	4e36      	ldr	r6, [pc, #216]	; (800c204 <atan+0x33c>)
 800c12a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c12e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c132:	e9da 2300 	ldrd	r2, r3, [sl]
 800c136:	f7f4 f8a7 	bl	8000288 <__aeabi_dsub>
 800c13a:	4622      	mov	r2, r4
 800c13c:	462b      	mov	r3, r5
 800c13e:	f7f4 f8a3 	bl	8000288 <__aeabi_dsub>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c14a:	f7f4 f89d 	bl	8000288 <__aeabi_dsub>
 800c14e:	f1bb 0f00 	cmp.w	fp, #0
 800c152:	4604      	mov	r4, r0
 800c154:	460d      	mov	r5, r1
 800c156:	f6bf aed6 	bge.w	800bf06 <atan+0x3e>
 800c15a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c15e:	461d      	mov	r5, r3
 800c160:	e6d1      	b.n	800bf06 <atan+0x3e>
 800c162:	a51d      	add	r5, pc, #116	; (adr r5, 800c1d8 <atan+0x310>)
 800c164:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c168:	e6cd      	b.n	800bf06 <atan+0x3e>
 800c16a:	bf00      	nop
 800c16c:	f3af 8000 	nop.w
 800c170:	54442d18 	.word	0x54442d18
 800c174:	bff921fb 	.word	0xbff921fb
 800c178:	8800759c 	.word	0x8800759c
 800c17c:	7e37e43c 	.word	0x7e37e43c
 800c180:	e322da11 	.word	0xe322da11
 800c184:	3f90ad3a 	.word	0x3f90ad3a
 800c188:	24760deb 	.word	0x24760deb
 800c18c:	3fa97b4b 	.word	0x3fa97b4b
 800c190:	a0d03d51 	.word	0xa0d03d51
 800c194:	3fb10d66 	.word	0x3fb10d66
 800c198:	c54c206e 	.word	0xc54c206e
 800c19c:	3fb745cd 	.word	0x3fb745cd
 800c1a0:	920083ff 	.word	0x920083ff
 800c1a4:	3fc24924 	.word	0x3fc24924
 800c1a8:	5555550d 	.word	0x5555550d
 800c1ac:	3fd55555 	.word	0x3fd55555
 800c1b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c1b4:	bfa2b444 	.word	0xbfa2b444
 800c1b8:	52defd9a 	.word	0x52defd9a
 800c1bc:	3fadde2d 	.word	0x3fadde2d
 800c1c0:	af749a6d 	.word	0xaf749a6d
 800c1c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c1c8:	fe231671 	.word	0xfe231671
 800c1cc:	3fbc71c6 	.word	0x3fbc71c6
 800c1d0:	9998ebc4 	.word	0x9998ebc4
 800c1d4:	3fc99999 	.word	0x3fc99999
 800c1d8:	54442d18 	.word	0x54442d18
 800c1dc:	3ff921fb 	.word	0x3ff921fb
 800c1e0:	440fffff 	.word	0x440fffff
 800c1e4:	7ff00000 	.word	0x7ff00000
 800c1e8:	3fdbffff 	.word	0x3fdbffff
 800c1ec:	3ff00000 	.word	0x3ff00000
 800c1f0:	3ff2ffff 	.word	0x3ff2ffff
 800c1f4:	40038000 	.word	0x40038000
 800c1f8:	3ff80000 	.word	0x3ff80000
 800c1fc:	bff00000 	.word	0xbff00000
 800c200:	0800cb90 	.word	0x0800cb90
 800c204:	0800cb70 	.word	0x0800cb70

0800c208 <fabs>:
 800c208:	ec51 0b10 	vmov	r0, r1, d0
 800c20c:	ee10 2a10 	vmov	r2, s0
 800c210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c214:	ec43 2b10 	vmov	d0, r2, r3
 800c218:	4770      	bx	lr
	...

0800c21c <trunc>:
 800c21c:	ec51 0b10 	vmov	r0, r1, d0
 800c220:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c224:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c228:	2b13      	cmp	r3, #19
 800c22a:	b5d0      	push	{r4, r6, r7, lr}
 800c22c:	460c      	mov	r4, r1
 800c22e:	dc10      	bgt.n	800c252 <trunc+0x36>
 800c230:	2b00      	cmp	r3, #0
 800c232:	bfa5      	ittet	ge
 800c234:	4a11      	ldrge	r2, [pc, #68]	; (800c27c <trunc+0x60>)
 800c236:	fa42 f303 	asrge.w	r3, r2, r3
 800c23a:	2100      	movlt	r1, #0
 800c23c:	2100      	movge	r1, #0
 800c23e:	bfb9      	ittee	lt
 800c240:	2000      	movlt	r0, #0
 800c242:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800c246:	2000      	movge	r0, #0
 800c248:	ea24 0103 	bicge.w	r1, r4, r3
 800c24c:	ec41 0b10 	vmov	d0, r0, r1
 800c250:	bdd0      	pop	{r4, r6, r7, pc}
 800c252:	2b33      	cmp	r3, #51	; 0x33
 800c254:	dd08      	ble.n	800c268 <trunc+0x4c>
 800c256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c25a:	d1f7      	bne.n	800c24c <trunc+0x30>
 800c25c:	ee10 2a10 	vmov	r2, s0
 800c260:	460b      	mov	r3, r1
 800c262:	f7f4 f813 	bl	800028c <__adddf3>
 800c266:	e7f1      	b.n	800c24c <trunc+0x30>
 800c268:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c26c:	f04f 33ff 	mov.w	r3, #4294967295
 800c270:	fa23 f202 	lsr.w	r2, r3, r2
 800c274:	ea20 0602 	bic.w	r6, r0, r2
 800c278:	4630      	mov	r0, r6
 800c27a:	e7e7      	b.n	800c24c <trunc+0x30>
 800c27c:	000fffff 	.word	0x000fffff

0800c280 <_close>:
 800c280:	4b02      	ldr	r3, [pc, #8]	; (800c28c <_close+0xc>)
 800c282:	2258      	movs	r2, #88	; 0x58
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	f04f 30ff 	mov.w	r0, #4294967295
 800c28a:	4770      	bx	lr
 800c28c:	2000211c 	.word	0x2000211c

0800c290 <_fstat>:
 800c290:	4b02      	ldr	r3, [pc, #8]	; (800c29c <_fstat+0xc>)
 800c292:	2258      	movs	r2, #88	; 0x58
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	f04f 30ff 	mov.w	r0, #4294967295
 800c29a:	4770      	bx	lr
 800c29c:	2000211c 	.word	0x2000211c

0800c2a0 <_getpid>:
 800c2a0:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <_getpid+0xc>)
 800c2a2:	2258      	movs	r2, #88	; 0x58
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2aa:	4770      	bx	lr
 800c2ac:	2000211c 	.word	0x2000211c

0800c2b0 <_isatty>:
 800c2b0:	4b02      	ldr	r3, [pc, #8]	; (800c2bc <_isatty+0xc>)
 800c2b2:	2258      	movs	r2, #88	; 0x58
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	2000211c 	.word	0x2000211c

0800c2c0 <_kill>:
 800c2c0:	4b02      	ldr	r3, [pc, #8]	; (800c2cc <_kill+0xc>)
 800c2c2:	2258      	movs	r2, #88	; 0x58
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ca:	4770      	bx	lr
 800c2cc:	2000211c 	.word	0x2000211c

0800c2d0 <_lseek>:
 800c2d0:	4b02      	ldr	r3, [pc, #8]	; (800c2dc <_lseek+0xc>)
 800c2d2:	2258      	movs	r2, #88	; 0x58
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2da:	4770      	bx	lr
 800c2dc:	2000211c 	.word	0x2000211c

0800c2e0 <_read>:
 800c2e0:	4b02      	ldr	r3, [pc, #8]	; (800c2ec <_read+0xc>)
 800c2e2:	2258      	movs	r2, #88	; 0x58
 800c2e4:	601a      	str	r2, [r3, #0]
 800c2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ea:	4770      	bx	lr
 800c2ec:	2000211c 	.word	0x2000211c

0800c2f0 <_exit>:
 800c2f0:	e7fe      	b.n	800c2f0 <_exit>
	...

0800c2f4 <_init>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr

0800c300 <_fini>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr
